# vim: set ft=zsh:

# Shortcut for grepping running containers
function __docker_list_all() {
  docker ps -a | tail -n +2
}
function __docker_list_images() {
  docker images | tail -n +2
}
function docker-list() {
  if [[ -z "$@" ]]; then
    __docker_list_all
  else
    __docker_list_all | grep $@
  fi;
}
function docker-images() {
  if [[ -z "$@" ]]; then
    __docker_list_images
  else
    __docker_list_images | grep $@
  fi
}

# Shortcut for killing and removing docker containers
function __docker_output() {
  if [[ "$1" == "0" ]]; then
    local s=$'\xe2\x9c\x93'
    local c=2
  else
    local s=$'\xe2\x9c\x97'
    local c=1
  fi
  printf "$(tput bold)$(tput setaf ${c})"$s"$(tput sgr0)\n"
}
function docker-rm() {
  local cool=
  echo "Removing containers..."
  while read container; do
    # Parse the cid
    local cid="$(printf $container | awk '{print $1}')"
    # Output the container CID
    printf "  $cid "
    # Kill the container
    docker kill $cid > /dev/null || exit 1
    # Remove the container, break on error
    docker rm $cid > /dev/null
    cool=$?
    __docker_output $cool
    [[ "$cool" != "0" ]] && break || true
  done
}
# Shortcut for removing docker images
function docker-rmi() {
  echo "Removing images..."
  while read image; do
    local iid="$(printf $image | awk '${print $1}')"
    printf "  $iid "
    docker rmi $iid > /dev/null
    __docker_output $?
  done
}
# Shortcut for switching docker-machine environments
function dm-env() {
  if [[ -z "$1" ]]; then
    eval "$(docker-machine env -u)"
  else
    eval "$(docker-machine env ${1})" && docker-machine ls | grep "$1"
  fi
}


alias dk="docker"
alias dc="docker-compose"
alias dm="docker-machine"
# alias dkr="docker run"
# alias dkl="docker-list"
# alias dkli="docker-images"
# alias dkrm="docker-rm"
# alias dkrmi="docker-rmi"
alias dkenv="dm-env"
