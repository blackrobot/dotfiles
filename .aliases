# shellcheck shell=bash

alias grepir='grep -Ir'
alias ssh='TERM=xterm-256color ssh'
alias mkdirs='mkdir -p'
alias cat='/usr/local/bin/bat'
alias ping='/usr/local/bin/prettyping --nolegend'
alias du='ncdu --color dark -rr -x --exclude .git --exclude node_modules'

function mkcd {
  mkdir -p "$@" && cd "$_"
}

# ls
alias ls='gls'
alias l='ls -AFlh --color=auto'
alias ll='ls -aFlh --color=auto'
function ls_bin {
  # show the full path of a callable in $PATH
  l "$(which ${1})"
}
alias lb=ls_bin

# env
function es {
  if [[ -n "$*" ]]; then
    env | sort | rg -i "$*"
  else
    env | sort
  fi
}

# cheat.sh
function cheat {
  curl "https://cheat.sh/${1}"
}

# beep - plays a sound
#   Sound files copied into ~/Library/Sounds/ from:
#   /System/Library/PrivateFrameworks/ToneLibrary.framework/Versions/A/Resources/AlertTones/
function beep {
  afplay "${BEEP_SOUND_FILE:-"${HOME}/Library/Sounds/sms_alert_popcorn.caf"}"
}

# Restart the docker-for-mac app
function docker-mac {
  function d4m_stop {
    printf 'Stopping \t'
    osascript -e 'quit app "Docker"' \
      && printf '[ok]\n' \
      || printf '[fail]\n'
  }

  function d4m_start {
    printf 'Starting \t'
    open -a Docker \
      && printf '[ok]\n' \
      || printf '[fail]\n'
  }

  if [[ "$1" == "stop" || "$1" == "quit" ]] ; then
    d4m_stop
  elif [[ "$1" == "start" ]] ; then
    d4m_start
  elif [[ "$1" == "restart" ]] ; then
    d4m_stop
    d4m_start

    printf 'Waiting \t'

    while [ -z "$(docker info 2> /dev/null )" ]; do
      printf '.'
      sleep 1
    done

    printf '\r\033[0K'
    printf 'Waiting \t[ok] '
    echo

  else
    echo "docker-mac: start | stop | restart"
  fi
}

# Git
alias gr='git reset'
alias grh='git reset --hard'

alias gf='git fetch --prune'
alias gfa='git fetch --all --prune'

# fast copying files
alias rcopy='rsync -vhxpogiW --progress --stats --numeric-ids'
# rsync --verbose \
#       --human-readable \
#       --one-file-system \
#       --itemize-changes \
#       --progress \
#       --stats \
#       --rsh "ssh -T -c ${ciphers} -o Compression=no -x" \
#       source:/path/to/files /path/to/dest [/path/to/other-dest...]
# lookup remote ssh algos using: nmap --script ssh2-enum-algos -sV -p <port> <host>
alias rcopy-remote='rsync -vhxirP --stats --progress -e "ssh -T -o Ciphers=aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,* -o Compression=no -x"'

