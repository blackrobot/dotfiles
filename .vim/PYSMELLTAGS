{'CLASSES': {'pyflakes.checker.Argument': {'bases': ['pyflakes.checker.Binding'],
                                           'constructor': [],
                                           'docstring': '\n    Represents binding a name as an argument.\n    ',
                                           'methods': [],
                                           'properties': []},
             'pyflakes.checker.Assignment': {'bases': ['pyflakes.checker.Binding'],
                                             'constructor': [],
                                             'docstring': "\n    Represents binding a name with an explicit assignment.\n\n    The checker will raise warnings for any Assignment that isn't used. Also,\n    the checker does not consider assignments in tuple/list unpacking to be\n    Assignments, rather it treats them as simple Bindings.\n    ",
                                             'methods': [],
                                             'properties': []},
             'pyflakes.checker.Binding': {'bases': ['object'],
                                          'constructor': ['name', 'source'],
                                          'docstring': '\n    Represents the binding of a value to a name.\n\n    The checker uses this to keep track of which names have been bound and\n    which names have not. See L{Assignment} for a special type of binding that\n    is checked with stricter rules.\n\n    @ivar used: pair of (L{Scope}, line-number) indicating the scope and\n                line number that this binding was last used\n    ',
                                          'methods': [('__str__', [], ''), ('__repr__', [], '')],
                                          'properties': ['name', 'source', 'used']},
             'pyflakes.checker.Checker': {'bases': ['object'],
                                          'constructor': ['tree', "filename='(none)'"],
                                          'docstring': '\n    I check the cleanliness and sanity of Python code.\n\n    @ivar _deferredFunctions: Tracking list used by L{deferFunction}.  Elements\n        of the list are two-tuples.  The first element is the callable passed\n        to L{deferFunction}.  The second element is a copy of the scope stack\n        at the time L{deferFunction} was called.\n\n    @ivar _deferredAssignments: Similar to C{_deferredFunctions}, but for\n        callables which are deferred assignment checks.\n    ',
                                          'methods': [('deferFunction',
                                                       ['callable'],
                                                       '\n        Schedule a function handler to be called just before completion.\n\n        This is used for handling function bodies, which must be deferred\n        because code later in the file might modify the global scope. When\n        `callable` is called, the scope at the time this is called will be\n        restored, however it will contain any new bindings added to it.\n        '),
                                                      ('deferAssignment',
                                                       ['callable'],
                                                       '\n        Schedule an assignment handler to be called just after deferred\n        function handlers.\n        '),
                                                      ('_runDeferred',
                                                       ['deferred'],
                                                       '\n        Run the callables in C{deferred} using their associated scope stack.\n        '),
                                                      ('scope', [], ''),
                                                      ('popScope', [], ''),
                                                      ('check_dead_scopes',
                                                       [],
                                                       '\n        Look at scopes which have been fully examined and report names in them\n        which were imported but unused.\n        '),
                                                      ('pushFunctionScope', [], ''),
                                                      ('pushClassScope', [], ''),
                                                      ('report',
                                                       ['messageClass', '*args', '**kwargs'],
                                                       ''),
                                                      ('handleChildren', ['tree'], ''),
                                                      ('isDocstring',
                                                       ['node'],
                                                       '\n        Determine if the given node is a docstring, as long as it is at the\n        correct place in the node tree.\n        '),
                                                      ('handleNode', ['node', 'parent'], ''),
                                                      ('ignore', ['node'], ''),
                                                      ('addBinding',
                                                       ['loc', 'value', 'reportRedef=True'],
                                                       'Called when a binding is altered.\n\n        - `loc` is the location (an object with lineno and optionally\n          col_offset attributes) of the statement responsible for the change\n        - `value` is the optional new value, a Binding instance, associated\n          with the binding; if None, the binding is deleted if it exists.\n        - if `reportRedef` is True (default), rebinding while unused will be\n          reported.\n        '),
                                                      ('GLOBAL',
                                                       ['node'],
                                                       '\n        Keep track of globals declarations.\n        '),
                                                      ('LISTCOMP', ['node'], ''),
                                                      ('DICTCOMP', ['node'], ''),
                                                      ('FOR',
                                                       ['node'],
                                                       '\n        Process bindings for loop variables.\n        '),
                                                      ('NAME',
                                                       ['node'],
                                                       '\n        Handle occurrence of Name (which can be a load/store/delete access.)\n        '),
                                                      ('FUNCTIONDEF', ['node'], ''),
                                                      ('LAMBDA', ['node'], ''),
                                                      ('CLASSDEF',
                                                       ['node'],
                                                       '\n        Check names used in a class definition, including its decorators, base\n        classes, and the body of its definition.  Additionally, add its name to\n        the current scope.\n        '),
                                                      ('ASSIGN', ['node'], ''),
                                                      ('AUGASSIGN', ['node'], ''),
                                                      ('IMPORT', ['node'], ''),
                                                      ('IMPORTFROM', ['node'], '')],
                                          'properties': ['nodeDepth',
                                                         'traceTree',
                                                         '_deferredFunctions',
                                                         '_deferredAssignments',
                                                         'dead_scopes',
                                                         'messages',
                                                         'filename',
                                                         'scopeStack',
                                                         'futuresAllowed',
                                                         'scope',
                                                         'RETURN',
                                                         'DELETE',
                                                         'PRINT',
                                                         'WHILE',
                                                         'IF',
                                                         'WITH',
                                                         'RAISE',
                                                         'TRYEXCEPT',
                                                         'TRYFINALLY',
                                                         'ASSERT',
                                                         'EXEC',
                                                         'EXPR',
                                                         'CONTINUE',
                                                         'BREAK',
                                                         'PASS',
                                                         'BOOLOP',
                                                         'BINOP',
                                                         'UNARYOP',
                                                         'IFEXP',
                                                         'DICT',
                                                         'SET',
                                                         'YIELD',
                                                         'COMPARE',
                                                         'CALL',
                                                         'REPR',
                                                         'ATTRIBUTE',
                                                         'SUBSCRIPT',
                                                         'LIST',
                                                         'TUPLE',
                                                         'NUM',
                                                         'STR',
                                                         'ELLIPSIS',
                                                         'SLICE',
                                                         'EXTSLICE',
                                                         'INDEX',
                                                         'LOAD',
                                                         'STORE',
                                                         'DEL',
                                                         'AUGLOAD',
                                                         'AUGSTORE',
                                                         'PARAM',
                                                         'AND',
                                                         'OR',
                                                         'ADD',
                                                         'SUB',
                                                         'MULT',
                                                         'DIV',
                                                         'MOD',
                                                         'POW',
                                                         'LSHIFT',
                                                         'RSHIFT',
                                                         'BITOR',
                                                         'BITXOR',
                                                         'BITAND',
                                                         'FLOORDIV',
                                                         'INVERT',
                                                         'NOT',
                                                         'UADD',
                                                         'USUB',
                                                         'EQ',
                                                         'NOTEQ',
                                                         'LT',
                                                         'LTE',
                                                         'GT',
                                                         'GTE',
                                                         'IS',
                                                         'ISNOT',
                                                         'IN',
                                                         'NOTIN',
                                                         'COMPREHENSION',
                                                         'EXCEPTHANDLER',
                                                         'KEYWORD',
                                                         'GENERATOREXP',
                                                         'SETCOMP']},
             'pyflakes.checker.ClassScope': {'bases': ['pyflakes.checker.Scope'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': []},
             'pyflakes.checker.ExportBinding': {'bases': ['pyflakes.checker.Binding'],
                                                'constructor': [],
                                                'docstring': '\n    A binding created by an C{__all__} assignment.  If the names in the list\n    can be determined statically, they will be treated as names for export and\n    additional checking applied to them.\n\n    The only C{__all__} assignment that can be recognized is one which takes\n    the value of a literal list containing literal strings.  For example::\n\n        __all__ = ["foo", "bar"]\n\n    Names which are imported and not otherwise used but appear in the value of\n    C{__all__} will not have an unused import warning reported for them.\n    ',
                                                'methods': [('names',
                                                             [],
                                                             '\n        Return a list of the names referenced by this binding.\n        ')],
                                                'properties': []},
             'pyflakes.checker.FunctionDefinition': {'bases': ['pyflakes.checker.Binding'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['_property_decorator']},
             'pyflakes.checker.FunctionScope': {'bases': ['pyflakes.checker.Scope'],
                                                'constructor': [],
                                                'docstring': "\n    I represent a name scope for a function.\n\n    @ivar globals: Names declared 'global' in this function.\n    ",
                                                'methods': [],
                                                'properties': ['globals']},
             'pyflakes.checker.Importation': {'bases': ['pyflakes.checker.Binding'],
                                              'constructor': ['name', 'source'],
                                              'docstring': '\n    A binding created by an import statement.\n\n    @ivar fullName: The complete name given to the import statement,\n        possibly including multiple dotted components.\n    @type fullName: C{str}\n    ',
                                              'methods': [],
                                              'properties': ['fullName']},
             'pyflakes.checker.ModuleScope': {'bases': ['pyflakes.checker.Scope'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'pyflakes.checker.Scope': {'bases': ['dict'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('__repr__', [], '')],
                                        'properties': ['importStarred']},
             'pyflakes.checker.UnBinding': {'bases': ['pyflakes.checker.Binding'],
                                            'constructor': [],
                                            'docstring': "Created by the 'del' operator.",
                                            'methods': [],
                                            'properties': []},
             'pyflakes.messages.DuplicateArgument': {'bases': ['pyflakes.messages.Message'],
                                                     'constructor': ['filename', 'loc', 'name'],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['message', 'message_args']},
             'pyflakes.messages.ImportShadowedByLoopVar': {'bases': ['pyflakes.messages.Message'],
                                                           'constructor': ['filename',
                                                                           'loc',
                                                                           'name',
                                                                           'orig_loc'],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['message',
                                                                          'message_args']},
             'pyflakes.messages.ImportStarUsed': {'bases': ['pyflakes.messages.Message'],
                                                  'constructor': ['filename', 'loc', 'modname'],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['message', 'message_args']},
             'pyflakes.messages.LateFutureImport': {'bases': ['pyflakes.messages.Message'],
                                                    'constructor': ['filename', 'loc', 'names'],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['message', 'message_args']},
             'pyflakes.messages.Message': {'bases': ['object'],
                                           'constructor': ['filename', 'loc', 'use_column=True'],
                                           'docstring': '',
                                           'methods': [('__str__', [], '')],
                                           'properties': ['message',
                                                          'message_args',
                                                          'filename',
                                                          'lineno',
                                                          'col']},
             'pyflakes.messages.RedefinedFunction': {'bases': ['pyflakes.messages.Message'],
                                                     'constructor': ['filename',
                                                                     'loc',
                                                                     'name',
                                                                     'orig_loc'],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['message', 'message_args']},
             'pyflakes.messages.RedefinedWhileUnused': {'bases': ['pyflakes.messages.Message'],
                                                        'constructor': ['filename',
                                                                        'loc',
                                                                        'name',
                                                                        'orig_loc'],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['message',
                                                                       'message_args']},
             'pyflakes.messages.UndefinedExport': {'bases': ['pyflakes.messages.Message'],
                                                   'constructor': ['filename', 'loc', 'name'],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['message', 'message_args']},
             'pyflakes.messages.UndefinedLocal': {'bases': ['pyflakes.messages.Message'],
                                                  'constructor': ['filename',
                                                                  'loc',
                                                                  'name',
                                                                  'orig_loc'],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['message', 'message_args']},
             'pyflakes.messages.UndefinedName': {'bases': ['pyflakes.messages.Message'],
                                                 'constructor': ['filename', 'loc', 'name'],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['message', 'message_args']},
             'pyflakes.messages.UnusedImport': {'bases': ['pyflakes.messages.Message'],
                                                'constructor': ['filename', 'loc', 'name'],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['message', 'message_args']},
             'pyflakes.messages.UnusedVariable': {'bases': ['pyflakes.messages.Message'],
                                                  'constructor': ['filename', 'loc', 'names'],
                                                  'docstring': '\n    Indicates that a variable has been explicity assigned to but not actually\n    used.\n    ',
                                                  'methods': [],
                                                  'properties': ['message', 'message_args']},
             'pyflakes.test.harness.Test': {'bases': ['twisted.trial.unittest.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('flakes',
                                                         ['input', '*expectedOutputs', '**kw'],
                                                         '')],
                                            'properties': []},
             'pyflakes.test.test_imports.Python26Tests': {'bases': ['pyflakes.test.harness.Test'],
                                                          'constructor': [],
                                                          'docstring': '\n    Tests for checking of syntax which is valid in PYthon 2.6 and newer.\n    ',
                                                          'methods': [('test_usedAsClassDecorator',
                                                                       [],
                                                                       '\n        Using an imported name as a class decorator results in no warnings,\n        but using an undefined name as a class decorator results in an\n        undefined name warning.\n        ')],
                                                          'properties': ['skip']},
             'pyflakes.test.test_imports.Test': {'bases': ['pyflakes.test.harness.Test'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_unusedImport', [], ''),
                                                             ('test_aliasedImport', [], ''),
                                                             ('test_usedImport', [], ''),
                                                             ('test_redefinedWhileUnused',
                                                              [],
                                                              ''),
                                                             ('test_redefinedByFunction',
                                                              [],
                                                              ''),
                                                             ('test_redefinedInNestedFunction',
                                                              [],
                                                              '\n        Test that shadowing a global name with a nested function definition\n        generates a warning.\n        '),
                                                             ('test_redefinedByClass', [], ''),
                                                             ('test_redefinedBySubclass',
                                                              [],
                                                              '\n        If an imported name is redefined by a class statement which also uses\n        that name in the bases list, no warning is emitted.\n        '),
                                                             ('test_redefinedInClass',
                                                              [],
                                                              '\n        Test that shadowing a global with a class attribute does not produce a\n        warning.\n        '),
                                                             ('test_usedInFunction', [], ''),
                                                             ('test_shadowedByParameter',
                                                              [],
                                                              ''),
                                                             ('test_newAssignment', [], ''),
                                                             ('test_usedInGetattr', [], ''),
                                                             ('test_usedInSlice', [], ''),
                                                             ('test_usedInIfBody', [], ''),
                                                             ('test_usedInIfConditional',
                                                              [],
                                                              ''),
                                                             ('test_usedInElifConditional',
                                                              [],
                                                              ''),
                                                             ('test_usedInElse', [], ''),
                                                             ('test_usedInCall', [], ''),
                                                             ('test_usedInClass', [], ''),
                                                             ('test_usedInClassBase', [], ''),
                                                             ('test_notUsedInNestedScope',
                                                              [],
                                                              ''),
                                                             ('test_usedInFor', [], ''),
                                                             ('test_usedInForElse', [], ''),
                                                             ('test_redefinedByFor', [], ''),
                                                             ('test_shadowedByFor',
                                                              [],
                                                              '\n        Test that shadowing a global name with a for loop variable generates a\n        warning.\n        '),
                                                             ('test_shadowedByForDeep',
                                                              [],
                                                              '\n        Test that shadowing a global name with a for loop variable nested in a\n        tuple unpack generates a warning.\n        '),
                                                             ('test_usedInReturn', [], ''),
                                                             ('test_usedInOperators', [], ''),
                                                             ('test_usedInAssert', [], ''),
                                                             ('test_usedInSubscript', [], ''),
                                                             ('test_usedInLogic', [], ''),
                                                             ('test_usedInList', [], ''),
                                                             ('test_usedInTuple', [], ''),
                                                             ('test_usedInTry', [], ''),
                                                             ('test_usedInExcept', [], ''),
                                                             ('test_redefinedByExcept', [], ''),
                                                             ('test_usedInRaise', [], ''),
                                                             ('test_usedInYield', [], ''),
                                                             ('test_usedInDict', [], ''),
                                                             ('test_usedInParameterDefault',
                                                              [],
                                                              ''),
                                                             ('test_usedInAttributeAssign',
                                                              [],
                                                              ''),
                                                             ('test_usedInKeywordArg', [], ''),
                                                             ('test_usedInAssignment', [], ''),
                                                             ('test_usedInListComp', [], ''),
                                                             ('test_redefinedByListComp',
                                                              [],
                                                              ''),
                                                             ('test_usedInTryFinally', [], ''),
                                                             ('test_usedInWhile', [], ''),
                                                             ('test_usedInGlobal', [], ''),
                                                             ('test_usedInBackquote', [], ''),
                                                             ('test_usedInExec', [], ''),
                                                             ('test_usedInLambda', [], ''),
                                                             ('test_shadowedByLambda', [], ''),
                                                             ('test_usedInSliceObj', [], ''),
                                                             ('test_unusedInNestedScope',
                                                              [],
                                                              ''),
                                                             ('test_methodsDontUseClassScope',
                                                              [],
                                                              ''),
                                                             ('test_nestedFunctionsNestScope',
                                                              [],
                                                              ''),
                                                             ('test_nestedClassAndFunctionScope',
                                                              [],
                                                              ''),
                                                             ('test_importStar', [], ''),
                                                             ('test_packageImport',
                                                              [],
                                                              '\n        If a dotted name is imported and used, no warning is reported.\n        '),
                                                             ('test_unusedPackageImport',
                                                              [],
                                                              '\n        If a dotted name is imported and not used, an unused import warning is\n        reported.\n        '),
                                                             ('test_duplicateSubmoduleImport',
                                                              [],
                                                              '\n        If a submodule of a package is imported twice, an unused import warning\n        and a redefined while unused warning are reported.\n        '),
                                                             ('test_differentSubmoduleImport',
                                                              [],
                                                              '\n        If two different submodules of a package are imported, no duplicate\n        import warning is reported for the package.\n        '),
                                                             ('test_assignRHSFirst', [], ''),
                                                             ('test_tryingMultipleImports',
                                                              [],
                                                              ''),
                                                             ('test_nonGlobalDoesNotRedefine',
                                                              [],
                                                              ''),
                                                             ('test_functionsRunLater', [], ''),
                                                             ('test_functionNamesAreBoundNow',
                                                              [],
                                                              ''),
                                                             ('test_ignoreNonImportRedefinitions',
                                                              [],
                                                              ''),
                                                             ('test_importingForImportError',
                                                              [],
                                                              ''),
                                                             ('test_importedInClass',
                                                              [],
                                                              'Imports in class scope can be used through self'),
                                                             ('test_futureImport',
                                                              [],
                                                              '__future__ is special'),
                                                             ('test_futureImportFirst',
                                                              [],
                                                              '\n        __future__ imports must come before anything else.\n        ')],
                                                 'properties': []},
             'pyflakes.test.test_imports.TestSpecialAll': {'bases': ['pyflakes.test.harness.Test'],
                                                           'constructor': [],
                                                           'docstring': '\n    Tests for suppression of unused import warnings by C{__all__}.\n    ',
                                                           'methods': [('test_ignoredInFunction',
                                                                        [],
                                                                        '\n        An C{__all__} definition does not suppress unused import warnings in a\n        function scope.\n        '),
                                                                       ('test_ignoredInClass',
                                                                        [],
                                                                        '\n        An C{__all__} definition does not suppress unused import warnings in a\n        class scope.\n        '),
                                                                       ('test_warningSuppressed',
                                                                        [],
                                                                        '\n        If a name is imported and unused but is named in C{__all__}, no warning\n        is reported.\n        '),
                                                                       ('test_unrecognizable',
                                                                        [],
                                                                        "\n        If C{__all__} is defined in a way that can't be recognized statically,\n        it is ignored.\n        "),
                                                                       ('test_unboundExported',
                                                                        [],
                                                                        '\n        If C{__all__} includes a name which is not bound, a warning is emitted.\n        '),
                                                                       ('test_usedInGenExp',
                                                                        [],
                                                                        '\n        Using a global in a generator expression results in no warnings.\n        '),
                                                                       ('test_redefinedByGenExp',
                                                                        [],
                                                                        '\n        Re-using a global name as the loop variable for a generator\n        expression results in a redefinition warning.\n        '),
                                                                       ('test_usedAsDecorator',
                                                                        [],
                                                                        '\n        Using a global name in a decorator statement results in no warnings,\n        but using an undefined name in a decorator statement results in an\n        undefined name warning.\n        ')],
                                                           'properties': []},
             'pyflakes.test.test_other.Python25Test': {'bases': ['pyflakes.test.harness.Test'],
                                                       'constructor': [],
                                                       'docstring': '\n    Tests for checking of syntax only available in Python 2.5 and newer.\n    ',
                                                       'methods': [('test_ifexp',
                                                                    [],
                                                                    '\n        Test C{foo if bar else baz} statements.\n        '),
                                                                   ('test_withStatementNoNames',
                                                                    [],
                                                                    '\n        No warnings are emitted for using inside or after a nameless C{with}\n        statement a name defined beforehand.\n        '),
                                                                   ('test_withStatementSingleName',
                                                                    [],
                                                                    '\n        No warnings are emitted for using a name defined by a C{with} statement\n        within the suite or afterwards.\n        '),
                                                                   ('test_withStatementAttributeName',
                                                                    [],
                                                                    '\n        No warnings are emitted for using an attribute as the target of a\n        C{with} statement.\n        '),
                                                                   ('test_withStatementSubscript',
                                                                    [],
                                                                    '\n        No warnings are emitted for using a subscript as the target of a\n        C{with} statement.\n        '),
                                                                   ('test_withStatementSubscriptUndefined',
                                                                    [],
                                                                    '\n        An undefined name warning is emitted if the subscript used as the\n        target of a C{with} statement is not defined.\n        '),
                                                                   ('test_withStatementTupleNames',
                                                                    [],
                                                                    '\n        No warnings are emitted for using any of the tuple of names defined by\n        a C{with} statement within the suite or afterwards.\n        '),
                                                                   ('test_withStatementListNames',
                                                                    [],
                                                                    '\n        No warnings are emitted for using any of the list of names defined by a\n        C{with} statement within the suite or afterwards.\n        '),
                                                                   ('test_withStatementComplicatedTarget',
                                                                    [],
                                                                    '\n        If the target of a C{with} statement uses any or all of the valid forms\n        for that part of the grammar (See\n        U{http://docs.python.org/reference/compound_stmts.html#the-with-statement}),\n        the names involved are checked both for definedness and any bindings\n        created are respected in the suite of the statement and afterwards.\n        '),
                                                                   ('test_withStatementSingleNameUndefined',
                                                                    [],
                                                                    '\n        An undefined name warning is emitted if the name first defined by a\n        C{with} statement is used before the C{with} statement.\n        '),
                                                                   ('test_withStatementTupleNamesUndefined',
                                                                    [],
                                                                    '\n        An undefined name warning is emitted if a name first defined by a the\n        tuple-unpacking form of the C{with} statement is used before the\n        C{with} statement.\n        '),
                                                                   ('test_withStatementSingleNameRedefined',
                                                                    [],
                                                                    '\n        A redefined name warning is emitted if a name bound by an import is\n        rebound by the name defined by a C{with} statement.\n        '),
                                                                   ('test_withStatementTupleNamesRedefined',
                                                                    [],
                                                                    '\n        A redefined name warning is emitted if a name bound by an import is\n        rebound by one of the names defined by the tuple-unpacking form of a\n        C{with} statement.\n        '),
                                                                   ('test_withStatementUndefinedInside',
                                                                    [],
                                                                    '\n        An undefined name warning is emitted if a name is used inside the\n        body of a C{with} statement without first being bound.\n        '),
                                                                   ('test_withStatementNameDefinedInBody',
                                                                    [],
                                                                    '\n        A name defined in the body of a C{with} statement can be used after\n        the body ends without warning.\n        '),
                                                                   ('test_withStatementUndefinedInExpression',
                                                                    [],
                                                                    '\n        An undefined name warning is emitted if a name in the I{test}\n        expression of a C{with} statement is undefined.\n        ')],
                                                       'properties': ['skip']},
             'pyflakes.test.test_other.Python27Test': {'bases': ['pyflakes.test.harness.Test'],
                                                       'constructor': [],
                                                       'docstring': '\n    Tests for checking of syntax only available in Python 2.7 and newer.\n    ',
                                                       'methods': [('test_dictComprehension',
                                                                    [],
                                                                    '\n        Dict comprehensions are properly handled.\n        '),
                                                                   ('test_setComprehensionAndLiteral',
                                                                    [],
                                                                    '\n        Set comprehensions are properly handled.\n        ')],
                                                       'properties': ['skip']},
             'pyflakes.test.test_other.Test': {'bases': ['pyflakes.test.harness.Test'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_duplicateArgs', [], ''),
                                                           ('test_localReferencedBeforeAssignment',
                                                            [],
                                                            ''),
                                                           ('test_redefinedFunction',
                                                            [],
                                                            '\n        Test that shadowing a function definition with another one raises a\n        warning.\n        '),
                                                           ('test_redefinedClassFunction',
                                                            [],
                                                            '\n        Test that shadowing a function definition in a class suite with another\n        one raises a warning.\n        '),
                                                           ('test_functionDecorator',
                                                            [],
                                                            '\n        Test that shadowing a function definition with a decorated version of\n        that function does not raise a warning.\n        '),
                                                           ('test_classFunctionDecorator',
                                                            [],
                                                            '\n        Test that shadowing a function definition in a class suite with a\n        decorated version of that function does not raise a warning.\n        '),
                                                           ('test_unaryPlus',
                                                            [],
                                                            "Don't die on unary +"),
                                                           ('test_undefinedBaseClass',
                                                            [],
                                                            '\n        If a name in the base list of a class definition is undefined, a\n        warning is emitted.\n        '),
                                                           ('test_classNameUndefinedInClassBody',
                                                            [],
                                                            "\n        If a class name is used in the body of that class's definition and\n        the name is not already defined, a warning is emitted.\n        "),
                                                           ('test_classNameDefinedPreviously',
                                                            [],
                                                            "\n        If a class name is used in the body of that class's definition and\n        the name was previously defined in some other way, no warning is\n        emitted.\n        "),
                                                           ('test_comparison',
                                                            [],
                                                            '\n        If a defined name is used on either side of any of the six comparison\n        operators, no warning is emitted.\n        '),
                                                           ('test_identity',
                                                            [],
                                                            '\n        If a deefined name is used on either side of an identity test, no\n        warning is emitted.\n        '),
                                                           ('test_containment',
                                                            [],
                                                            '\n        If a defined name is used on either side of a containment test, no\n        warning is emitted.\n        '),
                                                           ('test_loopControl',
                                                            [],
                                                            '\n        break and continue statements are supported.\n        '),
                                                           ('test_ellipsis',
                                                            [],
                                                            '\n        Ellipsis in a slice is supported.\n        '),
                                                           ('test_extendedSlice',
                                                            [],
                                                            '\n        Extended slices are supported.\n        ')],
                                               'properties': []},
             'pyflakes.test.test_other.TestUnusedAssignment': {'bases': ['pyflakes.test.harness.Test'],
                                                               'constructor': [],
                                                               'docstring': '\n    Tests for warning about unused assignments.\n    ',
                                                               'methods': [('test_unusedVariable',
                                                                            [],
                                                                            "\n        Warn when a variable in a function is assigned a value that's never\n        used.\n        "),
                                                                           ('test_assignToGlobal',
                                                                            [],
                                                                            '\n        Assigning to a global and then not using that global is perfectly\n        acceptable. Do not mistake it for an unused local variable.\n        '),
                                                                           ('test_assignToMember',
                                                                            [],
                                                                            '\n        Assigning to a member of another object and then not using that member\n        variable is perfectly acceptable. Do not mistake it for an unused\n        local variable.\n        '),
                                                                           ('test_assignInForLoop',
                                                                            [],
                                                                            "\n        Don't warn when a variable in a for loop is assigned to but not used.\n        "),
                                                                           ('test_assignInListComprehension',
                                                                            [],
                                                                            "\n        Don't warn when a variable in a list comprehension is assigned to but\n        not used.\n        "),
                                                                           ('test_generatorExpression',
                                                                            [],
                                                                            "\n        Don't warn when a variable in a generator expression is assigned to but not used.\n        "),
                                                                           ('test_assignmentInsideLoop',
                                                                            [],
                                                                            "\n        Don't warn when a variable assignment occurs lexically after its use.\n        "),
                                                                           ('test_tupleUnpacking',
                                                                            [],
                                                                            "\n        Don't warn when a variable included in tuple unpacking is unused. It's\n        very common for variables in a tuple unpacking assignment to be unused\n        in good Python code, so warning will only create false positives.\n        "),
                                                                           ('test_listUnpacking',
                                                                            [],
                                                                            "\n        Don't warn when a variable included in list unpacking is unused.\n        "),
                                                                           ('test_closedOver',
                                                                            [],
                                                                            "\n        Don't warn when the assignment is used in an inner function.\n        "),
                                                                           ('test_doubleClosedOver',
                                                                            [],
                                                                            "\n        Don't warn when the assignment is used in an inner function, even if\n        that inner function itself is in an inner function.\n        ")],
                                                               'properties': []},
             'pyflakes.test.test_script.CheckTests': {'bases': ['twisted.trial.unittest.TestCase'],
                                                      'constructor': [],
                                                      'docstring': '\n    Tests for L{check} and L{checkPath} which check a file for flakes.\n    ',
                                                      'methods': [('test_missingTrailingNewline',
                                                                   [],
                                                                   "\n        Source which doesn't end with a newline shouldn't cause any\n        exception to be raised nor an error indicator to be returned by\n        L{check}.\n        "),
                                                                  ('test_checkPathNonExisting',
                                                                   [],
                                                                   '\n        L{checkPath} handles non-existing files.\n        '),
                                                                  ('test_multilineSyntaxError',
                                                                   [],
                                                                   '\n        Source which includes a syntax error which results in the raised\n        L{SyntaxError.text} containing multiple lines of source are reported\n        with only the last line of that source.\n        '),
                                                                  ('test_eofSyntaxError',
                                                                   [],
                                                                   '\n        The error reported for source files which end prematurely causing a\n        syntax error reflects the cause for the syntax error.\n        '),
                                                                  ('test_nonDefaultFollowsDefaultSyntaxError',
                                                                   [],
                                                                   '\n        Source which has a non-default argument following a default argument\n        should include the line number of the syntax error.  However these\n        exceptions do not include an offset.\n        '),
                                                                  ('test_nonKeywordAfterKeywordSyntaxError',
                                                                   [],
                                                                   '\n        Source which has a non-keyword argument after a keyword argument should\n        include the line number of the syntax error.  However these exceptions\n        do not include an offset.\n        '),
                                                                  ('test_permissionDenied',
                                                                   [],
                                                                   '\n        If the a source file is not readable, this is reported on standard\n        error.\n        '),
                                                                  ('test_misencodedFile',
                                                                   [],
                                                                   '\n        If a source file contains bytes which cannot be decoded, this is\n        reported on stderr.\n        ')],
                                                      'properties': []},
             'pyflakes.test.test_undefined_names.NameTests': {'bases': ['twisted.trial.unittest.TestCase'],
                                                              'constructor': [],
                                                              'docstring': '\n    Tests for some extra cases of name handling.\n    ',
                                                              'methods': [('test_impossibleContext',
                                                                           [],
                                                                           '\n        A Name node with an unrecognized context results in a RuntimeError being\n        raised.\n        ')],
                                                              'properties': []},
             'pyflakes.test.test_undefined_names.Test': {'bases': ['pyflakes.test.harness.Test'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('test_undefined', [], ''),
                                                                     ('test_definedInListComp',
                                                                      [],
                                                                      ''),
                                                                     ('test_functionsNeedGlobalScope',
                                                                      [],
                                                                      ''),
                                                                     ('test_builtins', [], ''),
                                                                     ('test_magicGlobalsFile',
                                                                      [],
                                                                      '\n        Use of the C{__file__} magic global should not emit an undefined name\n        warning.\n        '),
                                                                     ('test_magicGlobalsBuiltins',
                                                                      [],
                                                                      '\n        Use of the C{__builtins__} magic global should not emit an undefined\n        name warning.\n        '),
                                                                     ('test_magicGlobalsName',
                                                                      [],
                                                                      '\n        Use of the C{__name__} magic global should not emit an undefined name\n        warning.\n        '),
                                                                     ('test_magicGlobalsPath',
                                                                      [],
                                                                      '\n        Use of the C{__path__} magic global should not emit an undefined name\n        warning, if you refer to it from a file called __init__.py.\n        '),
                                                                     ('test_globalImportStar',
                                                                      [],
                                                                      "Can't find undefined names with import *"),
                                                                     ('test_localImportStar',
                                                                      [],
                                                                      'A local import * still allows undefined names to be found in upper scopes'),
                                                                     ('test_unpackedParameter',
                                                                      [],
                                                                      'Unpacked function parameters create bindings'),
                                                                     ('test_definedByGlobal',
                                                                      [],
                                                                      '"global" can make an otherwise undefined name in another function defined'),
                                                                     ('test_globalInGlobalScope',
                                                                      [],
                                                                      '\n        A global statement in the global scope is ignored.\n        '),
                                                                     ('test_del',
                                                                      [],
                                                                      'del deletes bindings'),
                                                                     ('test_delGlobal',
                                                                      [],
                                                                      'del a global binding from a function'),
                                                                     ('test_delUndefined',
                                                                      [],
                                                                      'del an undefined name'),
                                                                     ('test_globalFromNestedScope',
                                                                      [],
                                                                      'global names are available from nested scopes'),
                                                                     ('test_laterRedefinedGlobalFromNestedScope',
                                                                      [],
                                                                      '\n        Test that referencing a local name that shadows a global, before it is\n        defined, generates a warning.\n        '),
                                                                     ('test_laterRedefinedGlobalFromNestedScope2',
                                                                      [],
                                                                      '\n        Test that referencing a local name in a nested scope that shadows a\n        global declared in an enclosing scope, before it is defined, generates\n        a warning.\n        '),
                                                                     ('test_intermediateClassScopeIgnored',
                                                                      [],
                                                                      '\n        If a name defined in an enclosing scope is shadowed by a local variable\n        and the name is used locally before it is bound, an unbound local\n        warning is emitted, even if there is a class scope between the enclosing\n        scope and the local scope.\n        '),
                                                                     ('test_doubleNestingReportsClosestName',
                                                                      [],
                                                                      '\n        Test that referencing a local name in a nested scope that shadows a\n        variable declared in two different outer scopes before it is defined\n        in the innermost scope generates an UnboundLocal warning which\n        refers to the nearest shadowed name.\n        '),
                                                                     ('test_laterRedefinedGlobalFromNestedScope3',
                                                                      [],
                                                                      '\n        Test that referencing a local name in a nested scope that shadows a\n        global, before it is defined, generates a warning.\n        '),
                                                                     ('test_nestedClass',
                                                                      [],
                                                                      'nested classes can access enclosing scope'),
                                                                     ('test_badNestedClass',
                                                                      [],
                                                                      'free variables in nested classes must bind at class creation'),
                                                                     ('test_definedAsStarArgs',
                                                                      [],
                                                                      'star and double-star arg names are defined'),
                                                                     ('test_definedInGenExp',
                                                                      [],
                                                                      '\n        Using the loop variable of a generator expression results in no\n        warnings.\n        ')],
                                                         'properties': []}},
 'CONSTANTS': ['pyflakes.__version__',
               'pyflakes.checker.iter_child_nodes',
               'pyflakes.checker._MAGIC_GLOBALS',
               'pyflakes.scripts.pyflakes.checker',
               'pyflakes.__version__',
               'pyflakes.checker.iter_child_nodes',
               'pyflakes.checker._MAGIC_GLOBALS',
               'pyflakes.scripts.pyflakes.checker'],
 'FUNCTIONS': [('pyflakes.checker.iter_child_nodes',
                ['node', 'astcls=_ast.AST'],
                '\n        Yield all direct child nodes of *node*, that is, all fields that are nodes\n        and all items of fields that are lists of nodes.\n        '),
               ('pyflakes.test.test_script.withStderrTo',
                ['stderr', 'f'],
                '\n    Call C{f} with C{sys.stderr} redirected to C{stderr}.\n    '),
               ('pyflakes.scripts.pyflakes.check',
                ['codeString', 'filename'],
                '\n    Check the Python source given by C{codeString} for flakes.\n\n    @param codeString: The Python source to check.\n    @type codeString: C{str}\n\n    @param filename: The name of the file the source came from, used to report\n        errors.\n    @type filename: C{str}\n\n    @return: The number of warnings emitted.\n    @rtype: C{int}\n    '),
               ('pyflakes.scripts.pyflakes.checkPath',
                ['filename'],
                '\n    Check the given path, printing out any warnings detected.\n\n    @return: the number of warnings printed\n    '),
               ('pyflakes.scripts.pyflakes.main', [], ''),
               ('pyflakes.checker.iter_child_nodes',
                ['node', 'astcls=_ast.AST'],
                '\n        Yield all direct child nodes of *node*, that is, all fields that are nodes\n        and all items of fields that are lists of nodes.\n        '),
               ('pyflakes.test.test_script.withStderrTo',
                ['stderr', 'f'],
                '\n    Call C{f} with C{sys.stderr} redirected to C{stderr}.\n    '),
               ('pyflakes.scripts.pyflakes.check',
                ['codeString', 'filename'],
                '\n    Check the Python source given by C{codeString} for flakes.\n\n    @param codeString: The Python source to check.\n    @type codeString: C{str}\n\n    @param filename: The name of the file the source came from, used to report\n        errors.\n    @type filename: C{str}\n\n    @return: The number of warnings emitted.\n    @rtype: C{int}\n    '),
               ('pyflakes.scripts.pyflakes.checkPath',
                ['filename'],
                '\n    Check the given path, printing out any warnings detected.\n\n    @return: the number of warnings printed\n    '),
               ('pyflakes.scripts.pyflakes.main', [], '')],
 'HIERARCHY': ['setup',
               'pyflakes',
               'pyflakes.messages',
               'pyflakes.checker',
               'pyflakes.test.test_other',
               'pyflakes.test.test_undefined_names',
               'pyflakes.test.harness',
               'pyflakes.test',
               'pyflakes.test.test_script',
               'pyflakes.test.test_imports',
               'pyflakes.scripts',
               'pyflakes.scripts.pyflakes',
               'pyflakes',
               'pyflakes.messages',
               'pyflakes.checker',
               'pyflakes.test.test_other',
               'pyflakes.test.test_undefined_names',
               'pyflakes.test.harness',
               'pyflakes.test',
               'pyflakes.test.test_script',
               'pyflakes.test.test_imports',
               'pyflakes.scripts',
               'pyflakes.scripts.pyflakes'],
 'POINTERS': {'pyflakes.checker.__builtin__': '__builtin__',
              'pyflakes.checker._ast': '_ast',
              'pyflakes.checker.ast': 'ast',
              'pyflakes.checker.messages': 'pyflakes.messages',
              'pyflakes.checker.os.path': 'os.path',
              'pyflakes.scripts.pyflakes._ast': '_ast',
              'pyflakes.scripts.pyflakes.os': 'os',
              'pyflakes.scripts.pyflakes.sys': 'sys',
              'pyflakes.test.harness._ast': '_ast',
              'pyflakes.test.harness.checker': 'pyflakes.checker',
              'pyflakes.test.harness.textwrap': 'textwrap',
              'pyflakes.test.harness.unittest': 'twisted.trial.unittest',
              'pyflakes.test.test_imports.harness': 'pyflakes.test.harness',
              'pyflakes.test.test_imports.m': 'pyflakes.messages',
              'pyflakes.test.test_imports.version_info': 'sys.version_info',
              'pyflakes.test.test_other.harness': 'pyflakes.test.harness',
              'pyflakes.test.test_other.m': 'pyflakes.messages',
              'pyflakes.test.test_other.version_info': 'sys.version_info',
              'pyflakes.test.test_script.FilePath': 'twisted.python.filepath.FilePath',
              'pyflakes.test.test_script.StringIO': 'StringIO.StringIO',
              'pyflakes.test.test_script.TestCase': 'twisted.trial.unittest.TestCase',
              'pyflakes.test.test_script.checkPath': 'pyflakes.scripts.pyflakes.checkPath',
              'pyflakes.test.test_script.sys': 'sys',
              'pyflakes.test.test_undefined_names.PyCF_ONLY_AST': '_ast.PyCF_ONLY_AST',
              'pyflakes.test.test_undefined_names.TestCase': 'twisted.trial.unittest.TestCase',
              'pyflakes.test.test_undefined_names.checker': 'pyflakes.checker',
              'pyflakes.test.test_undefined_names.harness': 'pyflakes.test.harness',
              'pyflakes.test.test_undefined_names.m': 'pyflakes.messages',
              'setup.setup': 'distutils.core.setup'}}
