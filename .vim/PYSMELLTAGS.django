{'CLASSES': {'django.conf.BaseSettings': {'bases': ['object'],
                                          'constructor': [],
                                          'docstring': '\n    Common logic for settings whether set by a module or by the user.\n    ',
                                          'methods': [('__setattr__', ['name', 'value'], '')],
                                          'properties': []},
             'django.conf.LazySettings': {'bases': ['django.utils.functional.LazyObject'],
                                          'constructor': [],
                                          'docstring': '\n    A lazy proxy for either global Django settings or a custom settings object.\n    The user can manually configure settings prior to using them. Otherwise,\n    Django uses the settings module pointed to by DJANGO_SETTINGS_MODULE.\n    ',
                                          'methods': [('_setup',
                                                       [],
                                                       '\n        Load the settings module pointed to by the environment variable. This\n        is used the first time we need any settings at all, if the user has not\n        previously configured the settings manually.\n        '),
                                                      ('configure',
                                                       ['default_settings=global_settings',
                                                        '**options'],
                                                       "\n        Called to manually configure the settings. The 'default_settings'\n        parameter sets where to retrieve any unspecified values from (its\n        argument must support attribute access (__getattr__)).\n        "),
                                                      ('configured',
                                                       [],
                                                       '\n        Returns True if the settings have already been configured.\n        ')],
                                          'properties': ['_wrapped', 'configured']},
             'django.conf.Settings': {'bases': ['django.conf.BaseSettings'],
                                      'constructor': ['settings_module'],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': ['SETTINGS_MODULE', 'INSTALLED_APPS']},
             'django.conf.UserSettingsHolder': {'bases': ['django.conf.BaseSettings'],
                                                'constructor': ['default_settings'],
                                                'docstring': '\n    Holder for user configured settings.\n    ',
                                                'methods': [('__getattr__', ['name'], ''),
                                                            ('__dir__', [], '')],
                                                'properties': ['SETTINGS_MODULE',
                                                               'default_settings',
                                                               '__members__']},
             'django.conf.app_template.tests.SimpleTest': {'bases': ['django.test.TestCase'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('test_basic_addition',
                                                                        [],
                                                                        '\n        Tests that 1 + 1 always equals 2.\n        ')],
                                                           'properties': []},
             'django.contrib.admin.filterspecs.AllValuesFilterSpec': {'bases': ['django.contrib.admin.filterspecs.FilterSpec'],
                                                                      'constructor': ['f',
                                                                                      'request',
                                                                                      'params',
                                                                                      'model',
                                                                                      'model_admin',
                                                                                      'field_path=None'],
                                                                      'docstring': '',
                                                                      'methods': [('title',
                                                                                   [],
                                                                                   ''),
                                                                                  ('choices',
                                                                                   ['cl'],
                                                                                   '')],
                                                                      'properties': ['lookup_kwarg',
                                                                                     'lookup_kwarg_isnull',
                                                                                     'lookup_val',
                                                                                     'lookup_val_isnull',
                                                                                     'lookup_choices']},
             'django.contrib.admin.filterspecs.BooleanFieldFilterSpec': {'bases': ['django.contrib.admin.filterspecs.FilterSpec'],
                                                                         'constructor': ['f',
                                                                                         'request',
                                                                                         'params',
                                                                                         'model',
                                                                                         'model_admin',
                                                                                         'field_path=None'],
                                                                         'docstring': '',
                                                                         'methods': [('title',
                                                                                      [],
                                                                                      ''),
                                                                                     ('choices',
                                                                                      ['cl'],
                                                                                      '')],
                                                                         'properties': ['lookup_kwarg',
                                                                                        'lookup_kwarg2',
                                                                                        'lookup_val',
                                                                                        'lookup_val2']},
             'django.contrib.admin.filterspecs.ChoicesFilterSpec': {'bases': ['django.contrib.admin.filterspecs.FilterSpec'],
                                                                    'constructor': ['f',
                                                                                    'request',
                                                                                    'params',
                                                                                    'model',
                                                                                    'model_admin',
                                                                                    'field_path=None'],
                                                                    'docstring': '',
                                                                    'methods': [('choices',
                                                                                 ['cl'],
                                                                                 '')],
                                                                    'properties': ['lookup_kwarg',
                                                                                   'lookup_val']},
             'django.contrib.admin.filterspecs.DateFieldFilterSpec': {'bases': ['django.contrib.admin.filterspecs.FilterSpec'],
                                                                      'constructor': ['f',
                                                                                      'request',
                                                                                      'params',
                                                                                      'model',
                                                                                      'model_admin',
                                                                                      'field_path=None'],
                                                                      'docstring': '',
                                                                      'methods': [('title',
                                                                                   [],
                                                                                   ''),
                                                                                  ('choices',
                                                                                   ['cl'],
                                                                                   '')],
                                                                      'properties': ['field_generic',
                                                                                     'date_params',
                                                                                     'links']},
             'django.contrib.admin.filterspecs.FilterSpec': {'bases': ['object'],
                                                             'constructor': ['f',
                                                                             'request',
                                                                             'params',
                                                                             'model',
                                                                             'model_admin',
                                                                             'field_path=None'],
                                                             'docstring': '',
                                                             'methods': [('register',
                                                                          ['test', 'factory'],
                                                                          ''),
                                                                         ('create',
                                                                          ['f',
                                                                           'request',
                                                                           'params',
                                                                           'model',
                                                                           'model_admin',
                                                                           'field_path=None'],
                                                                          ''),
                                                                         ('has_output', [], ''),
                                                                         ('choices',
                                                                          ['cl'],
                                                                          ''),
                                                                         ('title', [], ''),
                                                                         ('output', ['cl'], '')],
                                                             'properties': ['filter_specs',
                                                                            'field',
                                                                            'params',
                                                                            'field_path',
                                                                            'register',
                                                                            'create']},
             'django.contrib.admin.filterspecs.RelatedFilterSpec': {'bases': ['django.contrib.admin.filterspecs.FilterSpec'],
                                                                    'constructor': ['f',
                                                                                    'request',
                                                                                    'params',
                                                                                    'model',
                                                                                    'model_admin',
                                                                                    'field_path=None'],
                                                                    'docstring': '',
                                                                    'methods': [('has_output',
                                                                                 [],
                                                                                 ''),
                                                                                ('title',
                                                                                 [],
                                                                                 ''),
                                                                                ('choices',
                                                                                 ['cl'],
                                                                                 '')],
                                                                    'properties': ['lookup_title',
                                                                                   'lookup_kwarg',
                                                                                   'lookup_kwarg_isnull',
                                                                                   'lookup_val',
                                                                                   'lookup_val_isnull',
                                                                                   'lookup_choices']},
             'django.contrib.admin.forms.AdminAuthenticationForm': {'bases': ['django.contrib.auth.forms.AuthenticationForm'],
                                                                    'constructor': [],
                                                                    'docstring': '\n    A custom authentication form used in the admin app.\n\n    ',
                                                                    'methods': [('clean',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['this_is_the_login_form',
                                                                                   'user_cache']},
             'django.contrib.admin.helpers.ActionForm': {'bases': ['django.forms.Form'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['action',
                                                                        'select_across']},
             'django.contrib.admin.helpers.AdminErrorList': {'bases': ['django.forms.util.ErrorList'],
                                                             'constructor': ['form',
                                                                             'inline_formsets'],
                                                             'docstring': '\n    Stores all errors for the form/formsets in an add/change stage view.\n    ',
                                                             'methods': [],
                                                             'properties': []},
             'django.contrib.admin.helpers.AdminField': {'bases': ['object'],
                                                         'constructor': ['form',
                                                                         'field',
                                                                         'is_first'],
                                                         'docstring': '',
                                                         'methods': [('label_tag', [], ''),
                                                                     ('errors', [], '')],
                                                         'properties': ['field',
                                                                        'is_first',
                                                                        'is_checkbox']},
             'django.contrib.admin.helpers.AdminForm': {'bases': ['object'],
                                                        'constructor': ['form',
                                                                        'fieldsets',
                                                                        'prepopulated_fields',
                                                                        'readonly_fields=None',
                                                                        'model_admin=None'],
                                                        'docstring': '',
                                                        'methods': [('__iter__', [], ''),
                                                                    ('first_field', [], ''),
                                                                    ('_media', [], '')],
                                                        'properties': ['form',
                                                                       'fieldsets',
                                                                       'prepopulated_fields',
                                                                       'model_admin',
                                                                       'readonly_fields',
                                                                       'media']},
             'django.contrib.admin.helpers.AdminReadonlyField': {'bases': ['object'],
                                                                 'constructor': ['form',
                                                                                 'field',
                                                                                 'is_first',
                                                                                 'model_admin=None'],
                                                                 'docstring': '',
                                                                 'methods': [('label_tag',
                                                                              [],
                                                                              ''),
                                                                             ('contents',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['field',
                                                                                'form',
                                                                                'model_admin',
                                                                                'is_first',
                                                                                'is_checkbox',
                                                                                'is_readonly']},
             'django.contrib.admin.helpers.Fieldline': {'bases': ['object'],
                                                        'constructor': ['form',
                                                                        'field',
                                                                        'readonly_fields=None',
                                                                        'model_admin=None'],
                                                        'docstring': '',
                                                        'methods': [('__iter__', [], ''),
                                                                    ('errors', [], '')],
                                                        'properties': ['form',
                                                                       'fields',
                                                                       'model_admin',
                                                                       'readonly_fields']},
             'django.contrib.admin.helpers.Fieldset': {'bases': ['object'],
                                                       'constructor': ['form',
                                                                       'name=None',
                                                                       'readonly_fields=()',
                                                                       'fields=()',
                                                                       'classes=()',
                                                                       'description=None',
                                                                       'model_admin=None'],
                                                       'docstring': '',
                                                       'methods': [('_media', [], ''),
                                                                   ('__iter__', [], '')],
                                                       'properties': ['form',
                                                                      'name',
                                                                      'fields',
                                                                      'classes',
                                                                      'description',
                                                                      'model_admin',
                                                                      'readonly_fields',
                                                                      'media']},
             'django.contrib.admin.helpers.InlineAdminForm': {'bases': ['django.contrib.admin.helpers.AdminForm'],
                                                              'constructor': ['formset',
                                                                              'form',
                                                                              'fieldsets',
                                                                              'prepopulated_fields',
                                                                              'original',
                                                                              'readonly_fields=None',
                                                                              'model_admin=None'],
                                                              'docstring': '\n    A wrapper around an inline form for use in the admin system.\n    ',
                                                              'methods': [('__iter__', [], ''),
                                                                          ('has_auto_field',
                                                                           [],
                                                                           ''),
                                                                          ('field_count',
                                                                           [],
                                                                           ''),
                                                                          ('pk_field', [], ''),
                                                                          ('fk_field', [], ''),
                                                                          ('deletion_field',
                                                                           [],
                                                                           ''),
                                                                          ('ordering_field',
                                                                           [],
                                                                           '')],
                                                              'properties': ['formset',
                                                                             'model_admin',
                                                                             'original',
                                                                             'original_content_type_id',
                                                                             'show_url']},
             'django.contrib.admin.helpers.InlineAdminFormSet': {'bases': ['object'],
                                                                 'constructor': ['inline',
                                                                                 'formset',
                                                                                 'fieldsets',
                                                                                 'readonly_fields=None',
                                                                                 'model_admin=None'],
                                                                 'docstring': '\n    A wrapper around an inline formset for use in the admin system.\n    ',
                                                                 'methods': [('__iter__',
                                                                              [],
                                                                              ''),
                                                                             ('fields', [], ''),
                                                                             ('_media', [], '')],
                                                                 'properties': ['opts',
                                                                                'formset',
                                                                                'fieldsets',
                                                                                'model_admin',
                                                                                'readonly_fields',
                                                                                'media']},
             'django.contrib.admin.helpers.InlineFieldset': {'bases': ['django.contrib.admin.helpers.Fieldset'],
                                                             'constructor': ['formset',
                                                                             '*args',
                                                                             '**kwargs'],
                                                             'docstring': '',
                                                             'methods': [('__iter__', [], '')],
                                                             'properties': ['formset']},
             'django.contrib.admin.models.LogEntry': {'bases': ['django.db.models.Model'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('__repr__', [], ''),
                                                                  ('is_addition', [], ''),
                                                                  ('is_change', [], ''),
                                                                  ('is_deletion', [], ''),
                                                                  ('get_edited_object',
                                                                   [],
                                                                   'Returns the edited object represented by this log entry'),
                                                                  ('get_admin_url',
                                                                   [],
                                                                   '\n        Returns the admin URL to edit the object represented by this log entry.\n        This is relative to the Django admin index page.\n        ')],
                                                      'properties': ['action_time',
                                                                     'user',
                                                                     'content_type',
                                                                     'object_id',
                                                                     'object_repr',
                                                                     'action_flag',
                                                                     'change_message',
                                                                     'objects']},
             'django.contrib.admin.models.LogEntryManager': {'bases': ['django.db.models.Manager'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('log_action',
                                                                          ['user_id',
                                                                           'content_type_id',
                                                                           'object_id',
                                                                           'object_repr',
                                                                           'action_flag',
                                                                           "change_message=''"],
                                                                          '')],
                                                             'properties': []},
             'django.contrib.admin.options.BaseModelAdmin': {'bases': ['object'],
                                                             'constructor': [],
                                                             'docstring': 'Functionality common to both ModelAdmin and InlineAdmin.',
                                                             'methods': [('formfield_for_dbfield',
                                                                          ['db_field',
                                                                           '**kwargs'],
                                                                          "\n        Hook for specifying the form Field instance for a given database Field\n        instance.\n\n        If kwargs are given, they're passed to the form Field's constructor.\n        "),
                                                                         ('formfield_for_choice_field',
                                                                          ['db_field',
                                                                           'request=None',
                                                                           '**kwargs'],
                                                                          '\n        Get a form Field for a database Field that has declared choices.\n        '),
                                                                         ('formfield_for_foreignkey',
                                                                          ['db_field',
                                                                           'request=None',
                                                                           '**kwargs'],
                                                                          '\n        Get a form Field for a ForeignKey.\n        '),
                                                                         ('formfield_for_manytomany',
                                                                          ['db_field',
                                                                           'request=None',
                                                                           '**kwargs'],
                                                                          '\n        Get a form Field for a ManyToManyField.\n        '),
                                                                         ('_declared_fieldsets',
                                                                          [],
                                                                          ''),
                                                                         ('get_readonly_fields',
                                                                          ['request',
                                                                           'obj=None'],
                                                                          ''),
                                                                         ('queryset',
                                                                          ['request'],
                                                                          '\n        Returns a QuerySet of all model instances that can be edited by the\n        admin site. This is used by changelist_view.\n        '),
                                                                         ('lookup_allowed',
                                                                          ['lookup', 'value'],
                                                                          '')],
                                                             'properties': ['__metaclass__',
                                                                            'raw_id_fields',
                                                                            'fields',
                                                                            'exclude',
                                                                            'fieldsets',
                                                                            'form',
                                                                            'filter_vertical',
                                                                            'filter_horizontal',
                                                                            'radio_fields',
                                                                            'prepopulated_fields',
                                                                            'formfield_overrides',
                                                                            'readonly_fields',
                                                                            'ordering',
                                                                            'declared_fieldsets']},
             'django.contrib.admin.options.IncorrectLookupParameters': {'bases': ['Exception'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [],
                                                                        'properties': []},
             'django.contrib.admin.options.InlineModelAdmin': {'bases': ['django.contrib.admin.options.BaseModelAdmin'],
                                                               'constructor': ['parent_model',
                                                                               'admin_site'],
                                                               'docstring': '\n    Options for inline editing of ``model`` instances.\n\n    Provide ``name`` to specify the attribute name of the ``ForeignKey`` from\n    ``model`` to its parent. This is required if ``model`` has more than one\n    ``ForeignKey`` to its parent.\n    ',
                                                               'methods': [('_media', [], ''),
                                                                           ('get_formset',
                                                                            ['request',
                                                                             'obj=None',
                                                                             '**kwargs'],
                                                                            'Returns a BaseInlineFormSet class for use in admin add/change views.'),
                                                                           ('get_fieldsets',
                                                                            ['request',
                                                                             'obj=None'],
                                                                            '')],
                                                               'properties': ['model',
                                                                              'fk_name',
                                                                              'formset',
                                                                              'extra',
                                                                              'max_num',
                                                                              'template',
                                                                              'verbose_name',
                                                                              'verbose_name_plural',
                                                                              'can_delete',
                                                                              'admin_site',
                                                                              'parent_model',
                                                                              'opts',
                                                                              'media']},
             'django.contrib.admin.options.ModelAdmin': {'bases': ['django.contrib.admin.options.BaseModelAdmin'],
                                                         'constructor': ['model', 'admin_site'],
                                                         'docstring': 'Encapsulates all admin options and functionality for a given model.',
                                                         'methods': [('get_urls', [], ''),
                                                                     ('urls', [], ''),
                                                                     ('_media', [], ''),
                                                                     ('has_add_permission',
                                                                      ['request'],
                                                                      '\n        Returns True if the given request has permission to add an object.\n        Can be overriden by the user in subclasses.\n        '),
                                                                     ('has_change_permission',
                                                                      ['request', 'obj=None'],
                                                                      "\n        Returns True if the given request has permission to change the given\n        Django model instance, the default implementation doesn't examine the\n        `obj` parameter.\n\n        Can be overriden by the user in subclasses. In such case it should\n        return True if the given request has permission to change the `obj`\n        model instance. If `obj` is None, this should return True if the given\n        request has permission to change *any* object of the given type.\n        "),
                                                                     ('has_delete_permission',
                                                                      ['request', 'obj=None'],
                                                                      "\n        Returns True if the given request has permission to change the given\n        Django model instance, the default implementation doesn't examine the\n        `obj` parameter.\n\n        Can be overriden by the user in subclasses. In such case it should\n        return True if the given request has permission to delete the `obj`\n        model instance. If `obj` is None, this should return True if the given\n        request has permission to delete *any* object of the given type.\n        "),
                                                                     ('get_model_perms',
                                                                      ['request'],
                                                                      '\n        Returns a dict of all perms for this model. This dict has the keys\n        ``add``, ``change``, and ``delete`` mapping to the True/False for each\n        of those actions.\n        '),
                                                                     ('get_fieldsets',
                                                                      ['request', 'obj=None'],
                                                                      'Hook for specifying fieldsets for the add form.'),
                                                                     ('get_form',
                                                                      ['request',
                                                                       'obj=None',
                                                                       '**kwargs'],
                                                                      '\n        Returns a Form class for use in the admin add view. This is used by\n        add_view and change_view.\n        '),
                                                                     ('get_changelist',
                                                                      ['request', '**kwargs'],
                                                                      '\n        Returns the ChangeList class for use on the changelist page.\n        '),
                                                                     ('get_object',
                                                                      ['request', 'object_id'],
                                                                      '\n        Returns an instance matching the primary key provided. ``None``  is\n        returned if no match is found (or the object_id failed validation\n        against the primary key field).\n        '),
                                                                     ('get_changelist_form',
                                                                      ['request', '**kwargs'],
                                                                      '\n        Returns a Form class for use in the Formset on the changelist page.\n        '),
                                                                     ('get_changelist_formset',
                                                                      ['request', '**kwargs'],
                                                                      '\n        Returns a FormSet class for use on the changelist page if list_editable\n        is used.\n        '),
                                                                     ('get_formsets',
                                                                      ['request', 'obj=None'],
                                                                      ''),
                                                                     ('get_paginator',
                                                                      ['request',
                                                                       'queryset',
                                                                       'per_page',
                                                                       'orphans=0',
                                                                       'allow_empty_first_page=True'],
                                                                      ''),
                                                                     ('log_addition',
                                                                      ['request', 'object'],
                                                                      '\n        Log that an object has been successfully added.\n\n        The default implementation creates an admin LogEntry object.\n        '),
                                                                     ('log_change',
                                                                      ['request',
                                                                       'object',
                                                                       'message'],
                                                                      '\n        Log that an object has been successfully changed.\n\n        The default implementation creates an admin LogEntry object.\n        '),
                                                                     ('log_deletion',
                                                                      ['request',
                                                                       'object',
                                                                       'object_repr'],
                                                                      '\n        Log that an object will be deleted. Note that this method is called\n        before the deletion.\n\n        The default implementation creates an admin LogEntry object.\n        '),
                                                                     ('action_checkbox',
                                                                      ['obj'],
                                                                      '\n        A list_display column containing a checkbox widget.\n        '),
                                                                     ('get_actions',
                                                                      ['request'],
                                                                      '\n        Return a dictionary mapping the names of all actions for this\n        ModelAdmin to a tuple of (callable, name, description) for each action.\n        '),
                                                                     ('get_action_choices',
                                                                      ['request',
                                                                       'default_choices=BLANK_CHOICE_DASH'],
                                                                      '\n        Return a list of choices for use in a form object.  Each choice is a\n        tuple (name, description).\n        '),
                                                                     ('get_action',
                                                                      ['action'],
                                                                      '\n        Return a given action from a parameter, which can either be a callable,\n        or the name of a method on the ModelAdmin.  Return is a tuple of\n        (callable, name, description).\n        '),
                                                                     ('construct_change_message',
                                                                      ['request',
                                                                       'form',
                                                                       'formsets'],
                                                                      '\n        Construct a change message from a changed object.\n        '),
                                                                     ('message_user',
                                                                      ['request', 'message'],
                                                                      '\n        Send a message to the user. The default implementation\n        posts a message using the django.contrib.messages backend.\n        '),
                                                                     ('save_form',
                                                                      ['request',
                                                                       'form',
                                                                       'change'],
                                                                      "\n        Given a ModelForm return an unsaved instance. ``change`` is True if\n        the object is being changed, and False if it's being added.\n        "),
                                                                     ('save_model',
                                                                      ['request',
                                                                       'obj',
                                                                       'form',
                                                                       'change'],
                                                                      '\n        Given a model instance save it to the database.\n        '),
                                                                     ('delete_model',
                                                                      ['request', 'obj'],
                                                                      '\n        Given a model instance delete it from the database.\n        '),
                                                                     ('save_formset',
                                                                      ['request',
                                                                       'form',
                                                                       'formset',
                                                                       'change'],
                                                                      '\n        Given an inline formset save it to the database.\n        '),
                                                                     ('render_change_form',
                                                                      ['request',
                                                                       'context',
                                                                       'add=False',
                                                                       'change=False',
                                                                       "form_url=''",
                                                                       'obj=None'],
                                                                      ''),
                                                                     ('response_add',
                                                                      ['request',
                                                                       'obj',
                                                                       "post_url_continue='../%s/'"],
                                                                      '\n        Determines the HttpResponse for the add_view stage.\n        '),
                                                                     ('response_change',
                                                                      ['request', 'obj'],
                                                                      '\n        Determines the HttpResponse for the change_view stage.\n        '),
                                                                     ('response_action',
                                                                      ['request', 'queryset'],
                                                                      '\n        Handle an admin action. This is called if a request is POSTed to the\n        changelist; it returns an HttpResponse if the action was handled, and\n        None otherwise.\n        '),
                                                                     ('add_view',
                                                                      ['request',
                                                                       "form_url=''",
                                                                       'extra_context=None'],
                                                                      "The 'add' admin view for this model."),
                                                                     ('change_view',
                                                                      ['request',
                                                                       'object_id',
                                                                       'extra_context=None'],
                                                                      "The 'change' admin view for this model."),
                                                                     ('changelist_view',
                                                                      ['request',
                                                                       'extra_context=None'],
                                                                      "The 'change list' admin view for this model."),
                                                                     ('delete_view',
                                                                      ['request',
                                                                       'object_id',
                                                                       'extra_context=None'],
                                                                      "The 'delete' admin view for this model."),
                                                                     ('history_view',
                                                                      ['request',
                                                                       'object_id',
                                                                       'extra_context=None'],
                                                                      "The 'history' admin view for this model.")],
                                                         'properties': ['list_display',
                                                                        'list_display_links',
                                                                        'list_filter',
                                                                        'list_select_related',
                                                                        'list_per_page',
                                                                        'list_editable',
                                                                        'search_fields',
                                                                        'date_hierarchy',
                                                                        'save_as',
                                                                        'save_on_top',
                                                                        'paginator',
                                                                        'inlines',
                                                                        'add_form_template',
                                                                        'change_form_template',
                                                                        'change_list_template',
                                                                        'delete_confirmation_template',
                                                                        'delete_selected_confirmation_template',
                                                                        'object_history_template',
                                                                        'actions',
                                                                        'action_form',
                                                                        'actions_on_top',
                                                                        'actions_on_bottom',
                                                                        'actions_selection_counter',
                                                                        'model',
                                                                        'opts',
                                                                        'admin_site',
                                                                        'inline_instances',
                                                                        'urls',
                                                                        'media']},
             'django.contrib.admin.options.StackedInline': {'bases': ['django.contrib.admin.options.InlineModelAdmin'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['template']},
             'django.contrib.admin.options.TabularInline': {'bases': ['django.contrib.admin.options.InlineModelAdmin'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['template']},
             'django.contrib.admin.sites.AdminSite': {'bases': ['object'],
                                                      'constructor': ['name=None',
                                                                      "app_name='admin'"],
                                                      'docstring': '\n    An AdminSite object encapsulates an instance of the Django admin application, ready\n    to be hooked in to your URLconf. Models are registered with the AdminSite using the\n    register() method, and the get_urls() method can then be used to access Django view\n    functions that present a full admin interface for the collection of registered\n    models.\n    ',
                                                      'methods': [('register',
                                                                   ['model_or_iterable',
                                                                    'admin_class=None',
                                                                    '**options'],
                                                                   "\n        Registers the given model(s) with the given admin class.\n\n        The model(s) should be Model classes, not instances.\n\n        If an admin class isn't given, it will use ModelAdmin (the default\n        admin options). If keyword arguments are given -- e.g., list_display --\n        they'll be applied as options to the admin class.\n\n        If a model is already registered, this will raise AlreadyRegistered.\n\n        If a model is abstract, this will raise ImproperlyConfigured.\n        "),
                                                                  ('unregister',
                                                                   ['model_or_iterable'],
                                                                   "\n        Unregisters the given model(s).\n\n        If a model isn't already registered, this will raise NotRegistered.\n        "),
                                                                  ('add_action',
                                                                   ['action', 'name=None'],
                                                                   '\n        Register an action to be available globally.\n        '),
                                                                  ('disable_action',
                                                                   ['name'],
                                                                   '\n        Disable a globally-registered action. Raises KeyError for invalid names.\n        '),
                                                                  ('get_action',
                                                                   ['name'],
                                                                   "\n        Explicitally get a registered global action wheather it's enabled or\n        not. Raises KeyError for invalid names.\n        "),
                                                                  ('has_permission',
                                                                   ['request'],
                                                                   '\n        Returns True if the given HttpRequest has permission to view\n        *at least one* page in the admin site.\n        '),
                                                                  ('check_dependencies',
                                                                   [],
                                                                   '\n        Check that all things needed to run the admin have been correctly installed.\n\n        The default implementation checks that LogEntry, ContentType and the\n        auth context processor are installed.\n        '),
                                                                  ('admin_view',
                                                                   ['view', 'cacheable=False'],
                                                                   "\n        Decorator to create an admin view attached to this ``AdminSite``. This\n        wraps the view and provides permission checking by calling\n        ``self.has_permission``.\n\n        You'll want to use this from within ``AdminSite.get_urls()``:\n\n            class MyAdminSite(AdminSite):\n\n                def get_urls(self):\n                    from django.conf.urls.defaults import patterns, url\n\n                    urls = super(MyAdminSite, self).get_urls()\n                    urls += patterns('',\n                        url(r'^my_view/$', self.admin_view(some_view))\n                    )\n                    return urls\n\n        By default, admin_views are marked non-cacheable using the\n        ``never_cache`` decorator. If the view can be safely cached, set\n        cacheable=True.\n        "),
                                                                  ('get_urls', [], ''),
                                                                  ('password_change',
                                                                   ['request'],
                                                                   '\n        Handles the "change password" task -- both form display and validation.\n        '),
                                                                  ('password_change_done',
                                                                   ['request',
                                                                    'extra_context=None'],
                                                                   '\n        Displays the "success" page after a password change.\n        '),
                                                                  ('i18n_javascript',
                                                                   ['request'],
                                                                   "\n        Displays the i18n JavaScript that the Django admin requires.\n\n        This takes into account the USE_I18N setting. If it's set to False, the\n        generated JavaScript will be leaner and faster.\n        "),
                                                                  ('logout',
                                                                   ['request',
                                                                    'extra_context=None'],
                                                                   '\n        Logs out the user for the given HttpRequest.\n\n        This should *not* assume the user is already logged in.\n        '),
                                                                  ('login',
                                                                   ['request',
                                                                    'extra_context=None'],
                                                                   '\n        Displays the login form for the given HttpRequest.\n        '),
                                                                  ('index',
                                                                   ['request',
                                                                    'extra_context=None'],
                                                                   '\n        Displays the main admin index page, which lists all of the installed\n        apps that have been registered in this site.\n        '),
                                                                  ('app_index',
                                                                   ['request',
                                                                    'app_label',
                                                                    'extra_context=None'],
                                                                   '')],
                                                      'properties': ['login_form',
                                                                     'index_template',
                                                                     'app_index_template',
                                                                     'login_template',
                                                                     'logout_template',
                                                                     'password_change_template',
                                                                     'password_change_done_template',
                                                                     '_registry',
                                                                     'root_path',
                                                                     'name',
                                                                     'app_name',
                                                                     '_actions',
                                                                     '_global_actions',
                                                                     'actions',
                                                                     'urls']},
             'django.contrib.admin.sites.AlreadyRegistered': {'bases': ['Exception'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': []},
             'django.contrib.admin.sites.NotRegistered': {'bases': ['Exception'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': []},
             'django.contrib.admin.templatetags.admin_list.ResultList': {'bases': ['list'],
                                                                         'constructor': ['form',
                                                                                         '*items'],
                                                                         'docstring': '',
                                                                         'methods': [],
                                                                         'properties': ['form']},
             'django.contrib.admin.templatetags.log.AdminLogNode': {'bases': ['django.template.Node'],
                                                                    'constructor': ['limit',
                                                                                    'varname',
                                                                                    'user'],
                                                                    'docstring': '',
                                                                    'methods': [('__repr__',
                                                                                 [],
                                                                                 ''),
                                                                                ('render',
                                                                                 ['context'],
                                                                                 '')],
                                                                    'properties': ['limit',
                                                                                   'varname',
                                                                                   'user']},
             'django.contrib.admin.templatetags.log.DoGetAdminLog': {'bases': [],
                                                                     'constructor': ['tag_name'],
                                                                     'docstring': '\n    Populates a template variable with the admin log for the given criteria.\n\n    Usage::\n\n        {% get_admin_log [limit] as [varname] for_user [context_var_containing_user_obj] %}\n\n    Examples::\n\n        {% get_admin_log 10 as admin_log for_user 23 %}\n        {% get_admin_log 10 as admin_log for_user user %}\n        {% get_admin_log 10 as admin_log %}\n\n    Note that ``context_var_containing_user_obj`` can be a hard-coded integer\n    (user ID) or the name of a template context variable containing the user\n    object whose ID you want.\n    ',
                                                                     'methods': [('__call__',
                                                                                  ['parser',
                                                                                   'token'],
                                                                                  '')],
                                                                     'properties': ['tag_name']},
             'django.contrib.admin.util.NestedObjects': {'bases': ['django.db.models.deletion.Collector'],
                                                         'constructor': ['*args', '**kwargs'],
                                                         'docstring': '',
                                                         'methods': [('add_edge',
                                                                      ['source', 'target'],
                                                                      ''),
                                                                     ('collect',
                                                                      ['objs',
                                                                       'source_attr=None',
                                                                       '**kwargs'],
                                                                      ''),
                                                                     ('related_objects',
                                                                      ['related', 'objs'],
                                                                      ''),
                                                                     ('_nested',
                                                                      ['obj',
                                                                       'seen',
                                                                       'format_callback'],
                                                                      ''),
                                                                     ('nested',
                                                                      ['format_callback=None'],
                                                                      '\n        Return the graph as a nested list.\n\n        ')],
                                                         'properties': ['edges', 'protected']},
             'django.contrib.admin.util.NotRelationField': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': []},
             'django.contrib.admin.views.main.ChangeList': {'bases': ['object'],
                                                            'constructor': ['request',
                                                                            'model',
                                                                            'list_display',
                                                                            'list_display_links',
                                                                            'list_filter',
                                                                            'date_hierarchy',
                                                                            'search_fields',
                                                                            'list_select_related',
                                                                            'list_per_page',
                                                                            'list_editable',
                                                                            'model_admin'],
                                                            'docstring': '',
                                                            'methods': [('get_filters',
                                                                         ['request'],
                                                                         ''),
                                                                        ('get_query_string',
                                                                         ['new_params=None',
                                                                          'remove=None'],
                                                                         ''),
                                                                        ('get_results',
                                                                         ['request'],
                                                                         ''),
                                                                        ('get_ordering',
                                                                         [],
                                                                         ''),
                                                                        ('get_query_set',
                                                                         [],
                                                                         ''),
                                                                        ('url_for_result',
                                                                         ['result'],
                                                                         '')],
                                                            'properties': ['model',
                                                                           'opts',
                                                                           'lookup_opts',
                                                                           'root_query_set',
                                                                           'list_display',
                                                                           'list_display_links',
                                                                           'list_filter',
                                                                           'date_hierarchy',
                                                                           'search_fields',
                                                                           'list_select_related',
                                                                           'list_per_page',
                                                                           'model_admin',
                                                                           'page_num',
                                                                           'show_all',
                                                                           'is_popup',
                                                                           'to_field',
                                                                           'params',
                                                                           'list_editable',
                                                                           'order_field',
                                                                           'order_type',
                                                                           'query',
                                                                           'query_set',
                                                                           'title',
                                                                           'filter_specs',
                                                                           'has_filters',
                                                                           'pk_attname',
                                                                           'result_count',
                                                                           'full_result_count',
                                                                           'result_list',
                                                                           'can_show_all',
                                                                           'multi_page',
                                                                           'paginator']},
             'django.contrib.admin.widgets.AdminCommaSeparatedIntegerFieldWidget': {'bases': ['django.forms.TextInput'],
                                                                                    'constructor': ['attrs=None'],
                                                                                    'docstring': '',
                                                                                    'methods': [],
                                                                                    'properties': []},
             'django.contrib.admin.widgets.AdminDateWidget': {'bases': ['django.forms.DateInput'],
                                                              'constructor': ['attrs={}',
                                                                              'format=None'],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': []},
             'django.contrib.admin.widgets.AdminFileWidget': {'bases': ['django.forms.ClearableFileInput'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['template_with_initial',
                                                                             'template_with_clear']},
             'django.contrib.admin.widgets.AdminIntegerFieldWidget': {'bases': ['django.forms.TextInput'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.admin.widgets.AdminRadioFieldRenderer': {'bases': ['django.forms.widgets.RadioFieldRenderer'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('render',
                                                                                   [],
                                                                                   'Outputs a <ul> for this set of radio fields.')],
                                                                      'properties': []},
             'django.contrib.admin.widgets.AdminRadioSelect': {'bases': ['django.forms.RadioSelect'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['renderer']},
             'django.contrib.admin.widgets.AdminSplitDateTime': {'bases': ['django.forms.SplitDateTimeWidget'],
                                                                 'constructor': ['attrs=None'],
                                                                 'docstring': '\n    A SplitDateTime Widget that has some admin-specific styling.\n    ',
                                                                 'methods': [('format_output',
                                                                              ['rendered_widgets'],
                                                                              '')],
                                                                 'properties': []},
             'django.contrib.admin.widgets.AdminTextInputWidget': {'bases': ['django.forms.TextInput'],
                                                                   'constructor': ['attrs=None'],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.admin.widgets.AdminTextareaWidget': {'bases': ['django.forms.Textarea'],
                                                                  'constructor': ['attrs=None'],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': []},
             'django.contrib.admin.widgets.AdminTimeWidget': {'bases': ['django.forms.TimeInput'],
                                                              'constructor': ['attrs={}',
                                                                              'format=None'],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': []},
             'django.contrib.admin.widgets.AdminURLFieldWidget': {'bases': ['django.forms.TextInput'],
                                                                  'constructor': ['attrs=None'],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': []},
             'django.contrib.admin.widgets.FilteredSelectMultiple': {'bases': ['django.forms.SelectMultiple'],
                                                                     'constructor': ['verbose_name',
                                                                                     'is_stacked',
                                                                                     'attrs=None',
                                                                                     'choices=()'],
                                                                     'docstring': '\n    A SelectMultiple with a JavaScript filter interface.\n\n    Note that the resulting JavaScript assumes that the jsi18n\n    catalog has been loaded in the page\n    ',
                                                                     'methods': [('render',
                                                                                  ['name',
                                                                                   'value',
                                                                                   'attrs=None',
                                                                                   'choices=()'],
                                                                                  '')],
                                                                     'properties': ['verbose_name',
                                                                                    'is_stacked']},
             'django.contrib.admin.widgets.ForeignKeyRawIdWidget': {'bases': ['django.forms.TextInput'],
                                                                    'constructor': ['rel',
                                                                                    'attrs=None',
                                                                                    'using=None'],
                                                                    'docstring': '\n    A Widget for displaying ForeignKeys in the "raw_id" interface rather than\n    in a <select> box.\n    ',
                                                                    'methods': [('render',
                                                                                 ['name',
                                                                                  'value',
                                                                                  'attrs=None'],
                                                                                 ''),
                                                                                ('base_url_parameters',
                                                                                 [],
                                                                                 ''),
                                                                                ('url_parameters',
                                                                                 [],
                                                                                 ''),
                                                                                ('label_for_value',
                                                                                 ['value'],
                                                                                 '')],
                                                                    'properties': ['rel', 'db']},
             'django.contrib.admin.widgets.ManyToManyRawIdWidget': {'bases': ['django.contrib.admin.widgets.ForeignKeyRawIdWidget'],
                                                                    'constructor': [],
                                                                    'docstring': '\n    A Widget for displaying ManyToMany ids in the "raw_id" interface rather than\n    in a <select multiple> box.\n    ',
                                                                    'methods': [('render',
                                                                                 ['name',
                                                                                  'value',
                                                                                  'attrs=None'],
                                                                                 ''),
                                                                                ('url_parameters',
                                                                                 [],
                                                                                 ''),
                                                                                ('label_for_value',
                                                                                 ['value'],
                                                                                 ''),
                                                                                ('value_from_datadict',
                                                                                 ['data',
                                                                                  'files',
                                                                                  'name'],
                                                                                 ''),
                                                                                ('_has_changed',
                                                                                 ['initial',
                                                                                  'data'],
                                                                                 '')],
                                                                    'properties': []},
             'django.contrib.admin.widgets.RelatedFieldWidgetWrapper': {'bases': ['django.forms.Widget'],
                                                                        'constructor': ['widget',
                                                                                        'rel',
                                                                                        'admin_site',
                                                                                        'can_add_related=None'],
                                                                        'docstring': '\n    This class is a wrapper to a given widget to add the add icon for the\n    admin interface.\n    ',
                                                                        'methods': [('__deepcopy__',
                                                                                     ['memo'],
                                                                                     ''),
                                                                                    ('_media',
                                                                                     [],
                                                                                     ''),
                                                                                    ('render',
                                                                                     ['name',
                                                                                      'value',
                                                                                      '*args',
                                                                                      '**kwargs'],
                                                                                     ''),
                                                                                    ('build_attrs',
                                                                                     ['extra_attrs=None',
                                                                                      '**kwargs'],
                                                                                     'Helper function for building an attribute dictionary.'),
                                                                                    ('value_from_datadict',
                                                                                     ['data',
                                                                                      'files',
                                                                                      'name'],
                                                                                     ''),
                                                                                    ('_has_changed',
                                                                                     ['initial',
                                                                                      'data'],
                                                                                     ''),
                                                                                    ('id_for_label',
                                                                                     ['id_'],
                                                                                     '')],
                                                                        'properties': ['is_hidden',
                                                                                       'needs_multipart_form',
                                                                                       'attrs',
                                                                                       'choices',
                                                                                       'widget',
                                                                                       'rel',
                                                                                       'can_add_related',
                                                                                       'admin_site',
                                                                                       'media']},
             'django.contrib.admindocs.tests.TestFieldType': {'bases': ['django.utils.unittest.TestCase'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('setUp', [], ''),
                                                                          ('test_field_name',
                                                                           [],
                                                                           ''),
                                                                          ('test_builtin_fields',
                                                                           [],
                                                                           ''),
                                                                          ('test_custom_fields',
                                                                           [],
                                                                           '')],
                                                              'properties': []},
             'django.contrib.admindocs.tests.fields.CustomField': {'bases': ['django.db.models.Field'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['description']},
             'django.contrib.admindocs.tests.fields.DescriptionLackingField': {'bases': ['django.db.models.Field'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [],
                                                                               'properties': []},
             'django.contrib.admindocs.views.GenericSite': {'bases': ['object'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['domain', 'name']},
             'django.contrib.auth.admin.GroupAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['search_fields',
                                                                     'ordering',
                                                                     'filter_horizontal']},
             'django.contrib.auth.admin.UserAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('__call__',
                                                                  ['request', 'url'],
                                                                  ''),
                                                                 ('get_fieldsets',
                                                                  ['request', 'obj=None'],
                                                                  ''),
                                                                 ('get_form',
                                                                  ['request',
                                                                   'obj=None',
                                                                   '**kwargs'],
                                                                  '\n        Use special form during user creation\n        '),
                                                                 ('get_urls', [], ''),
                                                                 ('add_view',
                                                                  ['request',
                                                                   "form_url=''",
                                                                   'extra_context=None'],
                                                                  ''),
                                                                 ('user_change_password',
                                                                  ['request', 'id'],
                                                                  ''),
                                                                 ('response_add',
                                                                  ['request',
                                                                   'obj',
                                                                   "post_url_continue='../%s/'"],
                                                                  '\n        Determines the HttpResponse for the add_view stage. It mostly defers to\n        its superclass implementation but is customized because the User model\n        has a slightly different workflow.\n        ')],
                                                     'properties': ['add_form_template',
                                                                    'change_user_password_template',
                                                                    'fieldsets',
                                                                    'add_fieldsets',
                                                                    'form',
                                                                    'add_form',
                                                                    'change_password_form',
                                                                    'list_display',
                                                                    'list_filter',
                                                                    'search_fields',
                                                                    'ordering',
                                                                    'filter_horizontal']},
             'django.contrib.auth.backends.ModelBackend': {'bases': ['object'],
                                                           'constructor': [],
                                                           'docstring': '\n    Authenticates against django.contrib.auth.models.User.\n    ',
                                                           'methods': [('authenticate',
                                                                        ['username=None',
                                                                         'password=None'],
                                                                        ''),
                                                                       ('get_group_permissions',
                                                                        ['user_obj'],
                                                                        '\n        Returns a set of permission strings that this user has through his/her\n        groups.\n        '),
                                                                       ('get_all_permissions',
                                                                        ['user_obj'],
                                                                        ''),
                                                                       ('has_perm',
                                                                        ['user_obj', 'perm'],
                                                                        ''),
                                                                       ('has_module_perms',
                                                                        ['user_obj',
                                                                         'app_label'],
                                                                        '\n        Returns True if user_obj has any permissions in the given app_label.\n        '),
                                                                       ('get_user',
                                                                        ['user_id'],
                                                                        '')],
                                                           'properties': ['supports_object_permissions',
                                                                          'supports_anonymous_user',
                                                                          'supports_inactive_user']},
             'django.contrib.auth.backends.RemoteUserBackend': {'bases': ['django.contrib.auth.backends.ModelBackend'],
                                                                'constructor': [],
                                                                'docstring': "\n    This backend is to be used in conjunction with the ``RemoteUserMiddleware``\n    found in the middleware module of this package, and is used when the server\n    is handling authentication outside of Django.\n\n    By default, the ``authenticate`` method creates ``User`` objects for\n    usernames that don't already exist in the database.  Subclasses can disable\n    this behavior by setting the ``create_unknown_user`` attribute to\n    ``False``.\n    ",
                                                                'methods': [('authenticate',
                                                                             ['remote_user'],
                                                                             '\n        The username passed as ``remote_user`` is considered trusted.  This\n        method simply returns the ``User`` object with the given username,\n        creating a new ``User`` object if ``create_unknown_user`` is ``True``.\n\n        Returns None if ``create_unknown_user`` is ``False`` and a ``User``\n        object with the given username is not found in the database.\n        '),
                                                                            ('clean_username',
                                                                             ['username'],
                                                                             '\n        Performs any cleaning on the "username" prior to using it to get or\n        create the user object.  Returns the cleaned username.\n\n        By default, returns the username unchanged.\n        '),
                                                                            ('configure_user',
                                                                             ['user'],
                                                                             '\n        Configures a user after creation and returns the updated user.\n\n        By default, returns the user unmodified.\n        ')],
                                                                'properties': ['create_unknown_user']},
             'django.contrib.auth.context_processors.PermLookupDict': {'bases': ['object'],
                                                                       'constructor': ['user',
                                                                                       'module_name'],
                                                                       'docstring': '',
                                                                       'methods': [('__repr__',
                                                                                    [],
                                                                                    ''),
                                                                                   ('__getitem__',
                                                                                    ['perm_name'],
                                                                                    ''),
                                                                                   ('__nonzero__',
                                                                                    [],
                                                                                    '')],
                                                                       'properties': ['user',
                                                                                      'module_name']},
             'django.contrib.auth.context_processors.PermWrapper': {'bases': ['object'],
                                                                    'constructor': ['user'],
                                                                    'docstring': '',
                                                                    'methods': [('__getitem__',
                                                                                 ['module_name'],
                                                                                 ''),
                                                                                ('__iter__',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['user']},
             'django.contrib.auth.forms.AdminPasswordChangeForm': {'bases': ['django.forms.Form'],
                                                                   'constructor': ['user',
                                                                                   '*args',
                                                                                   '**kwargs'],
                                                                   'docstring': '\n    A form used to change the password of a user in the admin interface.\n    ',
                                                                   'methods': [('clean_password2',
                                                                                [],
                                                                                ''),
                                                                               ('save',
                                                                                ['commit=True'],
                                                                                '\n        Saves the new password.\n        ')],
                                                                   'properties': ['password1',
                                                                                  'password2',
                                                                                  'user']},
             'django.contrib.auth.forms.AuthenticationForm': {'bases': ['django.forms.Form'],
                                                              'constructor': ['request=None',
                                                                              '*args',
                                                                              '**kwargs'],
                                                              'docstring': '\n    Base class for authenticating users. Extend this to get a form that accepts\n    username/password logins.\n    ',
                                                              'methods': [('clean', [], ''),
                                                                          ('check_for_test_cookie',
                                                                           [],
                                                                           ''),
                                                                          ('get_user_id',
                                                                           [],
                                                                           ''),
                                                                          ('get_user', [], '')],
                                                              'properties': ['username',
                                                                             'password',
                                                                             'request',
                                                                             'user_cache']},
             'django.contrib.auth.forms.PasswordChangeForm': {'bases': ['django.contrib.auth.forms.SetPasswordForm'],
                                                              'constructor': [],
                                                              'docstring': '\n    A form that lets a user change his/her password by entering\n    their old password.\n    ',
                                                              'methods': [('clean_old_password',
                                                                           [],
                                                                           '\n        Validates that the old_password field is correct.\n        ')],
                                                              'properties': ['old_password']},
             'django.contrib.auth.forms.PasswordResetForm': {'bases': ['django.forms.Form'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('clean_email',
                                                                          [],
                                                                          '\n        Validates that an active user exists with the given e-mail address.\n        '),
                                                                         ('save',
                                                                          ['domain_override=None',
                                                                           "email_template_name='registration/password_reset_email.html'",
                                                                           'use_https=False',
                                                                           'token_generator=default_token_generator',
                                                                           'from_email=None',
                                                                           'request=None'],
                                                                          '\n        Generates a one-use only link for resetting password and sends to the user\n        ')],
                                                             'properties': ['email',
                                                                            'users_cache']},
             'django.contrib.auth.forms.SetPasswordForm': {'bases': ['django.forms.Form'],
                                                           'constructor': ['user',
                                                                           '*args',
                                                                           '**kwargs'],
                                                           'docstring': '\n    A form that lets a user change set his/her password without\n    entering the old password\n    ',
                                                           'methods': [('clean_new_password2',
                                                                        [],
                                                                        ''),
                                                                       ('save',
                                                                        ['commit=True'],
                                                                        '')],
                                                           'properties': ['new_password1',
                                                                          'new_password2',
                                                                          'user']},
             'django.contrib.auth.forms.UserChangeForm': {'bases': ['django.forms.ModelForm'],
                                                          'constructor': ['*args', '**kwargs'],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['username']},
             'django.contrib.auth.forms.UserCreationForm': {'bases': ['django.forms.ModelForm'],
                                                            'constructor': [],
                                                            'docstring': '\n    A form that creates a user, with no privileges, from the given username and password.\n    ',
                                                            'methods': [('clean_username',
                                                                         [],
                                                                         ''),
                                                                        ('clean_password2',
                                                                         [],
                                                                         ''),
                                                                        ('save',
                                                                         ['commit=True'],
                                                                         '')],
                                                            'properties': ['username',
                                                                           'password1',
                                                                           'password2']},
             'django.contrib.auth.management.commands.changepassword.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('_get_pass',
                                                                                             ["prompt='Password: '"],
                                                                                             ''),
                                                                                            ('handle',
                                                                                             ['*args',
                                                                                              '**options'],
                                                                                             '')],
                                                                                'properties': ['help',
                                                                                               'requires_model_validation']},
             'django.contrib.auth.management.commands.createsuperuser.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                 'constructor': [],
                                                                                 'docstring': '',
                                                                                 'methods': [('handle',
                                                                                              ['*args',
                                                                                               '**options'],
                                                                                              '')],
                                                                                 'properties': ['option_list',
                                                                                                'help']},
             'django.contrib.auth.middleware.AuthenticationMiddleware': {'bases': ['object'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('process_request',
                                                                                      ['request'],
                                                                                      '')],
                                                                         'properties': []},
             'django.contrib.auth.middleware.LazyUser': {'bases': ['object'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('__get__',
                                                                      ['request',
                                                                       'obj_type=None'],
                                                                      '')],
                                                         'properties': []},
             'django.contrib.auth.middleware.RemoteUserMiddleware': {'bases': ['object'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    Middleware for utilizing Web-server-provided authentication.\n\n    If request.user is not authenticated, then this middleware attempts to\n    authenticate the username passed in the ``REMOTE_USER`` request header.\n    If authentication is successful, the user is automatically logged in to\n    persist the user in the session.\n\n    The header used is configurable and defaults to ``REMOTE_USER``.  Subclass\n    this class and change the ``header`` attribute if you need to use a\n    different header.\n    ',
                                                                     'methods': [('process_request',
                                                                                  ['request'],
                                                                                  ''),
                                                                                 ('clean_username',
                                                                                  ['username',
                                                                                   'request'],
                                                                                  '\n        Allows the backend to clean the username, if the backend defines a\n        clean_username method.\n        ')],
                                                                     'properties': ['header']},
             'django.contrib.auth.models.AnonymousUser': {'bases': ['object'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('__unicode__', [], ''),
                                                                      ('__str__', [], ''),
                                                                      ('__eq__', ['other'], ''),
                                                                      ('__ne__', ['other'], ''),
                                                                      ('__hash__', [], ''),
                                                                      ('save', [], ''),
                                                                      ('delete', [], ''),
                                                                      ('set_password',
                                                                       ['raw_password'],
                                                                       ''),
                                                                      ('check_password',
                                                                       ['raw_password'],
                                                                       ''),
                                                                      ('_get_groups', [], ''),
                                                                      ('_get_user_permissions',
                                                                       [],
                                                                       ''),
                                                                      ('get_group_permissions',
                                                                       ['obj=None'],
                                                                       ''),
                                                                      ('get_all_permissions',
                                                                       ['obj=None'],
                                                                       ''),
                                                                      ('has_perm',
                                                                       ['perm', 'obj=None'],
                                                                       ''),
                                                                      ('has_perms',
                                                                       ['perm_list',
                                                                        'obj=None'],
                                                                       ''),
                                                                      ('has_module_perms',
                                                                       ['module'],
                                                                       ''),
                                                                      ('get_and_delete_messages',
                                                                       [],
                                                                       ''),
                                                                      ('is_anonymous', [], ''),
                                                                      ('is_authenticated',
                                                                       [],
                                                                       '')],
                                                          'properties': ['id',
                                                                         'username',
                                                                         'is_staff',
                                                                         'is_active',
                                                                         'is_superuser',
                                                                         '_groups',
                                                                         '_user_permissions',
                                                                         'groups',
                                                                         'user_permissions']},
             'django.contrib.auth.models.Group': {'bases': ['django.db.models.Model'],
                                                  'constructor': [],
                                                  'docstring': "Groups are a generic way of categorizing users to apply permissions, or some other label, to those users. A user can belong to any number of groups.\n\n    A user in a group automatically has all the permissions granted to that group. For example, if the group Site editors has the permission can_edit_home_page, any user in that group will have that permission.\n\n    Beyond permissions, groups are a convenient way to categorize users to apply some label, or extended functionality, to them. For example, you could create a group 'Special users', and you could write code that would do special things to those users -- such as giving them access to a members-only portion of your site, or sending them members-only e-mail messages.\n    ",
                                                  'methods': [('__unicode__', [], '')],
                                                  'properties': ['name', 'permissions']},
             'django.contrib.auth.models.Message': {'bases': ['django.db.models.Model'],
                                                    'constructor': [],
                                                    'docstring': '\n    The message system is a lightweight way to queue messages for given\n    users. A message is associated with a User instance (so it is only\n    applicable for registered users). There\'s no concept of expiration or\n    timestamps. Messages are created by the Django admin after successful\n    actions. For example, "The poll Foo was created successfully." is a\n    message.\n    ',
                                                    'methods': [('__unicode__', [], '')],
                                                    'properties': ['user', 'message']},
             'django.contrib.auth.models.Permission': {'bases': ['django.db.models.Model'],
                                                       'constructor': [],
                                                       'docstring': 'The permissions system provides a way to assign permissions to specific users and groups of users.\n\n    The permission system is used by the Django admin site, but may also be useful in your own code. The Django admin site uses permissions as follows:\n\n        - The "add" permission limits the user\'s ability to view the "add" form and add an object.\n        - The "change" permission limits a user\'s ability to view the change list, view the "change" form and change an object.\n        - The "delete" permission limits the ability to delete an object.\n\n    Permissions are set globally per type of object, not per specific object instance. It is possible to say "Mary may change news stories," but it\'s not currently possible to say "Mary may change news stories, but only the ones she created herself" or "Mary may only change news stories that have a certain status or publication date."\n\n    Three basic permissions -- add, change and delete -- are automatically created for each Django model.\n    ',
                                                       'methods': [('__unicode__', [], ''),
                                                                   ('natural_key', [], '')],
                                                       'properties': ['name',
                                                                      'content_type',
                                                                      'codename',
                                                                      'objects']},
             'django.contrib.auth.models.PermissionManager': {'bases': ['django.db.models.Manager'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('get_by_natural_key',
                                                                           ['codename',
                                                                            'app_label',
                                                                            'model'],
                                                                           '')],
                                                              'properties': []},
             'django.contrib.auth.models.SiteProfileNotAvailable': {'bases': ['Exception'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.auth.models.User': {'bases': ['django.db.models.Model'],
                                                 'constructor': [],
                                                 'docstring': '\n    Users within the Django authentication system are represented by this model.\n\n    Username and password are required. Other fields are optional.\n    ',
                                                 'methods': [('__unicode__', [], ''),
                                                             ('get_absolute_url', [], ''),
                                                             ('is_anonymous',
                                                              [],
                                                              '\n        Always returns False. This is a way of comparing User objects to\n        anonymous users.\n        '),
                                                             ('is_authenticated',
                                                              [],
                                                              '\n        Always return True. This is a way to tell if the user has been\n        authenticated in templates.\n        '),
                                                             ('get_full_name',
                                                              [],
                                                              'Returns the first_name plus the last_name, with a space in between.'),
                                                             ('set_password',
                                                              ['raw_password'],
                                                              ''),
                                                             ('check_password',
                                                              ['raw_password'],
                                                              '\n        Returns a boolean of whether the raw_password was correct. Handles\n        encryption formats behind the scenes.\n        '),
                                                             ('set_unusable_password', [], ''),
                                                             ('has_usable_password', [], ''),
                                                             ('get_group_permissions',
                                                              ['obj=None'],
                                                              '\n        Returns a list of permission strings that this user has through\n        his/her groups. This method queries all available auth backends.\n        If an object is passed in, only permissions matching this object\n        are returned.\n        '),
                                                             ('get_all_permissions',
                                                              ['obj=None'],
                                                              ''),
                                                             ('has_perm',
                                                              ['perm', 'obj=None'],
                                                              '\n        Returns True if the user has the specified permission. This method\n        queries all available auth backends, but returns immediately if any\n        backend returns True. Thus, a user who has permission from a single\n        auth backend is assumed to have permission in general. If an object\n        is provided, permissions for this specific object are checked.\n        '),
                                                             ('has_perms',
                                                              ['perm_list', 'obj=None'],
                                                              '\n        Returns True if the user has each of the specified permissions.\n        If object is passed, it checks if the user has all required perms\n        for this object.\n        '),
                                                             ('has_module_perms',
                                                              ['app_label'],
                                                              '\n        Returns True if the user has any permissions in the given app\n        label. Uses pretty much the same logic as has_perm, above.\n        '),
                                                             ('get_and_delete_messages',
                                                              [],
                                                              ''),
                                                             ('email_user',
                                                              ['subject',
                                                               'message',
                                                               'from_email=None'],
                                                              'Sends an e-mail to this User.'),
                                                             ('get_profile',
                                                              [],
                                                              '\n        Returns site-specific profile for this user. Raises\n        SiteProfileNotAvailable if this site does not allow profiles.\n        '),
                                                             ('_get_message_set', [], '')],
                                                 'properties': ['username',
                                                                'first_name',
                                                                'last_name',
                                                                'email',
                                                                'password',
                                                                'is_staff',
                                                                'is_active',
                                                                'is_superuser',
                                                                'last_login',
                                                                'date_joined',
                                                                'groups',
                                                                'user_permissions',
                                                                'objects',
                                                                '_profile_cache',
                                                                'message_set']},
             'django.contrib.auth.models.UserManager': {'bases': ['django.db.models.Manager'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('create_user',
                                                                     ['username',
                                                                      'email',
                                                                      'password=None'],
                                                                     '\n        Creates and saves a User with the given username, e-mail and password.\n        '),
                                                                    ('create_superuser',
                                                                     ['username',
                                                                      'email',
                                                                      'password'],
                                                                     ''),
                                                                    ('make_random_password',
                                                                     ['length=10',
                                                                      "allowed_chars='abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789'"],
                                                                     'Generates a random password with the given length and given allowed_chars')],
                                                        'properties': []},
             'django.contrib.auth.tests.auth_backends.AnonymousUserBackend': {'bases': ['django.contrib.auth.tests.auth_backends.SimpleRowlevelBackend'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [],
                                                                              'properties': ['supports_anonymous_user',
                                                                                             'supports_inactive_user']},
             'django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest': {'bases': ['django.test.TestCase'],
                                                                                  'constructor': [],
                                                                                  'docstring': "\n    Tests for AnonymousUser delegating to backend if it has 'supports_anonymous_user' = True\n    ",
                                                                                  'methods': [('setUp',
                                                                                               [],
                                                                                               ''),
                                                                                              ('tearDown',
                                                                                               [],
                                                                                               ''),
                                                                                              ('test_has_perm',
                                                                                               [],
                                                                                               ''),
                                                                                              ('test_has_perms',
                                                                                               [],
                                                                                               ''),
                                                                                              ('test_has_module_perms',
                                                                                               [],
                                                                                               ''),
                                                                                              ('test_get_all_permissions',
                                                                                               [],
                                                                                               '')],
                                                                                  'properties': ['backend',
                                                                                                 'curr_auth',
                                                                                                 'user1']},
             'django.contrib.auth.tests.auth_backends.BackendTest': {'bases': ['django.test.TestCase'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('setUp',
                                                                                  [],
                                                                                  ''),
                                                                                 ('tearDown',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_has_perm',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_custom_perms',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_has_no_object_perm',
                                                                                  [],
                                                                                  'Regressiontest for #12462'),
                                                                                 ('test_get_all_superuser_permissions',
                                                                                  [],
                                                                                  'A superuser has all permissions. Refs #14795')],
                                                                     'properties': ['backend',
                                                                                    'curr_auth']},
             'django.contrib.auth.tests.auth_backends.InActiveUserBackend': {'bases': ['django.contrib.auth.tests.auth_backends.SimpleRowlevelBackend'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [],
                                                                             'properties': ['supports_anonymous_user',
                                                                                            'supports_inactive_user']},
             'django.contrib.auth.tests.auth_backends.InActiveUserBackendTest': {'bases': ['django.test.TestCase'],
                                                                                 'constructor': [],
                                                                                 'docstring': "\n    Tests for a inactive user delegating to backend if it has 'supports_inactive_user' = True\n    ",
                                                                                 'methods': [('setUp',
                                                                                              [],
                                                                                              ''),
                                                                                             ('tearDown',
                                                                                              [],
                                                                                              ''),
                                                                                             ('test_has_perm',
                                                                                              [],
                                                                                              ''),
                                                                                             ('test_has_module_perms',
                                                                                              [],
                                                                                              '')],
                                                                                 'properties': ['backend',
                                                                                                'curr_auth',
                                                                                                'user1']},
             'django.contrib.auth.tests.auth_backends.NoAnonymousUserBackend': {'bases': ['django.contrib.auth.tests.auth_backends.SimpleRowlevelBackend'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [],
                                                                                'properties': ['supports_anonymous_user',
                                                                                               'supports_inactive_user']},
             'django.contrib.auth.tests.auth_backends.NoAnonymousUserBackendTest': {'bases': ['django.test.TestCase'],
                                                                                    'constructor': [],
                                                                                    'docstring': "\n    Tests that AnonymousUser does not delegate to backend if it has 'supports_anonymous_user' = False\n    ",
                                                                                    'methods': [('setUp',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('tearDown',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('test_has_perm',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('test_has_perms',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('test_has_module_perms',
                                                                                                 [],
                                                                                                 ''),
                                                                                                ('test_get_all_permissions',
                                                                                                 [],
                                                                                                 '')],
                                                                                    'properties': ['backend',
                                                                                                   'curr_auth',
                                                                                                   'user1']},
             'django.contrib.auth.tests.auth_backends.NoBackendsTest': {'bases': ['django.test.TestCase'],
                                                                        'constructor': [],
                                                                        'docstring': '\n    Tests that an appropriate error is raised if no auth backends are provided.\n    ',
                                                                        'methods': [('setUp',
                                                                                     [],
                                                                                     ''),
                                                                                    ('tearDown',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test_raises_exception',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': ['old_AUTHENTICATION_BACKENDS',
                                                                                       'user']},
             'django.contrib.auth.tests.auth_backends.NoInActiveUserBackend': {'bases': ['django.contrib.auth.tests.auth_backends.SimpleRowlevelBackend'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [],
                                                                               'properties': ['supports_anonymous_user',
                                                                                              'supports_inactive_user']},
             'django.contrib.auth.tests.auth_backends.NoInActiveUserBackendTest': {'bases': ['django.test.TestCase'],
                                                                                   'constructor': [],
                                                                                   'docstring': "\n    Tests that an inactive user does not delegate to backend if it has 'supports_inactive_user' = False\n    ",
                                                                                   'methods': [('setUp',
                                                                                                [],
                                                                                                ''),
                                                                                               ('tearDown',
                                                                                                [],
                                                                                                ''),
                                                                                               ('test_has_perm',
                                                                                                [],
                                                                                                ''),
                                                                                               ('test_has_module_perms',
                                                                                                [],
                                                                                                '')],
                                                                                   'properties': ['backend',
                                                                                                  'curr_auth',
                                                                                                  'user1']},
             'django.contrib.auth.tests.auth_backends.RowlevelBackendTest': {'bases': ['django.test.TestCase'],
                                                                             'constructor': [],
                                                                             'docstring': '\n    Tests for auth backend that supports object level permissions\n    ',
                                                                             'methods': [('setUp',
                                                                                          [],
                                                                                          ''),
                                                                                         ('tearDown',
                                                                                          [],
                                                                                          ''),
                                                                                         ('test_has_perm',
                                                                                          [],
                                                                                          ''),
                                                                                         ('test_get_all_permissions',
                                                                                          [],
                                                                                          ''),
                                                                                         ('test_get_group_permissions',
                                                                                          [],
                                                                                          '')],
                                                                             'properties': ['backend',
                                                                                            'curr_auth',
                                                                                            'user1',
                                                                                            'user2',
                                                                                            'user3']},
             'django.contrib.auth.tests.auth_backends.SimpleRowlevelBackend': {'bases': ['object'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('has_perm',
                                                                                            ['user',
                                                                                             'perm',
                                                                                             'obj=None'],
                                                                                            ''),
                                                                                           ('has_module_perms',
                                                                                            ['user',
                                                                                             'app_label'],
                                                                                            ''),
                                                                                           ('get_all_permissions',
                                                                                            ['user',
                                                                                             'obj=None'],
                                                                                            ''),
                                                                                           ('get_group_permissions',
                                                                                            ['user',
                                                                                             'obj=None'],
                                                                                            '')],
                                                                               'properties': ['supports_object_permissions',
                                                                                              'supports_inactive_user']},
             'django.contrib.auth.tests.auth_backends.TestObj': {'bases': ['object'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': []},
             'django.contrib.auth.tests.basic.BasicTestCase': {'bases': ['django.test.TestCase'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('test_user',
                                                                            [],
                                                                            'Check that users can be created and can set their password'),
                                                                           ('test_anonymous_user',
                                                                            [],
                                                                            'Check the properties of the anonymous user'),
                                                                           ('test_superuser',
                                                                            [],
                                                                            'Check the creation and properties of a superuser'),
                                                                           ('test_createsuperuser_management_command',
                                                                            [],
                                                                            'Check the operation of the createsuperuser management command')],
                                                               'properties': []},
             'django.contrib.auth.tests.decorators.LoginRequiredTestCase': {'bases': ['django.contrib.auth.tests.views.AuthViewsTestCase'],
                                                                            'constructor': [],
                                                                            'docstring': '\n    Tests the login_required decorators\n    ',
                                                                            'methods': [('testCallable',
                                                                                         [],
                                                                                         '\n        Check that login_required is assignable to callable objects.\n        '),
                                                                                        ('testView',
                                                                                         [],
                                                                                         '\n        Check that login_required is assignable to normal views.\n        '),
                                                                                        ('testLoginRequired',
                                                                                         ["view_url='/login_required/'",
                                                                                          'login_url=settings.LOGIN_URL'],
                                                                                         '\n        Check that login_required works on a simple view wrapped in a\n        login_required decorator.\n        '),
                                                                                        ('testLoginRequiredNextUrl',
                                                                                         [],
                                                                                         '\n        Check that login_required works on a simple view wrapped in a\n        login_required decorator with a login_url set.\n        ')],
                                                                            'properties': ['urls']},
             'django.contrib.auth.tests.forms.AuthenticationFormTest': {'bases': ['django.test.TestCase'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('test_invalid_username',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test_inactive_user',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test_success',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': ['fixtures']},
             'django.contrib.auth.tests.forms.PasswordChangeFormTest': {'bases': ['django.test.TestCase'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('test_incorrect_password',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test_password_verification',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test_success',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test_field_order',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': ['fixtures']},
             'django.contrib.auth.tests.forms.PasswordResetFormTest': {'bases': ['django.test.TestCase'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [('create_dummy_user',
                                                                                    [],
                                                                                    'creates a user and returns a tuple\n        (user_object, username, email)\n        '),
                                                                                   ('test_invalid_email',
                                                                                    [],
                                                                                    ''),
                                                                                   ('test_nonexistant_email',
                                                                                    [],
                                                                                    ''),
                                                                                   ('test_cleaned_data',
                                                                                    [],
                                                                                    ''),
                                                                                   ('test_bug_5605',
                                                                                    [],
                                                                                    ''),
                                                                                   ('test_inactive_user',
                                                                                    [],
                                                                                    '')],
                                                                       'properties': ['fixtures']},
             'django.contrib.auth.tests.forms.SetPasswordFormTest': {'bases': ['django.test.TestCase'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('test_password_verification',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_success',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['fixtures']},
             'django.contrib.auth.tests.forms.UserChangeFormTest': {'bases': ['django.test.TestCase'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('test_username_validity',
                                                                                 [],
                                                                                 ''),
                                                                                ('test_bug_14242',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['fixtures']},
             'django.contrib.auth.tests.forms.UserCreationFormTest': {'bases': ['django.test.TestCase'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('test_user_already_exists',
                                                                                   [],
                                                                                   ''),
                                                                                  ('test_invalid_data',
                                                                                   [],
                                                                                   ''),
                                                                                  ('test_password_verification',
                                                                                   [],
                                                                                   ''),
                                                                                  ('test_both_passwords',
                                                                                   [],
                                                                                   ''),
                                                                                  ('test_success',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': ['fixtures']},
             'django.contrib.auth.tests.models.ProfileTestCase': {'bases': ['django.test.TestCase'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('setUp',
                                                                               [],
                                                                               'Backs up the AUTH_PROFILE_MODULE'),
                                                                              ('tearDown',
                                                                               [],
                                                                               'Restores the AUTH_PROFILE_MODULE -- if it was not set it is deleted,\n        otherwise the old value is restored'),
                                                                              ('test_site_profile_not_available',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['fixtures',
                                                                                 'old_AUTH_PROFILE_MODULE']},
             'django.contrib.auth.tests.permissions.TestAuthPermissions': {'bases': ['django.test.TestCase'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [('tearDown',
                                                                                        [],
                                                                                        ''),
                                                                                       ('test_permission_register_order',
                                                                                        [],
                                                                                        "Test that the order of registered permissions doesn't break")],
                                                                           'properties': []},
             'django.contrib.auth.tests.remote_user.CustomRemoteUserBackend': {'bases': ['django.contrib.auth.backends.RemoteUserBackend'],
                                                                               'constructor': [],
                                                                               'docstring': '\n    Backend that overrides RemoteUserBackend methods.\n    ',
                                                                               'methods': [('clean_username',
                                                                                            ['username'],
                                                                                            '\n        Grabs username before the @ character.\n        '),
                                                                                           ('configure_user',
                                                                                            ['user'],
                                                                                            "\n        Sets user's email address.\n        ")],
                                                                               'properties': []},
             'django.contrib.auth.tests.remote_user.RemoteUserCustomTest': {'bases': ['django.contrib.auth.tests.remote_user.RemoteUserTest'],
                                                                            'constructor': [],
                                                                            'docstring': '\n    Tests a custom RemoteUserBackend subclass that overrides the clean_username\n    and configure_user methods.\n    ',
                                                                            'methods': [('test_known_user',
                                                                                         [],
                                                                                         '\n        The strings passed in REMOTE_USER should be cleaned and the known users\n        should not have been configured with an email address.\n        '),
                                                                                        ('test_unknown_user',
                                                                                         [],
                                                                                         '\n        The unknown user created should be configured with an email address.\n        ')],
                                                                            'properties': ['backend',
                                                                                           'known_user',
                                                                                           'known_user2']},
             'django.contrib.auth.tests.remote_user.RemoteUserNoCreateBackend': {'bases': ['django.contrib.auth.backends.RemoteUserBackend'],
                                                                                 'constructor': [],
                                                                                 'docstring': "Backend that doesn't create unknown users.",
                                                                                 'methods': [],
                                                                                 'properties': ['create_unknown_user']},
             'django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest': {'bases': ['django.contrib.auth.tests.remote_user.RemoteUserTest'],
                                                                              'constructor': [],
                                                                              'docstring': "\n    Contains the same tests as RemoteUserTest, but using a custom auth backend\n    class that doesn't create unknown users.\n    ",
                                                                              'methods': [('test_unknown_user',
                                                                                           [],
                                                                                           '')],
                                                                              'properties': ['backend']},
             'django.contrib.auth.tests.remote_user.RemoteUserTest': {'bases': ['django.test.TestCase'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('setUp',
                                                                                   [],
                                                                                   ''),
                                                                                  ('test_no_remote_user',
                                                                                   [],
                                                                                   '\n        Tests requests where no remote user is specified and insures that no\n        users get created.\n        '),
                                                                                  ('test_unknown_user',
                                                                                   [],
                                                                                   '\n        Tests the case where the username passed in the header does not exist\n        as a User.\n        '),
                                                                                  ('test_known_user',
                                                                                   [],
                                                                                   '\n        Tests the case where the username passed in the header is a valid User.\n        '),
                                                                                  ('test_last_login',
                                                                                   [],
                                                                                   "\n        Tests that a user's last_login is set the first time they make a\n        request but not updated in subsequent requests with the same session.\n        "),
                                                                                  ('tearDown',
                                                                                   [],
                                                                                   'Restores settings to avoid breaking other tests.')],
                                                                      'properties': ['urls',
                                                                                     'middleware',
                                                                                     'backend',
                                                                                     'known_user',
                                                                                     'known_user2',
                                                                                     'curr_middleware',
                                                                                     'curr_auth']},
             'django.contrib.auth.tests.signals.SignalTestCase': {'bases': ['django.test.TestCase'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('listener_login',
                                                                               ['user',
                                                                                '**kwargs'],
                                                                               ''),
                                                                              ('listener_logout',
                                                                               ['user',
                                                                                '**kwargs'],
                                                                               ''),
                                                                              ('setUp',
                                                                               [],
                                                                               'Set up the listeners and reset the logged in/logged out counters'),
                                                                              ('tearDown',
                                                                               [],
                                                                               'Disconnect the listeners'),
                                                                              ('test_login',
                                                                               [],
                                                                               ''),
                                                                              ('test_logout_anonymous',
                                                                               [],
                                                                               ''),
                                                                              ('test_logout',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['urls',
                                                                                 'fixtures',
                                                                                 'logged_in',
                                                                                 'logged_out']},
             'django.contrib.auth.tests.tokens.TokenGeneratorTest': {'bases': ['django.test.TestCase'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('test_make_token',
                                                                                  [],
                                                                                  '\n        Ensure that we can make a token and that it is valid\n        '),
                                                                                 ('test_10265',
                                                                                  [],
                                                                                  '\n        Ensure that the token generated for a user created in the same request\n        will work correctly.\n        '),
                                                                                 ('test_timeout',
                                                                                  [],
                                                                                  '\n        Ensure we can use the token after n days, but no greater.\n        '),
                                                                                 ('test_django12_hash',
                                                                                  [],
                                                                                  '\n        Ensure we can use the hashes generated by Django 1.2\n        '),
                                                                                 ('test_date_length',
                                                                                  [],
                                                                                  "\n        Make sure we don't allow overly long dates, causing a potential DoS.\n        ")],
                                                                     'properties': []},
             'django.contrib.auth.tests.views.AuthViewsTestCase': {'bases': ['django.test.TestCase'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    Helper base class for all the follow test cases.\n    ',
                                                                   'methods': [('setUp',
                                                                                [],
                                                                                ''),
                                                                               ('tearDown',
                                                                                [],
                                                                                ''),
                                                                               ('login',
                                                                                ["password='password'"],
                                                                                '')],
                                                                   'properties': ['fixtures',
                                                                                  'urls',
                                                                                  'old_LANGUAGES',
                                                                                  'old_LANGUAGE_CODE',
                                                                                  'old_TEMPLATE_DIRS']},
             'django.contrib.auth.tests.views.ChangePasswordTest': {'bases': ['django.contrib.auth.tests.views.AuthViewsTestCase'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('fail_login',
                                                                                 ["password='password'"],
                                                                                 ''),
                                                                                ('logout',
                                                                                 [],
                                                                                 ''),
                                                                                ('test_password_change_fails_with_invalid_old_password',
                                                                                 [],
                                                                                 ''),
                                                                                ('test_password_change_fails_with_mismatched_passwords',
                                                                                 [],
                                                                                 ''),
                                                                                ('test_password_change_succeeds',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': []},
             'django.contrib.auth.tests.views.LoginTest': {'bases': ['django.contrib.auth.tests.views.AuthViewsTestCase'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('test_current_site_in_context_after_login',
                                                                        [],
                                                                        ''),
                                                                       ('test_security_check',
                                                                        ["password='password'"],
                                                                        '')],
                                                           'properties': []},
             'django.contrib.auth.tests.views.LoginURLSettings': {'bases': ['django.contrib.auth.tests.views.AuthViewsTestCase'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('setUp', [], ''),
                                                                              ('tearDown',
                                                                               [],
                                                                               ''),
                                                                              ('get_login_required_url',
                                                                               ['login_url'],
                                                                               ''),
                                                                              ('test_standard_login_url',
                                                                               [],
                                                                               ''),
                                                                              ('test_remote_login_url',
                                                                               [],
                                                                               ''),
                                                                              ('test_https_login_url',
                                                                               [],
                                                                               ''),
                                                                              ('test_login_url_with_querystring',
                                                                               [],
                                                                               ''),
                                                                              ('test_remote_login_url_with_next_querystring',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['urls',
                                                                                 'old_LOGIN_URL']},
             'django.contrib.auth.tests.views.LogoutTest': {'bases': ['django.contrib.auth.tests.views.AuthViewsTestCase'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('confirm_logged_out',
                                                                         [],
                                                                         ''),
                                                                        ('test_logout_default',
                                                                         [],
                                                                         'Logout without next_page option renders the default template'),
                                                                        ('test_14377', [], ''),
                                                                        ('test_logout_with_overridden_redirect_url',
                                                                         [],
                                                                         ''),
                                                                        ('test_logout_with_next_page_specified',
                                                                         [],
                                                                         'Logout with next_page option given redirects to specified resource'),
                                                                        ('test_logout_with_redirect_argument',
                                                                         [],
                                                                         'Logout with query string redirects to specified resource'),
                                                                        ('test_logout_with_custom_redirect_argument',
                                                                         [],
                                                                         'Logout with custom query string redirects to specified resource'),
                                                                        ('test_security_check',
                                                                         ["password='password'"],
                                                                         '')],
                                                            'properties': ['urls']},
             'django.contrib.auth.tests.views.PasswordResetTest': {'bases': ['django.contrib.auth.tests.views.AuthViewsTestCase'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('test_email_not_found',
                                                                                [],
                                                                                "Error is raised if the provided email address isn't currently registered"),
                                                                               ('test_email_found',
                                                                                [],
                                                                                'Email is sent if a valid email address is provided for password reset'),
                                                                               ('test_email_found_custom_from',
                                                                                [],
                                                                                'Email is sent if a valid email address is provided for password reset when a custom from_email is provided.'),
                                                                               ('_test_confirm_start',
                                                                                [],
                                                                                ''),
                                                                               ('_read_signup_email',
                                                                                ['email'],
                                                                                ''),
                                                                               ('test_confirm_valid',
                                                                                [],
                                                                                ''),
                                                                               ('test_confirm_invalid',
                                                                                [],
                                                                                ''),
                                                                               ('test_confirm_invalid_user',
                                                                                [],
                                                                                ''),
                                                                               ('test_confirm_overflow_user',
                                                                                [],
                                                                                ''),
                                                                               ('test_confirm_invalid_post',
                                                                                [],
                                                                                ''),
                                                                               ('test_confirm_complete',
                                                                                [],
                                                                                ''),
                                                                               ('test_confirm_different_passwords',
                                                                                [],
                                                                                '')],
                                                                   'properties': []},
             'django.contrib.auth.tokens.PasswordResetTokenGenerator': {'bases': ['object'],
                                                                        'constructor': [],
                                                                        'docstring': '\n    Strategy object used to generate and check tokens for the password\n    reset mechanism.\n    ',
                                                                        'methods': [('make_token',
                                                                                     ['user'],
                                                                                     '\n        Returns a token that can be used once to do a password reset\n        for the given user.\n        '),
                                                                                    ('check_token',
                                                                                     ['user',
                                                                                      'token'],
                                                                                     '\n        Check that a password reset token is correct for a given user.\n        '),
                                                                                    ('_make_token_with_timestamp',
                                                                                     ['user',
                                                                                      'timestamp'],
                                                                                     ''),
                                                                                    ('_make_token_with_timestamp_old',
                                                                                     ['user',
                                                                                      'timestamp'],
                                                                                     ''),
                                                                                    ('_num_days',
                                                                                     ['dt'],
                                                                                     ''),
                                                                                    ('_today',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': []},
             'django.contrib.comments.admin.CommentsAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('get_actions',
                                                                          ['request'],
                                                                          ''),
                                                                         ('flag_comments',
                                                                          ['request',
                                                                           'queryset'],
                                                                          ''),
                                                                         ('approve_comments',
                                                                          ['request',
                                                                           'queryset'],
                                                                          ''),
                                                                         ('remove_comments',
                                                                          ['request',
                                                                           'queryset'],
                                                                          ''),
                                                                         ('_bulk_flag',
                                                                          ['request',
                                                                           'queryset',
                                                                           'action',
                                                                           'done_message'],
                                                                          '\n        Flag, approve, or remove some comments from an admin action. Actually\n        calls the `action` argument to perform the heavy lifting.\n        ')],
                                                             'properties': ['fieldsets',
                                                                            'list_display',
                                                                            'list_filter',
                                                                            'date_hierarchy',
                                                                            'ordering',
                                                                            'raw_id_fields',
                                                                            'search_fields',
                                                                            'actions']},
             'django.contrib.comments.feeds.LatestCommentFeed': {'bases': ['django.contrib.syndication.views.Feed'],
                                                                 'constructor': [],
                                                                 'docstring': 'Feed of latest comments on the current site.',
                                                                 'methods': [('title', [], ''),
                                                                             ('link', [], ''),
                                                                             ('description',
                                                                              [],
                                                                              ''),
                                                                             ('items', [], ''),
                                                                             ('item_pubdate',
                                                                              ['item'],
                                                                              '')],
                                                                 'properties': ['_site']},
             'django.contrib.comments.forms.CommentDetailsForm': {'bases': ['models.CommentSecurityForm'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    Handles the specific details of the comment (name, comment, etc.).\n    ',
                                                                  'methods': [('get_comment_object',
                                                                               [],
                                                                               '\n        Return a new (unsaved) comment object based on the information in this\n        form. Assumes that the form is already validated and will throw a\n        ValueError if not.\n\n        Does not set any of the fields that would come from a Request object\n        (i.e. ``user`` or ``ip_address``).\n        '),
                                                                              ('get_comment_model',
                                                                               [],
                                                                               '\n        Get the comment model to create with this form. Subclasses in custom\n        comment apps should override this, get_comment_create_data, and perhaps\n        check_for_duplicate_comment to provide custom comment models.\n        '),
                                                                              ('get_comment_create_data',
                                                                               [],
                                                                               '\n        Returns the dict of data to be used to create a comment. Subclasses in\n        custom comment apps that override get_comment_model can override this\n        method to add extra fields onto a custom comment model.\n        '),
                                                                              ('check_for_duplicate_comment',
                                                                               ['new'],
                                                                               "\n        Check that a submitted comment isn't a duplicate. This might be caused\n        by someone posting a comment twice. If it is a dup, silently return the *previous* comment.\n        "),
                                                                              ('clean_comment',
                                                                               [],
                                                                               "\n        If COMMENTS_ALLOW_PROFANITIES is False, check that the comment doesn't\n        contain anything in PROFANITIES_LIST.\n        ")],
                                                                  'properties': ['name',
                                                                                 'email',
                                                                                 'url',
                                                                                 'comment']},
             'django.contrib.comments.forms.CommentForm': {'bases': ['models.CommentDetailsForm'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('clean_honeypot',
                                                                        [],
                                                                        "Check that nothing's been entered into the honeypot.")],
                                                           'properties': ['honeypot']},
             'django.contrib.comments.forms.CommentSecurityForm': {'bases': ['django.forms.Form'],
                                                                   'constructor': ['target_object',
                                                                                   'data=None',
                                                                                   'initial=None'],
                                                                   'docstring': '\n    Handles the security aspects (anti-spoofing) for comment forms.\n    ',
                                                                   'methods': [('security_errors',
                                                                                [],
                                                                                'Return just those errors associated with security'),
                                                                               ('clean_security_hash',
                                                                                [],
                                                                                'Check the security hash.'),
                                                                               ('clean_timestamp',
                                                                                [],
                                                                                "Make sure the timestamp isn't too far (> 2 hours) in the past."),
                                                                               ('generate_security_data',
                                                                                [],
                                                                                'Generate a dict of security data for "initial" data.'),
                                                                               ('initial_security_hash',
                                                                                ['timestamp'],
                                                                                '\n        Generate the initial security hash from self.content_object\n        and a (unix) timestamp.\n        '),
                                                                               ('generate_security_hash',
                                                                                ['content_type',
                                                                                 'object_pk',
                                                                                 'timestamp'],
                                                                                '\n        Generate a HMAC security hash from the provided info.\n        '),
                                                                               ('_generate_security_hash_old',
                                                                                ['content_type',
                                                                                 'object_pk',
                                                                                 'timestamp'],
                                                                                'Generate a (SHA1) security hash from the provided info.')],
                                                                   'properties': ['content_type',
                                                                                  'object_pk',
                                                                                  'timestamp',
                                                                                  'security_hash',
                                                                                  'target_object']},
             'django.contrib.comments.managers.CommentManager': {'bases': ['django.db.models.Manager'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('in_moderation',
                                                                              [],
                                                                              '\n        QuerySet for all comments currently in the moderation queue.\n        '),
                                                                             ('for_model',
                                                                              ['model'],
                                                                              '\n        QuerySet for all comments for a particular model (either an instance or\n        a class).\n        ')],
                                                                 'properties': []},
             'django.contrib.comments.models.BaseCommentAbstractModel': {'bases': ['django.db.models.Model'],
                                                                         'constructor': [],
                                                                         'docstring': '\n    An abstract base class that any custom comment models probably should\n    subclass.\n    ',
                                                                         'methods': [('get_content_object_url',
                                                                                      [],
                                                                                      '\n        Get a URL suitable for redirecting to the content object.\n        ')],
                                                                         'properties': ['content_type',
                                                                                        'object_pk',
                                                                                        'content_object',
                                                                                        'site']},
             'django.contrib.comments.models.Comment': {'bases': ['django.contrib.comments.models.BaseCommentAbstractModel'],
                                                        'constructor': [],
                                                        'docstring': '\n    A user comment about some object.\n    ',
                                                        'methods': [('__unicode__', [], ''),
                                                                    ('save',
                                                                     ['*args', '**kwargs'],
                                                                     ''),
                                                                    ('_get_userinfo',
                                                                     [],
                                                                     '\n        Get a dictionary that pulls together information about the poster\n        safely for both authenticated and non-authenticated comments.\n\n        This dict will have ``name``, ``email``, and ``url`` fields.\n        '),
                                                                    ('_get_name', [], ''),
                                                                    ('_set_name', ['val'], ''),
                                                                    ('_get_email', [], ''),
                                                                    ('_set_email', ['val'], ''),
                                                                    ('_get_url', [], ''),
                                                                    ('_set_url', ['val'], ''),
                                                                    ('get_absolute_url',
                                                                     ["anchor_pattern='#c%(id)s'"],
                                                                     ''),
                                                                    ('get_as_text',
                                                                     [],
                                                                     '\n        Return this comment as plain text.  Useful for emails.\n        ')],
                                                        'properties': ['user',
                                                                       'user_name',
                                                                       'user_email',
                                                                       'user_url',
                                                                       'comment',
                                                                       'submit_date',
                                                                       'ip_address',
                                                                       'is_public',
                                                                       'is_removed',
                                                                       'objects',
                                                                       '_userinfo',
                                                                       'userinfo',
                                                                       'name',
                                                                       'email',
                                                                       'url']},
             'django.contrib.comments.models.CommentFlag': {'bases': ['django.db.models.Model'],
                                                            'constructor': [],
                                                            'docstring': '\n    Records a flag on a comment. This is intentionally flexible; right now, a\n    flag could be:\n\n        * A "removal suggestion" -- where a user suggests a comment for (potential) removal.\n\n        * A "moderator deletion" -- used when a moderator deletes a comment.\n\n    You can (ab)use this model to add other flags, if needed. However, by\n    design users are only allowed to flag a comment with a given flag once;\n    if you want rating look elsewhere.\n    ',
                                                            'methods': [('__unicode__', [], ''),
                                                                        ('save',
                                                                         ['*args', '**kwargs'],
                                                                         '')],
                                                            'properties': ['user',
                                                                           'comment',
                                                                           'flag',
                                                                           'flag_date',
                                                                           'SUGGEST_REMOVAL',
                                                                           'MODERATOR_DELETION',
                                                                           'MODERATOR_APPROVAL']},
             'django.contrib.comments.moderation.AlreadyModerated': {'bases': ['Exception'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    Raised when a model which is already registered for moderation is\n    attempting to be registered again.\n\n    ',
                                                                     'methods': [],
                                                                     'properties': []},
             'django.contrib.comments.moderation.CommentModerator': {'bases': ['object'],
                                                                     'constructor': ['model'],
                                                                     'docstring': "\n    Encapsulates comment-moderation options for a given model.\n\n    This class is not designed to be used directly, since it doesn't\n    enable any of the available moderation options. Instead, subclass\n    it and override attributes to enable different options::\n\n    ``auto_close_field``\n        If this is set to the name of a ``DateField`` or\n        ``DateTimeField`` on the model for which comments are\n        being moderated, new comments for objects of that model\n        will be disallowed (immediately deleted) when a certain\n        number of days have passed after the date specified in\n        that field. Must be used in conjunction with\n        ``close_after``, which specifies the number of days past\n        which comments should be disallowed. Default value is\n        ``None``.\n\n    ``auto_moderate_field``\n        Like ``auto_close_field``, but instead of outright\n        deleting new comments when the requisite number of days\n        have elapsed, it will simply set the ``is_public`` field\n        of new comments to ``False`` before saving them. Must be\n        used in conjunction with ``moderate_after``, which\n        specifies the number of days past which comments should be\n        moderated. Default value is ``None``.\n\n    ``close_after``\n        If ``auto_close_field`` is used, this must specify the\n        number of days past the value of the field specified by\n        ``auto_close_field`` after which new comments for an\n        object should be disallowed. Default value is ``None``.\n\n    ``email_notification``\n        If ``True``, any new comment on an object of this model\n        which survives moderation will generate an email to site\n        staff. Default value is ``False``.\n\n    ``enable_field``\n        If this is set to the name of a ``BooleanField`` on the\n        model for which comments are being moderated, new comments\n        on objects of that model will be disallowed (immediately\n        deleted) whenever the value of that field is ``False`` on\n        the object the comment would be attached to. Default value\n        is ``None``.\n\n    ``moderate_after``\n        If ``auto_moderate_field`` is used, this must specify the number\n        of days past the value of the field specified by\n        ``auto_moderate_field`` after which new comments for an\n        object should be marked non-public. Default value is\n        ``None``.\n\n    Most common moderation needs can be covered by changing these\n    attributes, but further customization can be obtained by\n    subclassing and overriding the following methods. Each method will\n    be called with three arguments: ``comment``, which is the comment\n    being submitted, ``content_object``, which is the object the\n    comment will be attached to, and ``request``, which is the\n    ``HttpRequest`` in which the comment is being submitted::\n\n    ``allow``\n        Should return ``True`` if the comment should be allowed to\n        post on the content object, and ``False`` otherwise (in\n        which case the comment will be immediately deleted).\n\n    ``email``\n        If email notification of the new comment should be sent to\n        site staff or moderators, this method is responsible for\n        sending the email.\n\n    ``moderate``\n        Should return ``True`` if the comment should be moderated\n        (in which case its ``is_public`` field will be set to\n        ``False`` before saving), and ``False`` otherwise (in\n        which case the ``is_public`` field will not be changed).\n\n    Subclasses which want to introspect the model for which comments\n    are being moderated can do so through the attribute ``_model``,\n    which will be the model class.\n\n    ",
                                                                     'methods': [('_get_delta',
                                                                                  ['now',
                                                                                   'then'],
                                                                                  '\n        Internal helper which will return a ``datetime.timedelta``\n        representing the time between ``now`` and ``then``. Assumes\n        ``now`` is a ``datetime.date`` or ``datetime.datetime`` later\n        than ``then``.\n\n        If ``now`` and ``then`` are not of the same type due to one of\n        them being a ``datetime.date`` and the other being a\n        ``datetime.datetime``, both will be coerced to\n        ``datetime.date`` before calculating the delta.\n\n        '),
                                                                                 ('allow',
                                                                                  ['comment',
                                                                                   'content_object',
                                                                                   'request'],
                                                                                  '\n        Determine whether a given comment is allowed to be posted on\n        a given object.\n\n        Return ``True`` if the comment should be allowed, ``False\n        otherwise.\n\n        '),
                                                                                 ('moderate',
                                                                                  ['comment',
                                                                                   'content_object',
                                                                                   'request'],
                                                                                  '\n        Determine whether a given comment on a given object should be\n        allowed to show up immediately, or should be marked non-public\n        and await approval.\n\n        Return ``True`` if the comment should be moderated (marked\n        non-public), ``False`` otherwise.\n\n        '),
                                                                                 ('email',
                                                                                  ['comment',
                                                                                   'content_object',
                                                                                   'request'],
                                                                                  '\n        Send email notification of a new comment to site staff when email\n        notifications have been requested.\n\n        ')],
                                                                     'properties': ['auto_close_field',
                                                                                    'auto_moderate_field',
                                                                                    'close_after',
                                                                                    'email_notification',
                                                                                    'enable_field',
                                                                                    'moderate_after',
                                                                                    '_model']},
             'django.contrib.comments.moderation.Moderator': {'bases': ['object'],
                                                              'constructor': [],
                                                              'docstring': '\n    Handles moderation of a set of models.\n\n    An instance of this class will maintain a list of one or more\n    models registered for comment moderation, and their associated\n    moderation classes, and apply moderation to all incoming comments.\n\n    To register a model, obtain an instance of ``Moderator`` (this\n    module exports one as ``moderator``), and call its ``register``\n    method, passing the model class and a moderation class (which\n    should be a subclass of ``CommentModerator``). Note that both of\n    these should be the actual classes, not instances of the classes.\n\n    To cease moderation for a model, call the ``unregister`` method,\n    passing the model class.\n\n    For convenience, both ``register`` and ``unregister`` can also\n    accept a list of model classes in place of a single model; this\n    allows easier registration of multiple models with the same\n    ``CommentModerator`` class.\n\n    The actual moderation is applied in two phases: one prior to\n    saving a new comment, and the other immediately after saving. The\n    pre-save moderation may mark a comment as non-public or mark it to\n    be removed; the post-save moderation may delete a comment which\n    was disallowed (there is currently no way to prevent the comment\n    being saved once before removal) and, if the comment is still\n    around, will send any notification emails the comment generated.\n\n    ',
                                                              'methods': [('connect',
                                                                           [],
                                                                           '\n        Hook up the moderation methods to pre- and post-save signals\n        from the comment models.\n\n        '),
                                                                          ('register',
                                                                           ['model_or_iterable',
                                                                            'moderation_class'],
                                                                           '\n        Register a model or a list of models for comment moderation,\n        using a particular moderation class.\n\n        Raise ``AlreadyModerated`` if any of the models are already\n        registered.\n\n        '),
                                                                          ('unregister',
                                                                           ['model_or_iterable'],
                                                                           '\n        Remove a model or a list of models from the list of models\n        whose comments will be moderated.\n\n        Raise ``NotModerated`` if any of the models are not currently\n        registered for moderation.\n\n        '),
                                                                          ('pre_save_moderation',
                                                                           ['sender',
                                                                            'comment',
                                                                            'request',
                                                                            '**kwargs'],
                                                                           '\n        Apply any necessary pre-save moderation steps to new\n        comments.\n\n        '),
                                                                          ('post_save_moderation',
                                                                           ['sender',
                                                                            'comment',
                                                                            'request',
                                                                            '**kwargs'],
                                                                           '\n        Apply any necessary post-save moderation steps to new\n        comments.\n\n        ')],
                                                              'properties': ['_registry']},
             'django.contrib.comments.moderation.NotModerated': {'bases': ['Exception'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    Raised when a model which is not registered for moderation is\n    attempting to be unregistered.\n\n    ',
                                                                 'methods': [],
                                                                 'properties': []},
             'django.contrib.comments.templatetags.comments.BaseCommentNode': {'bases': ['django.template.Node'],
                                                                               'constructor': ['ctype=None',
                                                                                               'object_pk_expr=None',
                                                                                               'object_expr=None',
                                                                                               'as_varname=None',
                                                                                               'comment=None'],
                                                                               'docstring': '\n    Base helper class (abstract) for handling the get_comment_* template tags.\n    Looks a bit strange, but the subclasses below should make this a bit more\n    obvious.\n    ',
                                                                               'methods': [('handle_token',
                                                                                            ['parser',
                                                                                             'token'],
                                                                                            'Class method to parse get_comment_list/count/form and return a Node.'),
                                                                                           ('lookup_content_type',
                                                                                            ['tagname'],
                                                                                            ''),
                                                                                           ('render',
                                                                                            ['context'],
                                                                                            ''),
                                                                                           ('get_query_set',
                                                                                            ['context'],
                                                                                            ''),
                                                                                           ('get_target_ctype_pk',
                                                                                            ['context'],
                                                                                            ''),
                                                                                           ('get_context_value_from_queryset',
                                                                                            ['context',
                                                                                             'qs'],
                                                                                            'Subclasses should override this.')],
                                                                               'properties': ['handle_token',
                                                                                              'lookup_content_type',
                                                                                              'comment_model',
                                                                                              'as_varname',
                                                                                              'ctype',
                                                                                              'object_pk_expr',
                                                                                              'object_expr',
                                                                                              'comment']},
             'django.contrib.comments.templatetags.comments.CommentCountNode': {'bases': ['django.contrib.comments.templatetags.comments.BaseCommentNode'],
                                                                                'constructor': [],
                                                                                'docstring': 'Insert a count of comments into the context.',
                                                                                'methods': [('get_context_value_from_queryset',
                                                                                             ['context',
                                                                                              'qs'],
                                                                                             '')],
                                                                                'properties': []},
             'django.contrib.comments.templatetags.comments.CommentFormNode': {'bases': ['django.contrib.comments.templatetags.comments.BaseCommentNode'],
                                                                               'constructor': [],
                                                                               'docstring': 'Insert a form for the comment model into the context.',
                                                                               'methods': [('get_form',
                                                                                            ['context'],
                                                                                            ''),
                                                                                           ('render',
                                                                                            ['context'],
                                                                                            '')],
                                                                               'properties': []},
             'django.contrib.comments.templatetags.comments.CommentListNode': {'bases': ['django.contrib.comments.templatetags.comments.BaseCommentNode'],
                                                                               'constructor': [],
                                                                               'docstring': 'Insert a list of comments into the context.',
                                                                               'methods': [('get_context_value_from_queryset',
                                                                                            ['context',
                                                                                             'qs'],
                                                                                            '')],
                                                                               'properties': []},
             'django.contrib.comments.templatetags.comments.RenderCommentFormNode': {'bases': ['django.contrib.comments.templatetags.comments.CommentFormNode'],
                                                                                     'constructor': [],
                                                                                     'docstring': 'Render the comment form directly',
                                                                                     'methods': [('handle_token',
                                                                                                  ['parser',
                                                                                                   'token'],
                                                                                                  'Class method to parse render_comment_form and return a Node.'),
                                                                                                 ('render',
                                                                                                  ['context'],
                                                                                                  '')],
                                                                                     'properties': ['handle_token']},
             'django.contrib.comments.templatetags.comments.RenderCommentListNode': {'bases': ['django.contrib.comments.templatetags.comments.CommentListNode'],
                                                                                     'constructor': [],
                                                                                     'docstring': 'Render the comment list directly',
                                                                                     'methods': [('handle_token',
                                                                                                  ['parser',
                                                                                                   'token'],
                                                                                                  'Class method to parse render_comment_list and return a Node.'),
                                                                                                 ('render',
                                                                                                  ['context'],
                                                                                                  '')],
                                                                                     'properties': ['handle_token']},
             'django.contrib.comments.views.comments.CommentPostBadRequest': {'bases': ['django.http.HttpResponseBadRequest'],
                                                                              'constructor': ['why'],
                                                                              'docstring': '\n    Response returned when a comment post is invalid. If ``DEBUG`` is on a\n    nice-ish error message will be displayed (for debugging purposes), but in\n    production mode a simple opaque 400 page will be displayed.\n    ',
                                                                              'methods': [],
                                                                              'properties': ['content']},
             'django.contrib.contenttypes.generic.BaseGenericInlineFormSet': {'bases': ['django.forms.models.BaseModelFormSet'],
                                                                              'constructor': ['data=None',
                                                                                              'files=None',
                                                                                              'instance=None',
                                                                                              'save_as_new=None',
                                                                                              'prefix=None',
                                                                                              'queryset=None'],
                                                                              'docstring': '\n    A formset for generic inline objects to a parent.\n    ',
                                                                              'methods': [('get_default_prefix',
                                                                                           [],
                                                                                           ''),
                                                                                          ('save_new',
                                                                                           ['form',
                                                                                            'commit=True'],
                                                                                           '')],
                                                                              'properties': ['instance',
                                                                                             'rel_name',
                                                                                             'get_default_prefix']},
             'django.contrib.contenttypes.generic.GenericForeignKey': {'bases': ['object'],
                                                                       'constructor': ["ct_field='content_type'",
                                                                                       "fk_field='object_id'"],
                                                                       'docstring': '\n    Provides a generic relation to any object through content-type/object-id\n    fields.\n    ',
                                                                       'methods': [('contribute_to_class',
                                                                                    ['cls',
                                                                                     'name'],
                                                                                    ''),
                                                                                   ('instance_pre_init',
                                                                                    ['signal',
                                                                                     'sender',
                                                                                     'args',
                                                                                     'kwargs',
                                                                                     '**_kwargs'],
                                                                                    '\n        Handles initializing an object with the generic FK instaed of\n        content-type/object-id fields.\n        '),
                                                                                   ('get_content_type',
                                                                                    ['obj=None',
                                                                                     'id=None',
                                                                                     'using=None'],
                                                                                    ''),
                                                                                   ('__get__',
                                                                                    ['instance',
                                                                                     'instance_type=None'],
                                                                                    ''),
                                                                                   ('__set__',
                                                                                    ['instance',
                                                                                     'value'],
                                                                                    '')],
                                                                       'properties': ['ct_field',
                                                                                      'fk_field',
                                                                                      'name',
                                                                                      'model',
                                                                                      'cache_attr']},
             'django.contrib.contenttypes.generic.GenericInlineModelAdmin': {'bases': ['django.contrib.admin.options.InlineModelAdmin'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [('get_formset',
                                                                                          ['request',
                                                                                           'obj=None'],
                                                                                          '')],
                                                                             'properties': ['ct_field',
                                                                                            'ct_fk_field',
                                                                                            'formset']},
             'django.contrib.contenttypes.generic.GenericRel': {'bases': ['django.db.models.fields.related.ManyToManyRel'],
                                                                'constructor': ['to',
                                                                                'related_name=None',
                                                                                'limit_choices_to=None',
                                                                                'symmetrical=True'],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['to',
                                                                               'related_name',
                                                                               'limit_choices_to',
                                                                               'symmetrical',
                                                                               'multiple',
                                                                               'through']},
             'django.contrib.contenttypes.generic.GenericRelation': {'bases': ['django.db.models.fields.related.RelatedField',
                                                                               'django.db.models.fields.related.Field'],
                                                                     'constructor': ['to',
                                                                                     '**kwargs'],
                                                                     'docstring': 'Provides an accessor to generic related objects (e.g. comments)',
                                                                     'methods': [('get_choices_default',
                                                                                  [],
                                                                                  ''),
                                                                                 ('value_to_string',
                                                                                  ['obj'],
                                                                                  ''),
                                                                                 ('m2m_db_table',
                                                                                  [],
                                                                                  ''),
                                                                                 ('m2m_column_name',
                                                                                  [],
                                                                                  ''),
                                                                                 ('m2m_reverse_name',
                                                                                  [],
                                                                                  ''),
                                                                                 ('m2m_target_field_name',
                                                                                  [],
                                                                                  ''),
                                                                                 ('m2m_reverse_target_field_name',
                                                                                  [],
                                                                                  ''),
                                                                                 ('contribute_to_class',
                                                                                  ['cls',
                                                                                   'name'],
                                                                                  ''),
                                                                                 ('contribute_to_related_class',
                                                                                  ['cls',
                                                                                   'related'],
                                                                                  ''),
                                                                                 ('set_attributes_from_rel',
                                                                                  [],
                                                                                  ''),
                                                                                 ('get_internal_type',
                                                                                  [],
                                                                                  ''),
                                                                                 ('db_type',
                                                                                  ['connection'],
                                                                                  ''),
                                                                                 ('extra_filters',
                                                                                  ['pieces',
                                                                                   'pos',
                                                                                   'negate'],
                                                                                  '\n        Return an extra filter to the queryset so that the results are filtered\n        on the appropriate content type.\n        '),
                                                                                 ('bulk_related_objects',
                                                                                  ['objs',
                                                                                   'using=DEFAULT_DB_ALIAS'],
                                                                                  '\n        Return all objects related to ``objs`` via this ``GenericRelation``.\n\n        ')],
                                                                     'properties': ['object_id_field_name',
                                                                                    'content_type_field_name',
                                                                                    'model']},
             'django.contrib.contenttypes.generic.GenericStackedInline': {'bases': ['django.contrib.contenttypes.generic.GenericInlineModelAdmin'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [],
                                                                          'properties': ['template']},
             'django.contrib.contenttypes.generic.GenericTabularInline': {'bases': ['django.contrib.contenttypes.generic.GenericInlineModelAdmin'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [],
                                                                          'properties': ['template']},
             'django.contrib.contenttypes.generic.ReverseGenericRelatedObjectsDescriptor': {'bases': ['object'],
                                                                                            'constructor': ['field'],
                                                                                            'docstring': '\n    This class provides the functionality that makes the related-object\n    managers available as attributes on a model class, for fields that have\n    multiple "remote" values and have a GenericRelation defined in their model\n    (rather than having another model pointed *at* them). In the example\n    "article.publications", the publications attribute is a\n    ReverseGenericRelatedObjectsDescriptor instance.\n    ',
                                                                                            'methods': [('__get__',
                                                                                                         ['instance',
                                                                                                          'instance_type=None'],
                                                                                                         ''),
                                                                                                        ('__set__',
                                                                                                         ['instance',
                                                                                                          'value'],
                                                                                                         '')],
                                                                                            'properties': ['field']},
             'django.contrib.contenttypes.models.ContentType': {'bases': ['django.db.models.Model'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('__unicode__',
                                                                             [],
                                                                             ''),
                                                                            ('model_class',
                                                                             [],
                                                                             'Returns the Python model class for this type of content.'),
                                                                            ('get_object_for_this_type',
                                                                             ['**kwargs'],
                                                                             "\n        Returns an object of this type for the keyword arguments given.\n        Basically, this is a proxy around this object_type's get_object() model\n        method. The ObjectNotExist exception, if thrown, will not be caught,\n        so code that calls this method should catch it.\n        "),
                                                                            ('natural_key',
                                                                             [],
                                                                             '')],
                                                                'properties': ['name',
                                                                               'app_label',
                                                                               'model',
                                                                               'objects']},
             'django.contrib.contenttypes.models.ContentTypeManager': {'bases': ['django.db.models.Manager'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [('get_by_natural_key',
                                                                                    ['app_label',
                                                                                     'model'],
                                                                                    ''),
                                                                                   ('get_for_model',
                                                                                    ['model'],
                                                                                    "\n        Returns the ContentType object for a given model, creating the\n        ContentType if necessary. Lookups are cached so that subsequent lookups\n        for the same model don't hit the database.\n        "),
                                                                                   ('get_for_id',
                                                                                    ['id'],
                                                                                    '\n        Lookup a ContentType by ID. Uses the same shared cache as get_for_model\n        (though ContentTypes are obviously not created on-the-fly by get_by_id).\n        '),
                                                                                   ('clear_cache',
                                                                                    [],
                                                                                    '\n        Clear out the content-type cache. This needs to happen during database\n        flushes to prevent caching of "stale" content type IDs (see\n        django.contrib.contenttypes.management.update_contenttypes for where\n        this gets called).\n        '),
                                                                                   ('_add_to_cache',
                                                                                    ['using',
                                                                                     'ct'],
                                                                                    'Insert a ContentType into the cache.')],
                                                                       'properties': ['_cache']},
             'django.contrib.contenttypes.tests.ContentTypesTests': {'bases': ['django.test.TestCase'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('setUp',
                                                                                  [],
                                                                                  ''),
                                                                                 ('tearDown',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_lookup_cache',
                                                                                  [],
                                                                                  '\n        Make sure that the content type cache (see ContentTypeManager)\n        works correctly. Lookups for a particular content type -- by model or\n        by ID -- should hit the database only on the first lookup.\n        '),
                                                                                 ('test_shortcut_view',
                                                                                  [],
                                                                                  '\n        Check that the shortcut view (used for the admin "view on site"\n        functionality) returns a complete URL regardless of whether the sites\n        framework is installed\n        ')],
                                                                     'properties': ['old_DEBUG',
                                                                                    'old_Site_meta_installed']},
             'django.contrib.databrowse.datastructures.EasyChoice': {'bases': ['object'],
                                                                     'constructor': ['easy_model',
                                                                                     'field',
                                                                                     'value',
                                                                                     'label'],
                                                                     'docstring': '',
                                                                     'methods': [('__repr__',
                                                                                  [],
                                                                                  ''),
                                                                                 ('url',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['model',
                                                                                    'field',
                                                                                    'value',
                                                                                    'label']},
             'django.contrib.databrowse.datastructures.EasyField': {'bases': ['object'],
                                                                    'constructor': ['easy_model',
                                                                                    'field'],
                                                                    'docstring': '',
                                                                    'methods': [('__repr__',
                                                                                 [],
                                                                                 ''),
                                                                                ('choices',
                                                                                 [],
                                                                                 ''),
                                                                                ('url', [], '')],
                                                                    'properties': ['model',
                                                                                   'field']},
             'django.contrib.databrowse.datastructures.EasyInstance': {'bases': ['object'],
                                                                       'constructor': ['easy_model',
                                                                                       'instance'],
                                                                       'docstring': '',
                                                                       'methods': [('__repr__',
                                                                                    [],
                                                                                    ''),
                                                                                   ('__unicode__',
                                                                                    [],
                                                                                    ''),
                                                                                   ('__str__',
                                                                                    [],
                                                                                    ''),
                                                                                   ('pk',
                                                                                    [],
                                                                                    ''),
                                                                                   ('url',
                                                                                    [],
                                                                                    ''),
                                                                                   ('fields',
                                                                                    [],
                                                                                    "\n        Generator that yields EasyInstanceFields for each field in this\n        EasyInstance's model.\n        "),
                                                                                   ('related_objects',
                                                                                    [],
                                                                                    "\n        Generator that yields dictionaries of all models that have this\n        EasyInstance's model as a ForeignKey or ManyToManyField, along with\n        lists of related objects.\n        ")],
                                                                       'properties': ['model',
                                                                                      'instance']},
             'django.contrib.databrowse.datastructures.EasyInstanceField': {'bases': ['object'],
                                                                            'constructor': ['easy_model',
                                                                                            'instance',
                                                                                            'field'],
                                                                            'docstring': '',
                                                                            'methods': [('__repr__',
                                                                                         [],
                                                                                         ''),
                                                                                        ('values',
                                                                                         [],
                                                                                         "\n        Returns a list of values for this field for this instance. It's a list\n        so we can accomodate many-to-many fields.\n        "),
                                                                                        ('urls',
                                                                                         [],
                                                                                         'Returns a list of (value, URL) tuples.')],
                                                                            'properties': ['model',
                                                                                           'field',
                                                                                           'instance',
                                                                                           'raw_value']},
             'django.contrib.databrowse.datastructures.EasyModel': {'bases': ['object'],
                                                                    'constructor': ['site',
                                                                                    'model'],
                                                                    'docstring': '',
                                                                    'methods': [('__repr__',
                                                                                 [],
                                                                                 ''),
                                                                                ('model_databrowse',
                                                                                 [],
                                                                                 'Returns the ModelDatabrowse class for this model.'),
                                                                                ('url', [], ''),
                                                                                ('objects',
                                                                                 ['**kwargs'],
                                                                                 ''),
                                                                                ('get_query_set',
                                                                                 [],
                                                                                 ''),
                                                                                ('object_by_pk',
                                                                                 ['pk'],
                                                                                 ''),
                                                                                ('sample_objects',
                                                                                 [],
                                                                                 ''),
                                                                                ('field',
                                                                                 ['name'],
                                                                                 ''),
                                                                                ('fields',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['site',
                                                                                   'model',
                                                                                   'model_list',
                                                                                   'verbose_name',
                                                                                   'verbose_name_plural']},
             'django.contrib.databrowse.datastructures.EasyQuerySet': {'bases': ['django.db.models.query.QuerySet'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    When creating (or cloning to) an `EasyQuerySet`, make sure to set the\n    `_easymodel` variable to the related `EasyModel`.\n    ',
                                                                       'methods': [('iterator',
                                                                                    ['*args',
                                                                                     '**kwargs'],
                                                                                    ''),
                                                                                   ('_clone',
                                                                                    ['*args',
                                                                                     '**kwargs'],
                                                                                    '')],
                                                                       'properties': []},
             'django.contrib.databrowse.plugins.calendars.CalendarPlugin': {'bases': ['django.contrib.databrowse.sites.DatabrowsePlugin'],
                                                                            'constructor': ['field_names=None'],
                                                                            'docstring': '',
                                                                            'methods': [('field_dict',
                                                                                         ['model'],
                                                                                         '\n        Helper function that returns a dictionary of all DateFields or\n        DateTimeFields in the given model. If self.field_names is set, it takes\n        take that into account when building the dictionary.\n        '),
                                                                                        ('model_index_html',
                                                                                         ['request',
                                                                                          'model',
                                                                                          'site'],
                                                                                         ''),
                                                                                        ('urls',
                                                                                         ['plugin_name',
                                                                                          'easy_instance_field'],
                                                                                         ''),
                                                                                        ('model_view',
                                                                                         ['request',
                                                                                          'model_databrowse',
                                                                                          'url'],
                                                                                         ''),
                                                                                        ('homepage_view',
                                                                                         ['request'],
                                                                                         ''),
                                                                                        ('calendar_view',
                                                                                         ['request',
                                                                                          'field',
                                                                                          'year=None',
                                                                                          'month=None',
                                                                                          'day=None'],
                                                                                         '')],
                                                                            'properties': ['field_names',
                                                                                           'model',
                                                                                           'site',
                                                                                           'fields']},
             'django.contrib.databrowse.plugins.fieldchoices.FieldChoicePlugin': {'bases': ['django.contrib.databrowse.sites.DatabrowsePlugin'],
                                                                                  'constructor': ['field_filter=None'],
                                                                                  'docstring': '',
                                                                                  'methods': [('field_dict',
                                                                                               ['model'],
                                                                                               '\n        Helper function that returns a dictionary of all fields in the given\n        model. If self.field_filter is set, it only includes the fields that\n        match the filter.\n        '),
                                                                                              ('model_index_html',
                                                                                               ['request',
                                                                                                'model',
                                                                                                'site'],
                                                                                               ''),
                                                                                              ('urls',
                                                                                               ['plugin_name',
                                                                                                'easy_instance_field'],
                                                                                               ''),
                                                                                              ('model_view',
                                                                                               ['request',
                                                                                                'model_databrowse',
                                                                                                'url'],
                                                                                               ''),
                                                                                              ('homepage_view',
                                                                                               ['request'],
                                                                                               ''),
                                                                                              ('field_view',
                                                                                               ['request',
                                                                                                'field',
                                                                                                'value=None'],
                                                                                               '')],
                                                                                  'properties': ['field_filter',
                                                                                                 'model',
                                                                                                 'site',
                                                                                                 'fields']},
             'django.contrib.databrowse.plugins.objects.ObjectDetailPlugin': {'bases': ['django.contrib.databrowse.sites.DatabrowsePlugin'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('model_view',
                                                                                           ['request',
                                                                                            'model_databrowse',
                                                                                            'url'],
                                                                                           '')],
                                                                              'properties': []},
             'django.contrib.databrowse.sites.AlreadyRegistered': {'bases': ['Exception'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.databrowse.sites.DatabrowsePlugin': {'bases': ['object'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('urls',
                                                                               ['plugin_name',
                                                                                'easy_instance_field'],
                                                                               "\n        Given an EasyInstanceField object, returns a list of URLs for this\n        plugin's views of this object. These URLs should be absolute.\n\n        Returns None if the EasyInstanceField object doesn't get a\n        list of plugin-specific URLs.\n        "),
                                                                              ('model_index_html',
                                                                               ['request',
                                                                                'model',
                                                                                'site'],
                                                                               '\n        Returns a snippet of HTML to include on the model index page.\n        '),
                                                                              ('model_view',
                                                                               ['request',
                                                                                'model_databrowse',
                                                                                'url'],
                                                                               "\n        Handles main URL routing for a plugin's model-specific pages.\n        ")],
                                                                  'properties': []},
             'django.contrib.databrowse.sites.DatabrowseSite': {'bases': ['object'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('register',
                                                                             ['model_or_iterable',
                                                                              'databrowse_class=None',
                                                                              '**options'],
                                                                             "\n        Registers the given model(s) with the given databrowse site.\n\n        The model(s) should be Model classes, not instances.\n\n        If a databrowse class isn't given, it will use DefaultModelDatabrowse\n        (the default databrowse options).\n\n        If a model is already registered, this will raise AlreadyRegistered.\n        "),
                                                                            ('unregister',
                                                                             ['model_or_iterable'],
                                                                             "\n        Unregisters the given model(s).\n\n        If a model isn't already registered, this will raise NotRegistered.\n        "),
                                                                            ('root',
                                                                             ['request',
                                                                              'url'],
                                                                             "\n        Handles main URL routing for the databrowse app.\n\n        `url` is the remainder of the URL -- e.g. 'comments/comment/'.\n        "),
                                                                            ('index',
                                                                             ['request'],
                                                                             ''),
                                                                            ('model_page',
                                                                             ['request',
                                                                              'app_label',
                                                                              'model_name',
                                                                              'rest_of_url=None'],
                                                                             '\n        Handles the model-specific functionality of the databrowse site, delegating\n        to the appropriate ModelDatabrowse class.\n        ')],
                                                                'properties': ['registry',
                                                                               'root_url']},
             'django.contrib.databrowse.sites.DefaultModelDatabrowse': {'bases': ['django.contrib.databrowse.sites.ModelDatabrowse'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [],
                                                                        'properties': ['plugins']},
             'django.contrib.databrowse.sites.ModelDatabrowse': {'bases': ['object'],
                                                                 'constructor': ['model',
                                                                                 'site'],
                                                                 'docstring': '',
                                                                 'methods': [('root',
                                                                              ['request',
                                                                               'url'],
                                                                              "\n        Handles main URL routing for the databrowse app.\n\n        `url` is the remainder of the URL -- e.g. 'objects/3'.\n        "),
                                                                             ('main_view',
                                                                              ['request'],
                                                                              '')],
                                                                 'properties': ['plugins',
                                                                                'model',
                                                                                'site']},
             'django.contrib.databrowse.sites.NotRegistered': {'bases': ['Exception'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': []},
             'django.contrib.flatpages.admin.FlatPageAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['form',
                                                                             'fieldsets',
                                                                             'list_display',
                                                                             'list_filter',
                                                                             'search_fields']},
             'django.contrib.flatpages.admin.FlatpageForm': {'bases': ['django.forms.ModelForm'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['url']},
             'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware': {'bases': ['object'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('process_response',
                                                                                             ['request',
                                                                                              'response'],
                                                                                             '')],
                                                                                'properties': []},
             'django.contrib.flatpages.models.FlatPage': {'bases': ['django.db.models.Model'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('__unicode__', [], ''),
                                                                      ('get_absolute_url',
                                                                       [],
                                                                       '')],
                                                          'properties': ['url',
                                                                         'title',
                                                                         'content',
                                                                         'enable_comments',
                                                                         'template_name',
                                                                         'registration_required',
                                                                         'sites']},
             'django.contrib.flatpages.templatetags.flatpages.FlatpageNode': {'bases': ['django.template.Node'],
                                                                              'constructor': ['context_name',
                                                                                              'starts_with=None',
                                                                                              'user=None'],
                                                                              'docstring': '',
                                                                              'methods': [('render',
                                                                                           ['context'],
                                                                                           '')],
                                                                              'properties': ['context_name',
                                                                                             'starts_with',
                                                                                             'user']},
             'django.contrib.flatpages.tests.csrf.FlatpageCSRFTests': {'bases': ['django.test.TestCase'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [('setUp',
                                                                                    [],
                                                                                    ''),
                                                                                   ('tearDown',
                                                                                    [],
                                                                                    ''),
                                                                                   ('test_view_flatpage',
                                                                                    [],
                                                                                    'A flatpage can be served through a view, even when the middleware is in use'),
                                                                                   ('test_view_non_existent_flatpage',
                                                                                    [],
                                                                                    'A non-existent flatpage raises 404 when served through a view, even when the middleware is in use'),
                                                                                   ('test_view_authenticated_flatpage',
                                                                                    [],
                                                                                    'A flatpage served through a view can require authentication'),
                                                                                   ('test_fallback_flatpage',
                                                                                    [],
                                                                                    'A flatpage can be served by the fallback middlware'),
                                                                                   ('test_fallback_non_existent_flatpage',
                                                                                    [],
                                                                                    'A non-existent flatpage raises a 404 when served by the fallback middlware'),
                                                                                   ('test_post_view_flatpage',
                                                                                    [],
                                                                                    'POSTing to a flatpage served through a view will raise a CSRF error if no token is provided (Refs #14156)'),
                                                                                   ('test_post_fallback_flatpage',
                                                                                    [],
                                                                                    'POSTing to a flatpage served by the middleware will raise a CSRF error if no token is provided (Refs #14156)'),
                                                                                   ('test_post_unknown_page',
                                                                                    [],
                                                                                    "POSTing to an unknown page isn't caught as a 403 CSRF error")],
                                                                       'properties': ['fixtures',
                                                                                      'urls',
                                                                                      'client',
                                                                                      'old_MIDDLEWARE_CLASSES',
                                                                                      'old_TEMPLATE_DIRS',
                                                                                      'old_LOGIN_URL']},
             'django.contrib.flatpages.tests.forms.FlatpageAdminFormTests': {'bases': ['django.test.TestCase'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [('setUp',
                                                                                          [],
                                                                                          ''),
                                                                                         ('test_flatpage_admin_form_url_validation',
                                                                                          [],
                                                                                          'The flatpage admin form validates correctly validates urls')],
                                                                             'properties': ['form_data']},
             'django.contrib.flatpages.tests.middleware.FlatpageMiddlewareTests': {'bases': ['django.test.TestCase'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [('setUp',
                                                                                                [],
                                                                                                ''),
                                                                                               ('tearDown',
                                                                                                [],
                                                                                                ''),
                                                                                               ('test_view_flatpage',
                                                                                                [],
                                                                                                'A flatpage can be served through a view, even when the middleware is in use'),
                                                                                               ('test_view_non_existent_flatpage',
                                                                                                [],
                                                                                                'A non-existent flatpage raises 404 when served through a view, even when the middleware is in use'),
                                                                                               ('test_view_authenticated_flatpage',
                                                                                                [],
                                                                                                'A flatpage served through a view can require authentication'),
                                                                                               ('test_fallback_flatpage',
                                                                                                [],
                                                                                                'A flatpage can be served by the fallback middlware'),
                                                                                               ('test_fallback_non_existent_flatpage',
                                                                                                [],
                                                                                                'A non-existent flatpage raises a 404 when served by the fallback middlware'),
                                                                                               ('test_fallback_authenticated_flatpage',
                                                                                                [],
                                                                                                'A flatpage served by the middleware can require authentication')],
                                                                                   'properties': ['fixtures',
                                                                                                  'urls',
                                                                                                  'old_MIDDLEWARE_CLASSES',
                                                                                                  'old_TEMPLATE_DIRS',
                                                                                                  'old_LOGIN_URL']},
             'django.contrib.flatpages.tests.templatetags.FlatpageTemplateTagTests': {'bases': ['django.test.TestCase'],
                                                                                      'constructor': [],
                                                                                      'docstring': '',
                                                                                      'methods': [('setUp',
                                                                                                   [],
                                                                                                   ''),
                                                                                                  ('tearDown',
                                                                                                   [],
                                                                                                   ''),
                                                                                                  ('test_get_flatpages_tag',
                                                                                                   [],
                                                                                                   'The flatpage template tag retrives unregistered prefixed flatpages by default'),
                                                                                                  ('test_get_flatpages_tag_for_anon_user',
                                                                                                   [],
                                                                                                   'The flatpage template tag retrives unregistered flatpages for an anonymous user'),
                                                                                                  ('test_get_flatpages_tag_for_user',
                                                                                                   [],
                                                                                                   'The flatpage template tag retrives all flatpages for an authenticated user'),
                                                                                                  ('test_get_flatpages_with_prefix',
                                                                                                   [],
                                                                                                   'The flatpage template tag retrives unregistered prefixed flatpages by default'),
                                                                                                  ('test_get_flatpages_with_prefix_for_anon_user',
                                                                                                   [],
                                                                                                   'The flatpage template tag retrives unregistered prefixed flatpages for an anonymous user'),
                                                                                                  ('test_get_flatpages_with_prefix_for_user',
                                                                                                   [],
                                                                                                   'The flatpage template tag retrive prefixed flatpages for an authenticated user'),
                                                                                                  ('test_get_flatpages_with_variable_prefix',
                                                                                                   [],
                                                                                                   'The prefix for the flatpage template tag can be a template variable'),
                                                                                                  ('test_parsing_errors',
                                                                                                   [],
                                                                                                   "There are various ways that the flatpages template tag won't parse")],
                                                                                      'properties': ['fixtures',
                                                                                                     'urls',
                                                                                                     'old_MIDDLEWARE_CLASSES',
                                                                                                     'old_TEMPLATE_DIRS',
                                                                                                     'me']},
             'django.contrib.flatpages.tests.views.FlatpageViewTests': {'bases': ['django.test.TestCase'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('setUp',
                                                                                     [],
                                                                                     ''),
                                                                                    ('tearDown',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test_view_flatpage',
                                                                                     [],
                                                                                     'A flatpage can be served through a view'),
                                                                                    ('test_view_non_existent_flatpage',
                                                                                     [],
                                                                                     'A non-existent flatpage raises 404 when served through a view'),
                                                                                    ('test_view_authenticated_flatpage',
                                                                                     [],
                                                                                     'A flatpage served through a view can require authentication'),
                                                                                    ('test_fallback_flatpage',
                                                                                     [],
                                                                                     "A fallback flatpage won't be served if the middleware is disabled"),
                                                                                    ('test_fallback_non_existent_flatpage',
                                                                                     [],
                                                                                     "A non-existent flatpage won't be served if the fallback middlware is disabled"),
                                                                                    ('test_view_flatpage_special_chars',
                                                                                     [],
                                                                                     'A flatpage with special chars in the URL can be served through a view')],
                                                                        'properties': ['fixtures',
                                                                                       'urls',
                                                                                       'old_MIDDLEWARE_CLASSES',
                                                                                       'old_TEMPLATE_DIRS',
                                                                                       'old_LOGIN_URL']},
             'django.contrib.formtools.preview.FormPreview': {'bases': ['object'],
                                                              'constructor': ['form'],
                                                              'docstring': '',
                                                              'methods': [('__call__',
                                                                           ['request',
                                                                            '*args',
                                                                            '**kwargs'],
                                                                           ''),
                                                                          ('unused_name',
                                                                           ['name'],
                                                                           "\n        Given a first-choice name, adds an underscore to the name until it\n        reaches a name that isn't claimed by any field in the form.\n\n        This is calculated rather than being hard-coded so that no field names\n        are off-limits for use in the form.\n        "),
                                                                          ('preview_get',
                                                                           ['request'],
                                                                           'Displays the form'),
                                                                          ('preview_post',
                                                                           ['request'],
                                                                           'Validates the POST data. If valid, displays the preview page. Else, redisplays form.'),
                                                                          ('_check_security_hash',
                                                                           ['token',
                                                                            'request',
                                                                            'form'],
                                                                           ''),
                                                                          ('post_post',
                                                                           ['request'],
                                                                           'Validates the POST data. If valid, calls done(). Else, redisplays form.'),
                                                                          ('get_auto_id',
                                                                           [],
                                                                           '\n        Hook to override the ``auto_id`` kwarg for the form. Needed when\n        rendering two form previews in the same template.\n        '),
                                                                          ('get_initial',
                                                                           ['request'],
                                                                           "\n        Takes a request argument and returns a dictionary to pass to the form's\n        ``initial`` kwarg when the form is being created from an HTTP get.\n        "),
                                                                          ('get_context',
                                                                           ['request', 'form'],
                                                                           'Context for template rendering.'),
                                                                          ('parse_params',
                                                                           ['*args',
                                                                            '**kwargs'],
                                                                           "\n        Given captured args and kwargs from the URLconf, saves something in\n        self.state and/or raises Http404 if necessary.\n\n        For example, this URLconf captures a user_id variable:\n\n            (r'^contact/(?P<user_id>\\d{1,6})/$', MyFormPreview(MyForm)),\n\n        In this case, the kwargs variable in parse_params would be\n        {'user_id': 32} for a request to '/contact/32/'. You can use that\n        user_id to make sure it's a valid user and/or save it for later, for\n        use in done().\n        "),
                                                                          ('process_preview',
                                                                           ['request',
                                                                            'form',
                                                                            'context'],
                                                                           '\n        Given a validated form, performs any extra processing before displaying\n        the preview page, and saves any extra data in context.\n        '),
                                                                          ('security_hash',
                                                                           ['request', 'form'],
                                                                           '\n        Calculates the security hash for the given HttpRequest and Form instances.\n\n        Subclasses may want to take into account request-specific information,\n        such as the IP address.\n        '),
                                                                          ('failed_hash',
                                                                           ['request'],
                                                                           'Returns an HttpResponse in the case of an invalid security hash.'),
                                                                          ('done',
                                                                           ['request',
                                                                            'cleaned_data'],
                                                                           '\n        Does something with the cleaned_data and returns an\n        HttpResponseRedirect.\n        ')],
                                                              'properties': ['preview_template',
                                                                             'form_template',
                                                                             'form',
                                                                             'state']},
             'django.contrib.formtools.tests.DummyRequest': {'bases': ['django.http.HttpRequest'],
                                                             'constructor': ['POST=None'],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['method',
                                                                            '_dont_enforce_csrf_checks']},
             'django.contrib.formtools.tests.FormHmacTests': {'bases': ['django.utils.unittest.TestCase'],
                                                              'constructor': [],
                                                              'docstring': '\n    Same as SecurityHashTests, but with form_hmac\n    ',
                                                              'methods': [('test_textfield_hash',
                                                                           [],
                                                                           '\n        Regression test for #10034: the hash generation function should ignore\n        leading/trailing whitespace so as to be friendly to broken browsers that\n        submit it (usually in textareas).\n        '),
                                                                          ('test_empty_permitted',
                                                                           [],
                                                                           '\n        Regression test for #10643: the security hash should allow forms with\n        empty_permitted = True, or forms where data has not changed.\n        ')],
                                                              'properties': []},
             'django.contrib.formtools.tests.HashTestBlankForm': {'bases': ['django.forms.Form'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': ['name', 'bio']},
             'django.contrib.formtools.tests.HashTestForm': {'bases': ['django.forms.Form'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['name', 'bio']},
             'django.contrib.formtools.tests.PreviewTests': {'bases': ['django.test.TestCase'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('setUp', [], ''),
                                                                         ('test_unused_name',
                                                                          [],
                                                                          '\n        Verifies name mangling to get uniue field name.\n        '),
                                                                         ('test_form_get',
                                                                          [],
                                                                          '\n        Test contrib.formtools.preview form retrieval.\n\n        Use the client library to see if we can sucessfully retrieve\n        the form (mostly testing the setup ROOT_URLCONF\n        process). Verify that an additional  hidden input field\n        is created to manage the stage.\n\n        '),
                                                                         ('test_form_preview',
                                                                          [],
                                                                          '\n        Test contrib.formtools.preview form preview rendering.\n\n        Use the client library to POST to the form to see if a preview\n        is returned.  If we do get a form back check that the hidden\n        value is correctly managing the state of the form.\n\n        '),
                                                                         ('test_form_submit',
                                                                          [],
                                                                          '\n        Test contrib.formtools.preview form submittal.\n\n        Use the client library to POST to the form with stage set to 3\n        to see if our forms done() method is called. Check first\n        without the security hash, verify failure, retry with security\n        hash and verify sucess.\n\n        '),
                                                                         ('test_bool_submit',
                                                                          [],
                                                                          "\n        Test contrib.formtools.preview form submittal when form contains:\n        BooleanField(required=False)\n\n        Ticket: #6209 - When an unchecked BooleanField is previewed, the preview\n        form's hash would be computed with no value for ``bool1``. However, when\n        the preview form is rendered, the unchecked hidden BooleanField would be\n        rendered with the string value 'False'. So when the preview form is\n        resubmitted, the hash would be computed with the value 'False' for\n        ``bool1``. We need to make sure the hashes are the same in both cases.\n\n        "),
                                                                         ('test_form_submit_django12_hash',
                                                                          [],
                                                                          '\n        Test contrib.formtools.preview form submittal, using the hash function\n        used in Django 1.2\n        '),
                                                                         ('test_form_submit_django12_hash_custom_hash',
                                                                          [],
                                                                          '\n        Test contrib.formtools.preview form submittal, using the hash function\n        used in Django 1.2 and a custom security_hash method.\n        ')],
                                                             'properties': ['urls',
                                                                            'preview',
                                                                            'input',
                                                                            'test_data']},
             'django.contrib.formtools.tests.SecurityHashTests': {'bases': ['django.utils.unittest.TestCase'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('test_textfield_hash',
                                                                               [],
                                                                               '\n        Regression test for #10034: the hash generation function should ignore\n        leading/trailing whitespace so as to be friendly to broken browsers that\n        submit it (usually in textareas).\n        '),
                                                                              ('test_empty_permitted',
                                                                               [],
                                                                               '\n        Regression test for #10643: the security hash should allow forms with\n        empty_permitted = True, or forms where data has not changed.\n        ')],
                                                                  'properties': []},
             'django.contrib.formtools.tests.TestForm': {'bases': ['django.forms.Form'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['field1',
                                                                        'field1_',
                                                                        'bool1']},
             'django.contrib.formtools.tests.TestFormPreview': {'bases': ['django.contrib.formtools.preview.FormPreview'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('get_context',
                                                                             ['request',
                                                                              'form'],
                                                                             ''),
                                                                            ('get_initial',
                                                                             ['request'],
                                                                             ''),
                                                                            ('done',
                                                                             ['request',
                                                                              'cleaned_data'],
                                                                             '')],
                                                                'properties': []},
             'django.contrib.formtools.tests.UserSecuredFormPreview': {'bases': ['django.contrib.formtools.tests.TestFormPreview'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    FormPreview with a custum security_hash method\n    ',
                                                                       'methods': [('security_hash',
                                                                                    ['request',
                                                                                     'form'],
                                                                                    '')],
                                                                       'properties': []},
             'django.contrib.formtools.tests.UserSecuredWizardClass': {'bases': ['django.contrib.formtools.tests.WizardClass'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    Wizard with a custum security_hash method\n    ',
                                                                       'methods': [('security_hash',
                                                                                    ['request',
                                                                                     'form'],
                                                                                    '')],
                                                                       'properties': []},
             'django.contrib.formtools.tests.WizardClass': {'bases': ['django.contrib.formtools.wizard.FormWizard'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('get_template',
                                                                         ['step'],
                                                                         ''),
                                                                        ('done',
                                                                         ['request',
                                                                          'cleaned_data'],
                                                                         '')],
                                                            'properties': []},
             'django.contrib.formtools.tests.WizardPageOneForm': {'bases': ['django.forms.Form'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': ['field']},
             'django.contrib.formtools.tests.WizardPageThreeForm': {'bases': ['django.forms.Form'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['field']},
             'django.contrib.formtools.tests.WizardPageTwoAlternativeForm': {'bases': ['django.forms.Form'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [],
                                                                             'properties': ['field']},
             'django.contrib.formtools.tests.WizardPageTwoForm': {'bases': ['django.forms.Form'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': ['field']},
             'django.contrib.formtools.tests.WizardTests': {'bases': ['django.test.TestCase'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('setUp', [], ''),
                                                                        ('tearDown', [], ''),
                                                                        ('test_step_starts_at_zero',
                                                                         [],
                                                                         '\n        step should be zero for the first form\n        '),
                                                                        ('test_step_increments',
                                                                         [],
                                                                         '\n        step should be incremented when we go to the next page\n        '),
                                                                        ('test_bad_hash',
                                                                         [],
                                                                         '\n        Form should not advance if the hash is missing or bad\n        '),
                                                                        ('test_good_hash_django12',
                                                                         [],
                                                                         '\n        Form should advance if the hash is present and good, as calculated using\n        django 1.2 method.\n        '),
                                                                        ('test_good_hash_django12_subclass',
                                                                         [],
                                                                         '\n        The Django 1.2 method of calulating hashes should *not* be used as a\n        fallback if the FormWizard subclass has provided their own method\n        of calculating a hash.\n        '),
                                                                        ('test_good_hash_current',
                                                                         [],
                                                                         '\n        Form should advance if the hash is present and good, as calculated using\n        current method.\n        '),
                                                                        ('test_14498',
                                                                         [],
                                                                         "\n        Regression test for ticket #14498.  All previous steps' forms should be\n        validated.\n        "),
                                                                        ('test_14576',
                                                                         [],
                                                                         '\n        Regression test for ticket #14576.\n\n        The form of the last step is not passed to the done method.\n        '),
                                                                        ('test_15075',
                                                                         [],
                                                                         "\n        Regression test for ticket #15075.  Allow modifying wizard's form_list\n        in process_step.\n        ")],
                                                            'properties': ['urls',
                                                                           'old_TEMPLATE_DIRS',
                                                                           'old_SECRET_KEY']},
             'django.contrib.formtools.wizard.FormWizard': {'bases': ['object'],
                                                            'constructor': ['form_list',
                                                                            'initial=None'],
                                                            'docstring': '',
                                                            'methods': [('__repr__', [], ''),
                                                                        ('get_form',
                                                                         ['step', 'data=None'],
                                                                         'Helper method that returns the Form instance for the given step.'),
                                                                        ('num_steps',
                                                                         [],
                                                                         'Helper method that returns the number of steps.'),
                                                                        ('_check_security_hash',
                                                                         ['token',
                                                                          'request',
                                                                          'form'],
                                                                         ''),
                                                                        ('__call__',
                                                                         ['request',
                                                                          '*args',
                                                                          '**kwargs'],
                                                                         '\n        Main method that does all the hard work, conforming to the Django view\n        interface.\n        '),
                                                                        ('render',
                                                                         ['form',
                                                                          'request',
                                                                          'step',
                                                                          'context=None'],
                                                                         'Renders the given Form object, returning an HttpResponse.'),
                                                                        ('prefix_for_step',
                                                                         ['step'],
                                                                         'Given the step, returns a Form prefix to use.'),
                                                                        ('render_hash_failure',
                                                                         ['request', 'step'],
                                                                         '\n        Hook for rendering a template if a hash check failed.\n\n        step is the step that failed. Any previous step is guaranteed to be\n        valid.\n\n        This default implementation simply renders the form for the given step,\n        but subclasses may want to display an error message, etc.\n        '),
                                                                        ('render_revalidation_failure',
                                                                         ['request',
                                                                          'step',
                                                                          'form'],
                                                                         '\n        Hook for rendering a template if final revalidation failed.\n\n        It is highly unlikely that this point would ever be reached, but See\n        the comment in __call__() for an explanation.\n        '),
                                                                        ('security_hash',
                                                                         ['request', 'form'],
                                                                         '\n        Calculates the security hash for the given HttpRequest and Form instances.\n\n        Subclasses may want to take into account request-specific information,\n        such as the IP address.\n        '),
                                                                        ('determine_step',
                                                                         ['request',
                                                                          '*args',
                                                                          '**kwargs'],
                                                                         "\n        Given the request object and whatever *args and **kwargs were passed to\n        __call__(), returns the current step (which is zero-based).\n\n        Note that the result should not be trusted. It may even be a completely\n        invalid number. It's not the job of this method to validate it.\n        "),
                                                                        ('parse_params',
                                                                         ['request',
                                                                          '*args',
                                                                          '**kwargs'],
                                                                         '\n        Hook for setting some state, given the request object and whatever\n        *args and **kwargs were passed to __call__(), sets some state.\n\n        This is called at the beginning of __call__().\n        '),
                                                                        ('get_template',
                                                                         ['step'],
                                                                         "\n        Hook for specifying the name of the template to use for a given step.\n\n        Note that this can return a tuple of template names if you'd like to\n        use the template system's select_template() hook.\n        "),
                                                                        ('render_template',
                                                                         ['request',
                                                                          'form',
                                                                          'previous_fields',
                                                                          'step',
                                                                          'context=None'],
                                                                         '\n        Renders the template for the given step, returning an HttpResponse object.\n\n        Override this method if you want to add a custom context, return a\n        different MIME type, etc. If you only need to override the template\n        name, use get_template() instead.\n\n        The template will be rendered with the following context:\n            step_field -- The name of the hidden field containing the step.\n            step0      -- The current step (zero-based).\n            step       -- The current step (one-based).\n            step_count -- The total number of steps.\n            form       -- The Form instance for the current step (either empty\n                          or with errors).\n            previous_fields -- A string representing every previous data field,\n                          plus hashes for completed forms, all in the form of\n                          hidden fields. Note that you\'ll need to run this\n                          through the "safe" template filter, to prevent\n                          auto-escaping, because it\'s raw HTML.\n        '),
                                                                        ('process_step',
                                                                         ['request',
                                                                          'form',
                                                                          'step'],
                                                                         "\n        Hook for modifying the FormWizard's internal state, given a fully\n        validated Form object. The Form is guaranteed to have clean, valid\n        data.\n\n        This method should *not* modify any of that data. Rather, it might want\n        to set self.extra_context or dynamically alter self.form_list, based on\n        previously submitted forms.\n\n        Note that this method is called every time a page is rendered for *all*\n        submitted steps.\n        "),
                                                                        ('done',
                                                                         ['request',
                                                                          'form_list'],
                                                                         '\n        Hook for doing something with the validated data. This is responsible\n        for the final processing.\n\n        form_list is a list of Form instances, each containing clean, valid\n        data.\n        ')],
                                                            'properties': ['step_field_name',
                                                                           'form_list',
                                                                           'initial',
                                                                           'extra_context',
                                                                           'step']},
             'django.contrib.gis.admin.options.GeoModelAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                'constructor': [],
                                                                'docstring': '\n    The administration options class for Geographic models. Map settings\n    may be overloaded from their defaults to create custom maps.\n    ',
                                                                'methods': [('_media',
                                                                             [],
                                                                             'Injects OpenLayers JavaScript into the admin.'),
                                                                            ('formfield_for_dbfield',
                                                                             ['db_field',
                                                                              '**kwargs'],
                                                                             '\n        Overloaded from ModelAdmin so that an OpenLayersWidget is used\n        for viewing/editing GeometryFields.\n        '),
                                                                            ('get_map_widget',
                                                                             ['db_field'],
                                                                             '\n        Returns a subclass of the OpenLayersWidget (or whatever was specified\n        in the `widget` attribute) using the settings from the attributes set\n        in this class.\n        ')],
                                                                'properties': ['default_lon',
                                                                               'default_lat',
                                                                               'default_zoom',
                                                                               'display_wkt',
                                                                               'display_srid',
                                                                               'extra_js',
                                                                               'num_zoom',
                                                                               'max_zoom',
                                                                               'min_zoom',
                                                                               'units',
                                                                               'max_resolution',
                                                                               'max_extent',
                                                                               'modifiable',
                                                                               'mouse_position',
                                                                               'scale_text',
                                                                               'layerswitcher',
                                                                               'scrollable',
                                                                               'map_width',
                                                                               'map_height',
                                                                               'map_srid',
                                                                               'map_template',
                                                                               'openlayers_url',
                                                                               'point_zoom',
                                                                               'wms_url',
                                                                               'wms_layer',
                                                                               'wms_name',
                                                                               'debug',
                                                                               'widget',
                                                                               'media']},
             'django.contrib.gis.admin.options.OSMGeoAdmin': {'bases': ['django.contrib.gis.admin.options.GeoModelAdmin'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['map_template',
                                                                             'extra_js',
                                                                             'num_zoom',
                                                                             'map_srid',
                                                                             'max_extent',
                                                                             'max_resolution',
                                                                             'point_zoom',
                                                                             'units']},
             'django.contrib.gis.admin.widgets.OpenLayersWidget': {'bases': ['django.forms.widgets.Textarea'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    Renders an OpenLayers map using the WKT of the geometry.\n    ',
                                                                   'methods': [('render',
                                                                                ['name',
                                                                                 'value',
                                                                                 'attrs=None'],
                                                                                ''),
                                                                               ('map_options',
                                                                                [],
                                                                                'Builds the map options hash for the OpenLayers template.')],
                                                                   'properties': []},
             'django.contrib.gis.db.backends.adapter.WKTAdapter': {'bases': ['object'],
                                                                   'constructor': ['geom'],
                                                                   'docstring': '\n    This provides an adaptor for Geometries sent to the\n    MySQL and Oracle database backends.\n    ',
                                                                   'methods': [('__eq__',
                                                                                ['other'],
                                                                                ''),
                                                                               ('__str__',
                                                                                [],
                                                                                ''),
                                                                               ('prepare_database_save',
                                                                                ['unused'],
                                                                                '')],
                                                                   'properties': ['wkt', 'srid']},
             'django.contrib.gis.db.backends.base.BaseSpatialOperations': {'bases': ['object'],
                                                                           'constructor': [],
                                                                           'docstring': '\n    This module holds the base `BaseSpatialBackend` object, which is\n    instantiated by each spatial database backend with the features\n    it has.\n    ',
                                                                           'methods': [('convert_extent',
                                                                                        ['box'],
                                                                                        ''),
                                                                                       ('convert_extent3d',
                                                                                        ['box'],
                                                                                        ''),
                                                                                       ('convert_geom',
                                                                                        ['geom_val',
                                                                                         'geom_field'],
                                                                                        ''),
                                                                                       ('geo_quote_name',
                                                                                        ['name'],
                                                                                        ''),
                                                                                       ('geo_db_type',
                                                                                        ['f'],
                                                                                        '\n        Returns the database column type for the geometry field on\n        the spatial backend.\n        '),
                                                                                       ('get_distance',
                                                                                        ['f',
                                                                                         'value',
                                                                                         'lookup_type'],
                                                                                        '\n        Returns the distance parameters for the given geometry field,\n        lookup value, and lookup type.\n        '),
                                                                                       ('get_geom_placeholder',
                                                                                        ['f',
                                                                                         'value'],
                                                                                        '\n        Returns the placeholder for the given geometry field with the given\n        value.  Depending on the spatial backend, the placeholder may contain a\n        stored procedure call to the transformation function of the spatial\n        backend.\n        '),
                                                                                       ('spatial_aggregate_sql',
                                                                                        ['agg'],
                                                                                        ''),
                                                                                       ('spatial_lookup_sql',
                                                                                        ['lvalue',
                                                                                         'lookup_type',
                                                                                         'value',
                                                                                         'field'],
                                                                                        ''),
                                                                                       ('geometry_columns',
                                                                                        [],
                                                                                        ''),
                                                                                       ('spatial_ref_sys',
                                                                                        [],
                                                                                        '')],
                                                                           'properties': ['distance_functions',
                                                                                          'geometry_functions',
                                                                                          'geometry_operators',
                                                                                          'geography_operators',
                                                                                          'geography_functions',
                                                                                          'gis_terms',
                                                                                          'truncate_params',
                                                                                          'postgis',
                                                                                          'spatialite',
                                                                                          'mysql',
                                                                                          'oracle',
                                                                                          'spatial_version',
                                                                                          'select',
                                                                                          'geography',
                                                                                          'area',
                                                                                          'centroid',
                                                                                          'difference',
                                                                                          'distance',
                                                                                          'distance_sphere',
                                                                                          'distance_spheroid',
                                                                                          'envelope',
                                                                                          'force_rhr',
                                                                                          'mem_size',
                                                                                          'bounding_circle',
                                                                                          'num_geom',
                                                                                          'num_points',
                                                                                          'perimeter',
                                                                                          'perimeter3d',
                                                                                          'point_on_surface',
                                                                                          'polygonize',
                                                                                          'reverse',
                                                                                          'scale',
                                                                                          'snap_to_grid',
                                                                                          'sym_difference',
                                                                                          'transform',
                                                                                          'translate',
                                                                                          'union',
                                                                                          'collect',
                                                                                          'extent',
                                                                                          'extent3d',
                                                                                          'make_line',
                                                                                          'unionagg',
                                                                                          'geohash',
                                                                                          'geojson',
                                                                                          'gml',
                                                                                          'kml',
                                                                                          'svg',
                                                                                          'from_text',
                                                                                          'from_wkb']},
             'django.contrib.gis.db.backends.base.SpatialRefSysMixin': {'bases': ['object'],
                                                                        'constructor': [],
                                                                        'docstring': '\n    The SpatialRefSysMixin is a class used by the database-dependent\n    SpatialRefSys objects to reduce redundnant code.\n    ',
                                                                        'methods': [('get_units',
                                                                                     ['wkt'],
                                                                                     '\n        Class method used by GeometryField on initialization to\n        retrive the units on the given WKT, without having to use\n        any of the database fields.\n        '),
                                                                                    ('get_spheroid',
                                                                                     ['wkt',
                                                                                      'string=True'],
                                                                                     '\n        Class method used by GeometryField on initialization to\n        retrieve the `SPHEROID[..]` parameters from the given WKT.\n        '),
                                                                                    ('__unicode__',
                                                                                     [],
                                                                                     "\n        Returns the string representation.  If GDAL is installed,\n        it will be 'pretty' OGC WKT.\n        ")],
                                                                        'properties': ['spheroid_regex',
                                                                                       'units_regex',
                                                                                       'srs',
                                                                                       '_srs',
                                                                                       'ellipsoid',
                                                                                       'name',
                                                                                       'spheroid',
                                                                                       'datum',
                                                                                       'projected',
                                                                                       'local',
                                                                                       'geographic',
                                                                                       'linear_name',
                                                                                       'linear_units',
                                                                                       'angular_name',
                                                                                       'angular_units',
                                                                                       'units']},
             'django.contrib.gis.db.backends.mysql.base.DatabaseWrapper': {'bases': ['django.db.backends.mysql.base.DatabaseWrapper'],
                                                                           'constructor': ['*args',
                                                                                           '**kwargs'],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['creation',
                                                                                          'ops',
                                                                                          'introspection']},
             'django.contrib.gis.db.backends.mysql.creation.MySQLCreation': {'bases': ['django.db.backends.mysql.creation.DatabaseCreation'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [('sql_indexes_for_field',
                                                                                          ['model',
                                                                                           'f',
                                                                                           'style'],
                                                                                          '')],
                                                                             'properties': []},
             'django.contrib.gis.db.backends.mysql.introspection.MySQLIntrospection': {'bases': ['django.db.backends.mysql.introspection.DatabaseIntrospection'],
                                                                                       'constructor': [],
                                                                                       'docstring': '',
                                                                                       'methods': [('get_geometry_type',
                                                                                                    ['table_name',
                                                                                                     'geo_col'],
                                                                                                    '')],
                                                                                       'properties': ['data_types_reverse']},
             'django.contrib.gis.db.backends.mysql.operations.MySQLOperations': {'bases': ['django.db.backends.mysql.base.DatabaseOperations',
                                                                                           'django.contrib.gis.db.backends.base.BaseSpatialOperations'],
                                                                                 'constructor': [],
                                                                                 'docstring': '',
                                                                                 'methods': [('geo_db_type',
                                                                                              ['f'],
                                                                                              ''),
                                                                                             ('get_geom_placeholder',
                                                                                              ['value',
                                                                                               'srid'],
                                                                                              "\n        The placeholder here has to include MySQL's WKT constructor.  Because\n        MySQL does not support spatial transformations, there is no need to\n        modify the placeholder based on the contents of the given value.\n        "),
                                                                                             ('spatial_lookup_sql',
                                                                                              ['lvalue',
                                                                                               'lookup_type',
                                                                                               'value',
                                                                                               'field',
                                                                                               'qn'],
                                                                                              '')],
                                                                                 'properties': ['compiler_module',
                                                                                                'mysql',
                                                                                                'name',
                                                                                                'select',
                                                                                                'from_wkb',
                                                                                                'from_text',
                                                                                                'Adapter',
                                                                                                'Adaptor',
                                                                                                'geometry_functions',
                                                                                                'gis_terms',
                                                                                                'term']},
             'django.contrib.gis.db.backends.oracle.adapter.OracleSpatialAdapter': {'bases': ['django.contrib.gis.db.backends.adapter.WKTAdapter'],
                                                                                    'constructor': [],
                                                                                    'docstring': '',
                                                                                    'methods': [],
                                                                                    'properties': ['input_size']},
             'django.contrib.gis.db.backends.oracle.base.DatabaseWrapper': {'bases': ['django.db.backends.oracle.base.DatabaseWrapper'],
                                                                            'constructor': ['*args',
                                                                                            '**kwargs'],
                                                                            'docstring': '',
                                                                            'methods': [],
                                                                            'properties': ['ops',
                                                                                           'creation',
                                                                                           'introspection']},
             'django.contrib.gis.db.backends.oracle.compiler.GeoSQLCompiler': {'bases': ['django.contrib.gis.db.models.sql.compiler.GeoSQLCompiler',
                                                                                         'django.contrib.gis.db.backends.oracle.compiler.SQLCompiler'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [],
                                                                               'properties': []},
             'django.contrib.gis.db.backends.oracle.compiler.SQLAggregateCompiler': {'bases': ['django.db.backends.oracle.compiler.SQLAggregateCompiler',
                                                                                               'django.contrib.gis.db.backends.oracle.compiler.GeoSQLCompiler'],
                                                                                     'constructor': [],
                                                                                     'docstring': '',
                                                                                     'methods': [],
                                                                                     'properties': []},
             'django.contrib.gis.db.backends.oracle.compiler.SQLDateCompiler': {'bases': ['django.db.backends.oracle.compiler.SQLDateCompiler',
                                                                                          'django.contrib.gis.db.backends.oracle.compiler.GeoSQLCompiler'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [],
                                                                                'properties': []},
             'django.contrib.gis.db.backends.oracle.compiler.SQLDeleteCompiler': {'bases': ['django.db.backends.oracle.compiler.SQLDeleteCompiler',
                                                                                            'django.contrib.gis.db.backends.oracle.compiler.GeoSQLCompiler'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [],
                                                                                  'properties': []},
             'django.contrib.gis.db.backends.oracle.compiler.SQLInsertCompiler': {'bases': ['django.db.backends.oracle.compiler.SQLInsertCompiler',
                                                                                            'django.contrib.gis.db.backends.oracle.compiler.GeoSQLCompiler'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [('placeholder',
                                                                                               ['field',
                                                                                                'val'],
                                                                                               '')],
                                                                                  'properties': []},
             'django.contrib.gis.db.backends.oracle.compiler.SQLUpdateCompiler': {'bases': ['django.db.backends.oracle.compiler.SQLUpdateCompiler',
                                                                                            'django.contrib.gis.db.backends.oracle.compiler.GeoSQLCompiler'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [],
                                                                                  'properties': []},
             'django.contrib.gis.db.backends.oracle.creation.OracleCreation': {'bases': ['django.db.backends.oracle.creation.DatabaseCreation'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('sql_indexes_for_field',
                                                                                            ['model',
                                                                                             'f',
                                                                                             'style'],
                                                                                            'Return any spatial index creation SQL for the field.')],
                                                                               'properties': []},
             'django.contrib.gis.db.backends.oracle.introspection.OracleIntrospection': {'bases': ['django.db.backends.oracle.introspection.DatabaseIntrospection'],
                                                                                         'constructor': [],
                                                                                         'docstring': '',
                                                                                         'methods': [('get_geometry_type',
                                                                                                      ['table_name',
                                                                                                       'geo_col'],
                                                                                                      '')],
                                                                                         'properties': ['data_types_reverse']},
             'django.contrib.gis.db.backends.oracle.models.GeometryColumns': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                              'constructor': [],
                                                                              'docstring': 'Maps to the Oracle USER_SDO_GEOM_METADATA table.',
                                                                              'methods': [('table_name_col',
                                                                                           [],
                                                                                           '\n        Returns the name of the metadata column used to store the\n        the feature table name.\n        '),
                                                                                          ('geom_col_name',
                                                                                           [],
                                                                                           '\n        Returns the name of the metadata column used to store the\n        the feature geometry column.\n        '),
                                                                                          ('__unicode__',
                                                                                           [],
                                                                                           '')],
                                                                              'properties': ['table_name',
                                                                                             'column_name',
                                                                                             'srid']},
             'django.contrib.gis.db.backends.oracle.models.SpatialRefSys': {'bases': ['django.contrib.gis.db.models.Model',
                                                                                      'django.contrib.gis.db.backends.base.SpatialRefSysMixin'],
                                                                            'constructor': [],
                                                                            'docstring': 'Maps to the Oracle MDSYS.CS_SRS table.',
                                                                            'methods': [('wkt_col',
                                                                                         [],
                                                                                         '')],
                                                                            'properties': ['cs_name',
                                                                                           'srid',
                                                                                           'auth_srid',
                                                                                           'auth_name',
                                                                                           'wktext',
                                                                                           'cs_bounds',
                                                                                           'objects',
                                                                                           'wkt']},
             'django.contrib.gis.db.backends.oracle.operations.OracleOperations': {'bases': ['django.db.backends.oracle.base.DatabaseOperations',
                                                                                             'django.contrib.gis.db.backends.base.BaseSpatialOperations'],
                                                                                   'constructor': ['connection'],
                                                                                   'docstring': '',
                                                                                   'methods': [('convert_extent',
                                                                                                ['clob'],
                                                                                                ''),
                                                                                               ('convert_geom',
                                                                                                ['clob',
                                                                                                 'geo_field'],
                                                                                                ''),
                                                                                               ('geo_db_type',
                                                                                                ['f'],
                                                                                                "\n        Returns the geometry database type for Oracle.  Unlike other spatial\n        backends, no stored procedure is necessary and it's the same for all\n        geometry types.\n        "),
                                                                                               ('get_distance',
                                                                                                ['f',
                                                                                                 'value',
                                                                                                 'lookup_type'],
                                                                                                '\n        Returns the distance parameters given the value and the lookup type.\n        On Oracle, geometry columns with a geodetic coordinate system behave\n        implicitly like a geography column, and thus meters will be used as\n        the distance parameter on them.\n        '),
                                                                                               ('get_geom_placeholder',
                                                                                                ['f',
                                                                                                 'value'],
                                                                                                '\n        Provides a proper substitution value for Geometries that are not in the\n        SRID of the field.  Specifically, this routine will substitute in the\n        SDO_CS.TRANSFORM() function call.\n        '),
                                                                                               ('spatial_lookup_sql',
                                                                                                ['lvalue',
                                                                                                 'lookup_type',
                                                                                                 'value',
                                                                                                 'field',
                                                                                                 'qn'],
                                                                                                'Returns the SQL WHERE clause for use in Oracle spatial SQL construction.'),
                                                                                               ('spatial_aggregate_sql',
                                                                                                ['agg'],
                                                                                                '\n        Returns the spatial aggregate SQL template and function for the\n        given Aggregate instance.\n        '),
                                                                                               ('geometry_columns',
                                                                                                [],
                                                                                                ''),
                                                                                               ('spatial_ref_sys',
                                                                                                [],
                                                                                                '')],
                                                                                   'properties': ['compiler_module',
                                                                                                  'name',
                                                                                                  'oracle',
                                                                                                  'valid_aggregates',
                                                                                                  'a',
                                                                                                  'Adapter',
                                                                                                  'Adaptor',
                                                                                                  'area',
                                                                                                  'gml',
                                                                                                  'centroid',
                                                                                                  'difference',
                                                                                                  'distance',
                                                                                                  'extent',
                                                                                                  'intersection',
                                                                                                  'length',
                                                                                                  'num_geom',
                                                                                                  'num_points',
                                                                                                  'perimeter',
                                                                                                  'point_on_surface',
                                                                                                  'reverse',
                                                                                                  'sym_difference',
                                                                                                  'transform',
                                                                                                  'union',
                                                                                                  'unionagg',
                                                                                                  'select',
                                                                                                  'distance_functions',
                                                                                                  'geometry_functions',
                                                                                                  'gis_terms',
                                                                                                  'term',
                                                                                                  'truncate_params',
                                                                                                  'connection']},
             'django.contrib.gis.db.backends.oracle.operations.SDODWithin': {'bases': ['django.contrib.gis.db.backends.util.SpatialFunction'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [],
                                                                             'properties': ['dwithin_func',
                                                                                            'sql_template']},
             'django.contrib.gis.db.backends.oracle.operations.SDODistance': {'bases': ['django.contrib.gis.db.backends.util.SpatialFunction'],
                                                                              'constructor': ['op',
                                                                                              'tolerance=0.050000000000000003'],
                                                                              'docstring': 'Class for Distance queries.',
                                                                              'methods': [],
                                                                              'properties': ['sql_template',
                                                                                             'dist_func']},
             'django.contrib.gis.db.backends.oracle.operations.SDOGeomRelate': {'bases': ['django.contrib.gis.db.backends.util.SpatialFunction'],
                                                                                'constructor': ['mask',
                                                                                                'tolerance=0.050000000000000003'],
                                                                                'docstring': 'Class for using SDO_GEOM.RELATE.',
                                                                                'methods': [],
                                                                                'properties': ['relate_func',
                                                                                               'sql_template']},
             'django.contrib.gis.db.backends.oracle.operations.SDOOperation': {'bases': ['django.contrib.gis.db.backends.util.SpatialFunction'],
                                                                               'constructor': ['func',
                                                                                               '**kwargs'],
                                                                               'docstring': 'Base class for SDO* Oracle operations.',
                                                                               'methods': [],
                                                                               'properties': ['sql_template']},
             'django.contrib.gis.db.backends.oracle.operations.SDORelate': {'bases': ['django.contrib.gis.db.backends.util.SpatialFunction'],
                                                                            'constructor': ['mask'],
                                                                            'docstring': 'Class for using SDO_RELATE.',
                                                                            'methods': [],
                                                                            'properties': ['masks',
                                                                                           'mask_regex',
                                                                                           'sql_template',
                                                                                           'relate_func']},
             'django.contrib.gis.db.backends.postgis.adapter.PostGISAdapter': {'bases': ['object'],
                                                                               'constructor': ['geom'],
                                                                               'docstring': '',
                                                                               'methods': [('__conform__',
                                                                                            ['proto'],
                                                                                            ''),
                                                                                           ('__eq__',
                                                                                            ['other'],
                                                                                            ''),
                                                                                           ('__str__',
                                                                                            [],
                                                                                            ''),
                                                                                           ('getquoted',
                                                                                            [],
                                                                                            'Returns a properly quoted string for use in PostgreSQL/PostGIS.'),
                                                                                           ('prepare_database_save',
                                                                                            ['unused'],
                                                                                            '')],
                                                                               'properties': ['ewkb',
                                                                                              'srid']},
             'django.contrib.gis.db.backends.postgis.base.DatabaseWrapper': {'bases': ['django.db.backends.postgresql_psycopg2.base.DatabaseWrapper'],
                                                                             'constructor': ['*args',
                                                                                             '**kwargs'],
                                                                             'docstring': '',
                                                                             'methods': [],
                                                                             'properties': ['creation',
                                                                                            'ops',
                                                                                            'introspection']},
             'django.contrib.gis.db.backends.postgis.creation.PostGISCreation': {'bases': ['django.db.backends.postgresql.creation.DatabaseCreation'],
                                                                                 'constructor': [],
                                                                                 'docstring': '',
                                                                                 'methods': [('sql_indexes_for_field',
                                                                                              ['model',
                                                                                               'f',
                                                                                               'style'],
                                                                                              'Return any spatial index creation SQL for the field.'),
                                                                                             ('sql_table_creation_suffix',
                                                                                              [],
                                                                                              '')],
                                                                                 'properties': ['geom_index_type',
                                                                                                'geom_index_opts']},
             'django.contrib.gis.db.backends.postgis.introspection.GeoIntrospectionError': {'bases': ['Exception'],
                                                                                            'constructor': [],
                                                                                            'docstring': '',
                                                                                            'methods': [],
                                                                                            'properties': []},
             'django.contrib.gis.db.backends.postgis.introspection.PostGISIntrospection': {'bases': ['django.db.backends.postgresql_psycopg2.introspection.DatabaseIntrospection'],
                                                                                           'constructor': [],
                                                                                           'docstring': '',
                                                                                           'methods': [('get_postgis_types',
                                                                                                        [],
                                                                                                        '\n        Returns a dictionary with keys that are the PostgreSQL object\n        identification integers for the PostGIS geometry and/or\n        geography types (if supported).\n        '),
                                                                                                       ('get_field_type',
                                                                                                        ['data_type',
                                                                                                         'description'],
                                                                                                        ''),
                                                                                                       ('get_geometry_type',
                                                                                                        ['table_name',
                                                                                                         'geo_col'],
                                                                                                        "\n        The geometry type OID used by PostGIS does not indicate the particular\n        type of field that a geometry column is (e.g., whether it's a\n        PointField or a PolygonField).  Thus, this routine queries the PostGIS\n        metadata tables to determine the geometry type,\n        ")],
                                                                                           'properties': ['postgis_types_reverse']},
             'django.contrib.gis.db.backends.postgis.models.GeometryColumns': {'bases': ['django.db.models.Model'],
                                                                               'constructor': [],
                                                                               'docstring': "\n    The 'geometry_columns' table from the PostGIS. See the PostGIS\n    documentation at Ch. 4.2.2.\n    ",
                                                                               'methods': [('table_name_col',
                                                                                            [],
                                                                                            '\n        Returns the name of the metadata column used to store the\n        the feature table name.\n        '),
                                                                                           ('geom_col_name',
                                                                                            [],
                                                                                            '\n        Returns the name of the metadata column used to store the\n        the feature geometry column.\n        '),
                                                                                           ('__unicode__',
                                                                                            [],
                                                                                            '')],
                                                                               'properties': ['f_table_catalog',
                                                                                              'f_table_schema',
                                                                                              'f_table_name',
                                                                                              'f_geometry_column',
                                                                                              'coord_dimension',
                                                                                              'srid',
                                                                                              'type']},
             'django.contrib.gis.db.backends.postgis.models.SpatialRefSys': {'bases': ['django.db.models.Model',
                                                                                       'django.contrib.gis.db.backends.base.SpatialRefSysMixin'],
                                                                             'constructor': [],
                                                                             'docstring': "\n    The 'spatial_ref_sys' table from PostGIS. See the PostGIS\n    documentaiton at Ch. 4.2.1.\n    ",
                                                                             'methods': [('wkt_col',
                                                                                          [],
                                                                                          '')],
                                                                             'properties': ['srid',
                                                                                            'auth_name',
                                                                                            'auth_srid',
                                                                                            'srtext',
                                                                                            'proj4text',
                                                                                            'wkt']},
             'django.contrib.gis.db.backends.postgis.operations.PostGISDistance': {'bases': ['django.contrib.gis.db.backends.postgis.operations.PostGISFunction'],
                                                                                   'constructor': ['prefix',
                                                                                                   'operator'],
                                                                                   'docstring': 'For PostGIS distance operations.',
                                                                                   'methods': [],
                                                                                   'properties': ['dist_func',
                                                                                                  'sql_template']},
             'django.contrib.gis.db.backends.postgis.operations.PostGISFunction': {'bases': ['django.contrib.gis.db.backends.util.SpatialFunction'],
                                                                                   'constructor': ['prefix',
                                                                                                   'function',
                                                                                                   '**kwargs'],
                                                                                   'docstring': 'For PostGIS function calls (e.g., `ST_Contains(table, geom)`).',
                                                                                   'methods': [],
                                                                                   'properties': []},
             'django.contrib.gis.db.backends.postgis.operations.PostGISFunctionParam': {'bases': ['django.contrib.gis.db.backends.postgis.operations.PostGISFunction'],
                                                                                        'constructor': [],
                                                                                        'docstring': 'For PostGIS functions that take another parameter (e.g. DWithin, Relate).',
                                                                                        'methods': [],
                                                                                        'properties': ['sql_template']},
             'django.contrib.gis.db.backends.postgis.operations.PostGISOperations': {'bases': ['django.db.backends.postgresql_psycopg2.base.DatabaseOperations',
                                                                                               'django.contrib.gis.db.backends.base.BaseSpatialOperations'],
                                                                                     'constructor': ['connection'],
                                                                                     'docstring': '',
                                                                                     'methods': [('check_aggregate_support',
                                                                                                  ['aggregate'],
                                                                                                  "\n        Checks if the given aggregate name is supported (that is, if it's\n        in `self.valid_aggregates`).\n        "),
                                                                                                 ('convert_extent',
                                                                                                  ['box'],
                                                                                                  '\n        Returns a 4-tuple extent for the `Extent` aggregate by converting\n        the bounding box text returned by PostGIS (`box` argument), for\n        example: "BOX(-90.0 30.0, -85.0 40.0)".\n        '),
                                                                                                 ('convert_extent3d',
                                                                                                  ['box3d'],
                                                                                                  '\n        Returns a 6-tuple extent for the `Extent3D` aggregate by converting\n        the 3d bounding-box text returnded by PostGIS (`box3d` argument), for\n        example: "BOX3D(-90.0 30.0 1, -85.0 40.0 2)".\n        '),
                                                                                                 ('convert_geom',
                                                                                                  ['hex',
                                                                                                   'geo_field'],
                                                                                                  '\n        Converts the geometry returned from PostGIS aggretates.\n        '),
                                                                                                 ('geo_db_type',
                                                                                                  ['f'],
                                                                                                  '\n        Return the database field type for the given geometry field.\n        Typically this is `None` because geometry columns are added via\n        the `AddGeometryColumn` stored procedure, unless the field\n        has been specified to be of geography type instead.\n        '),
                                                                                                 ('get_distance',
                                                                                                  ['f',
                                                                                                   'dist_val',
                                                                                                   'lookup_type'],
                                                                                                  "\n        Retrieve the distance parameters for the given geometry field,\n        distance lookup value, and the distance lookup type.\n\n        This is the most complex implementation of the spatial backends due to\n        what is supported on geodetic geometry columns vs. what's available on\n        projected geometry columns.  In addition, it has to take into account\n        the newly introduced geography column type introudced in PostGIS 1.5.\n        "),
                                                                                                 ('get_geom_placeholder',
                                                                                                  ['f',
                                                                                                   'value'],
                                                                                                  '\n        Provides a proper substitution value for Geometries that are not in the\n        SRID of the field.  Specifically, this routine will substitute in the\n        ST_Transform() function call.\n        '),
                                                                                                 ('_get_postgis_func',
                                                                                                  ['func'],
                                                                                                  '\n        Helper routine for calling PostGIS functions and returning their result.\n        '),
                                                                                                 ('postgis_geos_version',
                                                                                                  [],
                                                                                                  'Returns the version of the GEOS library used with PostGIS.'),
                                                                                                 ('postgis_lib_version',
                                                                                                  [],
                                                                                                  'Returns the version number of the PostGIS library used with PostgreSQL.'),
                                                                                                 ('postgis_proj_version',
                                                                                                  [],
                                                                                                  'Returns the version of the PROJ.4 library used with PostGIS.'),
                                                                                                 ('postgis_version',
                                                                                                  [],
                                                                                                  'Returns PostGIS version number and compile-time options.'),
                                                                                                 ('postgis_full_version',
                                                                                                  [],
                                                                                                  'Returns PostGIS version number and compile-time options.'),
                                                                                                 ('postgis_version_tuple',
                                                                                                  [],
                                                                                                  '\n        Returns the PostGIS version as a tuple (version string, major,\n        minor, subminor).\n        '),
                                                                                                 ('proj_version_tuple',
                                                                                                  [],
                                                                                                  '\n        Return the version of PROJ.4 used by PostGIS as a tuple of the\n        major, minor, and subminor release numbers.\n        '),
                                                                                                 ('num_params',
                                                                                                  ['lookup_type',
                                                                                                   'num_param'],
                                                                                                  '\n        Helper routine that returns a boolean indicating whether the number of\n        parameters is correct for the lookup type.\n        '),
                                                                                                 ('spatial_lookup_sql',
                                                                                                  ['lvalue',
                                                                                                   'lookup_type',
                                                                                                   'value',
                                                                                                   'field',
                                                                                                   'qn'],
                                                                                                  '\n        Constructs spatial SQL from the given lookup value tuple a\n        (alias, col, db_type), the lookup type string, lookup value, and\n        the geometry field.\n        '),
                                                                                                 ('spatial_aggregate_sql',
                                                                                                  ['agg'],
                                                                                                  '\n        Returns the spatial aggregate SQL template and function for the\n        given Aggregate instance.\n        '),
                                                                                                 ('geometry_columns',
                                                                                                  [],
                                                                                                  ''),
                                                                                                 ('spatial_ref_sys',
                                                                                                  [],
                                                                                                  '')],
                                                                                     'properties': ['compiler_module',
                                                                                                    'name',
                                                                                                    'postgis',
                                                                                                    'version_regex',
                                                                                                    'valid_aggregates',
                                                                                                    'k',
                                                                                                    'Adapter',
                                                                                                    'Adaptor',
                                                                                                    'geom_func_prefix',
                                                                                                    'spatial_version',
                                                                                                    'geometry_operators',
                                                                                                    'geometry_functions',
                                                                                                    'distance_functions',
                                                                                                    'geography',
                                                                                                    'geography_functions',
                                                                                                    'geography_operators',
                                                                                                    'gis_terms',
                                                                                                    'area',
                                                                                                    'bounding_circle',
                                                                                                    'centroid',
                                                                                                    'collect',
                                                                                                    'difference',
                                                                                                    'distance',
                                                                                                    'distance_sphere',
                                                                                                    'distance_spheroid',
                                                                                                    'envelope',
                                                                                                    'extent',
                                                                                                    'extent3d',
                                                                                                    'force_rhr',
                                                                                                    'geohash',
                                                                                                    'geojson',
                                                                                                    'gml',
                                                                                                    'intersection',
                                                                                                    'kml',
                                                                                                    'length',
                                                                                                    'length3d',
                                                                                                    'length_spheroid',
                                                                                                    'makeline',
                                                                                                    'mem_size',
                                                                                                    'num_geom',
                                                                                                    'num_points',
                                                                                                    'perimeter',
                                                                                                    'perimeter3d',
                                                                                                    'point_on_surface',
                                                                                                    'polygonize',
                                                                                                    'reverse',
                                                                                                    'scale',
                                                                                                    'snap_to_grid',
                                                                                                    'svg',
                                                                                                    'sym_difference',
                                                                                                    'transform',
                                                                                                    'translate',
                                                                                                    'union',
                                                                                                    'unionagg']},
             'django.contrib.gis.db.backends.postgis.operations.PostGISOperator': {'bases': ['django.contrib.gis.db.backends.util.SpatialOperation'],
                                                                                   'constructor': ['operator'],
                                                                                   'docstring': 'For PostGIS operators (e.g. `&&`, `~`).',
                                                                                   'methods': [],
                                                                                   'properties': []},
             'django.contrib.gis.db.backends.postgis.operations.PostGISRelate': {'bases': ['django.contrib.gis.db.backends.postgis.operations.PostGISFunctionParam'],
                                                                                 'constructor': ['prefix',
                                                                                                 'pattern'],
                                                                                 'docstring': 'For PostGIS Relate(<geom>, <pattern>) calls.',
                                                                                 'methods': [],
                                                                                 'properties': ['pattern_regex']},
             'django.contrib.gis.db.backends.postgis.operations.PostGISSphereDistance': {'bases': ['django.contrib.gis.db.backends.postgis.operations.PostGISDistance'],
                                                                                         'constructor': [],
                                                                                         'docstring': 'For PostGIS spherical distance operations.',
                                                                                         'methods': [],
                                                                                         'properties': ['dist_func']},
             'django.contrib.gis.db.backends.postgis.operations.PostGISSpheroidDistance': {'bases': ['django.contrib.gis.db.backends.postgis.operations.PostGISFunction'],
                                                                                           'constructor': ['prefix',
                                                                                                           'operator'],
                                                                                           'docstring': 'For PostGIS spherical distance operations (using the spheroid).',
                                                                                           'methods': [],
                                                                                           'properties': ['dist_func',
                                                                                                          'sql_template']},
             'django.contrib.gis.db.backends.spatialite.adapter.SpatiaLiteAdapter': {'bases': ['django.contrib.gis.db.backends.adapter.WKTAdapter'],
                                                                                     'constructor': [],
                                                                                     'docstring': 'SQLite adaptor for geometry objects.',
                                                                                     'methods': [('__conform__',
                                                                                                  ['protocol'],
                                                                                                  '')],
                                                                                     'properties': []},
             'django.contrib.gis.db.backends.spatialite.base.DatabaseWrapper': {'bases': ['django.db.backends.sqlite3.base.DatabaseWrapper'],
                                                                                'constructor': ['*args',
                                                                                                '**kwargs'],
                                                                                'docstring': '',
                                                                                'methods': [('_cursor',
                                                                                             [],
                                                                                             '')],
                                                                                'properties': ['spatialite_lib',
                                                                                               'ops',
                                                                                               'client',
                                                                                               'creation',
                                                                                               'introspection',
                                                                                               'connection']},
             'django.contrib.gis.db.backends.spatialite.client.SpatiaLiteClient': {'bases': ['django.db.backends.sqlite3.client.DatabaseClient'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [],
                                                                                   'properties': ['executable_name']},
             'django.contrib.gis.db.backends.spatialite.creation.SpatiaLiteCreation': {'bases': ['django.db.backends.sqlite3.creation.DatabaseCreation'],
                                                                                       'constructor': [],
                                                                                       'docstring': '',
                                                                                       'methods': [('create_test_db',
                                                                                                    ['verbosity=1',
                                                                                                     'autoclobber=False'],
                                                                                                    '\n        Creates a test database, prompting the user for confirmation if the\n        database already exists. Returns the name of the test database created.\n\n        This method is overloaded to load up the SpatiaLite initialization\n        SQL prior to calling the `syncdb` command.\n        '),
                                                                                                   ('sql_indexes_for_field',
                                                                                                    ['model',
                                                                                                     'f',
                                                                                                     'style'],
                                                                                                    'Return any spatial index creation SQL for the field.'),
                                                                                                   ('load_spatialite_sql',
                                                                                                    [],
                                                                                                    '\n        This routine loads up the SpatiaLite SQL file.\n        '),
                                                                                                   ('spatialite_init_file',
                                                                                                    [],
                                                                                                    '')],
                                                                                       'properties': []},
             'django.contrib.gis.db.backends.spatialite.introspection.GeoFlexibleFieldLookupDict': {'bases': ['django.db.backends.sqlite3.introspection.FlexibleFieldLookupDict'],
                                                                                                    'constructor': [],
                                                                                                    'docstring': '\n    Sublcass that includes updates the `base_data_types_reverse` dict\n    for geometry field types.\n    ',
                                                                                                    'methods': [],
                                                                                                    'properties': ['base_data_types_reverse']},
             'django.contrib.gis.db.backends.spatialite.introspection.SpatiaLiteIntrospection': {'bases': ['django.db.backends.sqlite3.introspection.DatabaseIntrospection'],
                                                                                                 'constructor': [],
                                                                                                 'docstring': '',
                                                                                                 'methods': [('get_geometry_type',
                                                                                                              ['table_name',
                                                                                                               'geo_col'],
                                                                                                              '')],
                                                                                                 'properties': ['data_types_reverse']},
             'django.contrib.gis.db.backends.spatialite.models.GeometryColumns': {'bases': ['django.db.models.Model'],
                                                                                  'constructor': [],
                                                                                  'docstring': "\n    The 'geometry_columns' table from SpatiaLite.\n    ",
                                                                                  'methods': [('table_name_col',
                                                                                               [],
                                                                                               '\n        Returns the name of the metadata column used to store the\n        the feature table name.\n        '),
                                                                                              ('geom_col_name',
                                                                                               [],
                                                                                               '\n        Returns the name of the metadata column used to store the\n        the feature geometry column.\n        '),
                                                                                              ('__unicode__',
                                                                                               [],
                                                                                               '')],
                                                                                  'properties': ['f_table_name',
                                                                                                 'f_geometry_column',
                                                                                                 'type',
                                                                                                 'coord_dimension',
                                                                                                 'srid',
                                                                                                 'spatial_index_enabled']},
             'django.contrib.gis.db.backends.spatialite.models.SpatialRefSys': {'bases': ['django.db.models.Model',
                                                                                          'django.contrib.gis.db.backends.base.SpatialRefSysMixin'],
                                                                                'constructor': [],
                                                                                'docstring': "\n    The 'spatial_ref_sys' table from SpatiaLite.\n    ",
                                                                                'methods': [],
                                                                                'properties': ['srid',
                                                                                               'auth_name',
                                                                                               'auth_srid',
                                                                                               'ref_sys_name',
                                                                                               'proj4text',
                                                                                               'wkt']},
             'django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteDistance': {'bases': ['django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteFunction'],
                                                                                         'constructor': ['operator'],
                                                                                         'docstring': 'For SpatiaLite distance operations.',
                                                                                         'methods': [],
                                                                                         'properties': ['dist_func',
                                                                                                        'sql_template']},
             'django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteFunction': {'bases': ['django.contrib.gis.db.backends.util.SpatialFunction'],
                                                                                         'constructor': ['function',
                                                                                                         '**kwargs'],
                                                                                         'docstring': 'For SpatiaLite function calls.',
                                                                                         'methods': [],
                                                                                         'properties': []},
             'django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteFunctionParam': {'bases': ['django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteFunction'],
                                                                                              'constructor': [],
                                                                                              'docstring': 'For SpatiaLite functions that take another parameter.',
                                                                                              'methods': [],
                                                                                              'properties': ['sql_template']},
             'django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations': {'bases': ['django.db.backends.sqlite3.base.DatabaseOperations',
                                                                                                     'django.contrib.gis.db.backends.base.BaseSpatialOperations'],
                                                                                           'constructor': ['connection'],
                                                                                           'docstring': '',
                                                                                           'methods': [('check_aggregate_support',
                                                                                                        ['aggregate'],
                                                                                                        "\n        Checks if the given aggregate name is supported (that is, if it's\n        in `self.valid_aggregates`).\n        "),
                                                                                                       ('convert_geom',
                                                                                                        ['wkt',
                                                                                                         'geo_field'],
                                                                                                        '\n        Converts geometry WKT returned from a SpatiaLite aggregate.\n        '),
                                                                                                       ('geo_db_type',
                                                                                                        ['f'],
                                                                                                        '\n        Returns None because geometry columnas are added via the\n        `AddGeometryColumn` stored procedure on SpatiaLite.\n        '),
                                                                                                       ('get_distance',
                                                                                                        ['f',
                                                                                                         'value',
                                                                                                         'lookup_type'],
                                                                                                        '\n        Returns the distance parameters for the given geometry field,\n        lookup value, and lookup type.  SpatiaLite only supports regular\n        cartesian-based queries (no spheroid/sphere calculations for point\n        geometries like PostGIS).\n        '),
                                                                                                       ('get_geom_placeholder',
                                                                                                        ['f',
                                                                                                         'value'],
                                                                                                        '\n        Provides a proper substitution value for Geometries that are not in the\n        SRID of the field.  Specifically, this routine will substitute in the\n        Transform() and GeomFromText() function call(s).\n        '),
                                                                                                       ('_get_spatialite_func',
                                                                                                        ['func'],
                                                                                                        '\n        Helper routine for calling SpatiaLite functions and returning\n        their result.\n        '),
                                                                                                       ('geos_version',
                                                                                                        [],
                                                                                                        'Returns the version of GEOS used by SpatiaLite as a string.'),
                                                                                                       ('proj4_version',
                                                                                                        [],
                                                                                                        'Returns the version of the PROJ.4 library used by SpatiaLite.'),
                                                                                                       ('spatialite_version',
                                                                                                        [],
                                                                                                        'Returns the SpatiaLite library version as a string.'),
                                                                                                       ('spatialite_version_tuple',
                                                                                                        [],
                                                                                                        '\n        Returns the SpatiaLite version as a tuple (version string, major,\n        minor, subminor).\n        '),
                                                                                                       ('spatial_aggregate_sql',
                                                                                                        ['agg'],
                                                                                                        '\n        Returns the spatial aggregate SQL template and function for the\n        given Aggregate instance.\n        '),
                                                                                                       ('spatial_lookup_sql',
                                                                                                        ['lvalue',
                                                                                                         'lookup_type',
                                                                                                         'value',
                                                                                                         'field',
                                                                                                         'qn'],
                                                                                                        '\n        Returns the SpatiaLite-specific SQL for the given lookup value\n        [a tuple of (alias, column, db_type)], lookup type, lookup\n        value, the model field, and the quoting function.\n        '),
                                                                                                       ('geometry_columns',
                                                                                                        [],
                                                                                                        ''),
                                                                                                       ('spatial_ref_sys',
                                                                                                        [],
                                                                                                        '')],
                                                                                           'properties': ['compiler_module',
                                                                                                          'name',
                                                                                                          'spatialite',
                                                                                                          'version_regex',
                                                                                                          'valid_aggregates',
                                                                                                          'k',
                                                                                                          'Adapter',
                                                                                                          'Adaptor',
                                                                                                          'area',
                                                                                                          'centroid',
                                                                                                          'contained',
                                                                                                          'difference',
                                                                                                          'distance',
                                                                                                          'envelope',
                                                                                                          'intersection',
                                                                                                          'length',
                                                                                                          'num_geom',
                                                                                                          'num_points',
                                                                                                          'point_on_surface',
                                                                                                          'scale',
                                                                                                          'svg',
                                                                                                          'sym_difference',
                                                                                                          'transform',
                                                                                                          'translate',
                                                                                                          'union',
                                                                                                          'unionagg',
                                                                                                          'from_text',
                                                                                                          'from_wkb',
                                                                                                          'select',
                                                                                                          'geometry_functions',
                                                                                                          'distance_functions',
                                                                                                          'connection',
                                                                                                          'spatial_version',
                                                                                                          'gis_terms']},
             'django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperator': {'bases': ['django.contrib.gis.db.backends.util.SpatialOperation'],
                                                                                         'constructor': ['operator'],
                                                                                         'docstring': 'For SpatiaLite operators (e.g. `&&`, `~`).',
                                                                                         'methods': [],
                                                                                         'properties': []},
             'django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteRelate': {'bases': ['django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteFunctionParam'],
                                                                                       'constructor': ['pattern'],
                                                                                       'docstring': 'For SpatiaLite Relate(<geom>, <pattern>) calls.',
                                                                                       'methods': [],
                                                                                       'properties': ['pattern_regex']},
             'django.contrib.gis.db.backends.util.SpatialFunction': {'bases': ['django.contrib.gis.db.backends.util.SpatialOperation'],
                                                                     'constructor': ['func',
                                                                                     "result=''",
                                                                                     "operator=''",
                                                                                     '**kwargs'],
                                                                     'docstring': '\n    Base class for generating spatial SQL related to a function.\n    ',
                                                                     'methods': [],
                                                                     'properties': ['sql_template']},
             'django.contrib.gis.db.backends.util.SpatialOperation': {'bases': ['object'],
                                                                      'constructor': ["function=''",
                                                                                      "operator=''",
                                                                                      "result=''",
                                                                                      '**kwargs'],
                                                                      'docstring': '\n    Base class for generating spatial SQL.\n    ',
                                                                      'methods': [('as_sql',
                                                                                   ['geo_col',
                                                                                    "geometry='%s'"],
                                                                                   ''),
                                                                                  ('params',
                                                                                   ['geo_col',
                                                                                    'geometry'],
                                                                                   '')],
                                                                      'properties': ['sql_template',
                                                                                     'function',
                                                                                     'operator',
                                                                                     'result',
                                                                                     'extra']},
             'django.contrib.gis.db.models.aggregates.Collect': {'bases': ['django.db.models.Aggregate'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['name']},
             'django.contrib.gis.db.models.aggregates.Extent': {'bases': ['django.db.models.Aggregate'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['name']},
             'django.contrib.gis.db.models.aggregates.Extent3D': {'bases': ['django.db.models.Aggregate'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': ['name']},
             'django.contrib.gis.db.models.aggregates.MakeLine': {'bases': ['django.db.models.Aggregate'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': ['name']},
             'django.contrib.gis.db.models.aggregates.Union': {'bases': ['django.db.models.Aggregate'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['name']},
             'django.contrib.gis.db.models.fields.GeometryCollectionField': {'bases': ['django.contrib.gis.geometry.backend.GeometryField'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [],
                                                                             'properties': ['geom_type',
                                                                                            'description']},
             'django.contrib.gis.db.models.fields.GeometryField': {'bases': ['django.db.models.fields.Field'],
                                                                   'constructor': ['verbose_name=None',
                                                                                   'srid=4326',
                                                                                   'spatial_index=True',
                                                                                   'dim=2',
                                                                                   'geography=False',
                                                                                   '**kwargs'],
                                                                   'docstring': 'The base GIS field -- maps to the OpenGIS Specification Geometry type.',
                                                                   'methods': [('_get_srid_info',
                                                                                ['connection'],
                                                                                ''),
                                                                               ('spheroid',
                                                                                ['connection'],
                                                                                ''),
                                                                               ('units',
                                                                                ['connection'],
                                                                                ''),
                                                                               ('units_name',
                                                                                ['connection'],
                                                                                ''),
                                                                               ('geodetic',
                                                                                ['connection'],
                                                                                "\n        Returns true if this field's SRID corresponds with a coordinate\n        system that uses non-projected units (e.g., latitude/longitude).\n        "),
                                                                               ('get_distance',
                                                                                ['value',
                                                                                 'lookup_type',
                                                                                 'connection'],
                                                                                '\n        Returns a distance number in units of the field.  For example, if\n        `D(km=1)` was passed in and the units of the field were in meters,\n        then 1000 would be returned.\n        '),
                                                                               ('get_prep_value',
                                                                                ['value'],
                                                                                '\n        Spatial lookup values are either a parameter that is (or may be\n        converted to) a geometry, or a sequence of lookup values that\n        begins with a geometry.  This routine will setup the geometry\n        value properly, and preserve any other lookup parameters before\n        returning to the caller.\n        '),
                                                                               ('get_srid',
                                                                                ['geom'],
                                                                                '\n        Returns the default SRID for the given geometry, taking into account\n        the SRID set for the field.  For example, if the input geometry\n        has no SRID, then that of the field will be returned.\n        '),
                                                                               ('contribute_to_class',
                                                                                ['cls',
                                                                                 'name'],
                                                                                ''),
                                                                               ('db_type',
                                                                                ['connection'],
                                                                                ''),
                                                                               ('formfield',
                                                                                ['**kwargs'],
                                                                                ''),
                                                                               ('get_db_prep_lookup',
                                                                                ['lookup_type',
                                                                                 'value',
                                                                                 'connection',
                                                                                 'prepared=False'],
                                                                                '\n        Prepare for the database lookup, and return any spatial parameters\n        necessary for the query.  This includes wrapping any geometry\n        parameters with a backend-specific adapter and formatting any distance\n        parameters into the correct units for the coordinate system of the\n        field.\n        '),
                                                                               ('get_prep_lookup',
                                                                                ['lookup_type',
                                                                                 'value'],
                                                                                ''),
                                                                               ('get_db_prep_save',
                                                                                ['value',
                                                                                 'connection'],
                                                                                'Prepares the value for saving in the database.'),
                                                                               ('get_placeholder',
                                                                                ['value',
                                                                                 'connection'],
                                                                                '\n        Returns the placeholder for the geometry column for the\n        given value.\n        ')],
                                                                   'properties': ['geom_type',
                                                                                  'geodetic_units',
                                                                                  'description',
                                                                                  'spatial_index',
                                                                                  'srid',
                                                                                  'dim',
                                                                                  'geography',
                                                                                  '_extent',
                                                                                  '_tolerance',
                                                                                  '_units',
                                                                                  '_units_name',
                                                                                  '_spheroid']},
             'django.contrib.gis.db.models.fields.LineStringField': {'bases': ['django.contrib.gis.geometry.backend.GeometryField'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['geom_type',
                                                                                    'description']},
             'django.contrib.gis.db.models.fields.MultiLineStringField': {'bases': ['django.contrib.gis.geometry.backend.GeometryField'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [],
                                                                          'properties': ['geom_type',
                                                                                         'description']},
             'django.contrib.gis.db.models.fields.MultiPointField': {'bases': ['django.contrib.gis.geometry.backend.GeometryField'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['geom_type',
                                                                                    'description']},
             'django.contrib.gis.db.models.fields.MultiPolygonField': {'bases': ['django.contrib.gis.geometry.backend.GeometryField'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [],
                                                                       'properties': ['geom_type',
                                                                                      'description']},
             'django.contrib.gis.db.models.fields.PointField': {'bases': ['django.contrib.gis.geometry.backend.GeometryField'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['geom_type',
                                                                               'description']},
             'django.contrib.gis.db.models.fields.PolygonField': {'bases': ['django.contrib.gis.geometry.backend.GeometryField'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': ['geom_type',
                                                                                 'description']},
             'django.contrib.gis.db.models.manager.GeoManager': {'bases': ['django.db.models.manager.Manager'],
                                                                 'constructor': [],
                                                                 'docstring': 'Overrides Manager to return Geographic QuerySets.',
                                                                 'methods': [('get_query_set',
                                                                              [],
                                                                              ''),
                                                                             ('area',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('centroid',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('collect',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('difference',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('distance',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('envelope',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('extent',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('extent3d',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('force_rhr',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('geohash',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('geojson',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('gml',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('intersection',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('kml',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('length',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('make_line',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('mem_size',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('num_geom',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('num_points',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('perimeter',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('point_on_surface',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('reverse_geom',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('scale',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('snap_to_grid',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('svg',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('sym_difference',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('transform',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('translate',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('union',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('unionagg',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              '')],
                                                                 'properties': ['use_for_related_fields']},
             'django.contrib.gis.db.models.proxy.GeometryProxy': {'bases': ['object'],
                                                                  'constructor': ['klass',
                                                                                  'field'],
                                                                  'docstring': '',
                                                                  'methods': [('__get__',
                                                                               ['obj',
                                                                                'type=None'],
                                                                               '\n        This accessor retrieves the geometry, initializing it using the geometry\n        class specified during initialization and the HEXEWKB value of the field.\n        Currently, only GEOS or OGR geometries are supported.\n        '),
                                                                              ('__set__',
                                                                               ['obj',
                                                                                'value'],
                                                                               '\n        This accessor sets the proxied geometry with the geometry class\n        specified during initialization.  Values of None, HEXEWKB, or WKT may\n        be used to set the geometry as well.\n        ')],
                                                                  'properties': ['_field',
                                                                                 '_klass']},
             'django.contrib.gis.db.models.query.GeoQuerySet': {'bases': ['django.db.models.query.QuerySet'],
                                                                'constructor': ['model=None',
                                                                                'query=None',
                                                                                'using=None'],
                                                                'docstring': 'The Geographic QuerySet.',
                                                                'methods': [('values',
                                                                             ['*fields'],
                                                                             ''),
                                                                            ('values_list',
                                                                             ['*fields',
                                                                              '**kwargs'],
                                                                             ''),
                                                                            ('area',
                                                                             ['tolerance=0.050000000000000003',
                                                                              '**kwargs'],
                                                                             '\n        Returns the area of the geographic field in an `area` attribute on\n        each element of this GeoQuerySet.\n        '),
                                                                            ('centroid',
                                                                             ['**kwargs'],
                                                                             '\n        Returns the centroid of the geographic field in a `centroid`\n        attribute on each element of this GeoQuerySet.\n        '),
                                                                            ('collect',
                                                                             ['**kwargs'],
                                                                             '\n        Performs an aggregate collect operation on the given geometry field.\n        This is analagous to a union operation, but much faster because\n        boundaries are not dissolved.\n        '),
                                                                            ('difference',
                                                                             ['geom',
                                                                              '**kwargs'],
                                                                             '\n        Returns the spatial difference of the geographic field in a `difference`\n        attribute on each element of this GeoQuerySet.\n        '),
                                                                            ('distance',
                                                                             ['geom',
                                                                              '**kwargs'],
                                                                             '\n        Returns the distance from the given geographic field name to the\n        given geometry in a `distance` attribute on each element of the\n        GeoQuerySet.\n\n        Keyword Arguments:\n         `spheroid`  => If the geometry field is geodetic and PostGIS is\n                        the spatial database, then the more accurate\n                        spheroid calculation will be used instead of the\n                        quicker sphere calculation.\n\n         `tolerance` => Used only for Oracle. The tolerance is\n                        in meters -- a default of 5 centimeters (0.05)\n                        is used.\n        '),
                                                                            ('envelope',
                                                                             ['**kwargs'],
                                                                             '\n        Returns a Geometry representing the bounding box of the\n        Geometry field in an `envelope` attribute on each element of\n        the GeoQuerySet.\n        '),
                                                                            ('extent',
                                                                             ['**kwargs'],
                                                                             '\n        Returns the extent (aggregate) of the features in the GeoQuerySet.  The\n        extent will be returned as a 4-tuple, consisting of (xmin, ymin, xmax, ymax).\n        '),
                                                                            ('extent3d',
                                                                             ['**kwargs'],
                                                                             '\n        Returns the aggregate extent, in 3D, of the features in the\n        GeoQuerySet. It is returned as a 6-tuple, comprising:\n          (xmin, ymin, zmin, xmax, ymax, zmax).\n        '),
                                                                            ('force_rhr',
                                                                             ['**kwargs'],
                                                                             '\n        Returns a modified version of the Polygon/MultiPolygon in which\n        all of the vertices follow the Right-Hand-Rule.  By default,\n        this is attached as the `force_rhr` attribute on each element\n        of the GeoQuerySet.\n        '),
                                                                            ('geojson',
                                                                             ['precision=8',
                                                                              'crs=False',
                                                                              'bbox=False',
                                                                              '**kwargs'],
                                                                             '\n        Returns a GeoJSON representation of the geomtry field in a `geojson`\n        attribute on each element of the GeoQuerySet.\n\n        The `crs` and `bbox` keywords may be set to True if the users wants\n        the coordinate reference system and the bounding box to be included\n        in the GeoJSON representation of the geometry.\n        '),
                                                                            ('geohash',
                                                                             ['precision=20',
                                                                              '**kwargs'],
                                                                             '\n        Returns a GeoHash representation of the given field in a `geohash`\n        attribute on each element of the GeoQuerySet.\n\n        The `precision` keyword may be used to custom the number of\n        _characters_ used in the output GeoHash, the default is 20.\n        '),
                                                                            ('gml',
                                                                             ['precision=8',
                                                                              'version=2',
                                                                              '**kwargs'],
                                                                             '\n        Returns GML representation of the given field in a `gml` attribute\n        on each element of the GeoQuerySet.\n        '),
                                                                            ('intersection',
                                                                             ['geom',
                                                                              '**kwargs'],
                                                                             '\n        Returns the spatial intersection of the Geometry field in\n        an `intersection` attribute on each element of this\n        GeoQuerySet.\n        '),
                                                                            ('kml',
                                                                             ['**kwargs'],
                                                                             '\n        Returns KML representation of the geometry field in a `kml`\n        attribute on each element of this GeoQuerySet.\n        '),
                                                                            ('length',
                                                                             ['**kwargs'],
                                                                             '\n        Returns the length of the geometry field as a `Distance` object\n        stored in a `length` attribute on each element of this GeoQuerySet.\n        '),
                                                                            ('make_line',
                                                                             ['**kwargs'],
                                                                             '\n        Creates a linestring from all of the PointField geometries in the\n        this GeoQuerySet and returns it.  This is a spatial aggregate\n        method, and thus returns a geometry rather than a GeoQuerySet.\n        '),
                                                                            ('mem_size',
                                                                             ['**kwargs'],
                                                                             '\n        Returns the memory size (number of bytes) that the geometry field takes\n        in a `mem_size` attribute  on each element of this GeoQuerySet.\n        '),
                                                                            ('num_geom',
                                                                             ['**kwargs'],
                                                                             '\n        Returns the number of geometries if the field is a\n        GeometryCollection or Multi* Field in a `num_geom`\n        attribute on each element of this GeoQuerySet; otherwise\n        the sets with None.\n        '),
                                                                            ('num_points',
                                                                             ['**kwargs'],
                                                                             '\n        Returns the number of points in the first linestring in the\n        Geometry field in a `num_points` attribute on each element of\n        this GeoQuerySet; otherwise sets with None.\n        '),
                                                                            ('perimeter',
                                                                             ['**kwargs'],
                                                                             '\n        Returns the perimeter of the geometry field as a `Distance` object\n        stored in a `perimeter` attribute on each element of this GeoQuerySet.\n        '),
                                                                            ('point_on_surface',
                                                                             ['**kwargs'],
                                                                             '\n        Returns a Point geometry guaranteed to lie on the surface of the\n        Geometry field in a `point_on_surface` attribute on each element\n        of this GeoQuerySet; otherwise sets with None.\n        '),
                                                                            ('reverse_geom',
                                                                             ['**kwargs'],
                                                                             '\n        Reverses the coordinate order of the geometry, and attaches as a\n        `reverse` attribute on each element of this GeoQuerySet.\n        '),
                                                                            ('scale',
                                                                             ['x',
                                                                              'y',
                                                                              'z=0.0',
                                                                              '**kwargs'],
                                                                             '\n        Scales the geometry to a new size by multiplying the ordinates\n        with the given x,y,z scale factors.\n        '),
                                                                            ('snap_to_grid',
                                                                             ['*args',
                                                                              '**kwargs'],
                                                                             '\n        Snap all points of the input geometry to the grid.  How the\n        geometry is snapped to the grid depends on how many arguments\n        were given:\n          - 1 argument : A single size to snap both the X and Y grids to.\n          - 2 arguments: X and Y sizes to snap the grid to.\n          - 4 arguments: X, Y sizes and the X, Y origins.\n        '),
                                                                            ('svg',
                                                                             ['relative=False',
                                                                              'precision=8',
                                                                              '**kwargs'],
                                                                             '\n        Returns SVG representation of the geographic field in a `svg`\n        attribute on each element of this GeoQuerySet.\n\n        Keyword Arguments:\n         `relative`  => If set to True, this will evaluate the path in\n                        terms of relative moves (rather than absolute).\n\n         `precision` => May be used to set the maximum number of decimal\n                        digits used in output (defaults to 8).\n        '),
                                                                            ('sym_difference',
                                                                             ['geom',
                                                                              '**kwargs'],
                                                                             '\n        Returns the symmetric difference of the geographic field in a\n        `sym_difference` attribute on each element of this GeoQuerySet.\n        '),
                                                                            ('translate',
                                                                             ['x',
                                                                              'y',
                                                                              'z=0.0',
                                                                              '**kwargs'],
                                                                             '\n        Translates the geometry to a new location using the given numeric\n        parameters as offsets.\n        '),
                                                                            ('transform',
                                                                             ['srid=4326',
                                                                              '**kwargs'],
                                                                             '\n        Transforms the given geometry field to the given SRID.  If no SRID is\n        provided, the transformation will default to using 4326 (WGS84).\n        '),
                                                                            ('union',
                                                                             ['geom',
                                                                              '**kwargs'],
                                                                             '\n        Returns the union of the geographic field with the given\n        Geometry in a `union` attribute on each element of this GeoQuerySet.\n        '),
                                                                            ('unionagg',
                                                                             ['**kwargs'],
                                                                             '\n        Performs an aggregate union on the given geometry field.  Returns\n        None if the GeoQuerySet is empty.  The `tolerance` keyword is for\n        Oracle backends only.\n        '),
                                                                            ('_spatial_setup',
                                                                             ['att',
                                                                              'desc=None',
                                                                              'field_name=None',
                                                                              'geo_field_type=None'],
                                                                             '\n        Performs set up for executing the spatial function.\n        '),
                                                                            ('_spatial_aggregate',
                                                                             ['aggregate',
                                                                              'field_name=None',
                                                                              'geo_field_type=None',
                                                                              'tolerance=0.050000000000000003'],
                                                                             '\n        DRY routine for calling aggregate spatial stored procedures and\n        returning their result to the caller of the function.\n        '),
                                                                            ('_spatial_attribute',
                                                                             ['att',
                                                                              'settings',
                                                                              'field_name=None',
                                                                              'model_att=None'],
                                                                             '\n        DRY routine for calling a spatial stored procedure on a geometry column\n        and attaching its output as an attribute of the model.\n\n        Arguments:\n         att:\n          The name of the spatial attribute that holds the spatial\n          SQL function to call.\n\n         settings:\n          Dictonary of internal settings to customize for the spatial procedure.\n\n        Public Keyword Arguments:\n\n         field_name:\n          The name of the geographic field to call the spatial\n          function on.  May also be a lookup to a geometry field\n          as part of a foreign key relation.\n\n         model_att:\n          The name of the model attribute to attach the output of\n          the spatial function to.\n        '),
                                                                            ('_distance_attribute',
                                                                             ['func',
                                                                              'geom=None',
                                                                              'tolerance=0.050000000000000003',
                                                                              'spheroid=False',
                                                                              '**kwargs'],
                                                                             '\n        DRY routine for GeoQuerySet distance attribute routines.\n        '),
                                                                            ('_geom_attribute',
                                                                             ['func',
                                                                              'tolerance=0.050000000000000003',
                                                                              '**kwargs'],
                                                                             '\n        DRY routine for setting up a GeoQuerySet method that attaches a\n        Geometry attribute (e.g., `centroid`, `point_on_surface`).\n        '),
                                                                            ('_geomset_attribute',
                                                                             ['func',
                                                                              'geom',
                                                                              'tolerance=0.050000000000000003',
                                                                              '**kwargs'],
                                                                             '\n        DRY routine for setting up a GeoQuerySet method that attaches a\n        Geometry attribute and takes a Geoemtry parameter.  This is used\n        for geometry set-like operations (e.g., intersection, difference,\n        union, sym_difference).\n        '),
                                                                            ('_geocol_select',
                                                                             ['geo_field',
                                                                              'field_name'],
                                                                             '\n        Helper routine for constructing the SQL to select the geographic\n        column.  Takes into account if the geographic field is in a\n        ForeignKey relation to the current model.\n        ')],
                                                                'properties': ['query']},
             'django.contrib.gis.db.models.query.GeoValuesListQuerySet': {'bases': ['django.contrib.gis.db.models.query.GeoValuesQuerySet',
                                                                                    'django.db.models.query.ValuesListQuerySet'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [],
                                                                          'properties': []},
             'django.contrib.gis.db.models.query.GeoValuesQuerySet': {'bases': ['django.db.models.query.ValuesQuerySet'],
                                                                      'constructor': ['*args',
                                                                                      '**kwargs'],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.gis.db.models.sql.aggregates.Collect': {'bases': ['django.contrib.gis.db.models.sql.aggregates.GeoAggregate'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': []},
             'django.contrib.gis.db.models.sql.aggregates.Extent': {'bases': ['django.contrib.gis.db.models.sql.aggregates.GeoAggregate'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['is_extent']},
             'django.contrib.gis.db.models.sql.aggregates.Extent3D': {'bases': ['django.contrib.gis.db.models.sql.aggregates.GeoAggregate'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': ['is_extent']},
             'django.contrib.gis.db.models.sql.aggregates.GeoAggregate': {'bases': ['django.contrib.gis.db.models.sql.aggregates.Aggregate'],
                                                                          'constructor': ['col',
                                                                                          'source=None',
                                                                                          'is_summary=False',
                                                                                          'tolerance=0.050000000000000003',
                                                                                          '**extra'],
                                                                          'docstring': '',
                                                                          'methods': [('as_sql',
                                                                                       ['qn',
                                                                                        'connection'],
                                                                                       'Return the aggregate, rendered as SQL.')],
                                                                          'properties': ['sql_template',
                                                                                         'conversion_class',
                                                                                         'is_extent',
                                                                                         'tolerance']},
             'django.contrib.gis.db.models.sql.aggregates.MakeLine': {'bases': ['django.contrib.gis.db.models.sql.aggregates.GeoAggregate'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.gis.db.models.sql.aggregates.Union': {'bases': ['django.contrib.gis.db.models.sql.aggregates.GeoAggregate'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.gis.db.models.sql.compiler.GeoSQLCompiler': {'bases': ['django.db.models.sql.compiler.SQLCompiler'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [('get_columns',
                                                                                       ['with_aliases=False'],
                                                                                       "\n        Return the list of columns to use in the select statement. If no\n        columns have been specified, returns all columns relating to fields in\n        the model.\n\n        If 'with_aliases' is true, any column names that are duplicated\n        (without the table names) are given unique aliases. This is needed in\n        some cases to avoid ambiguitity with nested queries.\n\n        This routine is overridden from Query to handle customized selection of\n        geometry columns.\n        "),
                                                                                      ('get_default_columns',
                                                                                       ['with_aliases=False',
                                                                                        'col_aliases=None',
                                                                                        'start_alias=None',
                                                                                        'opts=None',
                                                                                        'as_pairs=False',
                                                                                        'local_only=False'],
                                                                                       '\n        Computes the default columns for selecting every field in the base\n        model. Will sometimes be called to pull in related models (e.g. via\n        select_related), in which case "opts" and "start_alias" will be given\n        to provide a starting point for the traversal.\n\n        Returns a list of strings, quoted appropriately for use in SQL\n        directly, as well as a set of aliases used in the select statement (if\n        \'as_pairs\' is True, returns a list of (alias, col_name) pairs instead\n        of strings as the first component and None as the second component).\n\n        This routine is overridden from Query to handle customized selection of\n        geometry columns.\n        '),
                                                                                      ('resolve_columns',
                                                                                       ['row',
                                                                                        'fields=()'],
                                                                                       '\n        This routine is necessary so that distances and geometries returned\n        from extra selection SQL get resolved appropriately into Python\n        objects.\n        '),
                                                                                      ('get_extra_select_format',
                                                                                       ['alias'],
                                                                                       ''),
                                                                                      ('get_field_select',
                                                                                       ['field',
                                                                                        'alias=None',
                                                                                        'column=None'],
                                                                                       '\n        Returns the SELECT SQL string for the given field.  Figures out\n        if any custom selection SQL is needed for the column  The `alias`\n        keyword may be used to manually specify the database table where\n        the column exists, if not in the model associated with this\n        `GeoQuery`.  Similarly, `column` may be used to specify the exact\n        column name, rather than using the `column` attribute on `field`.\n        '),
                                                                                      ('get_select_format',
                                                                                       ['fld'],
                                                                                       "\n        Returns the selection format string, depending on the requirements\n        of the spatial backend.  For example, Oracle and MySQL require custom\n        selection formats in order to retrieve geometries in OGC WKT. For all\n        other fields a simple '%s' format string is returned.\n        "),
                                                                                      ('_field_column',
                                                                                       ['field',
                                                                                        'table_alias=None',
                                                                                        'column=None'],
                                                                                       '\n        Helper function that returns the database column for the given field.\n        The table and column are returned (quoted) in the proper format, e.g.,\n        `"geoapp_city"."point"`.  If `table_alias` is not specified, the\n        database table associated with the model of this `GeoQuery` will be\n        used.  If `column` is specified, it will be used instead of the value\n        in `field.column`.\n        ')],
                                                                          'properties': ['_select_aliases']},
             'django.contrib.gis.db.models.sql.compiler.SQLAggregateCompiler': {'bases': ['django.db.models.sql.compiler.SQLAggregateCompiler',
                                                                                          'django.contrib.gis.db.models.sql.compiler.GeoSQLCompiler'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [],
                                                                                'properties': []},
             'django.contrib.gis.db.models.sql.compiler.SQLDateCompiler': {'bases': ['django.db.models.sql.compiler.SQLDateCompiler',
                                                                                     'django.contrib.gis.db.models.sql.compiler.GeoSQLCompiler'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': []},
             'django.contrib.gis.db.models.sql.compiler.SQLDeleteCompiler': {'bases': ['django.db.models.sql.compiler.SQLDeleteCompiler',
                                                                                       'django.contrib.gis.db.models.sql.compiler.GeoSQLCompiler'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [],
                                                                             'properties': []},
             'django.contrib.gis.db.models.sql.compiler.SQLInsertCompiler': {'bases': ['django.db.models.sql.compiler.SQLInsertCompiler',
                                                                                       'django.contrib.gis.db.models.sql.compiler.GeoSQLCompiler'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [],
                                                                             'properties': []},
             'django.contrib.gis.db.models.sql.compiler.SQLUpdateCompiler': {'bases': ['django.db.models.sql.compiler.SQLUpdateCompiler',
                                                                                       'django.contrib.gis.db.models.sql.compiler.GeoSQLCompiler'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [],
                                                                             'properties': []},
             'django.contrib.gis.db.models.sql.conversion.AreaField': {'bases': ['django.contrib.gis.db.models.sql.conversion.BaseField'],
                                                                       'constructor': ['area_att'],
                                                                       'docstring': 'Wrapper for Area values.',
                                                                       'methods': [],
                                                                       'properties': ['area_att']},
             'django.contrib.gis.db.models.sql.conversion.BaseField': {'bases': ['object'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [('get_internal_type',
                                                                                    [],
                                                                                    "Overloaded method so OracleQuery.convert_values doesn't balk.")],
                                                                       'properties': ['empty_strings_allowed']},
             'django.contrib.gis.db.models.sql.conversion.DistanceField': {'bases': ['django.contrib.gis.db.models.sql.conversion.BaseField'],
                                                                           'constructor': ['distance_att'],
                                                                           'docstring': 'Wrapper for Distance values.',
                                                                           'methods': [],
                                                                           'properties': ['distance_att']},
             'django.contrib.gis.db.models.sql.conversion.GeomField': {'bases': ['django.contrib.gis.db.models.sql.conversion.BaseField'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    Wrapper for Geometry values.  It is a lightweight alternative to \n    using GeometryField (which requires a SQL query upon instantiation).\n    ',
                                                                       'methods': [],
                                                                       'properties': []},
             'django.contrib.gis.db.models.sql.query.GeoQuery': {'bases': ['django.db.models.query.sql.Query'],
                                                                 'constructor': ['model',
                                                                                 'where=GeoWhereNode'],
                                                                 'docstring': '\n    A single spatial SQL query.\n    ',
                                                                 'methods': [('clone',
                                                                              ['*args',
                                                                               '**kwargs'],
                                                                              ''),
                                                                             ('convert_values',
                                                                              ['value',
                                                                               'field',
                                                                               'connection'],
                                                                              "\n        Using the same routines that Oracle does we can convert our\n        extra selection objects into Geometry and Distance objects.\n        TODO: Make converted objects 'lazy' for less overhead.\n        "),
                                                                             ('get_aggregation',
                                                                              ['using'],
                                                                              ''),
                                                                             ('resolve_aggregate',
                                                                              ['value',
                                                                               'aggregate',
                                                                               'connection'],
                                                                              "\n        Overridden from GeoQuery's normalize to handle the conversion of\n        GeoAggregate objects.\n        "),
                                                                             ('_geo_field',
                                                                              ['field_name=None'],
                                                                              "\n        Returns the first Geometry field encountered; or specified via the\n        `field_name` keyword.  The `field_name` may be a string specifying\n        the geometry field on this GeoQuery's model, or a lookup string\n        to a geometry field via a ForeignKey relation.\n        ")],
                                                                 'properties': ['query_terms',
                                                                                'aggregates_module',
                                                                                'compiler',
                                                                                'custom_select',
                                                                                'transformed_srid',
                                                                                'extra_select_fields']},
             'django.contrib.gis.db.models.sql.where.GeoConstraint': {'bases': ['django.db.models.sql.where.Constraint'],
                                                                      'constructor': ['init_constraint'],
                                                                      'docstring': '\n    This subclass overrides `process` to better handle geographic SQL\n    construction.\n    ',
                                                                      'methods': [('process',
                                                                                   ['lookup_type',
                                                                                    'value',
                                                                                    'connection'],
                                                                                   '')],
                                                                      'properties': ['alias',
                                                                                     'col',
                                                                                     'field']},
             'django.contrib.gis.db.models.sql.where.GeoWhereNode': {'bases': ['django.db.models.sql.where.WhereNode'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    Used to represent the SQL where-clause for spatial databases --\n    these are tied to the GeoQuery class that created it.\n    ',
                                                                     'methods': [('add',
                                                                                  ['data',
                                                                                   'connector'],
                                                                                  ''),
                                                                                 ('make_atom',
                                                                                  ['child',
                                                                                   'qn',
                                                                                   'connection'],
                                                                                  ''),
                                                                                 ('_check_geo_field',
                                                                                  ['opts',
                                                                                   'lookup'],
                                                                                  "\n        Utility for checking the given lookup with the given model options.\n        The lookup is a string either specifying the geographic field, e.g.\n        'point, 'the_geom', or a related lookup on a geographic field like\n        'address__point'.\n\n        If a GeometryField exists according to the given lookup on the model\n        options, it will be returned.  Otherwise returns None.\n        ")],
                                                                     'properties': []},
             'django.contrib.gis.feeds.Feed': {'bases': ['django.contrib.syndication.feeds.Feed'],
                                               'constructor': [],
                                               'docstring': '\n    This is a subclass of the `Feed` from `django.contrib.syndication`.\n    This allows users to define a `geometry(obj)` and/or `item_geometry(item)`\n    methods on their own subclasses so that geo-referenced information may\n    placed in the feed.\n    ',
                                               'methods': [('feed_extra_kwargs', ['obj'], ''),
                                                           ('item_extra_kwargs', ['item'], '')],
                                               'properties': ['feed_type']},
             'django.contrib.gis.feeds.GeoAtom1Feed': {'bases': ['django.utils.feedgenerator.Atom1Feed',
                                                                 'django.contrib.gis.feeds.GeoFeedMixin'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('root_attributes', [], ''),
                                                                   ('add_item_elements',
                                                                    ['handler', 'item'],
                                                                    ''),
                                                                   ('add_root_elements',
                                                                    ['handler'],
                                                                    '')],
                                                       'properties': []},
             'django.contrib.gis.feeds.GeoFeedMixin': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '\n    This mixin provides the necessary routines for SyndicationFeed subclasses\n    to produce simple GeoRSS or W3C Geo elements.\n    ',
                                                       'methods': [('georss_coords',
                                                                    ['coords'],
                                                                    '\n        In GeoRSS coordinate pairs are ordered by lat/lon and separated by\n        a single white space.  Given a tuple of coordinates, this will return\n        a unicode GeoRSS representation.\n        '),
                                                                   ('add_georss_point',
                                                                    ['handler',
                                                                     'coords',
                                                                     'w3c_geo=False'],
                                                                    '\n        Adds a GeoRSS point with the given coords using the given handler.\n        Handles the differences between simple GeoRSS and the more pouplar\n        W3C Geo specification.\n        '),
                                                                   ('add_georss_element',
                                                                    ['handler',
                                                                     'item',
                                                                     'w3c_geo=False'],
                                                                    '\n        This routine adds a GeoRSS XML element using the given item and handler.\n        ')],
                                                       'properties': []},
             'django.contrib.gis.feeds.GeoRSSFeed': {'bases': ['django.utils.feedgenerator.Rss201rev2Feed',
                                                               'django.contrib.gis.feeds.GeoFeedMixin'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('rss_attributes', [], ''),
                                                                 ('add_item_elements',
                                                                  ['handler', 'item'],
                                                                  ''),
                                                                 ('add_root_elements',
                                                                  ['handler'],
                                                                  '')],
                                                     'properties': []},
             'django.contrib.gis.feeds.W3CGeoFeed': {'bases': ['django.utils.feedgenerator.Rss201rev2Feed',
                                                               'django.contrib.gis.feeds.GeoFeedMixin'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('rss_attributes', [], ''),
                                                                 ('add_item_elements',
                                                                  ['handler', 'item'],
                                                                  ''),
                                                                 ('add_root_elements',
                                                                  ['handler'],
                                                                  '')],
                                                     'properties': []},
             'django.contrib.gis.forms.fields.GeometryField': {'bases': ['django.forms.Field'],
                                                               'constructor': ['**kwargs'],
                                                               'docstring': '\n    This is the basic form field for a Geometry.  Any textual input that is\n    accepted by GEOSGeometry is accepted by this form.  By default,\n    this includes WKT, HEXEWKB, WKB (in a buffer), and GeoJSON.\n    ',
                                                               'methods': [('clean',
                                                                            ['value'],
                                                                            '\n        Validates that the input value can be converted to a Geometry\n        object (which is returned).  A ValidationError is raised if\n        the value cannot be instantiated as a Geometry.\n        ')],
                                                               'properties': ['widget',
                                                                              'default_error_messages',
                                                                              'srid',
                                                                              'geom_type',
                                                                              'null']},
             'django.contrib.gis.gdal.base.GDALBase': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '\n    Base object for GDAL objects that has a pointer access property\n    that controls access to the underlying C pointer.\n    ',
                                                       'methods': [('_get_ptr', [], ''),
                                                                   ('_set_ptr', ['ptr'], '')],
                                                       'properties': ['_ptr', 'ptr_type', 'ptr']},
             'django.contrib.gis.gdal.datasource.DataSource': {'bases': ['django.contrib.gis.gdal.base.GDALBase'],
                                                               'constructor': ['ds_input',
                                                                               'ds_driver=False',
                                                                               'write=False'],
                                                               'docstring': 'Wraps an OGR Data Source object.',
                                                               'methods': [('__del__',
                                                                            [],
                                                                            'Destroys this DataStructure object.'),
                                                                           ('__iter__',
                                                                            [],
                                                                            'Allows for iteration over the layers in a data source.'),
                                                                           ('__getitem__',
                                                                            ['index'],
                                                                            'Allows use of the index [] operator to get a layer at the index.'),
                                                                           ('__len__',
                                                                            [],
                                                                            'Returns the number of layers within the data source.'),
                                                                           ('__str__',
                                                                            [],
                                                                            'Returns OGR GetName and Driver for the Data Source.')],
                                                               'properties': ['_write',
                                                                              'ptr',
                                                                              'driver',
                                                                              'layer_count',
                                                                              'name']},
             'django.contrib.gis.gdal.driver.Driver': {'bases': ['django.contrib.gis.gdal.base.GDALBase'],
                                                       'constructor': ['dr_input'],
                                                       'docstring': 'Wraps an OGR Data Source Driver.',
                                                       'methods': [('__str__',
                                                                    [],
                                                                    'Returns the string name of the OGR Driver.'),
                                                                   ('_register',
                                                                    [],
                                                                    'Attempts to register all the data source drivers.')],
                                                       'properties': ['_alias',
                                                                      'ptr',
                                                                      'driver_count']},
             'django.contrib.gis.gdal.envelope.Envelope': {'bases': ['object'],
                                                           'constructor': ['*args'],
                                                           'docstring': '\n    The Envelope object is a C structure that contains the minimum and\n    maximum X, Y coordinates for a rectangle bounding box.  The naming\n    of the variables is compatible with the OGR Envelope structure.\n    ',
                                                           'methods': [('__eq__',
                                                                        ['other'],
                                                                        '\n        Returns True if the envelopes are equivalent; can compare against\n        other Envelopes and 4-tuples.\n        '),
                                                                       ('__str__',
                                                                        [],
                                                                        'Returns a string representation of the tuple.'),
                                                                       ('_from_sequence',
                                                                        ['seq'],
                                                                        'Initializes the C OGR Envelope structure from the given sequence.'),
                                                                       ('expand_to_include',
                                                                        ['*args'],
                                                                        ' \n        Modifies the envelope to expand to include the boundaries of \n        the passed-in 2-tuple (a point), 4-tuple (an extent) or \n        envelope. \n        ')],
                                                           'properties': ['_envelope',
                                                                          'min_x',
                                                                          'min_y',
                                                                          'max_x',
                                                                          'max_y',
                                                                          'ur',
                                                                          'll',
                                                                          'tuple',
                                                                          'wkt']},
             'django.contrib.gis.gdal.envelope.OGREnvelope': {'bases': ['ctypes.Structure'],
                                                              'constructor': [],
                                                              'docstring': 'Represents the OGREnvelope C Structure.',
                                                              'methods': [],
                                                              'properties': ['_fields_']},
             'django.contrib.gis.gdal.error.GDALException': {'bases': ['Exception'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': []},
             'django.contrib.gis.gdal.error.OGRException': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': []},
             'django.contrib.gis.gdal.error.OGRIndexError': {'bases': ['django.contrib.gis.gdal.error.OGRException',
                                                                       'KeyError'],
                                                             'constructor': [],
                                                             'docstring': "\n    This exception is raised when an invalid index is encountered, and has\n    the 'silent_variable_feature' attribute set to true.  This ensures that\n    django's templates proceed to use the next lookup type gracefully when\n    an Exception is raised.  Fixes ticket #4740.\n    ",
                                                             'methods': [],
                                                             'properties': ['silent_variable_failure']},
             'django.contrib.gis.gdal.error.SRSException': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': []},
             'django.contrib.gis.gdal.feature.Feature': {'bases': ['django.contrib.gis.gdal.base.GDALBase'],
                                                         'constructor': ['feat', 'fdefn'],
                                                         'docstring': 'A class that wraps an OGR Feature, needs to be instantiated from a Layer object.',
                                                         'methods': [('__del__',
                                                                      [],
                                                                      'Releases a reference to this object.'),
                                                                     ('__getitem__',
                                                                      ['index'],
                                                                      "\n        Gets the Field object at the specified index, which may be either\n        an integer or the Field's string label.  Note that the Field object\n        is not the field's _value_ -- use the `get` method instead to \n        retrieve the value (e.g. an integer) instead of a Field instance.\n        "),
                                                                     ('__iter__',
                                                                      [],
                                                                      'Iterates over each field in the Feature.'),
                                                                     ('__len__',
                                                                      [],
                                                                      'Returns the count of fields in this feature.'),
                                                                     ('__str__',
                                                                      [],
                                                                      'The string name of the feature.'),
                                                                     ('__eq__',
                                                                      ['other'],
                                                                      'Does equivalence testing on the features.'),
                                                                     ('get',
                                                                      ['field'],
                                                                      '\n        Returns the value of the field, instead of an instance of the Field\n        object.  May take a string of the field name or a Field object as\n        parameters.\n        '),
                                                                     ('index',
                                                                      ['field_name'],
                                                                      'Returns the index of the given field name.')],
                                                         'properties': ['ptr',
                                                                        '_fdefn',
                                                                        'fid',
                                                                        'layer_name',
                                                                        'num_fields',
                                                                        'fields',
                                                                        'geom',
                                                                        'geom_type']},
             'django.contrib.gis.gdal.field.Field': {'bases': ['django.contrib.gis.gdal.base.GDALBase'],
                                                     'constructor': ['feat', 'index'],
                                                     'docstring': 'A class that wraps an OGR Field, needs to be instantiated from a Feature object.',
                                                     'methods': [('__str__',
                                                                  [],
                                                                  'Returns the string representation of the Field.'),
                                                                 ('as_double',
                                                                  [],
                                                                  "Retrieves the Field's value as a double (float)."),
                                                                 ('as_int',
                                                                  [],
                                                                  "Retrieves the Field's value as an integer."),
                                                                 ('as_string',
                                                                  [],
                                                                  "Retrieves the Field's value as a string."),
                                                                 ('as_datetime',
                                                                  [],
                                                                  "Retrieves the Field's value as a tuple of date & time components.")],
                                                     'properties': ['_feat',
                                                                    '_index',
                                                                    'ptr',
                                                                    '__class__',
                                                                    'name',
                                                                    'precision',
                                                                    'type',
                                                                    'type_name',
                                                                    'value',
                                                                    'width']},
             'django.contrib.gis.gdal.field.OFTBinary': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'django.contrib.gis.gdal.field.OFTDate': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['value']},
             'django.contrib.gis.gdal.field.OFTDateTime': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['value']},
             'django.contrib.gis.gdal.field.OFTInteger': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['value', 'type']},
             'django.contrib.gis.gdal.field.OFTIntegerList': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': []},
             'django.contrib.gis.gdal.field.OFTReal': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['value']},
             'django.contrib.gis.gdal.field.OFTRealList': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': []},
             'django.contrib.gis.gdal.field.OFTString': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'django.contrib.gis.gdal.field.OFTStringList': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': []},
             'django.contrib.gis.gdal.field.OFTTime': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['value']},
             'django.contrib.gis.gdal.field.OFTWideString': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': []},
             'django.contrib.gis.gdal.field.OFTWideStringList': {'bases': ['django.contrib.gis.gdal.field.Field'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': []},
             'django.contrib.gis.gdal.geometries.GeometryCollection': {'bases': ['django.contrib.gis.gdal.geometries.OGRGeometry'],
                                                                       'constructor': [],
                                                                       'docstring': 'The Geometry Collection class.',
                                                                       'methods': [('__getitem__',
                                                                                    ['index'],
                                                                                    'Gets the Geometry at the specified index.'),
                                                                                   ('__iter__',
                                                                                    [],
                                                                                    'Iterates over each Geometry.'),
                                                                                   ('__len__',
                                                                                    [],
                                                                                    'The number of geometries in this Geometry Collection.'),
                                                                                   ('add',
                                                                                    ['geom'],
                                                                                    'Add the geometry to this Geometry Collection.')],
                                                                       'properties': ['point_count',
                                                                                      'tuple',
                                                                                      'coords']},
             'django.contrib.gis.gdal.geometries.LineString': {'bases': ['django.contrib.gis.gdal.geometries.OGRGeometry'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('__getitem__',
                                                                            ['index'],
                                                                            'Returns the Point at the given index.'),
                                                                           ('__iter__',
                                                                            [],
                                                                            'Iterates over each point in the LineString.'),
                                                                           ('__len__',
                                                                            [],
                                                                            'The length returns the number of points in the LineString.'),
                                                                           ('_listarr',
                                                                            ['func'],
                                                                            '\n        Internal routine that returns a sequence (list) corresponding with\n        the given function.\n        ')],
                                                               'properties': ['tuple',
                                                                              'coords',
                                                                              'x',
                                                                              'y',
                                                                              'z']},
             'django.contrib.gis.gdal.geometries.LinearRing': {'bases': ['django.contrib.gis.gdal.geometries.LineString'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': []},
             'django.contrib.gis.gdal.geometries.MultiLineString': {'bases': ['django.contrib.gis.gdal.geometries.GeometryCollection'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.gis.gdal.geometries.MultiPoint': {'bases': ['django.contrib.gis.gdal.geometries.GeometryCollection'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': []},
             'django.contrib.gis.gdal.geometries.MultiPolygon': {'bases': ['django.contrib.gis.gdal.geometries.GeometryCollection'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': []},
             'django.contrib.gis.gdal.geometries.OGRGeometry': {'bases': ['django.contrib.gis.gdal.base.GDALBase'],
                                                                'constructor': ['geom_input',
                                                                                'srs=None'],
                                                                'docstring': 'Generally encapsulates an OGR geometry.',
                                                                'methods': [('__del__',
                                                                             [],
                                                                             'Deletes this Geometry.'),
                                                                            ('__getstate__',
                                                                             [],
                                                                             ''),
                                                                            ('__setstate__',
                                                                             ['state'],
                                                                             ''),
                                                                            ('from_bbox',
                                                                             ['bbox'],
                                                                             'Constructs a Polygon from a bounding box (4-tuple).'),
                                                                            ('__or__',
                                                                             ['other'],
                                                                             'Returns the union of the two geometries.'),
                                                                            ('__and__',
                                                                             ['other'],
                                                                             'Returns the intersection of this Geometry and the other.'),
                                                                            ('__sub__',
                                                                             ['other'],
                                                                             'Return the difference this Geometry and the other.'),
                                                                            ('__xor__',
                                                                             ['other'],
                                                                             'Return the symmetric difference of this Geometry and the other.'),
                                                                            ('__eq__',
                                                                             ['other'],
                                                                             'Is this Geometry equal to the other?'),
                                                                            ('__ne__',
                                                                             ['other'],
                                                                             'Tests for inequality.'),
                                                                            ('__str__',
                                                                             [],
                                                                             'WKT is used for the string representation.'),
                                                                            ('_get_coord_dim',
                                                                             [],
                                                                             'Returns the coordinate dimension of the Geometry.'),
                                                                            ('_set_coord_dim',
                                                                             ['dim'],
                                                                             'Sets the coordinate dimension of this Geometry.'),
                                                                            ('_get_srs',
                                                                             [],
                                                                             'Returns the Spatial Reference for this Geometry.'),
                                                                            ('_set_srs',
                                                                             ['srs'],
                                                                             'Sets the SpatialReference for this geometry.'),
                                                                            ('_get_srid',
                                                                             [],
                                                                             ''),
                                                                            ('_set_srid',
                                                                             ['srid'],
                                                                             ''),
                                                                            ('clone',
                                                                             [],
                                                                             'Clones this OGR Geometry.'),
                                                                            ('close_rings',
                                                                             [],
                                                                             '\n        If there are any rings within this geometry that have not been\n        closed, this routine will do so by adding the starting point at the\n        end.\n        '),
                                                                            ('transform',
                                                                             ['coord_trans',
                                                                              'clone=False'],
                                                                             '\n        Transforms this geometry to a different spatial reference system.\n        May take a CoordTransform object, a SpatialReference object, string\n        WKT or PROJ.4, and/or an integer SRID.  By default nothing is returned\n        and the geometry is transformed in-place.  However, if the `clone`\n        keyword is set, then a transformed clone of this geometry will be\n        returned.\n        '),
                                                                            ('transform_to',
                                                                             ['srs'],
                                                                             'For backwards-compatibility.'),
                                                                            ('_topology',
                                                                             ['func', 'other'],
                                                                             'A generalized function for topology operations, takes a GDAL function and\n        the other geometry to perform the operation on.'),
                                                                            ('intersects',
                                                                             ['other'],
                                                                             'Returns True if this geometry intersects with the other.'),
                                                                            ('equals',
                                                                             ['other'],
                                                                             'Returns True if this geometry is equivalent to the other.'),
                                                                            ('disjoint',
                                                                             ['other'],
                                                                             'Returns True if this geometry and the other are spatially disjoint.'),
                                                                            ('touches',
                                                                             ['other'],
                                                                             'Returns True if this geometry touches the other.'),
                                                                            ('crosses',
                                                                             ['other'],
                                                                             'Returns True if this geometry crosses the other.'),
                                                                            ('within',
                                                                             ['other'],
                                                                             'Returns True if this geometry is within the other.'),
                                                                            ('contains',
                                                                             ['other'],
                                                                             'Returns True if this geometry contains the other.'),
                                                                            ('overlaps',
                                                                             ['other'],
                                                                             'Returns True if this geometry overlaps the other.'),
                                                                            ('_geomgen',
                                                                             ['gen_func',
                                                                              'other=None'],
                                                                             'A helper routine for the OGR routines that generate geometries.'),
                                                                            ('difference',
                                                                             ['other'],
                                                                             '\n        Returns a new geometry consisting of the region which is the difference\n        of this geometry and the other.\n        '),
                                                                            ('intersection',
                                                                             ['other'],
                                                                             '\n        Returns a new geometry consisting of the region of intersection of this\n        geometry and the other.\n        '),
                                                                            ('sym_difference',
                                                                             ['other'],
                                                                             '\n        Returns a new geometry which is the symmetric difference of this\n        geometry and the other.\n        '),
                                                                            ('union',
                                                                             ['other'],
                                                                             '\n        Returns a new geometry consisting of the region which is the union of\n        this geometry and the other.\n        ')],
                                                                'properties': ['ptr',
                                                                               'srs',
                                                                               '__class__',
                                                                               'dimension',
                                                                               'coord_dim',
                                                                               'geom_count',
                                                                               'point_count',
                                                                               'num_points',
                                                                               'num_coords',
                                                                               'geom_type',
                                                                               'geom_name',
                                                                               'area',
                                                                               'envelope',
                                                                               'extent',
                                                                               'srid',
                                                                               'geos',
                                                                               'gml',
                                                                               'hex',
                                                                               'json',
                                                                               'geojson',
                                                                               'kml',
                                                                               'wkb_size',
                                                                               'wkb',
                                                                               'wkt',
                                                                               'ewkt',
                                                                               'boundary',
                                                                               'convex_hull']},
             'django.contrib.gis.gdal.geometries.Point': {'bases': ['django.contrib.gis.gdal.geometries.OGRGeometry'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['x',
                                                                         'y',
                                                                         'z',
                                                                         'tuple',
                                                                         'coords']},
             'django.contrib.gis.gdal.geometries.Polygon': {'bases': ['django.contrib.gis.gdal.geometries.OGRGeometry'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('__len__',
                                                                         [],
                                                                         'The number of interior rings in this Polygon.'),
                                                                        ('__iter__',
                                                                         [],
                                                                         'Iterates through each ring in the Polygon.'),
                                                                        ('__getitem__',
                                                                         ['index'],
                                                                         'Gets the ring at the specified index.')],
                                                            'properties': ['shell',
                                                                           'exterior_ring',
                                                                           'tuple',
                                                                           'coords',
                                                                           'point_count',
                                                                           'centroid']},
             'django.contrib.gis.gdal.geomtype.OGRGeomType': {'bases': ['object'],
                                                              'constructor': ['type_input'],
                                                              'docstring': 'Encapulates OGR Geometry Types.',
                                                              'methods': [('__str__',
                                                                           [],
                                                                           'Returns the value of the name property.'),
                                                                          ('__eq__',
                                                                           ['other'],
                                                                           '\n        Does an equivalence test on the OGR type with the given\n        other OGRGeomType, the short-hand string, or the integer.\n        '),
                                                                          ('__ne__',
                                                                           ['other'],
                                                                           '')],
                                                              'properties': ['wkb25bit',
                                                                             '_types',
                                                                             '_str_types',
                                                                             'k',
                                                                             'v',
                                                                             'num',
                                                                             'name',
                                                                             'django']},
             'django.contrib.gis.gdal.layer.Layer': {'bases': ['django.contrib.gis.gdal.base.GDALBase'],
                                                     'constructor': ['layer_ptr', 'ds'],
                                                     'docstring': 'A class that wraps an OGR Layer, needs to be instantiated from a DataSource object.',
                                                     'methods': [('__getitem__',
                                                                  ['index'],
                                                                  'Gets the Feature at the specified index.'),
                                                                 ('__iter__',
                                                                  [],
                                                                  'Iterates over each Feature in the Layer.'),
                                                                 ('__len__',
                                                                  [],
                                                                  'The length is the number of features.'),
                                                                 ('__str__',
                                                                  [],
                                                                  'The string name of the layer.'),
                                                                 ('_make_feature',
                                                                  ['feat_id'],
                                                                  '\n        Helper routine for __getitem__ that constructs a Feature from the given\n        Feature ID.  If the OGR Layer does not support random-access reading,\n        then each feature of the layer will be incremented through until the\n        a Feature is found matching the given feature ID.\n        '),
                                                                 ('_get_spatial_filter',
                                                                  [],
                                                                  ''),
                                                                 ('_set_spatial_filter',
                                                                  ['filter'],
                                                                  ''),
                                                                 ('get_fields',
                                                                  ['field_name'],
                                                                  '\n        Returns a list containing the given field name for every Feature\n        in the Layer.\n        '),
                                                                 ('get_geoms',
                                                                  ['geos=False'],
                                                                  '\n        Returns a list containing the OGRGeometry for every Feature in\n        the Layer.\n        '),
                                                                 ('test_capability',
                                                                  ['capability'],
                                                                  "\n        Returns a bool indicating whether the this Layer supports the given\n        capability (a string).  Valid capability strings include:\n          'RandomRead', 'SequentialWrite', 'RandomWrite', 'FastSpatialFilter',\n          'FastFeatureCount', 'FastGetExtent', 'CreateField', 'Transactions',\n          'DeleteFeature', and 'FastSetNextByIndex'.\n        ")],
                                                     'properties': ['ptr',
                                                                    '_ds',
                                                                    '_ldefn',
                                                                    '_random_read',
                                                                    'extent',
                                                                    'name',
                                                                    'num_feat',
                                                                    'num_fields',
                                                                    'geom_type',
                                                                    'srs',
                                                                    'fields',
                                                                    'field_types',
                                                                    'field_widths',
                                                                    'field_precisions',
                                                                    'spatial_filter']},
             'django.contrib.gis.gdal.prototypes.generation.gdal_char_p': {'bases': ['ctypes.c_char_p'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': []},
             'django.contrib.gis.gdal.srs.CoordTransform': {'bases': ['django.contrib.gis.gdal.base.GDALBase'],
                                                            'constructor': ['source', 'target'],
                                                            'docstring': 'The coordinate system transformation object.',
                                                            'methods': [('__del__',
                                                                         [],
                                                                         'Deletes this Coordinate Transformation object.'),
                                                                        ('__str__', [], '')],
                                                            'properties': ['ptr',
                                                                           '_srs1_name',
                                                                           '_srs2_name']},
             'django.contrib.gis.gdal.srs.SpatialReference': {'bases': ['django.contrib.gis.gdal.base.GDALBase'],
                                                              'constructor': ["srs_input=''"],
                                                              'docstring': '\n    A wrapper for the OGRSpatialReference object.  According to the GDAL Web site,\n    the SpatialReference object "provide[s] services to represent coordinate \n    systems (projections and datums) and to transform between them."\n    ',
                                                              'methods': [('__del__',
                                                                           [],
                                                                           'Destroys this spatial reference.'),
                                                                          ('__getitem__',
                                                                           ['target'],
                                                                           '\n        Returns the value of the given string attribute node, None if the node \n        doesn\'t exist.  Can also take a tuple as a parameter, (target, child), \n        where child is the index of the attribute in the WKT.  For example:\n\n        >>> wkt = \'GEOGCS["WGS 84", DATUM["WGS_1984, ... AUTHORITY["EPSG","4326"]]\')\n        >>> srs = SpatialReference(wkt) # could also use \'WGS84\', or 4326\n        >>> print srs[\'GEOGCS\']\n        WGS 84\n        >>> print srs[\'DATUM\']\n        WGS_1984\n        >>> print srs[\'AUTHORITY\']\n        EPSG\n        >>> print srs[\'AUTHORITY\', 1] # The authority value\n        4326\n        >>> print srs[\'TOWGS84\', 4] # the fourth value in this wkt\n        0\n        >>> print srs[\'UNIT|AUTHORITY\'] # For the units authority, have to use the pipe symbole.\n        EPSG\n        >>> print srs[\'UNIT|AUTHORITY\', 1] # The authority value for the untis\n        9122\n        '),
                                                                          ('__str__',
                                                                           [],
                                                                           "The string representation uses 'pretty' WKT."),
                                                                          ('attr_value',
                                                                           ['target',
                                                                            'index=0'],
                                                                           "\n        The attribute value for the given target node (e.g. 'PROJCS'). The index\n        keyword specifies an index of the child node to return.\n        "),
                                                                          ('auth_name',
                                                                           ['target'],
                                                                           'Returns the authority name for the given string target node.'),
                                                                          ('auth_code',
                                                                           ['target'],
                                                                           'Returns the authority code for the given string target node.'),
                                                                          ('clone',
                                                                           [],
                                                                           'Returns a clone of this SpatialReference object.'),
                                                                          ('from_esri',
                                                                           [],
                                                                           "Morphs this SpatialReference from ESRI's format to EPSG."),
                                                                          ('identify_epsg',
                                                                           [],
                                                                           '\n        This method inspects the WKT of this SpatialReference, and will\n        add EPSG authority nodes where an EPSG identifier is applicable.\n        '),
                                                                          ('to_esri',
                                                                           [],
                                                                           "Morphs this SpatialReference to ESRI's format."),
                                                                          ('validate',
                                                                           [],
                                                                           'Checks to see if the given spatial reference is valid.'),
                                                                          ('import_epsg',
                                                                           ['epsg'],
                                                                           'Imports the Spatial Reference from the EPSG code (an integer).'),
                                                                          ('import_proj',
                                                                           ['proj'],
                                                                           'Imports the Spatial Reference from a PROJ.4 string.'),
                                                                          ('import_user_input',
                                                                           ['user_input'],
                                                                           'Imports the Spatial Reference from the given user input string.'),
                                                                          ('import_wkt',
                                                                           ['wkt'],
                                                                           'Imports the Spatial Reference from OGC WKT (string)'),
                                                                          ('import_xml',
                                                                           ['xml'],
                                                                           'Imports the Spatial Reference from an XML string.')],
                                                              'properties': ['ptr',
                                                                             'name',
                                                                             'srid',
                                                                             'linear_name',
                                                                             'linear_units',
                                                                             'angular_name',
                                                                             'angular_units',
                                                                             'units',
                                                                             'ellipsoid',
                                                                             'semi_major',
                                                                             'semi_minor',
                                                                             'inverse_flattening',
                                                                             'geographic',
                                                                             'local',
                                                                             'projected',
                                                                             'wkt',
                                                                             'pretty_wkt',
                                                                             'proj',
                                                                             'proj4',
                                                                             'xml']},
             'django.contrib.gis.gdal.tests.test_driver.DriverTest': {'bases': ['unittest.TestCase'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('test01_valid_driver',
                                                                                   [],
                                                                                   'Testing valid OGR Data Source Drivers.'),
                                                                                  ('test02_invalid_driver',
                                                                                   [],
                                                                                   'Testing invalid OGR Data Source Drivers.'),
                                                                                  ('test03_aliases',
                                                                                   [],
                                                                                   'Testing driver aliases.')],
                                                                      'properties': []},
             'django.contrib.gis.gdal.tests.test_ds.DataSourceTest': {'bases': ['unittest.TestCase'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('test01_valid_shp',
                                                                                   [],
                                                                                   'Testing valid SHP Data Source files.'),
                                                                                  ('test02_invalid_shp',
                                                                                   [],
                                                                                   'Testing invalid SHP files for the Data Source.'),
                                                                                  ('test03a_layers',
                                                                                   [],
                                                                                   'Testing Data Source Layers.'),
                                                                                  ('test03b_layer_slice',
                                                                                   [],
                                                                                   'Test indexing and slicing on Layers.'),
                                                                                  ('test03c_layer_references',
                                                                                   [],
                                                                                   'Test to make sure Layer access is still available without the DataSource.'),
                                                                                  ('test04_features',
                                                                                   [],
                                                                                   'Testing Data Source Features.'),
                                                                                  ('test05_geometries',
                                                                                   [],
                                                                                   'Testing Geometries from Data Source Features.'),
                                                                                  ('test06_spatial_filter',
                                                                                   [],
                                                                                   'Testing the Layer.spatial_filter property.')],
                                                                      'properties': []},
             'django.contrib.gis.gdal.tests.test_envelope.EnvelopeTest': {'bases': ['django.utils.unittest.TestCase'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [('setUp',
                                                                                       [],
                                                                                       ''),
                                                                                      ('test01_init',
                                                                                       [],
                                                                                       'Testing Envelope initilization.'),
                                                                                      ('test02_properties',
                                                                                       [],
                                                                                       'Testing Envelope properties.'),
                                                                                      ('test03_equivalence',
                                                                                       [],
                                                                                       'Testing Envelope equivalence.'),
                                                                                      ('test04_expand_to_include_pt_2_params',
                                                                                       [],
                                                                                       'Testing Envelope expand_to_include -- point as two parameters.'),
                                                                                      ('test05_expand_to_include_pt_2_tuple',
                                                                                       [],
                                                                                       'Testing Envelope expand_to_include -- point as a single 2-tuple parameter.'),
                                                                                      ('test06_expand_to_include_extent_4_params',
                                                                                       [],
                                                                                       'Testing Envelope expand_to_include -- extent as 4 parameters.'),
                                                                                      ('test06_expand_to_include_extent_4_tuple',
                                                                                       [],
                                                                                       'Testing Envelope expand_to_include -- extent as a single 4-tuple parameter.'),
                                                                                      ('test07_expand_to_include_envelope',
                                                                                       [],
                                                                                       'Testing Envelope expand_to_include with Envelope as parameter.'),
                                                                                      ('test08_expand_to_include_point',
                                                                                       [],
                                                                                       'Testing Envelope expand_to_include with Point as parameter.')],
                                                                          'properties': ['e']},
             'django.contrib.gis.gdal.tests.test_envelope.TestPoint': {'bases': ['object'],
                                                                       'constructor': ['x', 'y'],
                                                                       'docstring': '',
                                                                       'methods': [],
                                                                       'properties': ['x', 'y']},
             'django.contrib.gis.gdal.tests.test_geom.OGRGeomTest': {'bases': ['django.utils.unittest.TestCase',
                                                                               'django.contrib.gis.geometry.test_data.TestDataMixin'],
                                                                     'constructor': [],
                                                                     'docstring': 'This tests the OGR Geometry.',
                                                                     'methods': [('test00a_geomtype',
                                                                                  [],
                                                                                  'Testing OGRGeomType object.'),
                                                                                 ('test00b_geomtype_25d',
                                                                                  [],
                                                                                  'Testing OGRGeomType object with 25D types.'),
                                                                                 ('test01a_wkt',
                                                                                  [],
                                                                                  'Testing WKT output.'),
                                                                                 ('test01a_ewkt',
                                                                                  [],
                                                                                  'Testing EWKT input/output.'),
                                                                                 ('test01b_gml',
                                                                                  [],
                                                                                  'Testing GML output.'),
                                                                                 ('test01c_hex',
                                                                                  [],
                                                                                  'Testing HEX input/output.'),
                                                                                 ('test01d_wkb',
                                                                                  [],
                                                                                  'Testing WKB input/output.'),
                                                                                 ('test01e_json',
                                                                                  [],
                                                                                  'Testing GeoJSON input/output.'),
                                                                                 ('test02_points',
                                                                                  [],
                                                                                  'Testing Point objects.'),
                                                                                 ('test03_multipoints',
                                                                                  [],
                                                                                  'Testing MultiPoint objects.'),
                                                                                 ('test04_linestring',
                                                                                  [],
                                                                                  'Testing LineString objects.'),
                                                                                 ('test05_multilinestring',
                                                                                  [],
                                                                                  'Testing MultiLineString objects.'),
                                                                                 ('test06_linearring',
                                                                                  [],
                                                                                  'Testing LinearRing objects.'),
                                                                                 ('test07a_polygons',
                                                                                  [],
                                                                                  'Testing Polygon objects.'),
                                                                                 ('test07b_closepolygons',
                                                                                  [],
                                                                                  'Testing closing Polygon objects.'),
                                                                                 ('test08_multipolygons',
                                                                                  [],
                                                                                  'Testing MultiPolygon objects.'),
                                                                                 ('test09a_srs',
                                                                                  [],
                                                                                  'Testing OGR Geometries with Spatial Reference objects.'),
                                                                                 ('test09b_srs_transform',
                                                                                  [],
                                                                                  'Testing transform().'),
                                                                                 ('test09c_transform_dim',
                                                                                  [],
                                                                                  'Testing coordinate dimension is the same on transformed geometries.'),
                                                                                 ('test10_difference',
                                                                                  [],
                                                                                  'Testing difference().'),
                                                                                 ('test11_intersection',
                                                                                  [],
                                                                                  'Testing intersects() and intersection().'),
                                                                                 ('test12_symdifference',
                                                                                  [],
                                                                                  'Testing sym_difference().'),
                                                                                 ('test13_union',
                                                                                  [],
                                                                                  'Testing union().'),
                                                                                 ('test14_add',
                                                                                  [],
                                                                                  'Testing GeometryCollection.add().'),
                                                                                 ('test15_extent',
                                                                                  [],
                                                                                  'Testing `extent` property.'),
                                                                                 ('test16_25D',
                                                                                  [],
                                                                                  'Testing 2.5D geometries.'),
                                                                                 ('test17_pickle',
                                                                                  [],
                                                                                  'Testing pickle support.'),
                                                                                 ('test18_ogrgeometry_transform_workaround',
                                                                                  [],
                                                                                  'Testing coordinate dimensions on geometries after transformation.'),
                                                                                 ('test19_equivalence_regression',
                                                                                  [],
                                                                                  'Testing equivalence methods with non-OGRGeometry instances.')],
                                                                     'properties': []},
             'django.contrib.gis.gdal.tests.test_srs.SpatialRefTest': {'bases': ['django.utils.unittest.TestCase'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [('test01_wkt',
                                                                                    [],
                                                                                    'Testing initialization on valid OGC WKT.'),
                                                                                   ('test02_bad_wkt',
                                                                                    [],
                                                                                    'Testing initialization on invalid WKT.'),
                                                                                   ('test03_get_wkt',
                                                                                    [],
                                                                                    'Testing getting the WKT.'),
                                                                                   ('test04_proj',
                                                                                    [],
                                                                                    'Test PROJ.4 import and export.'),
                                                                                   ('test05_epsg',
                                                                                    [],
                                                                                    'Test EPSG import.'),
                                                                                   ('test07_boolean_props',
                                                                                    [],
                                                                                    'Testing the boolean properties.'),
                                                                                   ('test08_angular_linear',
                                                                                    [],
                                                                                    'Testing the linear and angular units routines.'),
                                                                                   ('test09_authority',
                                                                                    [],
                                                                                    'Testing the authority name & code routines.'),
                                                                                   ('test10_attributes',
                                                                                    [],
                                                                                    'Testing the attribute retrieval routines.'),
                                                                                   ('test11_wellknown',
                                                                                    [],
                                                                                    'Testing Well Known Names of Spatial References.'),
                                                                                   ('test12_coordtransform',
                                                                                    [],
                                                                                    'Testing initialization of a CoordTransform.'),
                                                                                   ('test13_attr_value',
                                                                                    [],
                                                                                    'Testing the attr_value() method.')],
                                                                       'properties': []},
             'django.contrib.gis.gdal.tests.test_srs.TestSRS': {'bases': [],
                                                                'constructor': ['wkt',
                                                                                '**kwargs'],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['wkt']},
             'django.contrib.gis.geometry.test_data.TestDS': {'bases': ['django.contrib.gis.geometry.test_data.TestObj'],
                                                              'constructor': ['name',
                                                                              '**kwargs'],
                                                              'docstring': '\n    Object for testing GDAL data sources.\n    ',
                                                              'methods': [],
                                                              'properties': ['ds']},
             'django.contrib.gis.geometry.test_data.TestDataMixin': {'bases': ['object'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    Mixin used for GEOS/GDAL test cases that defines a `geometries`\n    property, which returns and/or loads the reference geometry data.\n    ',
                                                                     'methods': [],
                                                                     'properties': ['geometries']},
             'django.contrib.gis.geometry.test_data.TestGeom': {'bases': ['django.contrib.gis.geometry.test_data.TestObj'],
                                                                'constructor': ['**kwargs'],
                                                                'docstring': '\n    Testing object used for wrapping reference geometry data\n    in GEOS/GDAL tests.\n    ',
                                                                'methods': [],
                                                                'properties': ['coords',
                                                                               'centroid',
                                                                               'ext_ring_cs']},
             'django.contrib.gis.geometry.test_data.TestGeomSet': {'bases': ['object'],
                                                                   'constructor': ['**kwargs'],
                                                                   'docstring': '\n    Each attribute of this object is a list of `TestGeom` instances.\n    ',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.gis.geometry.test_data.TestObj': {'bases': ['object'],
                                                               'constructor': ['**kwargs'],
                                                               'docstring': '\n    Base testing object, turns keyword args into attributes.\n    ',
                                                               'methods': [],
                                                               'properties': []},
             'django.contrib.gis.geos.base.GDALInfo': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['HAS_GDAL', 'GEOJSON']},
             'django.contrib.gis.geos.base.GEOSBase': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '\n    Base object for GEOS objects that has a pointer access property\n    that controls access to the underlying C pointer.\n    ',
                                                       'methods': [('_get_ptr', [], ''),
                                                                   ('_set_ptr', ['ptr'], '')],
                                                       'properties': ['_ptr', 'ptr_type', 'ptr']},
             'django.contrib.gis.geos.collections.GeometryCollection': {'bases': ['django.contrib.gis.geos.geometry.GEOSGeometry'],
                                                                        'constructor': ['*args',
                                                                                        '**kwargs'],
                                                                        'docstring': '',
                                                                        'methods': [('__iter__',
                                                                                     [],
                                                                                     'Iterates over each Geometry in the Collection.'),
                                                                                    ('__len__',
                                                                                     [],
                                                                                     'Returns the number of geometries in this Collection.'),
                                                                                    ('_create_collection',
                                                                                     ['length',
                                                                                      'items'],
                                                                                     ''),
                                                                                    ('_get_single_internal',
                                                                                     ['index'],
                                                                                     ''),
                                                                                    ('_get_single_external',
                                                                                     ['index'],
                                                                                     'Returns the Geometry from this Collection at the given index (0-based).'),
                                                                                    ('_set_list',
                                                                                     ['length',
                                                                                      'items'],
                                                                                     'Create a new collection, and destroy the contents of the previous pointer.')],
                                                                        'properties': ['_typeid',
                                                                                       'ptr',
                                                                                       'srid',
                                                                                       '_set_single',
                                                                                       '_assign_extended_slice',
                                                                                       'kml',
                                                                                       'tuple',
                                                                                       'coords']},
             'django.contrib.gis.geos.collections.MultiLineString': {'bases': ['django.contrib.gis.geos.collections.GeometryCollection'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['_allowed',
                                                                                    '_typeid',
                                                                                    'merged']},
             'django.contrib.gis.geos.collections.MultiPoint': {'bases': ['django.contrib.gis.geos.collections.GeometryCollection'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['_allowed',
                                                                               '_typeid']},
             'django.contrib.gis.geos.collections.MultiPolygon': {'bases': ['django.contrib.gis.geos.collections.GeometryCollection'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': ['_allowed',
                                                                                 '_typeid',
                                                                                 'cascaded_union']},
             'django.contrib.gis.geos.coordseq.GEOSCoordSeq': {'bases': ['django.contrib.gis.geos.base.GEOSBase'],
                                                               'constructor': ['ptr', 'z=False'],
                                                               'docstring': 'The internal representation of a list of coordinates inside a Geometry.',
                                                               'methods': [('__iter__',
                                                                            [],
                                                                            'Iterates over each point in the coordinate sequence.'),
                                                                           ('__len__',
                                                                            [],
                                                                            'Returns the number of points in the coordinate sequence.'),
                                                                           ('__str__',
                                                                            [],
                                                                            'Returns the string representation of the coordinate sequence.'),
                                                                           ('__getitem__',
                                                                            ['index'],
                                                                            'Returns the coordinate sequence value at the given index.'),
                                                                           ('__setitem__',
                                                                            ['index', 'value'],
                                                                            'Sets the coordinate sequence value at the given index.'),
                                                                           ('_checkindex',
                                                                            ['index'],
                                                                            'Checks the given index.'),
                                                                           ('_checkdim',
                                                                            ['dim'],
                                                                            'Checks the given dimension.'),
                                                                           ('getOrdinate',
                                                                            ['dimension',
                                                                             'index'],
                                                                            'Returns the value for the given dimension and index.'),
                                                                           ('setOrdinate',
                                                                            ['dimension',
                                                                             'index',
                                                                             'value'],
                                                                            'Sets the value for the given dimension and index.'),
                                                                           ('getX',
                                                                            ['index'],
                                                                            'Get the X value at the index.'),
                                                                           ('setX',
                                                                            ['index', 'value'],
                                                                            'Set X with the value at the given index.'),
                                                                           ('getY',
                                                                            ['index'],
                                                                            'Get the Y value at the given index.'),
                                                                           ('setY',
                                                                            ['index', 'value'],
                                                                            'Set Y with the value at the given index.'),
                                                                           ('getZ',
                                                                            ['index'],
                                                                            'Get Z with the value at the given index.'),
                                                                           ('setZ',
                                                                            ['index', 'value'],
                                                                            'Set Z with the value at the given index.'),
                                                                           ('clone',
                                                                            [],
                                                                            'Clones this coordinate sequence.')],
                                                               'properties': ['ptr_type',
                                                                              '_ptr',
                                                                              '_z',
                                                                              'size',
                                                                              'dims',
                                                                              'hasz',
                                                                              'kml',
                                                                              'tuple']},
             'django.contrib.gis.geos.error.GEOSException': {'bases': ['Exception'],
                                                             'constructor': [],
                                                             'docstring': 'The base GEOS exception, indicates a GEOS-related error.',
                                                             'methods': [],
                                                             'properties': []},
             'django.contrib.gis.geos.error.GEOSIndexError': {'bases': ['django.contrib.gis.geos.error.GEOSException',
                                                                        'KeyError'],
                                                              'constructor': [],
                                                              'docstring': "\n    This exception is raised when an invalid index is encountered, and has\n    the 'silent_variable_feature' attribute set to true.  This ensures that\n    django's templates proceed to use the next lookup type gracefully when\n    an Exception is raised.  Fixes ticket #4740.\n    ",
                                                              'methods': [],
                                                              'properties': ['silent_variable_failure']},
             'django.contrib.gis.geos.geometry.GEOSGeometry': {'bases': ['django.contrib.gis.geos.base.GEOSBase',
                                                                         'django.contrib.gis.geos.mutable_list.ListMixin'],
                                                               'constructor': ['geo_input',
                                                                               'srid=None'],
                                                               'docstring': 'A class that, generally, encapsulates a GEOS geometry.',
                                                               'methods': [('_post_init',
                                                                            ['srid'],
                                                                            'Helper routine for performing post-initialization setup.'),
                                                                           ('__del__',
                                                                            [],
                                                                            '\n        Destroys this Geometry; in other words, frees the memory used by the\n        GEOS C++ object.\n        '),
                                                                           ('__copy__',
                                                                            [],
                                                                            '\n        Returns a clone because the copy of a GEOSGeometry may contain an\n        invalid pointer location if the original is garbage collected.\n        '),
                                                                           ('__deepcopy__',
                                                                            ['memodict'],
                                                                            '\n        The `deepcopy` routine is used by the `Node` class of django.utils.tree;\n        thus, the protocol routine needs to be implemented to return correct\n        copies (clones) of these GEOS objects, which use C pointers.\n        '),
                                                                           ('__str__',
                                                                            [],
                                                                            'WKT is used for the string representation.'),
                                                                           ('__repr__',
                                                                            [],
                                                                            'Short-hand representation because WKT may be very large.'),
                                                                           ('__getstate__',
                                                                            [],
                                                                            ''),
                                                                           ('__setstate__',
                                                                            ['state'],
                                                                            ''),
                                                                           ('__eq__',
                                                                            ['other'],
                                                                            '\n        Equivalence testing, a Geometry may be compared with another Geometry\n        or a WKT representation.\n        '),
                                                                           ('__ne__',
                                                                            ['other'],
                                                                            'The not equals operator.'),
                                                                           ('__or__',
                                                                            ['other'],
                                                                            'Returns the union of this Geometry and the other.'),
                                                                           ('__and__',
                                                                            ['other'],
                                                                            'Returns the intersection of this Geometry and the other.'),
                                                                           ('__sub__',
                                                                            ['other'],
                                                                            'Return the difference this Geometry and the other.'),
                                                                           ('__xor__',
                                                                            ['other'],
                                                                            'Return the symmetric difference of this Geometry and the other.'),
                                                                           ('_set_cs',
                                                                            [],
                                                                            'Sets the coordinate sequence for this Geometry.'),
                                                                           ('normalize',
                                                                            [],
                                                                            'Converts this Geometry to normal form (or canonical form).'),
                                                                           ('contains',
                                                                            ['other'],
                                                                            'Returns true if other.within(this) returns true.'),
                                                                           ('crosses',
                                                                            ['other'],
                                                                            '\n        Returns true if the DE-9IM intersection matrix for the two Geometries\n        is T*T****** (for a point and a curve,a point and an area or a line and\n        an area) 0******** (for two curves).\n        '),
                                                                           ('disjoint',
                                                                            ['other'],
                                                                            '\n        Returns true if the DE-9IM intersection matrix for the two Geometries\n        is FF*FF****.\n        '),
                                                                           ('equals',
                                                                            ['other'],
                                                                            '\n        Returns true if the DE-9IM intersection matrix for the two Geometries\n        is T*F**FFF*.\n        '),
                                                                           ('equals_exact',
                                                                            ['other',
                                                                             'tolerance=0'],
                                                                            '\n        Returns true if the two Geometries are exactly equal, up to a\n        specified tolerance.\n        '),
                                                                           ('intersects',
                                                                            ['other'],
                                                                            'Returns true if disjoint returns false.'),
                                                                           ('overlaps',
                                                                            ['other'],
                                                                            '\n        Returns true if the DE-9IM intersection matrix for the two Geometries\n        is T*T***T** (for two points or two surfaces) 1*T***T** (for two curves).\n        '),
                                                                           ('relate_pattern',
                                                                            ['other',
                                                                             'pattern'],
                                                                            '\n        Returns true if the elements in the DE-9IM intersection matrix for the\n        two Geometries match the elements in pattern.\n        '),
                                                                           ('touches',
                                                                            ['other'],
                                                                            '\n        Returns true if the DE-9IM intersection matrix for the two Geometries\n        is FT*******, F**T***** or F***T****.\n        '),
                                                                           ('within',
                                                                            ['other'],
                                                                            '\n        Returns true if the DE-9IM intersection matrix for the two Geometries\n        is T*F**F***.\n        '),
                                                                           ('get_srid',
                                                                            [],
                                                                            'Gets the SRID for the geometry, returns None if no SRID is set.'),
                                                                           ('set_srid',
                                                                            ['srid'],
                                                                            'Sets the SRID for the geometry.'),
                                                                           ('transform',
                                                                            ['ct',
                                                                             'clone=False'],
                                                                            '\n        Requires GDAL. Transforms the geometry according to the given\n        transformation object, which may be an integer SRID, and WKT or\n        PROJ.4 string. By default, the geometry is transformed in-place and\n        nothing is returned. However if the `clone` keyword is set, then this\n        geometry will not be modified and a transformed clone will be returned\n        instead.\n        '),
                                                                           ('_topology',
                                                                            ['gptr'],
                                                                            'Helper routine to return Geometry from the given pointer.'),
                                                                           ('buffer',
                                                                            ['width',
                                                                             'quadsegs=8'],
                                                                            '\n        Returns a geometry that represents all points whose distance from this\n        Geometry is less than or equal to distance. Calculations are in the\n        Spatial Reference System of this Geometry. The optional third parameter sets\n        the number of segment used to approximate a quarter circle (defaults to 8).\n        (Text from PostGIS documentation at ch. 6.1.3)\n        '),
                                                                           ('difference',
                                                                            ['other'],
                                                                            '\n        Returns a Geometry representing the points making up this Geometry\n        that do not make up other.\n        '),
                                                                           ('intersection',
                                                                            ['other'],
                                                                            'Returns a Geometry representing the points shared by this Geometry and other.'),
                                                                           ('relate',
                                                                            ['other'],
                                                                            'Returns the DE-9IM intersection matrix for this Geometry and the other.'),
                                                                           ('simplify',
                                                                            ['tolerance=0.0',
                                                                             'preserve_topology=False'],
                                                                            '\n        Returns the Geometry, simplified using the Douglas-Peucker algorithm\n        to the specified tolerance (higher tolerance => less points).  If no\n        tolerance provided, defaults to 0.\n\n        By default, this function does not preserve topology - e.g. polygons can\n        be split, collapse to lines or disappear holes can be created or\n        disappear, and lines can cross. By specifying preserve_topology=True,\n        the result will have the same dimension and number of components as the\n        input. This is significantly slower.\n        '),
                                                                           ('sym_difference',
                                                                            ['other'],
                                                                            '\n        Returns a set combining the points in this Geometry not in other,\n        and the points in other not in this Geometry.\n        '),
                                                                           ('union',
                                                                            ['other'],
                                                                            'Returns a Geometry representing all the points in this Geometry and other.'),
                                                                           ('distance',
                                                                            ['other'],
                                                                            '\n        Returns the distance between the closest points on this Geometry\n        and the other. Units will be in those of the coordinate system of\n        the Geometry.\n        '),
                                                                           ('clone',
                                                                            [],
                                                                            'Clones this Geometry.')],
                                                               'properties': ['_IndexError',
                                                                              'ptr_type',
                                                                              'ptr',
                                                                              'srid',
                                                                              '__class__',
                                                                              'has_cs',
                                                                              '_cs',
                                                                              'coord_seq',
                                                                              'geom_type',
                                                                              'geom_typeid',
                                                                              'num_geom',
                                                                              'num_coords',
                                                                              'num_points',
                                                                              'dims',
                                                                              'empty',
                                                                              'hasz',
                                                                              'ring',
                                                                              'simple',
                                                                              'valid',
                                                                              'valid_reason',
                                                                              'ewkt',
                                                                              'wkt',
                                                                              'hex',
                                                                              'hexewkb',
                                                                              'json',
                                                                              'geojson',
                                                                              'wkb',
                                                                              'ewkb',
                                                                              'kml',
                                                                              'prepared',
                                                                              'ogr',
                                                                              'srs',
                                                                              'crs',
                                                                              'boundary',
                                                                              'centroid',
                                                                              'convex_hull',
                                                                              'envelope',
                                                                              'point_on_surface',
                                                                              'area',
                                                                              'extent',
                                                                              'length']},
             'django.contrib.gis.geos.io.WKBReader': {'bases': ['django.contrib.gis.geos.prototypes.io._WKBReader'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('read',
                                                                   ['wkb'],
                                                                   'Returns a GEOSGeometry for the given WKB buffer.')],
                                                      'properties': []},
             'django.contrib.gis.geos.io.WKTReader': {'bases': ['django.contrib.gis.geos.prototypes.io._WKTReader'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('read',
                                                                   ['wkt'],
                                                                   'Returns a GEOSGeometry for the given WKT string.')],
                                                      'properties': []},
             'django.contrib.gis.geos.libgeos.GEOSContextHandle_t': {'bases': ['ctypes.Structure'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': []},
             'django.contrib.gis.geos.libgeos.GEOSCoordSeq_t': {'bases': ['ctypes.Structure'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': []},
             'django.contrib.gis.geos.libgeos.GEOSGeom_t': {'bases': ['ctypes.Structure'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': []},
             'django.contrib.gis.geos.libgeos.GEOSPrepGeom_t': {'bases': ['ctypes.Structure'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': []},
             'django.contrib.gis.geos.linestring.LineString': {'bases': ['django.contrib.gis.geos.geometry.GEOSGeometry'],
                                                               'constructor': ['*args',
                                                                               '**kwargs'],
                                                               'docstring': '',
                                                               'methods': [('__iter__',
                                                                            [],
                                                                            'Allows iteration over this LineString.'),
                                                                           ('__len__',
                                                                            [],
                                                                            'Returns the number of points in this LineString.'),
                                                                           ('_get_single_external',
                                                                            ['index'],
                                                                            ''),
                                                                           ('_set_list',
                                                                            ['length',
                                                                             'items'],
                                                                            ''),
                                                                           ('_set_single',
                                                                            ['index', 'value'],
                                                                            ''),
                                                                           ('_checkdim',
                                                                            ['dim'],
                                                                            ''),
                                                                           ('_listarr',
                                                                            ['func'],
                                                                            '\n        Internal routine that returns a sequence (list) corresponding with\n        the given function.  Will return a numpy array if possible.\n        ')],
                                                               'properties': ['_init_func',
                                                                              '_minlength',
                                                                              '_get_single_internal',
                                                                              'ptr',
                                                                              'tuple',
                                                                              'coords',
                                                                              'array',
                                                                              'merged',
                                                                              'x',
                                                                              'y',
                                                                              'z']},
             'django.contrib.gis.geos.linestring.LinearRing': {'bases': ['django.contrib.gis.geos.linestring.LineString'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['_minLength',
                                                                              '_init_func']},
             'django.contrib.gis.geos.mutable_list.ListMixin': {'bases': ['object'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': "\n    A base class which provides complete list interface.\n    Derived classes must call ListMixin's __init__() function\n    and implement the following:\n\n    function _get_single_external(self, i):\n        Return single item with index i for general use.\n        The index i will always satisfy 0 <= i < len(self).\n\n    function _get_single_internal(self, i):\n        Same as above, but for use within the class [Optional]\n        Note that if _get_single_internal and _get_single_internal return\n        different types of objects, _set_list must distinguish\n        between the two and handle each appropriately.\n\n    function _set_list(self, length, items):\n        Recreate the entire object.\n\n        NOTE: items may be a generator which calls _get_single_internal.\n        Therefore, it is necessary to cache the values in a temporary:\n            temp = list(items)\n        before clobbering the original storage.\n\n    function _set_single(self, i, value):\n        Set the single item at index i to value [Optional]\n        If left undefined, all mutations will result in rebuilding\n        the object using _set_list.\n\n    function __len__(self):\n        Return the length\n\n    int _minlength:\n        The minimum legal length [Optional]\n\n    int _maxlength:\n        The maximum legal length [Optional]\n\n    type or tuple _allowed:\n        A type or tuple of allowed item types [Optional]\n\n    class _IndexError:\n        The type of exception to be raise on invalid index [Optional]\n    ",
                                                                'methods': [('__getitem__',
                                                                             ['index'],
                                                                             'Get the item(s) at the specified index/slice.'),
                                                                            ('__delitem__',
                                                                             ['index'],
                                                                             'Delete the item(s) at the specified index/slice.'),
                                                                            ('__setitem__',
                                                                             ['index', 'val'],
                                                                             'Set the item(s) at the specified index/slice.'),
                                                                            ('__iter__',
                                                                             [],
                                                                             'Iterate over the items in the list'),
                                                                            ('__add__',
                                                                             ['other'],
                                                                             'add another list-like object'),
                                                                            ('__radd__',
                                                                             ['other'],
                                                                             'add to another list-like object'),
                                                                            ('__iadd__',
                                                                             ['other'],
                                                                             'add another list-like object to self'),
                                                                            ('__mul__',
                                                                             ['n'],
                                                                             'multiply'),
                                                                            ('__rmul__',
                                                                             ['n'],
                                                                             'multiply'),
                                                                            ('__imul__',
                                                                             ['n'],
                                                                             'multiply'),
                                                                            ('__cmp__',
                                                                             ['other'],
                                                                             'cmp'),
                                                                            ('count',
                                                                             ['val'],
                                                                             'Standard list count method'),
                                                                            ('index',
                                                                             ['val'],
                                                                             'Standard list index method'),
                                                                            ('append',
                                                                             ['val'],
                                                                             'Standard list append method'),
                                                                            ('extend',
                                                                             ['vals'],
                                                                             'Standard list extend method'),
                                                                            ('insert',
                                                                             ['index', 'val'],
                                                                             'Standard list insert method'),
                                                                            ('pop',
                                                                             ['index=-1'],
                                                                             'Standard list pop method'),
                                                                            ('remove',
                                                                             ['val'],
                                                                             'Standard list remove method'),
                                                                            ('reverse',
                                                                             [],
                                                                             'Standard list reverse method'),
                                                                            ('sort',
                                                                             ['cmp=cmp',
                                                                              'key=None',
                                                                              'reverse=False'],
                                                                             'Standard list sort method'),
                                                                            ('_rebuild',
                                                                             ['newLen',
                                                                              'newItems'],
                                                                             ''),
                                                                            ('_set_single_rebuild',
                                                                             ['index',
                                                                              'value'],
                                                                             ''),
                                                                            ('_checkindex',
                                                                             ['index',
                                                                              'correct=True'],
                                                                             ''),
                                                                            ('_check_allowed',
                                                                             ['items'],
                                                                             ''),
                                                                            ('_set_slice',
                                                                             ['index',
                                                                              'values'],
                                                                             'Assign values to a slice of the object'),
                                                                            ('_assign_extended_slice_rebuild',
                                                                             ['start',
                                                                              'stop',
                                                                              'step',
                                                                              'valueList'],
                                                                             'Assign an extended slice by rebuilding entire list'),
                                                                            ('_assign_extended_slice',
                                                                             ['start',
                                                                              'stop',
                                                                              'step',
                                                                              'valueList'],
                                                                             'Assign an extended slice by re-assigning individual items'),
                                                                            ('_assign_simple_slice',
                                                                             ['start',
                                                                              'stop',
                                                                              'valueList'],
                                                                             'Assign a simple slice; Can assign slice of any length')],
                                                                'properties': ['_minlength',
                                                                               '_maxlength',
                                                                               '_IndexError',
                                                                               '_get_single_internal',
                                                                               '_set_single',
                                                                               '_assign_extended_slice']},
             'django.contrib.gis.geos.point.Point': {'bases': ['django.contrib.gis.geos.geometry.GEOSGeometry'],
                                                     'constructor': ['x',
                                                                     'y=None',
                                                                     'z=None',
                                                                     'srid=None'],
                                                     'docstring': '',
                                                     'methods': [('_create_point',
                                                                  ['ndim', 'coords'],
                                                                  '\n        Create a coordinate sequence, set X, Y, [Z], and create point\n        '),
                                                                 ('_set_list',
                                                                  ['length', 'items'],
                                                                  ''),
                                                                 ('_set_single',
                                                                  ['index', 'value'],
                                                                  ''),
                                                                 ('__iter__',
                                                                  [],
                                                                  'Allows iteration over coordinates of this Point.'),
                                                                 ('__len__',
                                                                  [],
                                                                  'Returns the number of dimensions for this Point (either 0, 2 or 3).'),
                                                                 ('_get_single_external',
                                                                  ['index'],
                                                                  ''),
                                                                 ('get_x',
                                                                  [],
                                                                  'Returns the X component of the Point.'),
                                                                 ('set_x',
                                                                  ['value'],
                                                                  'Sets the X component of the Point.'),
                                                                 ('get_y',
                                                                  [],
                                                                  'Returns the Y component of the Point.'),
                                                                 ('set_y',
                                                                  ['value'],
                                                                  'Sets the Y component of the Point.'),
                                                                 ('get_z',
                                                                  [],
                                                                  'Returns the Z component of the Point.'),
                                                                 ('set_z',
                                                                  ['value'],
                                                                  'Sets the Z component of the Point.'),
                                                                 ('get_coords',
                                                                  [],
                                                                  'Returns a tuple of the point.'),
                                                                 ('set_coords',
                                                                  ['tup'],
                                                                  'Sets the coordinates of the point with the given tuple.')],
                                                     'properties': ['_minlength',
                                                                    '_maxlength',
                                                                    '_ptr',
                                                                    '_get_single_internal',
                                                                    'x',
                                                                    'y',
                                                                    'z',
                                                                    'tuple',
                                                                    'coords']},
             'django.contrib.gis.geos.polygon.Polygon': {'bases': ['django.contrib.gis.geos.geometry.GEOSGeometry'],
                                                         'constructor': ['*args', '**kwargs'],
                                                         'docstring': '',
                                                         'methods': [('__iter__',
                                                                      [],
                                                                      'Iterates over each ring in the polygon.'),
                                                                     ('__len__',
                                                                      [],
                                                                      'Returns the number of rings in this Polygon.'),
                                                                     ('from_bbox',
                                                                      ['bbox'],
                                                                      'Constructs a Polygon from a bounding box (4-tuple).'),
                                                                     ('_create_polygon',
                                                                      ['length', 'items'],
                                                                      ''),
                                                                     ('_clone', ['g'], ''),
                                                                     ('_construct_ring',
                                                                      ['param',
                                                                       "msg='Parameter must be a sequence of LinearRings or objects that can initialize to LinearRings'"],
                                                                      'Helper routine for trying to construct a ring from the given parameter.'),
                                                                     ('_set_list',
                                                                      ['length', 'items'],
                                                                      ''),
                                                                     ('_get_single_internal',
                                                                      ['index'],
                                                                      "\n        Returns the ring at the specified index.  The first index, 0, will\n        always return the exterior ring.  Indices > 0 will return the\n        interior ring at the given index (e.g., poly[1] and poly[2] would\n        return the first and second interior ring, respectively).\n\n        CAREFUL: Internal/External are not the same as Interior/Exterior!\n        _get_single_internal returns a pointer from the existing geometries for use\n        internally by the object's methods.  _get_single_external returns a clone\n        of the same geometry for use by external code.\n        "),
                                                                     ('_get_single_external',
                                                                      ['index'],
                                                                      ''),
                                                                     ('_get_ext_ring',
                                                                      [],
                                                                      'Gets the exterior ring of the Polygon.'),
                                                                     ('_set_ext_ring',
                                                                      ['ring'],
                                                                      'Sets the exterior ring of the Polygon.')],
                                                         'properties': ['_minlength',
                                                                        'ptr',
                                                                        'srid',
                                                                        '_set_single',
                                                                        '_assign_extended_slice',
                                                                        'num_interior_rings',
                                                                        'exterior_ring',
                                                                        'shell',
                                                                        'tuple',
                                                                        'coords',
                                                                        'kml']},
             'django.contrib.gis.geos.prepared.PreparedGeometry': {'bases': ['django.contrib.gis.geos.base.GEOSBase'],
                                                                   'constructor': ['geom'],
                                                                   'docstring': '\n    A geometry that is prepared for performing certain operations.\n    At the moment this includes the contains covers, and intersects\n    operations.\n    ',
                                                                   'methods': [('__del__',
                                                                                [],
                                                                                ''),
                                                                               ('contains',
                                                                                ['other'],
                                                                                ''),
                                                                               ('contains_properly',
                                                                                ['other'],
                                                                                ''),
                                                                               ('covers',
                                                                                ['other'],
                                                                                ''),
                                                                               ('intersects',
                                                                                ['other'],
                                                                                '')],
                                                                   'properties': ['ptr_type',
                                                                                  'ptr']},
             'django.contrib.gis.geos.prototypes.geom.geos_char_p': {'bases': ['ctypes.c_char_p'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': []},
             'django.contrib.gis.geos.prototypes.io.IOBase': {'bases': ['django.contrib.gis.geos.base.GEOSBase'],
                                                              'constructor': [],
                                                              'docstring': 'Base class for GEOS I/O objects.',
                                                              'methods': [('__del__', [], '')],
                                                              'properties': ['ptr']},
             'django.contrib.gis.geos.prototypes.io.ThreadLocalIO': {'bases': ['threading.local'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['wkt_r',
                                                                                    'wkt_w',
                                                                                    'wkb_r',
                                                                                    'wkb_w',
                                                                                    'ewkb_w',
                                                                                    'ewkb_w3d']},
             'django.contrib.gis.geos.prototypes.io.WKBReader_st': {'bases': ['ctypes.Structure'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.gis.geos.prototypes.io.WKBWriter': {'bases': ['django.contrib.gis.geos.prototypes.io.IOBase'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('write',
                                                                              ['geom'],
                                                                              'Returns the WKB representation of the given geometry.'),
                                                                             ('write_hex',
                                                                              ['geom'],
                                                                              'Returns the HEXEWKB representation of the given geometry.'),
                                                                             ('_get_byteorder',
                                                                              [],
                                                                              ''),
                                                                             ('_set_byteorder',
                                                                              ['order'],
                                                                              ''),
                                                                             ('_get_outdim',
                                                                              [],
                                                                              ''),
                                                                             ('_set_outdim',
                                                                              ['new_dim'],
                                                                              ''),
                                                                             ('_get_include_srid',
                                                                              [],
                                                                              ''),
                                                                             ('_set_include_srid',
                                                                              ['include'],
                                                                              '')],
                                                                 'properties': ['_constructor',
                                                                                '_destructor',
                                                                                'ptr_type',
                                                                                'byteorder',
                                                                                'outdim',
                                                                                'srid']},
             'django.contrib.gis.geos.prototypes.io.WKBWriter_st': {'bases': ['ctypes.Structure'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.gis.geos.prototypes.io.WKTReader_st': {'bases': ['ctypes.Structure'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.gis.geos.prototypes.io.WKTWriter': {'bases': ['django.contrib.gis.geos.prototypes.io.IOBase'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('write',
                                                                              ['geom'],
                                                                              'Returns the WKT representation of the given geometry.')],
                                                                 'properties': ['_constructor',
                                                                                '_destructor',
                                                                                'ptr_type']},
             'django.contrib.gis.geos.prototypes.io.WKTWriter_st': {'bases': ['ctypes.Structure'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.gis.geos.prototypes.io._WKBReader': {'bases': ['django.contrib.gis.geos.prototypes.io.IOBase'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('read',
                                                                               ['wkb'],
                                                                               'Returns a _pointer_ to C GEOS Geometry object from the given WKB.')],
                                                                  'properties': ['_constructor',
                                                                                 '_destructor',
                                                                                 'ptr_type']},
             'django.contrib.gis.geos.prototypes.io._WKTReader': {'bases': ['django.contrib.gis.geos.prototypes.io.IOBase'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('read',
                                                                               ['wkt'],
                                                                               '')],
                                                                  'properties': ['_constructor',
                                                                                 '_destructor',
                                                                                 'ptr_type']},
             'django.contrib.gis.geos.prototypes.threadsafe.GEOSContext': {'bases': ['threading.local'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['handle']},
             'django.contrib.gis.geos.prototypes.threadsafe.GEOSContextHandle': {'bases': ['object'],
                                                                                 'constructor': [],
                                                                                 'docstring': '\n    Python object representing a GEOS context handle.\n    ',
                                                                                 'methods': [('__del__',
                                                                                              [],
                                                                                              '')],
                                                                                 'properties': ['ptr']},
             'django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc': {'bases': ['object'],
                                                                        'constructor': ['func_name'],
                                                                        'docstring': '\n    Class that serves as a wrapper for GEOS C Functions, and will\n    use thread-safe function variants when available.\n    ',
                                                                        'methods': [('__call__',
                                                                                     ['*args'],
                                                                                     ''),
                                                                                    ('__str__',
                                                                                     [],
                                                                                     ''),
                                                                                    ('_get_argtypes',
                                                                                     [],
                                                                                     ''),
                                                                                    ('_set_argtypes',
                                                                                     ['argtypes'],
                                                                                     ''),
                                                                                    ('_get_restype',
                                                                                     [],
                                                                                     ''),
                                                                                    ('_set_restype',
                                                                                     ['restype'],
                                                                                     ''),
                                                                                    ('_get_errcheck',
                                                                                     [],
                                                                                     ''),
                                                                                    ('_set_errcheck',
                                                                                     ['errcheck'],
                                                                                     '')],
                                                                        'properties': ['cfunc',
                                                                                       'threaded',
                                                                                       'thread_context',
                                                                                       'argtypes',
                                                                                       'restype',
                                                                                       'errcheck']},
             'django.contrib.gis.geos.tests.test_geos.GEOSTest': {'bases': ['unittest.TestCase',
                                                                            'django.contrib.gis.geometry.test_data.TestDataMixin'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('test00_base',
                                                                               [],
                                                                               'Tests out the GEOSBase class.'),
                                                                              ('test01a_wkt',
                                                                               [],
                                                                               'Testing WKT output.'),
                                                                              ('test01b_hex',
                                                                               [],
                                                                               'Testing HEX output.'),
                                                                              ('test01b_hexewkb',
                                                                               [],
                                                                               'Testing (HEX)EWKB output.'),
                                                                              ('test01c_kml',
                                                                               [],
                                                                               'Testing KML output.'),
                                                                              ('test01d_errors',
                                                                               [],
                                                                               'Testing the Error handlers.'),
                                                                              ('test01e_wkb',
                                                                               [],
                                                                               'Testing WKB output.'),
                                                                              ('test01f_create_hex',
                                                                               [],
                                                                               'Testing creation from HEX.'),
                                                                              ('test01g_create_wkb',
                                                                               [],
                                                                               'Testing creation from WKB.'),
                                                                              ('test01h_ewkt',
                                                                               [],
                                                                               'Testing EWKT.'),
                                                                              ('test01i_json',
                                                                               [],
                                                                               'Testing GeoJSON input/output (via GDAL).'),
                                                                              ('test01k_fromfile',
                                                                               [],
                                                                               'Testing the fromfile() factory.'),
                                                                              ('test01k_eq',
                                                                               [],
                                                                               'Testing equivalence.'),
                                                                              ('test02a_points',
                                                                               [],
                                                                               'Testing Point objects.'),
                                                                              ('test02b_multipoints',
                                                                               [],
                                                                               'Testing MultiPoint objects.'),
                                                                              ('test03a_linestring',
                                                                               [],
                                                                               'Testing LineString objects.'),
                                                                              ('test03b_multilinestring',
                                                                               [],
                                                                               'Testing MultiLineString objects.'),
                                                                              ('test04_linearring',
                                                                               [],
                                                                               'Testing LinearRing objects.'),
                                                                              ('test05a_polygons',
                                                                               [],
                                                                               'Testing Polygon objects.'),
                                                                              ('test05b_multipolygons',
                                                                               [],
                                                                               'Testing MultiPolygon objects.'),
                                                                              ('test06a_memory_hijinks',
                                                                               [],
                                                                               'Testing Geometry __del__() on rings and polygons.'),
                                                                              ('test08_coord_seq',
                                                                               [],
                                                                               'Testing Coordinate Sequence objects.'),
                                                                              ('test09_relate_pattern',
                                                                               [],
                                                                               'Testing relate() and relate_pattern().'),
                                                                              ('test10_intersection',
                                                                               [],
                                                                               'Testing intersects() and intersection().'),
                                                                              ('test11_union',
                                                                               [],
                                                                               'Testing union().'),
                                                                              ('test12_difference',
                                                                               [],
                                                                               'Testing difference().'),
                                                                              ('test13_symdifference',
                                                                               [],
                                                                               'Testing sym_difference().'),
                                                                              ('test14_buffer',
                                                                               [],
                                                                               'Testing buffer().'),
                                                                              ('test15_srid',
                                                                               [],
                                                                               'Testing the SRID property and keyword.'),
                                                                              ('test16_mutable_geometries',
                                                                               [],
                                                                               'Testing the mutability of Polygons and Geometry Collections.'),
                                                                              ('test17_threed',
                                                                               [],
                                                                               'Testing three-dimensional geometries.'),
                                                                              ('test18_distance',
                                                                               [],
                                                                               'Testing the distance() function.'),
                                                                              ('test19_length',
                                                                               [],
                                                                               'Testing the length property.'),
                                                                              ('test20a_emptyCollections',
                                                                               [],
                                                                               'Testing empty geometries and collections.'),
                                                                              ('test20b_collections_of_collections',
                                                                               [],
                                                                               'Testing GeometryCollection handling of other collections.'),
                                                                              ('test21_test_gdal',
                                                                               [],
                                                                               'Testing `ogr` and `srs` properties.'),
                                                                              ('test22_copy',
                                                                               [],
                                                                               'Testing use with the Python `copy` module.'),
                                                                              ('test23_transform',
                                                                               [],
                                                                               'Testing `transform` method.'),
                                                                              ('test23_transform_noop',
                                                                               [],
                                                                               ' Testing `transform` method (SRID match) '),
                                                                              ('test23_transform_nosrid',
                                                                               [],
                                                                               ' Testing `transform` method (no SRID) '),
                                                                              ('test23_transform_nogdal',
                                                                               [],
                                                                               ' Testing `transform` method (GDAL not available) '),
                                                                              ('test24_extent',
                                                                               [],
                                                                               'Testing `extent` method.'),
                                                                              ('test25_pickle',
                                                                               [],
                                                                               'Testing pickling and unpickling support.'),
                                                                              ('test26_prepared',
                                                                               [],
                                                                               'Testing PreparedGeometry support.'),
                                                                              ('test26_line_merge',
                                                                               [],
                                                                               'Testing line merge support'),
                                                                              ('test27_valid_reason',
                                                                               [],
                                                                               'Testing IsValidReason support')],
                                                                  'properties': ['null_srid']},
             'django.contrib.gis.geos.tests.test_geos_mutation.GEOSMutationTest': {'bases': ['django.utils.unittest.TestCase'],
                                                                                   'constructor': [],
                                                                                   'docstring': '\n    Tests Pythonic Mutability of Python GEOS geometry wrappers\n    get/set/delitem on a slice, normal list methods\n    ',
                                                                                   'methods': [('test00_GEOSIndexException',
                                                                                                [],
                                                                                                'Testing Geometry GEOSIndexError'),
                                                                                               ('test01_PointMutations',
                                                                                                [],
                                                                                                'Testing Point mutations'),
                                                                                               ('test02_PointExceptions',
                                                                                                [],
                                                                                                'Testing Point exceptions'),
                                                                                               ('test03_PointApi',
                                                                                                [],
                                                                                                'Testing Point API'),
                                                                                               ('test04_LineStringMutations',
                                                                                                [],
                                                                                                'Testing LineString mutations'),
                                                                                               ('test05_Polygon',
                                                                                                [],
                                                                                                'Testing Polygon mutations'),
                                                                                               ('test06_Collection',
                                                                                                [],
                                                                                                'Testing Collection mutations')],
                                                                                   'properties': []},
             'django.contrib.gis.geos.tests.test_io.GEOSIOTest': {'bases': ['unittest.TestCase'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('test01_wktreader',
                                                                               [],
                                                                               ''),
                                                                              ('test02_wktwriter',
                                                                               [],
                                                                               ''),
                                                                              ('test03_wkbreader',
                                                                               [],
                                                                               ''),
                                                                              ('test04_wkbwriter',
                                                                               [],
                                                                               '')],
                                                                  'properties': []},
             'django.contrib.gis.geos.tests.test_mutable_list.ListMixinTest': {'bases': ['django.utils.unittest.TestCase'],
                                                                               'constructor': [],
                                                                               'docstring': '\n    Tests base class ListMixin by comparing a list clone which is\n    a ListMixin subclass with a real Python list.\n    ',
                                                                               'methods': [('lists_of_len',
                                                                                            ['length=None'],
                                                                                            ''),
                                                                                           ('limits_plus',
                                                                                            ['b'],
                                                                                            ''),
                                                                                           ('step_range',
                                                                                            [],
                                                                                            ''),
                                                                                           ('test01_getslice',
                                                                                            [],
                                                                                            'Slice retrieval'),
                                                                                           ('test02_setslice',
                                                                                            [],
                                                                                            'Slice assignment'),
                                                                                           ('test03_delslice',
                                                                                            [],
                                                                                            'Delete slice'),
                                                                                           ('test04_get_set_del_single',
                                                                                            [],
                                                                                            'Get/set/delete single item'),
                                                                                           ('test05_out_of_range_exceptions',
                                                                                            [],
                                                                                            'Out of range exceptions'),
                                                                                           ('test06_list_methods',
                                                                                            [],
                                                                                            'List methods'),
                                                                                           ('test07_allowed_types',
                                                                                            [],
                                                                                            'Type-restricted list'),
                                                                                           ('test08_min_length',
                                                                                            [],
                                                                                            'Length limits'),
                                                                                           ('test09_iterable_check',
                                                                                            [],
                                                                                            'Error on assigning non-iterable to slice'),
                                                                                           ('test10_checkindex',
                                                                                            [],
                                                                                            'Index check'),
                                                                                           ('test_11_sorting',
                                                                                            [],
                                                                                            'Sorting'),
                                                                                           ('test_12_arithmetic',
                                                                                            [],
                                                                                            'Arithmetic')],
                                                                               'properties': ['limit',
                                                                                              'listType']},
             'django.contrib.gis.geos.tests.test_mutable_list.ListMixinTestSingle': {'bases': ['django.contrib.gis.geos.mutable_list.ListMixinTest'],
                                                                                     'constructor': [],
                                                                                     'docstring': '',
                                                                                     'methods': [],
                                                                                     'properties': ['listType']},
             'django.contrib.gis.geos.tests.test_mutable_list.UserListA': {'bases': ['django.contrib.gis.geos.mutable_list.ListMixin'],
                                                                           'constructor': ['i_list',
                                                                                           '*args',
                                                                                           '**kwargs'],
                                                                           'docstring': '',
                                                                           'methods': [('__len__',
                                                                                        [],
                                                                                        ''),
                                                                                       ('__str__',
                                                                                        [],
                                                                                        ''),
                                                                                       ('__repr__',
                                                                                        [],
                                                                                        ''),
                                                                                       ('_set_list',
                                                                                        ['length',
                                                                                         'items'],
                                                                                        ''),
                                                                                       ('_get_single_external',
                                                                                        ['index'],
                                                                                        '')],
                                                                           'properties': ['_mytype',
                                                                                          '_list']},
             'django.contrib.gis.geos.tests.test_mutable_list.UserListB': {'bases': ['django.contrib.gis.geos.tests.test_mutable_list.UserListA'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [('_set_single',
                                                                                        ['index',
                                                                                         'value'],
                                                                                        '')],
                                                                           'properties': ['_mytype']},
             'django.contrib.gis.management.base.ArgsCommand': {'bases': ['django.core.management.base.BaseCommand'],
                                                                'constructor': [],
                                                                'docstring': '\n    Command class for commands that take multiple arguments.\n    ',
                                                                'methods': [('handle',
                                                                             ['*args',
                                                                              '**options'],
                                                                             ''),
                                                                            ('handle_args',
                                                                             ['*args',
                                                                              '**options'],
                                                                             '')],
                                                                'properties': ['args']},
             'django.contrib.gis.management.commands.inspectdb.Command': {'bases': ['django.core.management.commands.inspectdb.Command'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [('get_field_type',
                                                                                       ['connection',
                                                                                        'table_name',
                                                                                        'row'],
                                                                                       ''),
                                                                                      ('get_meta',
                                                                                       ['table_name'],
                                                                                       '')],
                                                                          'properties': ['db_module',
                                                                                         'gis_tables']},
             'django.contrib.gis.management.commands.ogrinspect.Command': {'bases': ['django.contrib.gis.management.base.ArgsCommand'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [('handle_args',
                                                                                        ['*args',
                                                                                         '**options'],
                                                                                        '')],
                                                                           'properties': ['help',
                                                                                          'args',
                                                                                          'option_list',
                                                                                          'requires_model_validation']},
             'django.contrib.gis.maps.google.gmap.GoogleMap': {'bases': ['object'],
                                                               'constructor': ['key=None',
                                                                               'api_url=None',
                                                                               'version=None',
                                                                               'center=None',
                                                                               'zoom=None',
                                                                               "dom_id='map'",
                                                                               'kml_urls=[]',
                                                                               'polylines=None',
                                                                               'polygons=None',
                                                                               'markers=None',
                                                                               "template='gis/google/google-map.js'",
                                                                               "js_module='geodjango'",
                                                                               'extra_context={}'],
                                                               'docstring': 'A class for generating Google Maps JavaScript.',
                                                               'methods': [('render',
                                                                            [],
                                                                            '\n        Generates the JavaScript necessary for displaying this Google Map.\n        ')],
                                                               'properties': ['onunload',
                                                                              'vml_css',
                                                                              'xmlns',
                                                                              'key',
                                                                              'version',
                                                                              'api_url',
                                                                              'dom_id',
                                                                              'extra_context',
                                                                              'js_module',
                                                                              'template',
                                                                              'kml_urls',
                                                                              'calc_zoom',
                                                                              'zoom',
                                                                              'center',
                                                                              'body',
                                                                              'onload',
                                                                              'api_script',
                                                                              'js',
                                                                              'scripts',
                                                                              'style',
                                                                              'xhtml',
                                                                              'icons']},
             'django.contrib.gis.maps.google.gmap.GoogleMapException': {'bases': ['Exception'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [],
                                                                        'properties': []},
             'django.contrib.gis.maps.google.gmap.GoogleMapSet': {'bases': ['django.contrib.gis.maps.google.gmap.GoogleMap'],
                                                                  'constructor': ['*args',
                                                                                  '**kwargs'],
                                                                  'docstring': '',
                                                                  'methods': [('load_map_js',
                                                                               [],
                                                                               '\n        Returns JavaScript containing all of the loading routines for each\n        map in this set.\n        '),
                                                                              ('render',
                                                                               [],
                                                                               '\n        Generates the JavaScript for the collection of Google Maps in\n        this set.\n        ')],
                                                                  'properties': ['map_template',
                                                                                 'template',
                                                                                 'maps',
                                                                                 'dom_ids',
                                                                                 'onload',
                                                                                 'icons']},
             'django.contrib.gis.maps.google.overlays.GEvent': {'bases': ['object'],
                                                                'constructor': ['event',
                                                                                'action'],
                                                                'docstring': '\n    A Python wrapper for the Google GEvent object.\n\n    Events can be attached to any object derived from GOverlayBase with the\n    add_event() call.\n\n    For more information please see the Google Maps API Reference:\n     http://code.google.com/apis/maps/documentation/reference.html#GEvent\n\n    Example:\n\n      from django.shortcuts import render_to_response\n      from django.contrib.gis.maps.google import GoogleMap, GEvent, GPolyline\n\n      def sample_request(request):\n          polyline = GPolyline(\'LINESTRING(101 26, 112 26, 102 31)\')\n          event = GEvent(\'click\',\n            \'function() { location.href = "http://www.google.com"}\')\n          polyline.add_event(event)\n          return render_to_response(\'mytemplate.html\',\n          {\'google\' : GoogleMap(polylines=[polyline])})\n    ',
                                                                'methods': [('__unicode__',
                                                                             [],
                                                                             'Returns the parameter part of a GEvent.')],
                                                                'properties': ['event',
                                                                               'action']},
             'django.contrib.gis.maps.google.overlays.GIcon': {'bases': ['object'],
                                                               'constructor': ['varname',
                                                                               'image=None',
                                                                               'iconsize=None',
                                                                               'shadow=None',
                                                                               'shadowsize=None',
                                                                               'iconanchor=None',
                                                                               'infowindowanchor=None'],
                                                               'docstring': '\n    Creates a GIcon object to pass into a Gmarker object.\n\n    The keyword arguments map to instance attributes of the same name. These,\n    in turn, correspond to a subset of the attributes of the official GIcon\n    javascript object:\n\n    http://code.google.com/apis/maps/documentation/reference.html#GIcon\n\n    Because a Google map often uses several different icons, a name field has\n    been added to the required arguments.\n\n    Required Arguments:\n        varname:\n            A string which will become the basis for the js variable name of\n            the marker, for this reason, your code should assign a unique\n            name for each GIcon you instantiate, otherwise there will be\n            name space collisions in your javascript.\n\n    Keyword Options:\n        image:\n            The url of the image to be used as the icon on the map defaults\n            to \'G_DEFAULT_ICON\'\n\n        iconsize:\n            a tuple representing the pixel size of the foreground (not the\n            shadow) image of the icon, in the format: (width, height) ex.:\n\n            GIcon(\'fast_food\',\n                  image="/media/icon/star.png",\n                  iconsize=(15,10))\n\n            Would indicate your custom icon was 15px wide and 10px height.\n\n        shadow:\n            the url of the image of the icon\'s shadow\n\n        shadowsize:\n            a tuple representing the pixel size of the shadow image, format is\n            the same as ``iconsize``\n\n        iconanchor:\n            a tuple representing the pixel coordinate relative to the top left\n            corner of the icon image at which this icon is anchored to the map.\n            In (x, y) format.  x increases to the right in the Google Maps\n            coordinate system and y increases downwards in the Google Maps\n            coordinate system.)\n\n        infowindowanchor:\n            The pixel coordinate relative to the top left corner of the icon\n            image at which the info window is anchored to this icon.\n\n    ',
                                                               'methods': [('__cmp__',
                                                                            ['other'],
                                                                            ''),
                                                                           ('__hash__', [], '')],
                                                               'properties': ['varname',
                                                                              'image',
                                                                              'iconsize',
                                                                              'shadow',
                                                                              'shadowsize',
                                                                              'iconanchor',
                                                                              'infowindowanchor']},
             'django.contrib.gis.maps.google.overlays.GMarker': {'bases': ['django.contrib.gis.maps.google.overlays.GOverlayBase'],
                                                                 'constructor': ['geom',
                                                                                 'title=None',
                                                                                 'draggable=False',
                                                                                 'icon=None'],
                                                                 'docstring': '\n    A Python wrapper for the Google GMarker object.  For more information\n    please see the Google Maps API Reference:\n     http://code.google.com/apis/maps/documentation/reference.html#GMarker\n\n    Example:\n\n      from django.shortcuts import render_to_response\n      from django.contrib.gis.maps.google.overlays import GMarker, GEvent\n\n      def sample_request(request):\n          marker = GMarker(\'POINT(101 26)\')\n          event = GEvent(\'click\',\n                         \'function() { location.href = "http://www.google.com"}\')\n          marker.add_event(event)\n          return render_to_response(\'mytemplate.html\',\n                 {\'google\' : GoogleMap(markers=[marker])})\n    ',
                                                                 'methods': [('latlng_from_coords',
                                                                              ['coords'],
                                                                              ''),
                                                                             ('options',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['latlng',
                                                                                'envelope',
                                                                                'title',
                                                                                'draggable',
                                                                                'icon',
                                                                                'js_params']},
             'django.contrib.gis.maps.google.overlays.GOverlayBase': {'bases': ['object'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('latlng_from_coords',
                                                                                   ['coords'],
                                                                                   'Generates a JavaScript array of GLatLng objects for the given coordinates.'),
                                                                                  ('add_event',
                                                                                   ['event'],
                                                                                   'Attaches a GEvent to the overlay object.'),
                                                                                  ('__unicode__',
                                                                                   [],
                                                                                   'The string representation is the JavaScript API call.')],
                                                                      'properties': ['events']},
             'django.contrib.gis.maps.google.overlays.GPolygon': {'bases': ['django.contrib.gis.maps.google.overlays.GOverlayBase'],
                                                                  'constructor': ['poly',
                                                                                  "stroke_color='#0000ff'",
                                                                                  'stroke_weight=2',
                                                                                  'stroke_opacity=1',
                                                                                  "fill_color='#0000ff'",
                                                                                  'fill_opacity=0.40000000000000002'],
                                                                  'docstring': '\n    A Python wrapper for the Google GPolygon object.  For more information\n    please see the Google Maps API Reference:\n     http://code.google.com/apis/maps/documentation/reference.html#GPolygon\n    ',
                                                                  'methods': [],
                                                                  'properties': ['envelope',
                                                                                 'points',
                                                                                 'stroke_color',
                                                                                 'stroke_opacity',
                                                                                 'stroke_weight',
                                                                                 'fill_color',
                                                                                 'fill_opacity',
                                                                                 'js_params']},
             'django.contrib.gis.maps.google.overlays.GPolyline': {'bases': ['django.contrib.gis.maps.google.overlays.GOverlayBase'],
                                                                   'constructor': ['geom',
                                                                                   "color='#0000ff'",
                                                                                   'weight=2',
                                                                                   'opacity=1'],
                                                                   'docstring': '\n    A Python wrapper for the Google GPolyline object.  For more information\n    please see the Google Maps API Reference:\n     http://code.google.com/apis/maps/documentation/reference.html#GPolyline\n    ',
                                                                   'methods': [],
                                                                   'properties': ['latlngs',
                                                                                  'envelope',
                                                                                  'color',
                                                                                  'weight',
                                                                                  'opacity',
                                                                                  'js_params']},
             'django.contrib.gis.maps.google.zoom.GoogleZoom': {'bases': ['object'],
                                                                'constructor': ['num_zoom=19',
                                                                                'tilesize=256'],
                                                                'docstring': '\n    GoogleZoom is a utility for performing operations related to the zoom\n    levels on Google Maps.\n\n    This class is inspired by the OpenStreetMap Mapnik tile generation routine\n    `generate_tiles.py`, and the article "How Big Is the World" (Hack #16) in\n    "Google Maps Hacks" by Rich Gibson and Schuyler Erle.\n\n    `generate_tiles.py` may be found at:\n      http://trac.openstreetmap.org/browser/applications/rendering/mapnik/generate_tiles.py\n\n    "Google Maps Hacks" may be found at http://safari.oreilly.com/0596101619\n    ',
                                                                'methods': [('__len__',
                                                                             [],
                                                                             'Returns the number of zoom levels.'),
                                                                            ('get_lon_lat',
                                                                             ['lonlat'],
                                                                             'Unpacks longitude, latitude from GEOS Points and 2-tuples.'),
                                                                            ('lonlat_to_pixel',
                                                                             ['lonlat',
                                                                              'zoom'],
                                                                             'Converts a longitude, latitude coordinate pair for the given zoom level.'),
                                                                            ('pixel_to_lonlat',
                                                                             ['px', 'zoom'],
                                                                             'Converts a pixel to a longitude, latitude pair at the given zoom level.'),
                                                                            ('tile',
                                                                             ['lonlat',
                                                                              'zoom'],
                                                                             '\n        Returns a Polygon  corresponding to the region represented by a fictional\n        Google Tile for the given longitude/latitude pair and zoom level. This\n        tile is used to determine the size of a tile at the given point.\n        '),
                                                                            ('get_zoom',
                                                                             ['geom'],
                                                                             'Returns the optimal Zoom level for the given geometry.'),
                                                                            ('get_width_height',
                                                                             ['extent'],
                                                                             '\n        Returns the width and height for the given extent.\n        ')],
                                                                'properties': ['_tilesize',
                                                                               '_nzoom',
                                                                               '_degpp',
                                                                               '_radpp',
                                                                               '_npix']},
             'django.contrib.gis.measure.Area': {'bases': ['django.contrib.gis.measure.MeasureBase'],
                                                 'constructor': ['default_unit=None',
                                                                 '**kwargs'],
                                                 'docstring': '',
                                                 'methods': [('__getattr__', ['name'], ''),
                                                             ('__repr__', [], ''),
                                                             ('__str__', [], ''),
                                                             ('__cmp__', ['other'], ''),
                                                             ('__add__', ['other'], ''),
                                                             ('__iadd__', ['other'], ''),
                                                             ('__sub__', ['other'], ''),
                                                             ('__isub__', ['other'], ''),
                                                             ('__mul__', ['other'], ''),
                                                             ('__imul__', ['other'], ''),
                                                             ('__rmul__', ['other'], ''),
                                                             ('__div__', ['other'], ''),
                                                             ('__idiv__', ['other'], ''),
                                                             ('__nonzero__', [], '')],
                                                 'properties': ['UNITS',
                                                                'k',
                                                                'v',
                                                                'ALIAS',
                                                                'LALIAS',
                                                                'sq_m',
                                                                '_default_unit']},
             'django.contrib.gis.measure.Distance': {'bases': ['django.contrib.gis.measure.MeasureBase'],
                                                     'constructor': ['default_unit=None',
                                                                     '**kwargs'],
                                                     'docstring': '',
                                                     'methods': [('__getattr__', ['name'], ''),
                                                                 ('__repr__', [], ''),
                                                                 ('__str__', [], ''),
                                                                 ('__cmp__', ['other'], ''),
                                                                 ('__add__', ['other'], ''),
                                                                 ('__iadd__', ['other'], ''),
                                                                 ('__sub__', ['other'], ''),
                                                                 ('__isub__', ['other'], ''),
                                                                 ('__mul__', ['other'], ''),
                                                                 ('__imul__', ['other'], ''),
                                                                 ('__rmul__', ['other'], ''),
                                                                 ('__div__', ['other'], ''),
                                                                 ('__idiv__', ['other'], ''),
                                                                 ('__nonzero__', [], '')],
                                                     'properties': ['UNITS',
                                                                    'ALIAS',
                                                                    'LALIAS',
                                                                    'k',
                                                                    'v',
                                                                    'm',
                                                                    '_default_unit']},
             'django.contrib.gis.measure.MeasureBase': {'bases': ['object'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('default_units',
                                                                     ['kwargs'],
                                                                     '\n        Return the unit value and the default units specified\n        from the given keyword arguments dictionary.\n        '),
                                                                    ('unit_attname',
                                                                     ['unit_str'],
                                                                     "\n        Retrieves the unit attribute name for the given unit string.\n        For example, if the given unit string is 'metre', 'm' would be returned.\n        An exception is raised if an attribute cannot be found.\n        ")],
                                                        'properties': []},
             'django.contrib.gis.sitemaps.georss.GeoRSSSitemap': {'bases': ['django.contrib.sitemaps.Sitemap'],
                                                                  'constructor': ['feed_dict',
                                                                                  'slug_dict=None'],
                                                                  'docstring': '\n    A minimal hook to produce sitemaps for GeoRSS feeds.\n    ',
                                                                  'methods': [('get_urls',
                                                                               ['page=1',
                                                                                'site=None'],
                                                                               '\n        This method is overrridden so the appropriate `geo_format` attribute\n        is placed on each URL element.\n        '),
                                                                              ('items', [], ''),
                                                                              ('location',
                                                                               ['obj'],
                                                                               '')],
                                                                  'properties': ['feed_dict',
                                                                                 'locations']},
             'django.contrib.gis.sitemaps.kml.KMLSitemap': {'bases': ['django.contrib.sitemaps.Sitemap'],
                                                            'constructor': ['locations=None'],
                                                            'docstring': '\n    A minimal hook to produce KML sitemaps.\n    ',
                                                            'methods': [('_build_kml_sources',
                                                                         ['sources'],
                                                                         '\n        Goes through the given sources and returns a 3-tuple of\n        the application label, module name, and field name of every\n        GeometryField encountered in the sources.\n\n        If no sources are provided, then all models.\n        '),
                                                                        ('get_urls',
                                                                         ['page=1',
                                                                          'site=None'],
                                                                         '\n        This method is overrridden so the appropriate `geo_format` attribute\n        is placed on each URL element.\n        '),
                                                                        ('items', [], ''),
                                                                        ('location',
                                                                         ['obj'],
                                                                         '')],
                                                            'properties': ['geo_format',
                                                                           'locations']},
             'django.contrib.gis.sitemaps.kml.KMZSitemap': {'bases': ['django.contrib.gis.sitemaps.kml.KMLSitemap'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['geo_format']},
             'django.contrib.gis.tests.GeoDjangoTestSuiteRunner': {'bases': ['django.test.simple.DjangoTestSuiteRunner'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('setup_test_environment',
                                                                                ['**kwargs'],
                                                                                ''),
                                                                               ('teardown_test_environment',
                                                                                ['**kwargs'],
                                                                                ''),
                                                                               ('build_suite',
                                                                                ['test_labels',
                                                                                 'extra_tests=None',
                                                                                 '**kwargs'],
                                                                                '')],
                                                                   'properties': ['old_installed',
                                                                                  'old_root_urlconf',
                                                                                  'old_site_id']},
             'django.contrib.gis.tests.distapp.models.AustraliaCity': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                       'constructor': [],
                                                                       'docstring': 'City model for Australia, using WGS84.',
                                                                       'methods': [('__unicode__',
                                                                                    [],
                                                                                    '')],
                                                                       'properties': ['name',
                                                                                      'point',
                                                                                      'objects']},
             'django.contrib.gis.tests.distapp.models.CensusZipcode': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                       'constructor': [],
                                                                       'docstring': 'Model for a few South Texas ZIP codes (in original Census NAD83).',
                                                                       'methods': [('__unicode__',
                                                                                    [],
                                                                                    '')],
                                                                       'properties': ['name',
                                                                                      'poly',
                                                                                      'objects']},
             'django.contrib.gis.tests.distapp.models.Interstate': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                    'constructor': [],
                                                                    'docstring': 'Geodetic model for U.S. Interstates.',
                                                                    'methods': [('__unicode__',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['name',
                                                                                   'path',
                                                                                   'objects']},
             'django.contrib.gis.tests.distapp.models.SouthTexasCity': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                        'constructor': [],
                                                                        'docstring': 'City model on projected coordinate system for South Texas.',
                                                                        'methods': [('__unicode__',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': ['name',
                                                                                       'point',
                                                                                       'objects']},
             'django.contrib.gis.tests.distapp.models.SouthTexasCityFt': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                          'constructor': [],
                                                                          'docstring': 'Same City model as above, but U.S. survey feet are the units.',
                                                                          'methods': [('__unicode__',
                                                                                       [],
                                                                                       '')],
                                                                          'properties': ['name',
                                                                                         'point',
                                                                                         'objects']},
             'django.contrib.gis.tests.distapp.models.SouthTexasInterstate': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                              'constructor': [],
                                                                              'docstring': 'Projected model for South Texas Interstates.',
                                                                              'methods': [('__unicode__',
                                                                                           [],
                                                                                           '')],
                                                                              'properties': ['name',
                                                                                             'path',
                                                                                             'objects']},
             'django.contrib.gis.tests.distapp.models.SouthTexasZipcode': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                           'constructor': [],
                                                                           'docstring': 'Model for a few South Texas ZIP codes.',
                                                                           'methods': [('__unicode__',
                                                                                        [],
                                                                                        '')],
                                                                           'properties': ['name',
                                                                                          'poly',
                                                                                          'objects']},
             'django.contrib.gis.tests.distapp.tests.DistanceTest': {'bases': ['django.test.TestCase'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('get_names',
                                                                                  ['qs'],
                                                                                  ''),
                                                                                 ('test01_init',
                                                                                  [],
                                                                                  'Test initialization of distance models.'),
                                                                                 ('test02_dwithin',
                                                                                  [],
                                                                                  'Testing the `dwithin` lookup type.'),
                                                                                 ('test03a_distance_method',
                                                                                  [],
                                                                                  'Testing the `distance` GeoQuerySet method on projected coordinate systems.'),
                                                                                 ('test03b_distance_method',
                                                                                  [],
                                                                                  'Testing the `distance` GeoQuerySet method on geodetic coordnate systems.'),
                                                                                 ('test03c_distance_method',
                                                                                  [],
                                                                                  'Testing the `distance` GeoQuerySet method used with `transform` on a geographic field.'),
                                                                                 ('test04_distance_lookups',
                                                                                  [],
                                                                                  'Testing the `distance_lt`, `distance_gt`, `distance_lte`, and `distance_gte` lookup types.'),
                                                                                 ('test05_geodetic_distance_lookups',
                                                                                  [],
                                                                                  'Testing distance lookups on geodetic coordinate systems.'),
                                                                                 ('test06_area',
                                                                                  [],
                                                                                  'Testing the `area` GeoQuerySet method.'),
                                                                                 ('test07_length',
                                                                                  [],
                                                                                  'Testing the `length` GeoQuerySet method.'),
                                                                                 ('test08_perimeter',
                                                                                  [],
                                                                                  'Testing the `perimeter` GeoQuerySet method.'),
                                                                                 ('test09_measurement_null_fields',
                                                                                  [],
                                                                                  'Testing the measurement GeoQuerySet methods on fields with NULL values.')],
                                                                     'properties': ['stx_pnt',
                                                                                    'au_pnt']},
             'django.contrib.gis.tests.geo3d.models.City3D': {'bases': ['django.contrib.gis.db.models.Model'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('__unicode__',
                                                                           [],
                                                                           '')],
                                                              'properties': ['name',
                                                                             'point',
                                                                             'objects']},
             'django.contrib.gis.tests.geo3d.models.Interstate2D': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('__unicode__',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['name',
                                                                                   'line',
                                                                                   'objects']},
             'django.contrib.gis.tests.geo3d.models.Interstate3D': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('__unicode__',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['name',
                                                                                   'line',
                                                                                   'objects']},
             'django.contrib.gis.tests.geo3d.models.InterstateProj2D': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('__unicode__',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': ['name',
                                                                                       'line',
                                                                                       'objects']},
             'django.contrib.gis.tests.geo3d.models.InterstateProj3D': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('__unicode__',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': ['name',
                                                                                       'line',
                                                                                       'objects']},
             'django.contrib.gis.tests.geo3d.models.MultiPoint3D': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['mpoint',
                                                                                   'objects']},
             'django.contrib.gis.tests.geo3d.models.Point2D': {'bases': ['django.contrib.gis.db.models.Model'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['point',
                                                                              'objects']},
             'django.contrib.gis.tests.geo3d.models.Point3D': {'bases': ['django.contrib.gis.db.models.Model'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['point',
                                                                              'objects']},
             'django.contrib.gis.tests.geo3d.models.Polygon2D': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('__unicode__',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['name',
                                                                                'poly',
                                                                                'objects']},
             'django.contrib.gis.tests.geo3d.models.Polygon3D': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('__unicode__',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['name',
                                                                                'poly',
                                                                                'objects']},
             'django.contrib.gis.tests.geo3d.tests.Geo3DTest': {'bases': ['django.utils.unittest.TestCase'],
                                                                'constructor': [],
                                                                'docstring': '\n    Only a subset of the PostGIS routines are 3D-enabled, and this TestCase\n    tries to test the features that can handle 3D and that are also \n    available within GeoDjango.  For more information, see the PostGIS docs\n    on the routines that support 3D:\n\n    http://postgis.refractions.net/documentation/manual-1.4/ch08.html#PostGIS_3D_Functions\n    ',
                                                                'methods': [('test01_3d',
                                                                             [],
                                                                             'Test the creation of 3D models.'),
                                                                            ('test01a_3d_layermapping',
                                                                             [],
                                                                             'Testing LayerMapping on 3D models.'),
                                                                            ('test02a_kml',
                                                                             [],
                                                                             'Test GeoQuerySet.kml() with Z values.'),
                                                                            ('test02b_geojson',
                                                                             [],
                                                                             'Test GeoQuerySet.geojson() with Z values.'),
                                                                            ('test03a_union',
                                                                             [],
                                                                             'Testing the Union aggregate of 3D models.'),
                                                                            ('test03b_extent',
                                                                             [],
                                                                             'Testing the Extent3D aggregate for 3D models.'),
                                                                            ('test04_perimeter',
                                                                             [],
                                                                             'Testing GeoQuerySet.perimeter() on 3D fields.'),
                                                                            ('test05_length',
                                                                             [],
                                                                             'Testing GeoQuerySet.length() on 3D fields.'),
                                                                            ('test06_scale',
                                                                             [],
                                                                             'Testing GeoQuerySet.scale() on Z values.'),
                                                                            ('test07_translate',
                                                                             [],
                                                                             'Testing GeoQuerySet.translate() on Z values.')],
                                                                'properties': []},
             'django.contrib.gis.tests.geoapp.feeds.TestGeoAtom1': {'bases': ['django.contrib.gis.tests.geoapp.feeds.TestGeoRSS1'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['feed_type']},
             'django.contrib.gis.tests.geoapp.feeds.TestGeoAtom2': {'bases': ['django.contrib.gis.tests.geoapp.feeds.TestGeoRSS2'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('geometry',
                                                                                 ['obj'],
                                                                                 '')],
                                                                    'properties': ['feed_type']},
             'django.contrib.gis.tests.geoapp.feeds.TestGeoRSS1': {'bases': ['django.contrib.gis.feeds.Feed'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('items',
                                                                                [],
                                                                                ''),
                                                                               ('item_link',
                                                                                ['item'],
                                                                                ''),
                                                                               ('item_geometry',
                                                                                ['item'],
                                                                                '')],
                                                                   'properties': ['link',
                                                                                  'title']},
             'django.contrib.gis.tests.geoapp.feeds.TestGeoRSS2': {'bases': ['django.contrib.gis.tests.geoapp.feeds.TestGeoRSS1'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('geometry',
                                                                                ['obj'],
                                                                                ''),
                                                                               ('item_geometry',
                                                                                ['item'],
                                                                                '')],
                                                                   'properties': []},
             'django.contrib.gis.tests.geoapp.feeds.TestW3CGeo1': {'bases': ['django.contrib.gis.tests.geoapp.feeds.TestGeoRSS1'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['feed_type']},
             'django.contrib.gis.tests.geoapp.feeds.TestW3CGeo2': {'bases': ['django.contrib.gis.tests.geoapp.feeds.TestGeoRSS2'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['feed_type']},
             'django.contrib.gis.tests.geoapp.feeds.TestW3CGeo3': {'bases': ['django.contrib.gis.tests.geoapp.feeds.TestGeoRSS1'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('item_geometry',
                                                                                ['item'],
                                                                                '')],
                                                                   'properties': ['feed_type']},
             'django.contrib.gis.tests.geoapp.models.City': {'bases': ['django.contrib.gis.db.models.Model'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('__unicode__',
                                                                          [],
                                                                          '')],
                                                             'properties': ['name',
                                                                            'point',
                                                                            'objects']},
             'django.contrib.gis.tests.geoapp.models.Country': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('__unicode__',
                                                                             [],
                                                                             '')],
                                                                'properties': ['name',
                                                                               'mpoly',
                                                                               'objects']},
             'django.contrib.gis.tests.geoapp.models.Feature': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('__unicode__',
                                                                             [],
                                                                             '')],
                                                                'properties': ['name',
                                                                               'geom',
                                                                               'objects']},
             'django.contrib.gis.tests.geoapp.models.MinusOneSRID': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['geom',
                                                                                    'objects']},
             'django.contrib.gis.tests.geoapp.models.PennsylvaniaCity': {'bases': ['django.contrib.gis.tests.geoapp.models.City'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [],
                                                                         'properties': ['county',
                                                                                        'objects']},
             'django.contrib.gis.tests.geoapp.models.State': {'bases': ['django.contrib.gis.db.models.Model'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('__unicode__',
                                                                           [],
                                                                           '')],
                                                              'properties': ['name',
                                                                             'poly',
                                                                             'objects']},
             'django.contrib.gis.tests.geoapp.models.Track': {'bases': ['django.contrib.gis.db.models.Model'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('__unicode__',
                                                                           [],
                                                                           '')],
                                                              'properties': ['name',
                                                                             'line',
                                                                             'objects']},
             'django.contrib.gis.tests.geoapp.test_feeds.GeoFeedTest': {'bases': ['django.test.TestCase'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('setUp',
                                                                                     [],
                                                                                     ''),
                                                                                    ('tearDown',
                                                                                     [],
                                                                                     ''),
                                                                                    ('assertChildNodes',
                                                                                     ['elem',
                                                                                      'expected'],
                                                                                     'Taken from regressiontests/syndication/tests.py.'),
                                                                                    ('test_geofeed_rss',
                                                                                     [],
                                                                                     'Tests geographic feeds using GeoRSS over RSSv2.'),
                                                                                    ('test_geofeed_atom',
                                                                                     [],
                                                                                     'Testing geographic feeds using GeoRSS over Atom.'),
                                                                                    ('test_geofeed_w3c',
                                                                                     [],
                                                                                     'Testing geographic feeds using W3C Geo.')],
                                                                        'properties': ['urls',
                                                                                       'old_Site_meta_installed']},
             'django.contrib.gis.tests.geoapp.test_regress.GeoRegressionTests': {'bases': ['unittest.TestCase'],
                                                                                 'constructor': [],
                                                                                 'docstring': '',
                                                                                 'methods': [('test01_update',
                                                                                              [],
                                                                                              'Testing GeoQuerySet.update(), see #10411.'),
                                                                                             ('test02_kmz',
                                                                                              [],
                                                                                              'Testing `render_to_kmz` with non-ASCII data, see #11624.'),
                                                                                             ('test03_extent',
                                                                                              [],
                                                                                              'Testing `extent` on a table with a single point, see #11827.')],
                                                                                 'properties': []},
             'django.contrib.gis.tests.geoapp.test_sitemaps.GeoSitemapTest': {'bases': ['django.test.TestCase'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('setUp',
                                                                                           [],
                                                                                           ''),
                                                                                          ('tearDown',
                                                                                           [],
                                                                                           ''),
                                                                                          ('assertChildNodes',
                                                                                           ['elem',
                                                                                            'expected'],
                                                                                           'Taken from regressiontests/syndication/tests.py.'),
                                                                                          ('test_geositemap_index',
                                                                                           [],
                                                                                           'Tests geographic sitemap index.'),
                                                                                          ('test_geositemap_kml',
                                                                                           [],
                                                                                           'Tests KML/KMZ geographic sitemaps.'),
                                                                                          ('test_geositemap_georss',
                                                                                           [],
                                                                                           'Tests GeoRSS geographic sitemaps.')],
                                                                              'properties': ['urls',
                                                                                             'old_Site_meta_installed']},
             'django.contrib.gis.tests.geoapp.tests.GeoModelTest': {'bases': ['django.test.TestCase'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('test01_fixtures',
                                                                                 [],
                                                                                 'Testing geographic model initialization from fixtures.'),
                                                                                ('test02_proxy',
                                                                                 [],
                                                                                 'Testing Lazy-Geometry support (using the GeometryProxy).'),
                                                                                ('test03a_kml',
                                                                                 [],
                                                                                 'Testing KML output from the database using GeoQuerySet.kml().'),
                                                                                ('test03b_gml',
                                                                                 [],
                                                                                 'Testing GML output from the database using GeoQuerySet.gml().'),
                                                                                ('test03c_geojson',
                                                                                 [],
                                                                                 'Testing GeoJSON output from the database using GeoQuerySet.geojson().'),
                                                                                ('test03d_svg',
                                                                                 [],
                                                                                 'Testing SVG output using GeoQuerySet.svg().'),
                                                                                ('test04_transform',
                                                                                 [],
                                                                                 'Testing the transform() GeoManager method.'),
                                                                                ('test05_extent',
                                                                                 [],
                                                                                 'Testing the `extent` GeoQuerySet method.'),
                                                                                ('test06_make_line',
                                                                                 [],
                                                                                 'Testing the `make_line` GeoQuerySet method.'),
                                                                                ('test09_disjoint',
                                                                                 [],
                                                                                 'Testing the `disjoint` lookup type.'),
                                                                                ('test10_contains_contained',
                                                                                 [],
                                                                                 "Testing the 'contained', 'contains', and 'bbcontains' lookup types."),
                                                                                ('test11_lookup_insert_transform',
                                                                                 [],
                                                                                 'Testing automatic transform for lookups and inserts.'),
                                                                                ('test12_null_geometries',
                                                                                 [],
                                                                                 'Testing NULL geometry support, and the `isnull` lookup type.'),
                                                                                ('test13_left_right',
                                                                                 [],
                                                                                 "Testing the 'left' and 'right' lookup types."),
                                                                                ('test14_equals',
                                                                                 [],
                                                                                 "Testing the 'same_as' and 'equals' lookup types."),
                                                                                ('test15_relate',
                                                                                 [],
                                                                                 "Testing the 'relate' lookup type."),
                                                                                ('test16_createnull',
                                                                                 [],
                                                                                 'Testing creating a model instance and the geometry being None'),
                                                                                ('test17_unionagg',
                                                                                 [],
                                                                                 'Testing the `unionagg` (aggregate union) GeoManager method.'),
                                                                                ('test18_geometryfield',
                                                                                 [],
                                                                                 'Testing the general GeometryField.'),
                                                                                ('test19_centroid',
                                                                                 [],
                                                                                 'Testing the `centroid` GeoQuerySet method.'),
                                                                                ('test20_pointonsurface',
                                                                                 [],
                                                                                 'Testing the `point_on_surface` GeoQuerySet method.'),
                                                                                ('test21_scale',
                                                                                 [],
                                                                                 'Testing the `scale` GeoQuerySet method.'),
                                                                                ('test22_translate',
                                                                                 [],
                                                                                 'Testing the `translate` GeoQuerySet method.'),
                                                                                ('test23_numgeom',
                                                                                 [],
                                                                                 'Testing the `num_geom` GeoQuerySet method.'),
                                                                                ('test24_numpoints',
                                                                                 [],
                                                                                 'Testing the `num_points` GeoQuerySet method.'),
                                                                                ('test25_geoset',
                                                                                 [],
                                                                                 'Testing the `difference`, `intersection`, `sym_difference`, and `union` GeoQuerySet methods.'),
                                                                                ('test26_inherited_geofields',
                                                                                 [],
                                                                                 'Test GeoQuerySet methods on inherited Geometry fields.'),
                                                                                ('test27_snap_to_grid',
                                                                                 [],
                                                                                 'Testing GeoQuerySet.snap_to_grid().'),
                                                                                ('test28_reverse',
                                                                                 [],
                                                                                 'Testing GeoQuerySet.reverse_geom().'),
                                                                                ('test29_force_rhr',
                                                                                 [],
                                                                                 'Testing GeoQuerySet.force_rhr().'),
                                                                                ('test30_geohash',
                                                                                 [],
                                                                                 'Testing GeoQuerySet.geohash().')],
                                                                    'properties': []},
             'django.contrib.gis.tests.geogapp.models.City': {'bases': ['django.contrib.gis.db.models.Model'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('__unicode__',
                                                                           [],
                                                                           '')],
                                                              'properties': ['name',
                                                                             'point',
                                                                             'objects']},
             'django.contrib.gis.tests.geogapp.models.County': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('__unicode__',
                                                                             [],
                                                                             '')],
                                                                'properties': ['name',
                                                                               'state',
                                                                               'mpoly',
                                                                               'objects']},
             'django.contrib.gis.tests.geogapp.models.Zipcode': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('__unicode__',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['code',
                                                                                'poly',
                                                                                'objects']},
             'django.contrib.gis.tests.geogapp.tests.GeographyTest': {'bases': ['django.test.TestCase'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('test01_fixture_load',
                                                                                   [],
                                                                                   'Ensure geography features loaded properly.'),
                                                                                  ('test02_distance_lookup',
                                                                                   [],
                                                                                   'Testing GeoQuerySet distance lookup support on non-point geography fields.'),
                                                                                  ('test03_distance_method',
                                                                                   [],
                                                                                   'Testing GeoQuerySet.distance() support on non-point geography fields.'),
                                                                                  ('test04_invalid_operators_functions',
                                                                                   [],
                                                                                   'Ensuring exceptions are raised for operators & functions invalid on geography fields.'),
                                                                                  ('test05_geography_layermapping',
                                                                                   [],
                                                                                   'Testing LayerMapping support on models with geography fields.'),
                                                                                  ('test06_geography_area',
                                                                                   [],
                                                                                   'Testing that Area calculations work on geography columns.')],
                                                                      'properties': []},
             'django.contrib.gis.tests.layermap.models.City': {'bases': ['django.contrib.gis.db.models.Model'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['name',
                                                                              'population',
                                                                              'density',
                                                                              'dt',
                                                                              'point',
                                                                              'objects']},
             'django.contrib.gis.tests.layermap.models.CityBase': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['name',
                                                                                  'population',
                                                                                  'density',
                                                                                  'point',
                                                                                  'objects']},
             'django.contrib.gis.tests.layermap.models.County': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['name',
                                                                                'state',
                                                                                'mpoly',
                                                                                'objects']},
             'django.contrib.gis.tests.layermap.models.CountyFeat': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['name',
                                                                                    'poly',
                                                                                    'objects']},
             'django.contrib.gis.tests.layermap.models.ICity1': {'bases': ['django.contrib.gis.tests.layermap.models.CityBase'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['dt']},
             'django.contrib.gis.tests.layermap.models.ICity2': {'bases': ['django.contrib.gis.tests.layermap.models.ICity1'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['dt_time']},
             'django.contrib.gis.tests.layermap.models.Interstate': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['name',
                                                                                    'length',
                                                                                    'path',
                                                                                    'objects']},
             'django.contrib.gis.tests.layermap.models.Invalid': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': ['point']},
             'django.contrib.gis.tests.layermap.models.State': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['name',
                                                                               'objects']},
             'django.contrib.gis.tests.layermap.tests.LayerMapTest': {'bases': ['django.utils.unittest.TestCase'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('test01_init',
                                                                                   [],
                                                                                   'Testing LayerMapping initialization.'),
                                                                                  ('test02_simple_layermap',
                                                                                   [],
                                                                                   'Test LayerMapping import of a simple point shapefile.'),
                                                                                  ('test03_layermap_strict',
                                                                                   [],
                                                                                   'Testing the `strict` keyword, and import of a LineString shapefile.'),
                                                                                  ('county_helper',
                                                                                   ['county_feat=True'],
                                                                                   'Helper function for ensuring the integrity of the mapped County models.'),
                                                                                  ('test04_layermap_unique_multigeometry_fk',
                                                                                   [],
                                                                                   'Testing the `unique`, and `transform`, geometry collection conversion, and ForeignKey mappings.'),
                                                                                  ('test05_test_fid_range_step',
                                                                                   [],
                                                                                   'Tests the `fid_range` keyword and the `step` keyword of .save().'),
                                                                                  ('test06_model_inheritance',
                                                                                   [],
                                                                                   'Tests LayerMapping on inherited models.  See #12093.'),
                                                                                  ('test07_invalid_layer',
                                                                                   [],
                                                                                   'Tests LayerMapping on invalid geometries.  See #15378.')],
                                                                      'properties': []},
             'django.contrib.gis.tests.relatedapp.models.Article': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['title',
                                                                                   'author',
                                                                                   'objects']},
             'django.contrib.gis.tests.relatedapp.models.AugmentedLocation': {'bases': ['django.contrib.gis.tests.relatedapp.models.Location'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [],
                                                                              'properties': ['extra_text',
                                                                                             'objects']},
             'django.contrib.gis.tests.relatedapp.models.Author': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['name',
                                                                                  'objects']},
             'django.contrib.gis.tests.relatedapp.models.Book': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['title',
                                                                                'author',
                                                                                'objects']},
             'django.contrib.gis.tests.relatedapp.models.City': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('__unicode__',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['name',
                                                                                'state',
                                                                                'location',
                                                                                'objects']},
             'django.contrib.gis.tests.relatedapp.models.DirectoryEntry': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['listing_text',
                                                                                          'location',
                                                                                          'objects']},
             'django.contrib.gis.tests.relatedapp.models.Location': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('__unicode__',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['point',
                                                                                    'objects']},
             'django.contrib.gis.tests.relatedapp.models.Parcel': {'bases': ['django.contrib.gis.db.models.Model'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('__unicode__',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['name',
                                                                                  'city',
                                                                                  'center1',
                                                                                  'center2',
                                                                                  'border1',
                                                                                  'border2',
                                                                                  'objects']},
             'django.contrib.gis.tests.relatedapp.tests.RelatedGeoModelTest': {'bases': ['django.test.TestCase'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('test02_select_related',
                                                                                            [],
                                                                                            'Testing `select_related` on geographic models (see #7126).'),
                                                                                           ('test03_transform_related',
                                                                                            [],
                                                                                            'Testing the `transform` GeoQuerySet method on related geographic models.'),
                                                                                           ('test04a_related_extent_aggregate',
                                                                                            [],
                                                                                            'Testing the `extent` GeoQuerySet aggregates on related geographic models.'),
                                                                                           ('test04b_related_union_aggregate',
                                                                                            [],
                                                                                            'Testing the `unionagg` GeoQuerySet aggregates on related geographic models.'),
                                                                                           ('test05_select_related_fk_to_subclass',
                                                                                            [],
                                                                                            'Testing that calling select_related on a query over a model with an FK to a model subclass works'),
                                                                                           ('test06_f_expressions',
                                                                                            [],
                                                                                            'Testing F() expressions on GeometryFields.'),
                                                                                           ('test07_values',
                                                                                            [],
                                                                                            'Testing values() and values_list() and GeoQuerySets.'),
                                                                                           ('test08_defer_only',
                                                                                            [],
                                                                                            'Testing defer() and only() on Geographic models.'),
                                                                                           ('test09_pk_relations',
                                                                                            [],
                                                                                            'Ensuring correct primary key column is selected across relations. See #10757.'),
                                                                                           ('test10_combine',
                                                                                            [],
                                                                                            'Testing the combination of two GeoQuerySets.  See #10807.'),
                                                                                           ('test11_geoquery_pickle',
                                                                                            [],
                                                                                            'Ensuring GeoQuery objects are unpickled correctly.  See #10839.'),
                                                                                           ('test12a_count',
                                                                                            [],
                                                                                            'Testing `Count` aggregate use with the `GeoManager` on geo-fields.'),
                                                                                           ('test12b_count',
                                                                                            [],
                                                                                            'Testing `Count` aggregate use with the `GeoManager` on non geo-fields. See #11087.'),
                                                                                           ('test13_select_related_null_fk',
                                                                                            [],
                                                                                            'Testing `select_related` on a nullable ForeignKey via `GeoManager`. See #11381.'),
                                                                                           ('test14_collect',
                                                                                            [],
                                                                                            'Testing the `collect` GeoQuerySet method and `Collect` aggregate.'),
                                                                                           ('test15_invalid_select_related',
                                                                                            [],
                                                                                            'Testing doing select_related on the related name manager of a unique FK. See #13934.')],
                                                                               'properties': []},
             'django.contrib.gis.tests.test_geoforms.GeometryFieldTest': {'bases': ['django.utils.unittest.TestCase'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [('test00_init',
                                                                                       [],
                                                                                       'Testing GeometryField initialization with defaults.'),
                                                                                      ('test01_srid',
                                                                                       [],
                                                                                       'Testing GeometryField with a SRID set.'),
                                                                                      ('test02_null',
                                                                                       [],
                                                                                       "Testing GeometryField's handling of null (None) geometries."),
                                                                                      ('test03_geom_type',
                                                                                       [],
                                                                                       "Testing GeometryField's handling of different geometry types.")],
                                                                          'properties': []},
             'django.contrib.gis.tests.test_geoip.GeoIPTest': {'bases': ['unittest.TestCase'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('test01_init',
                                                                            [],
                                                                            'Testing GeoIP initialization.'),
                                                                           ('test02_bad_query',
                                                                            [],
                                                                            'Testing GeoIP query parameter checking.'),
                                                                           ('test03_country',
                                                                            [],
                                                                            'Testing GeoIP country querying methods.'),
                                                                           ('test04_city',
                                                                            [],
                                                                            'Testing GeoIP city querying methods.')],
                                                               'properties': []},
             'django.contrib.gis.tests.test_measure.AreaTest': {'bases': ['django.utils.unittest.TestCase'],
                                                                'constructor': [],
                                                                'docstring': 'Testing the Area object',
                                                                'methods': [('testInit',
                                                                             [],
                                                                             'Testing initialisation from valid units'),
                                                                            ('testInitInvaliA',
                                                                             [],
                                                                             'Testing initialisation from invalid units'),
                                                                            ('testAccess',
                                                                             [],
                                                                             'Testing access in different units'),
                                                                            ('testAccessInvaliA',
                                                                             [],
                                                                             'Testing access in invalid units'),
                                                                            ('testAddition',
                                                                             [],
                                                                             'Test addition & subtraction'),
                                                                            ('testMultiplication',
                                                                             [],
                                                                             'Test multiplication & division'),
                                                                            ('testUnitConversions',
                                                                             [],
                                                                             'Testing default units during maths'),
                                                                            ('testComparisons',
                                                                             [],
                                                                             'Testing comparisons'),
                                                                            ('testUnitsStr',
                                                                             [],
                                                                             'Testing conversion to strings')],
                                                                'properties': []},
             'django.contrib.gis.tests.test_measure.DistanceTest': {'bases': ['django.utils.unittest.TestCase'],
                                                                    'constructor': [],
                                                                    'docstring': 'Testing the Distance object',
                                                                    'methods': [('testInit',
                                                                                 [],
                                                                                 'Testing initialisation from valid units'),
                                                                                ('testInitInvalid',
                                                                                 [],
                                                                                 'Testing initialisation from invalid units'),
                                                                                ('testAccess',
                                                                                 [],
                                                                                 'Testing access in different units'),
                                                                                ('testAccessInvalid',
                                                                                 [],
                                                                                 'Testing access in invalid units'),
                                                                                ('testAddition',
                                                                                 [],
                                                                                 'Test addition & subtraction'),
                                                                                ('testMultiplication',
                                                                                 [],
                                                                                 'Test multiplication & division'),
                                                                                ('testUnitConversions',
                                                                                 [],
                                                                                 'Testing default units during maths'),
                                                                                ('testComparisons',
                                                                                 [],
                                                                                 'Testing comparisons'),
                                                                                ('testUnitsStr',
                                                                                 [],
                                                                                 'Testing conversion to strings'),
                                                                                ('testUnitAttName',
                                                                                 [],
                                                                                 'Testing the `unit_attname` class method')],
                                                                    'properties': []},
             'django.contrib.gis.tests.test_spatialrefsys.SpatialRefSysTest': {'bases': ['django.utils.unittest.TestCase'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('test01_retrieve',
                                                                                            [],
                                                                                            'Testing retrieval of SpatialRefSys model objects.'),
                                                                                           ('test02_osr',
                                                                                            [],
                                                                                            'Testing getting OSR objects from SpatialRefSys model objects.'),
                                                                                           ('test03_ellipsoid',
                                                                                            [],
                                                                                            'Testing the ellipsoid property.')],
                                                                               'properties': []},
             'django.contrib.gis.utils.geoip.GeoIP': {'bases': ['object'],
                                                      'constructor': ['path=None',
                                                                      'cache=0',
                                                                      'country=None',
                                                                      'city=None'],
                                                      'docstring': '',
                                                      'methods': [('__del__', [], ''),
                                                                  ('_check_query',
                                                                   ['query',
                                                                    'country=False',
                                                                    'city=False',
                                                                    'city_or_country=False'],
                                                                   'Helper routine for checking the query and database availability.'),
                                                                  ('city',
                                                                   ['query'],
                                                                   '\n        Returns a dictionary of city information for the given IP address or\n        Fully Qualified Domain Name (FQDN).  Some information in the dictionary\n        may be undefined (None).\n        '),
                                                                  ('country_code',
                                                                   ['query'],
                                                                   'Returns the country code for the given IP Address or FQDN.'),
                                                                  ('country_name',
                                                                   ['query'],
                                                                   'Returns the country name for the given IP Address or FQDN.'),
                                                                  ('country',
                                                                   ['query'],
                                                                   "\n        Returns a dictonary with with the country code and name when given an\n        IP address or a Fully Qualified Domain Name (FQDN).  For example, both\n        '24.124.1.80' and 'djangoproject.com' are valid parameters.\n        "),
                                                                  ('coords',
                                                                   ['query',
                                                                    "ordering=('longitude', 'latitude')"],
                                                                   ''),
                                                                  ('lon_lat',
                                                                   ['query'],
                                                                   'Returns a tuple of the (longitude, latitude) for the given query.'),
                                                                  ('lat_lon',
                                                                   ['query'],
                                                                   'Returns a tuple of the (latitude, longitude) for the given query.'),
                                                                  ('geos',
                                                                   ['query'],
                                                                   'Returns a GEOS Point object for the given query.'),
                                                                  ('country_info',
                                                                   [],
                                                                   'Returns information about the GeoIP country database.'),
                                                                  ('city_info',
                                                                   [],
                                                                   'Retuns information about the GeoIP city database.'),
                                                                  ('info',
                                                                   [],
                                                                   'Returns information about all GeoIP databases in use.'),
                                                                  ('open',
                                                                   ['full_path', 'cache'],
                                                                   ''),
                                                                  ('_rec_by_arg', ['arg'], '')],
                                                      'properties': ['GEOIP_STANDARD',
                                                                     'GEOIP_MEMORY_CACHE',
                                                                     'GEOIP_CHECK_CACHE',
                                                                     'GEOIP_INDEX_CACHE',
                                                                     'cache_options',
                                                                     'opt',
                                                                     '_city_file',
                                                                     '_country_file',
                                                                     '_city',
                                                                     '_country',
                                                                     '_cache',
                                                                     'country_info',
                                                                     'city_info',
                                                                     'info',
                                                                     'region_by_addr',
                                                                     'region_by_name',
                                                                     'record_by_addr',
                                                                     'record_by_name',
                                                                     'country_code_by_addr',
                                                                     'country_code_by_name',
                                                                     'country_name_by_addr',
                                                                     'country_name_by_name']},
             'django.contrib.gis.utils.geoip.GeoIPException': {'bases': ['Exception'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': []},
             'django.contrib.gis.utils.geoip.GeoIPRecord': {'bases': ['ctypes.Structure'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['_fields_']},
             'django.contrib.gis.utils.geoip.GeoIPTag': {'bases': ['ctypes.Structure'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'django.contrib.gis.utils.layermapping.InvalidDecimal': {'bases': ['django.contrib.gis.utils.layermapping.LayerMapError'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.gis.utils.layermapping.InvalidInteger': {'bases': ['django.contrib.gis.utils.layermapping.LayerMapError'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.gis.utils.layermapping.InvalidString': {'bases': ['django.contrib.gis.utils.layermapping.LayerMapError'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': []},
             'django.contrib.gis.utils.layermapping.LayerMapError': {'bases': ['Exception'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': []},
             'django.contrib.gis.utils.layermapping.LayerMapping': {'bases': ['object'],
                                                                    'constructor': ['model',
                                                                                    'data',
                                                                                    'mapping',
                                                                                    'layer=0',
                                                                                    'source_srs=None',
                                                                                    'encoding=None',
                                                                                    "transaction_mode='commit_on_success'",
                                                                                    'transform=True',
                                                                                    'unique=None',
                                                                                    'using=DEFAULT_DB_ALIAS'],
                                                                    'docstring': 'A class that maps OGR Layers to GeoDjango Models.',
                                                                    'methods': [('check_fid_range',
                                                                                 ['fid_range'],
                                                                                 'This checks the `fid_range` keyword.'),
                                                                                ('check_layer',
                                                                                 [],
                                                                                 '\n        This checks the Layer metadata, and ensures that it is compatible\n        with the mapping information and model.  Unlike previous revisions,\n        there is no need to increment through each feature in the Layer.\n        '),
                                                                                ('check_srs',
                                                                                 ['source_srs'],
                                                                                 'Checks the compatibility of the given spatial reference object.'),
                                                                                ('check_unique',
                                                                                 ['unique'],
                                                                                 'Checks the `unique` keyword parameter -- may be a sequence or string.'),
                                                                                ('feature_kwargs',
                                                                                 ['feat'],
                                                                                 '\n        Given an OGR Feature, this will return a dictionary of keyword arguments\n        for constructing the mapped model.\n        '),
                                                                                ('unique_kwargs',
                                                                                 ['kwargs'],
                                                                                 '\n        Given the feature keyword arguments (from `feature_kwargs`) this routine\n        will construct and return the uniqueness keyword arguments -- a subset\n        of the feature kwargs.\n        '),
                                                                                ('verify_ogr_field',
                                                                                 ['ogr_field',
                                                                                  'model_field'],
                                                                                 '\n        Verifies if the OGR Field contents are acceptable to the Django\n        model field.  If they are, the verified value is returned,\n        otherwise the proper exception is raised.\n        '),
                                                                                ('verify_fk',
                                                                                 ['feat',
                                                                                  'rel_model',
                                                                                  'rel_mapping'],
                                                                                 '\n        Given an OGR Feature, the related model and its dictionary mapping,\n        this routine will retrieve the related model for the ForeignKey\n        mapping.\n        '),
                                                                                ('verify_geom',
                                                                                 ['geom',
                                                                                  'model_field'],
                                                                                 '\n        Verifies the geometry -- will construct and return a GeometryCollection\n        if necessary (for example if the model field is MultiPolygonField while\n        the mapped shapefile only contains Polygons).\n        '),
                                                                                ('coord_transform',
                                                                                 [],
                                                                                 'Returns the coordinate transformation object.'),
                                                                                ('geometry_field',
                                                                                 [],
                                                                                 'Returns the GeometryField instance associated with the geographic column.'),
                                                                                ('make_multi',
                                                                                 ['geom_type',
                                                                                  'model_field'],
                                                                                 '\n        Given the OGRGeomType for a geometry and its associated GeometryField,\n        determine whether the geometry should be turned into a GeometryCollection.\n        '),
                                                                                ('save',
                                                                                 ['verbose=False',
                                                                                  'fid_range=False',
                                                                                  'step=False',
                                                                                  'progress=False',
                                                                                  'silent=False',
                                                                                  'stream=sys.stdout',
                                                                                  'strict=False'],
                                                                                 "\n        Saves the contents from the OGR DataSource Layer into the database\n        according to the mapping dictionary given at initialization.\n\n        Keyword Parameters:\n         verbose:\n           If set, information will be printed subsequent to each model save\n           executed on the database.\n\n         fid_range:\n           May be set with a slice or tuple of (begin, end) feature ID's to map\n           from the data source.  In other words, this keyword enables the user\n           to selectively import a subset range of features in the geographic\n           data source.\n\n         step:\n           If set with an integer, transactions will occur at every step\n           interval. For example, if step=1000, a commit would occur after\n           the 1,000th feature, the 2,000th feature etc.\n\n         progress:\n           When this keyword is set, status information will be printed giving\n           the number of features processed and sucessfully saved.  By default,\n           progress information will pe printed every 1000 features processed,\n           however, this default may be overridden by setting this keyword with an\n           integer for the desired interval.\n\n         stream:\n           Status information will be written to this file handle.  Defaults to\n           using `sys.stdout`, but any object with a `write` method is supported.\n\n         silent:\n           By default, non-fatal error notifications are printed to stdout, but\n           this keyword may be set to disable these notifications.\n\n         strict:\n           Execution of the model mapping will cease upon the first error\n           encountered.  The default behavior is to attempt to continue.\n        ")],
                                                                    'properties': ['MULTI_TYPES',
                                                                                   'FIELD_TYPES',
                                                                                   'TRANSACTION_MODES',
                                                                                   'ds',
                                                                                   'layer',
                                                                                   'using',
                                                                                   'spatial_backend',
                                                                                   'mapping',
                                                                                   'model',
                                                                                   'geo_field',
                                                                                   'source_srs',
                                                                                   'transform',
                                                                                   'encoding',
                                                                                   'unique',
                                                                                   'transaction_decorator',
                                                                                   'transaction_mode',
                                                                                   'geom_field',
                                                                                   'fields',
                                                                                   'coord_dim']},
             'django.contrib.gis.utils.layermapping.MissingForeignKey': {'bases': ['django.contrib.gis.utils.layermapping.LayerMapError'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [],
                                                                         'properties': []},
             'django.contrib.localflavor.ar.forms.ARCUITField': {'bases': ['django.forms.fields.RegexField'],
                                                                 'constructor': ['*args',
                                                                                 '**kwargs'],
                                                                 'docstring': '\n    This field validates a CUIT (C\xc3\xb3digo \xc3\x9anico de Identificaci\xc3\xb3n Tributaria). A\n    CUIT is of the form XX-XXXXXXXX-V. The last digit is a check digit.\n    ',
                                                                 'methods': [('clean',
                                                                              ['value'],
                                                                              '\n        Value can be either a string in the format XX-XXXXXXXX-X or an\n        11-digit number.\n        '),
                                                                             ('_canon',
                                                                              ['cuit'],
                                                                              ''),
                                                                             ('_calc_cd',
                                                                              ['cuit'],
                                                                              ''),
                                                                             ('_format',
                                                                              ['cuit',
                                                                               'check_digit=None'],
                                                                              '')],
                                                                 'properties': ['default_error_messages']},
             'django.contrib.localflavor.ar.forms.ARDNIField': {'bases': ['django.forms.fields.CharField'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': "\n    A field that validates 'Documento Nacional de Identidad' (DNI) numbers.\n    ",
                                                                'methods': [('clean',
                                                                             ['value'],
                                                                             '\n        Value can be a string either in the [X]X.XXX.XXX or [X]XXXXXXX formats.\n        ')],
                                                                'properties': ['default_error_messages']},
             'django.contrib.localflavor.ar.forms.ARPostalCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': "\n    A field that accepts a 'classic' NNNN Postal Code or a CPA.\n\n    See http://www.correoargentino.com.ar/consulta_cpa/home.php\n    ",
                                                                       'methods': [('clean',
                                                                                    ['value'],
                                                                                    '')],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.ar.forms.ARProvinceSelect': {'bases': ['django.forms.fields.Select'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '\n    A Select widget that uses a list of Argentinean provinces/autonomous cities\n    as its choices.\n    ',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.localflavor.at.forms.ATSocialSecurityNumberField': {'bases': ['django.forms.fields.Field'],
                                                                                 'constructor': [],
                                                                                 'docstring': "\n    Austrian Social Security numbers are composed of a 4 digits and 6 digits\n    field. The latter represents in most cases the person's birthdate while\n    the first 4 digits represent a 3-digits counter and a one-digit checksum.\n\n    The 6-digits field can also differ from the person's birthdate if the\n    3-digits counter suffered an overflow.\n\n    This code is based on information available on\n    http://de.wikipedia.org/wiki/Sozialversicherungsnummer#.C3.96sterreich\n    ",
                                                                                 'methods': [('clean',
                                                                                              ['value'],
                                                                                              '')],
                                                                                 'properties': ['default_error_messages']},
             'django.contrib.localflavor.at.forms.ATStateSelect': {'bases': ['django.forms.fields.Select'],
                                                                   'constructor': ['attrs=None'],
                                                                   'docstring': '\n    A Select widget that uses a list of AT states as its choices.\n    ',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.localflavor.at.forms.ATZipCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '\n    A form field that validates its input is an Austrian postcode.\n\n    Accepts 4 digits.\n    ',
                                                                    'methods': [],
                                                                    'properties': ['default_error_messages']},
             'django.contrib.localflavor.au.forms.AUPhoneNumberField': {'bases': ['django.forms.fields.Field'],
                                                                        'constructor': [],
                                                                        'docstring': 'Australian phone number field.',
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     '\n        Validate a phone number. Strips parentheses, whitespace and hyphens.\n        ')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.au.forms.AUPostCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                     'constructor': ['*args',
                                                                                     '**kwargs'],
                                                                     'docstring': 'Australian post code field.',
                                                                     'methods': [],
                                                                     'properties': ['default_error_messages']},
             'django.contrib.localflavor.au.forms.AUStateSelect': {'bases': ['django.forms.fields.Select'],
                                                                   'constructor': ['attrs=None'],
                                                                   'docstring': '\n    A Select widget that uses a list of Australian states/territories as its\n    choices.\n    ',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.localflavor.be.forms.BEPhoneNumberField': {'bases': ['django.forms.fields.RegexField'],
                                                                        'constructor': ['*args',
                                                                                        '**kwargs'],
                                                                        'docstring': '\n    A form field that validates its input as a belgium phone number.\n\n    Landlines have a seven-digit subscriber number and a one-digit area code,\n    while smaller cities have a six-digit subscriber number and a two-digit \n    area code. Cell phones have a six-digit subscriber number and a two-digit \n    area code preceeded by the number 4.\n    0d ddd dd dd, 0d/ddd.dd.dd, 0d.ddd.dd.dd, \n    0dddddddd - dialling a bigger city\n    0dd dd dd dd, 0dd/dd.dd.dd, 0dd.dd.dd.dd, \n    0dddddddd - dialling a smaller city\n    04dd ddd dd dd, 04dd/ddd.dd.dd, \n    04dd.ddd.dd.dd, 04ddddddddd - dialling a mobile number\n    ',
                                                                        'methods': [],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.be.forms.BEPostalCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '\n    A form field that validates its input as a belgium postal code.\n    \n    Belgium postal code is a 4 digits string. The first digit indicates\n    the province (except for the 3ddd numbers that are shared by the\n    eastern part of Flemish Brabant and Limburg and the and 1ddd that\n    are shared by the Brussels Capital Region, the western part of\n    Flemish Brabant and Walloon Brabant)\n    ',
                                                                       'methods': [],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.be.forms.BEProvinceSelect': {'bases': ['django.forms.fields.Select'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '\n    A Select widget that uses a list of belgium provinces as its choices.\n    ',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.localflavor.be.forms.BERegionSelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A Select widget that uses a list of belgium regions as its choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.br.forms.BRCNPJField': {'bases': ['django.forms.fields.Field'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('clean',
                                                                              ['value'],
                                                                              '\n        Value can be either a string in the format XX.XXX.XXX/XXXX-XX or a\n        group of 14 characters.\n        ')],
                                                                 'properties': ['default_error_messages']},
             'django.contrib.localflavor.br.forms.BRCPFField': {'bases': ['django.forms.fields.CharField'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': '\n    This field validate a CPF number or a CPF string. A CPF number is\n    compounded by XXX.XXX.XXX-VD. The two last digits are check digits.\n\n    More information:\n    http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas\n    ',
                                                                'methods': [('clean',
                                                                             ['value'],
                                                                             '\n        Value can be either a string in the format XXX.XXX.XXX-XX or an\n        11-digit number.\n        ')],
                                                                'properties': ['default_error_messages']},
             'django.contrib.localflavor.br.forms.BRPhoneNumberField': {'bases': ['django.forms.fields.Field'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     '')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.br.forms.BRStateChoiceField': {'bases': ['django.forms.fields.Field'],
                                                                        'constructor': ['required=True',
                                                                                        'widget=None',
                                                                                        'label=None',
                                                                                        'initial=None',
                                                                                        'help_text=None'],
                                                                        'docstring': '\n    A choice field that uses a list of Brazilian states as its choices.\n    ',
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     '')],
                                                                        'properties': ['widget',
                                                                                       'default_error_messages']},
             'django.contrib.localflavor.br.forms.BRStateSelect': {'bases': ['django.forms.fields.Select'],
                                                                   'constructor': ['attrs=None'],
                                                                   'docstring': '\n    A Select widget that uses a list of Brazilian states/territories\n    as its choices.\n    ',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.localflavor.br.forms.BRZipCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['default_error_messages']},
             'django.contrib.localflavor.ca.forms.CAPhoneNumberField': {'bases': ['django.forms.fields.Field'],
                                                                        'constructor': [],
                                                                        'docstring': 'Canadian phone number field.',
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     'Validate a phone number.\n        ')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.ca.forms.CAPostalCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '\n    Canadian postal code field.\n\n    Validates against known invalid characters: D, F, I, O, Q, U\n    Additionally the first character cannot be Z or W.\n    For more info see:\n    http://www.canadapost.ca/tools/pg/manual/PGaddress-e.asp#1402170\n    ',
                                                                       'methods': [],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.ca.forms.CAProvinceField': {'bases': ['django.forms.fields.Field'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    A form field that validates its input is a Canadian province name or abbreviation.\n    It normalizes the input to the standard two-leter postal service\n    abbreviation for the given province.\n    ',
                                                                     'methods': [('clean',
                                                                                  ['value'],
                                                                                  '')],
                                                                     'properties': ['default_error_messages']},
             'django.contrib.localflavor.ca.forms.CAProvinceSelect': {'bases': ['django.forms.fields.Select'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '\n    A Select widget that uses a list of Canadian provinces and\n    territories as its choices.\n    ',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.localflavor.ca.forms.CASocialInsuranceNumberField': {'bases': ['django.forms.fields.Field'],
                                                                                  'constructor': [],
                                                                                  'docstring': '\n    A Canadian Social Insurance Number (SIN).\n\n    Checks the following rules to determine whether the number is valid:\n\n        * Conforms to the XXX-XXX-XXX format.\n        * Passes the check digit process "Luhn Algorithm"\n             See: http://en.wikipedia.org/wiki/Social_Insurance_Number\n    ',
                                                                                  'methods': [('clean',
                                                                                               ['value'],
                                                                                               ''),
                                                                                              ('luhn_checksum_is_valid',
                                                                                               ['number'],
                                                                                               '\n        Checks to make sure that the SIN passes a luhn mod-10 checksum\n        See: http://en.wikipedia.org/wiki/Luhn_algorithm\n        ')],
                                                                                  'properties': ['default_error_messages']},
             'django.contrib.localflavor.ch.forms.CHIdentityCardNumberField': {'bases': ['django.forms.fields.Field'],
                                                                               'constructor': [],
                                                                               'docstring': '\n    A Swiss identity card number.\n\n    Checks the following rules to determine whether the number is valid:\n\n        * Conforms to the X1234567<0 or 1234567890 format.\n        * Included checksums match calculated checksums\n\n    Algorithm is documented at http://adi.kousz.ch/artikel/IDCHE.htm\n    ',
                                                                               'methods': [('has_valid_checksum',
                                                                                            ['number'],
                                                                                            ''),
                                                                                           ('clean',
                                                                                            ['value'],
                                                                                            '')],
                                                                               'properties': ['default_error_messages']},
             'django.contrib.localflavor.ch.forms.CHPhoneNumberField': {'bases': ['django.forms.fields.Field'],
                                                                        'constructor': [],
                                                                        'docstring': "\n    Validate local Swiss phone number (not international ones)\n    The correct format is '0XX XXX XX XX'.\n    '0XX.XXX.XX.XX' and '0XXXXXXXXX' validate but are corrected to\n    '0XX XXX XX XX'.\n    ",
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     '')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.ch.forms.CHStateSelect': {'bases': ['django.forms.fields.Select'],
                                                                   'constructor': ['attrs=None'],
                                                                   'docstring': '\n    A Select widget that uses a list of CH states as its choices.\n    ',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.localflavor.ch.forms.CHZipCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['default_error_messages']},
             'django.contrib.localflavor.cl.forms.CLRegionSelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A Select widget that uses a list of Chilean Regions (Regiones)\n    as its choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.cl.forms.CLRutField': {'bases': ['django.forms.fields.RegexField'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': '\n    Chilean "Rol Unico Tributario" (RUT) field. This is the Chilean national\n    identification number.\n\n    Samples for testing are available from\n    https://palena.sii.cl/cvc/dte/ee_empresas_emisoras.html\n    ',
                                                                'methods': [('clean',
                                                                             ['value'],
                                                                             '\n        Check and clean the Chilean RUT.\n        '),
                                                                            ('_algorithm',
                                                                             ['rut'],
                                                                             '\n        Takes RUT in pure canonical form, calculates the verifier digit.\n        '),
                                                                            ('_canonify',
                                                                             ['rut'],
                                                                             '\n        Turns the RUT into one normalized format. Returns a (rut, verifier)\n        tuple.\n        '),
                                                                            ('_format',
                                                                             ['code',
                                                                              'verifier=None'],
                                                                             "\n        Formats the RUT from canonical form to the common string representation.\n        If verifier=None, then the last digit in 'code' is the verifier.\n        ")],
                                                                'properties': ['default_error_messages']},
             'django.contrib.localflavor.cz.forms.CZBirthNumberField': {'bases': ['django.forms.fields.Field'],
                                                                        'constructor': [],
                                                                        'docstring': '\n    Czech birth number field.\n    ',
                                                                        'methods': [('clean',
                                                                                     ['value',
                                                                                      'gender=None'],
                                                                                     '')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.cz.forms.CZICNumberField': {'bases': ['django.forms.fields.Field'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    Czech IC number field.\n    ',
                                                                     'methods': [('clean',
                                                                                  ['value'],
                                                                                  '')],
                                                                     'properties': ['default_error_messages']},
             'django.contrib.localflavor.cz.forms.CZPostalCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '\n    A form field that validates its input as Czech postal code.\n    Valid form is XXXXX or XXX XX, where X represents integer.\n    ',
                                                                       'methods': [('clean',
                                                                                    ['value'],
                                                                                    '\n        Validates the input and returns a string that contains only numbers.\n        Returns an empty string for empty values.\n        ')],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.cz.forms.CZRegionSelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A select widget widget with list of Czech regions as choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.de.forms.DEIdentityCardNumberField': {'bases': ['django.forms.fields.Field'],
                                                                               'constructor': [],
                                                                               'docstring': '\n    A German identity card number.\n\n    Checks the following rules to determine whether the number is valid:\n\n        * Conforms to the XXXXXXXXXXX-XXXXXXX-XXXXXXX-X format.\n        * No group consists entirely of zeroes.\n        * Included checksums match calculated checksums\n\n    Algorithm is documented at http://de.wikipedia.org/wiki/Personalausweis\n    ',
                                                                               'methods': [('has_valid_checksum',
                                                                                            ['number'],
                                                                                            ''),
                                                                                           ('clean',
                                                                                            ['value'],
                                                                                            '')],
                                                                               'properties': ['default_error_messages']},
             'django.contrib.localflavor.de.forms.DEStateSelect': {'bases': ['django.forms.fields.Select'],
                                                                   'constructor': ['attrs=None'],
                                                                   'docstring': '\n    A Select widget that uses a list of DE states as its choices.\n    ',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.localflavor.de.forms.DEZipCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['default_error_messages']},
             'django.contrib.localflavor.es.forms.ESCCCField': {'bases': ['django.forms.fields.RegexField'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': "\n    A form field that validates its input as a Spanish bank account or CCC\n    (Codigo Cuenta Cliente).\n\n        Spanish CCC is in format EEEE-OOOO-CC-AAAAAAAAAA where:\n\n            E = entity\n            O = office\n            C = checksum\n            A = account\n\n        It's also valid to use a space as delimiter, or to use no delimiter.\n\n        First checksum digit validates entity and office, and last one\n        validates account. Validation is done multiplying every digit of 10\n        digit value (with leading 0 if necessary) by number in its position in\n        string 1, 2, 4, 8, 5, 10, 9, 7, 3, 6. Sum resulting numbers and extract\n        it from 11.  Result is checksum except when 10 then is 1, or when 11\n        then is 0.\n\n        TODO: allow IBAN validation too\n    ",
                                                                'methods': [('clean',
                                                                             ['value'],
                                                                             '')],
                                                                'properties': ['default_error_messages']},
             'django.contrib.localflavor.es.forms.ESIdentityCardNumberField': {'bases': ['django.forms.fields.RegexField'],
                                                                               'constructor': ['only_nif=False',
                                                                                               '*args',
                                                                                               '**kwargs'],
                                                                               'docstring': '\n    Spanish NIF/NIE/CIF (Fiscal Identification Number) code.\n\n    Validates three diferent formats:\n\n        NIF (individuals): 12345678A\n        CIF (companies): A12345678\n        NIE (foreigners): X12345678A\n\n    according to a couple of simple checksum algorithms.\n\n    Value can include a space or hyphen separator between number and letters.\n    Number length is not checked for NIF (or NIE), old values start with a 1,\n    and future values can contain digits greater than 8. The CIF control digit\n    can be a number or a letter depending on company type. Algorithm is not\n    public, and different authors have different opinions on which ones allows\n    letters, so both validations are assumed true for all types.\n    ',
                                                                               'methods': [('clean',
                                                                                            ['value'],
                                                                                            '')],
                                                                               'properties': ['default_error_messages',
                                                                                              'only_nif',
                                                                                              'nif_control',
                                                                                              'cif_control',
                                                                                              'cif_types',
                                                                                              'nie_types']},
             'django.contrib.localflavor.es.forms.ESPhoneNumberField': {'bases': ['django.forms.fields.RegexField'],
                                                                        'constructor': ['*args',
                                                                                        '**kwargs'],
                                                                        'docstring': '\n    A form field that validates its input as a Spanish phone number.\n    Information numbers are ommited.\n\n    Spanish phone numbers are nine digit numbers, where first digit is 6 (for\n    cell phones), 8 (for special phones), or 9 (for landlines and special\n    phones)\n\n    TODO: accept and strip characters like dot, hyphen... in phone number\n    ',
                                                                        'methods': [],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.es.forms.ESPostalCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '\n    A form field that validates its input as a spanish postal code.\n\n    Spanish postal code is a five digits string, with two first digits\n    between 01 and 52, assigned to provinces code.\n    ',
                                                                       'methods': [],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.es.forms.ESProvinceSelect': {'bases': ['django.forms.fields.Select'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '\n    A Select widget that uses a list of spanish provinces as its choices.\n    ',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.localflavor.es.forms.ESRegionSelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A Select widget that uses a list of spanish regions as its choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.fi.forms.FIMunicipalitySelect': {'bases': ['django.forms.fields.Select'],
                                                                          'constructor': ['attrs=None'],
                                                                          'docstring': '\n    A Select widget that uses a list of Finnish municipalities as its choices.\n    ',
                                                                          'methods': [],
                                                                          'properties': []},
             'django.contrib.localflavor.fi.forms.FISocialSecurityNumber': {'bases': ['django.forms.fields.Field'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [('clean',
                                                                                         ['value'],
                                                                                         '')],
                                                                            'properties': ['default_error_messages']},
             'django.contrib.localflavor.fi.forms.FIZipCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['default_error_messages']},
             'django.contrib.localflavor.fr.forms.FRDepartmentSelect': {'bases': ['django.forms.fields.Select'],
                                                                        'constructor': ['attrs=None'],
                                                                        'docstring': '\n    A Select widget that uses a list of FR departments as its choices.\n    ',
                                                                        'methods': [],
                                                                        'properties': []},
             'django.contrib.localflavor.fr.forms.FRPhoneNumberField': {'bases': ['django.forms.fields.Field'],
                                                                        'constructor': [],
                                                                        'docstring': "\n    Validate local French phone number (not international ones)\n    The correct format is '0X XX XX XX XX'.\n    '0X.XX.XX.XX.XX' and '0XXXXXXXXX' validate but are corrected to\n    '0X XX XX XX XX'.\n    ",
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     '')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.fr.forms.FRZipCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['default_error_messages']},
             'django.contrib.localflavor.generic.forms.DateField': {'bases': ['django.forms.DateField'],
                                                                    'constructor': ['input_formats=None',
                                                                                    '*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '\n    A date input field which uses non-US date input formats by default.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.generic.forms.DateTimeField': {'bases': ['django.forms.DateTimeField'],
                                                                        'constructor': ['input_formats=None',
                                                                                        '*args',
                                                                                        '**kwargs'],
                                                                        'docstring': '\n    A date and time input field which uses non-US date and time input formats\n    by default.\n    ',
                                                                        'methods': [],
                                                                        'properties': []},
             'django.contrib.localflavor.generic.forms.SplitDateTimeField': {'bases': ['django.forms.SplitDateTimeField'],
                                                                             'constructor': ['input_date_formats=None',
                                                                                             'input_time_formats=None',
                                                                                             '*args',
                                                                                             '**kwargs'],
                                                                             'docstring': '\n    Split date and time input fields which use non-US date and time input\n    formats by default.\n    ',
                                                                             'methods': [],
                                                                             'properties': []},
             'django.contrib.localflavor.id.forms.IDLicensePlateField': {'bases': ['django.forms.fields.Field'],
                                                                         'constructor': [],
                                                                         'docstring': '\n    An Indonesian vehicle license plate field.\n\n    http://id.wikipedia.org/wiki/Tanda_Nomor_Kendaraan_Bermotor\n\n    Plus: "B 12345 12"\n    ',
                                                                         'methods': [('clean',
                                                                                      ['value'],
                                                                                      '')],
                                                                         'properties': ['default_error_messages']},
             'django.contrib.localflavor.id.forms.IDLicensePlatePrefixSelect': {'bases': ['django.forms.fields.Select'],
                                                                                'constructor': ['attrs=None'],
                                                                                'docstring': '\n    A Select widget that uses a list of vehicle license plate prefix code\n    of Indonesia as its choices.\n\n    http://id.wikipedia.org/wiki/Tanda_Nomor_Kendaraan_Bermotor\n    ',
                                                                                'methods': [],
                                                                                'properties': []},
             'django.contrib.localflavor.id.forms.IDNationalIdentityNumberField': {'bases': ['django.forms.fields.Field'],
                                                                                   'constructor': [],
                                                                                   'docstring': '\n    An Indonesian national identity number (NIK/KTP#) field.\n\n    http://id.wikipedia.org/wiki/Nomor_Induk_Kependudukan\n\n    xx.xxxx.ddmmyy.xxxx - 16 digits (excl. dots)\n    ',
                                                                                   'methods': [('clean',
                                                                                                ['value'],
                                                                                                '')],
                                                                                   'properties': ['default_error_messages']},
             'django.contrib.localflavor.id.forms.IDPhoneNumberField': {'bases': ['django.forms.fields.Field'],
                                                                        'constructor': [],
                                                                        'docstring': '\n    An Indonesian telephone number field.\n\n    http://id.wikipedia.org/wiki/Daftar_kode_telepon_di_Indonesia\n    ',
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     '')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.id.forms.IDPostCodeField': {'bases': ['django.forms.fields.Field'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    An Indonesian post code field.\n\n    http://id.wikipedia.org/wiki/Kode_pos\n    ',
                                                                     'methods': [('clean',
                                                                                  ['value'],
                                                                                  '')],
                                                                     'properties': ['default_error_messages']},
             'django.contrib.localflavor.id.forms.IDProvinceSelect': {'bases': ['django.forms.fields.Select'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '\n    A Select widget that uses a list of provinces of Indonesia as its\n    choices.\n    ',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.localflavor.ie.forms.IECountySelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A Select widget that uses a list of Irish Counties as its choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.il.forms.ILIDNumberField': {'bases': ['django.forms.fields.Field'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    A form field that validates its input as an Israeli identification number.\n    Valid form is per the Israeli ID specification.\n    ',
                                                                     'methods': [('clean',
                                                                                  ['value'],
                                                                                  '')],
                                                                     'properties': ['default_error_messages']},
             'django.contrib.localflavor.il.forms.ILPostalCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '\n    A form field that validates its input as an Israeli postal code.\n    Valid form is XXXXX where X represents integer.\n    ',
                                                                       'methods': [('clean',
                                                                                    ['value'],
                                                                                    '')],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.in_.forms.INStateField': {'bases': ['django.forms.fields.Field'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    A form field that validates its input is a Indian state name or\n    abbreviation. It normalizes the input to the standard two-letter vehicle\n    registration abbreviation for the given state or union territory\n    ',
                                                                   'methods': [('clean',
                                                                                ['value'],
                                                                                '')],
                                                                   'properties': ['default_error_messages']},
             'django.contrib.localflavor.in_.forms.INStateSelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A Select widget that uses a list of Indian states/territories as its\n    choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.in_.forms.INZipCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                     'constructor': ['*args',
                                                                                     '**kwargs'],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['default_error_messages']},
             'django.contrib.localflavor.is_.forms.ISIdNumberField': {'bases': ['django.forms.fields.RegexField'],
                                                                      'constructor': ['*args',
                                                                                      '**kwargs'],
                                                                      'docstring': '\n    Icelandic identification number (kennitala). This is a number every citizen\n    of Iceland has.\n    ',
                                                                      'methods': [('clean',
                                                                                   ['value'],
                                                                                   ''),
                                                                                  ('_canonify',
                                                                                   ['value'],
                                                                                   '\n        Returns the value as only digits.\n        '),
                                                                                  ('_validate',
                                                                                   ['value'],
                                                                                   '\n        Takes in the value in canonical form and checks the verifier digit. The\n        method is modulo 11.\n        '),
                                                                                  ('_format',
                                                                                   ['value'],
                                                                                   '\n        Takes in the value in canonical form and returns it in the common\n        display format.\n        ')],
                                                                      'properties': ['default_error_messages']},
             'django.contrib.localflavor.is_.forms.ISPhoneNumberField': {'bases': ['django.forms.fields.RegexField'],
                                                                         'constructor': ['*args',
                                                                                         '**kwargs'],
                                                                         'docstring': '\n    Icelandic phone number. Seven digits with an optional hyphen or space after\n    the first three digits.\n    ',
                                                                         'methods': [('clean',
                                                                                      ['value'],
                                                                                      '')],
                                                                         'properties': []},
             'django.contrib.localflavor.is_.forms.ISPostalCodeSelect': {'bases': ['django.forms.widgets.Select'],
                                                                         'constructor': ['attrs=None'],
                                                                         'docstring': '\n    A Select widget that uses a list of Icelandic postal codes as its choices.\n    ',
                                                                         'methods': [],
                                                                         'properties': []},
             'django.contrib.localflavor.it.forms.ITProvinceSelect': {'bases': ['django.forms.fields.Select'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '\n    A Select widget that uses a list of IT provinces as its choices.\n    ',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.localflavor.it.forms.ITRegionSelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A Select widget that uses a list of IT regions as its choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.it.forms.ITSocialSecurityNumberField': {'bases': ['django.forms.fields.RegexField'],
                                                                                 'constructor': ['*args',
                                                                                                 '**kwargs'],
                                                                                 'docstring': "\n    A form field that validates Italian Social Security numbers (codice fiscale).\n    For reference see http://www.agenziaentrate.it/ and search for\n    'Informazioni sulla codificazione delle persone fisiche'.\n    ",
                                                                                 'methods': [('clean',
                                                                                              ['value'],
                                                                                              '')],
                                                                                 'properties': ['default_error_messages']},
             'django.contrib.localflavor.it.forms.ITVatNumberField': {'bases': ['django.forms.fields.Field'],
                                                                      'constructor': [],
                                                                      'docstring': '\n    A form field that validates Italian VAT numbers (partita IVA).\n    ',
                                                                      'methods': [('clean',
                                                                                   ['value'],
                                                                                   '')],
                                                                      'properties': ['default_error_messages']},
             'django.contrib.localflavor.it.forms.ITZipCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['default_error_messages']},
             'django.contrib.localflavor.jp.forms.JPPostalCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '\n    A form field that validates its input is a Japanese postcode.\n\n    Accepts 7 digits, with or without a hyphen.\n    ',
                                                                       'methods': [('clean',
                                                                                    ['value'],
                                                                                    '\n        Validates the input and returns a string that contains only numbers.\n        Returns an empty string for empty values.\n        ')],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.jp.forms.JPPrefectureSelect': {'bases': ['django.forms.fields.Select'],
                                                                        'constructor': ['attrs=None'],
                                                                        'docstring': '\n    A Select widget that uses a list of Japanese prefectures as its choices.\n    ',
                                                                        'methods': [],
                                                                        'properties': []},
             'django.contrib.localflavor.kw.forms.KWCivilIDNumberField': {'bases': ['django.forms.fields.Field'],
                                                                          'constructor': [],
                                                                          'docstring': "\n    Kuwaiti Civil ID numbers are 12 digits, second to seventh digits\n    represents the person's birthdate.\n\n    Checks the following rules to determine the validty of the number:\n        * The number consist of 12 digits.\n        * The birthdate of the person is a valid date.\n        * The calculated checksum equals to the last digit of the Civil ID.\n    ",
                                                                          'methods': [('has_valid_checksum',
                                                                                       ['value'],
                                                                                       ''),
                                                                                      ('clean',
                                                                                       ['value'],
                                                                                       '')],
                                                                          'properties': ['default_error_messages']},
             'django.contrib.localflavor.mx.forms.MXStateSelect': {'bases': ['django.forms.fields.Select'],
                                                                   'constructor': ['attrs=None'],
                                                                   'docstring': '\n    A Select widget that uses a list of Mexican states as its choices.\n    ',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.localflavor.nl.forms.NLPhoneNumberField': {'bases': ['django.forms.fields.Field'],
                                                                        'constructor': [],
                                                                        'docstring': '\n    A Dutch telephone number field.\n    ',
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     '')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.nl.forms.NLProvinceSelect': {'bases': ['django.forms.fields.Select'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '\n    A Select widget that uses a list of provinces of the Netherlands as its\n    choices.\n    ',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.localflavor.nl.forms.NLSoFiNumberField': {'bases': ['django.forms.fields.Field'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    A Dutch social security number (SoFi/BSN) field.\n\n    http://nl.wikipedia.org/wiki/Sofinummer\n    ',
                                                                       'methods': [('clean',
                                                                                    ['value'],
                                                                                    '')],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.nl.forms.NLZipCodeField': {'bases': ['django.forms.fields.Field'],
                                                                    'constructor': [],
                                                                    'docstring': '\n    A Dutch postal code field.\n    ',
                                                                    'methods': [('clean',
                                                                                 ['value'],
                                                                                 '')],
                                                                    'properties': ['default_error_messages']},
             'django.contrib.localflavor.no.forms.NOMunicipalitySelect': {'bases': ['django.forms.fields.Select'],
                                                                          'constructor': ['attrs=None'],
                                                                          'docstring': '\n    A Select widget that uses a list of Norwegian municipalities (fylker)\n    as its choices.\n    ',
                                                                          'methods': [],
                                                                          'properties': []},
             'django.contrib.localflavor.no.forms.NOSocialSecurityNumber': {'bases': ['django.forms.fields.Field'],
                                                                            'constructor': [],
                                                                            'docstring': '\n    Algorithm is documented at http://no.wikipedia.org/wiki/Personnummer\n    ',
                                                                            'methods': [('clean',
                                                                                         ['value'],
                                                                                         '')],
                                                                            'properties': ['default_error_messages',
                                                                                           'birthday',
                                                                                           'gender']},
             'django.contrib.localflavor.no.forms.NOZipCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['default_error_messages']},
             'django.contrib.localflavor.pe.forms.PEDNIField': {'bases': ['django.forms.fields.CharField'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': '\n    A field that validates `Documento Nacional de Identidad\xc5\xbd (DNI) numbers.\n    ',
                                                                'methods': [('clean',
                                                                             ['value'],
                                                                             '\n        Value must be a string in the XXXXXXXX formats.\n        ')],
                                                                'properties': ['default_error_messages']},
             'django.contrib.localflavor.pe.forms.PERUCField': {'bases': ['django.forms.fields.RegexField'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': '\n    This field validates a RUC (Registro Unico de Contribuyentes). A RUC is of\n    the form XXXXXXXXXXX.\n    ',
                                                                'methods': [('clean',
                                                                             ['value'],
                                                                             '\n        Value must be an 11-digit number.\n        ')],
                                                                'properties': ['default_error_messages']},
             'django.contrib.localflavor.pe.forms.PERegionSelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A Select widget that uses a list of Peruvian Regions as its choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.pl.forms.PLCountySelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A select widget with list of Polish administrative units as choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.pl.forms.PLNIPField': {'bases': ['django.forms.fields.RegexField'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': '\n    A form field that validates as Polish Tax Number (NIP).\n    Valid forms are: XXX-XXX-YY-YY or XX-XX-YYY-YYY.\n\n    Checksum algorithm based on documentation at\n    http://wipos.p.lodz.pl/zylla/ut/nip-rego.html\n    ',
                                                                'methods': [('clean',
                                                                             ['value'],
                                                                             ''),
                                                                            ('has_valid_checksum',
                                                                             ['number'],
                                                                             '\n        Calculates a checksum with the provided algorithm.\n        ')],
                                                                'properties': ['default_error_messages']},
             'django.contrib.localflavor.pl.forms.PLPESELField': {'bases': ['django.forms.fields.RegexField'],
                                                                  'constructor': ['*args',
                                                                                  '**kwargs'],
                                                                  'docstring': '\n    A form field that validates as Polish Identification Number (PESEL).\n\n    Checks the following rules:\n        * the length consist of 11 digits\n        * has a valid checksum\n\n    The algorithm is documented at http://en.wikipedia.org/wiki/PESEL.\n    ',
                                                                  'methods': [('clean',
                                                                               ['value'],
                                                                               ''),
                                                                              ('has_valid_checksum',
                                                                               ['number'],
                                                                               '\n        Calculates a checksum with the provided algorithm.\n        ')],
                                                                  'properties': ['default_error_messages']},
             'django.contrib.localflavor.pl.forms.PLPostalCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '\n    A form field that validates as Polish postal code.\n    Valid code is XX-XXX where X is digit.\n    ',
                                                                       'methods': [],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.pl.forms.PLProvinceSelect': {'bases': ['django.forms.fields.Select'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '\n    A select widget with list of Polish administrative provinces as choices.\n    ',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.localflavor.pl.forms.PLREGONField': {'bases': ['django.forms.fields.RegexField'],
                                                                  'constructor': ['*args',
                                                                                  '**kwargs'],
                                                                  'docstring': '\n    A form field that validates its input is a REGON number.\n\n    Valid regon number consists of 9 or 14 digits.\n    See http://www.stat.gov.pl/bip/regon_ENG_HTML.htm for more information.\n    ',
                                                                  'methods': [('clean',
                                                                               ['value'],
                                                                               ''),
                                                                              ('has_valid_checksum',
                                                                               ['number'],
                                                                               '\n        Calculates a checksum with the provided algorithm.\n        ')],
                                                                  'properties': ['default_error_messages']},
             'django.contrib.localflavor.pt.forms.PTPhoneNumberField': {'bases': ['django.forms.fields.Field'],
                                                                        'constructor': [],
                                                                        'docstring': '\n    Validate local Portuguese phone number (including international ones)\n    It should have 9 digits (may include spaces) or start by 00 or + (international)\n    ',
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     '')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.pt.forms.PTZipCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [('clean',
                                                                                 ['value'],
                                                                                 '')],
                                                                    'properties': ['default_error_messages']},
             'django.contrib.localflavor.ro.forms.ROCIFField': {'bases': ['django.forms.RegexField'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': '\n    A Romanian fiscal identity code (CIF) field\n\n    For CIF validation algorithm see http://www.validari.ro/cui.html\n    ',
                                                                'methods': [('clean',
                                                                             ['value'],
                                                                             '\n        CIF validation\n        ')],
                                                                'properties': ['default_error_messages']},
             'django.contrib.localflavor.ro.forms.ROCNPField': {'bases': ['django.forms.RegexField'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': '\n    A Romanian personal identity code (CNP) field\n\n    For CNP validation algorithm see http://www.validari.ro/cnp.html\n    ',
                                                                'methods': [('clean',
                                                                             ['value'],
                                                                             '\n        CNP validations\n        ')],
                                                                'properties': ['default_error_messages']},
             'django.contrib.localflavor.ro.forms.ROCountyField': {'bases': ['django.forms.Field'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    A form field that validates its input is a Romanian county name or\n    abbreviation. It normalizes the input to the standard vehicle registration\n    abbreviation for the given county\n\n    WARNING: This field will only accept names written with diacritics; consider\n    using ROCountySelect if this behavior is unnaceptable for you\n    Example:\n        Arge\xc5\x9f => valid\n        Arges => invalid\n    ',
                                                                   'methods': [('clean',
                                                                                ['value'],
                                                                                '')],
                                                                   'properties': ['default_error_messages']},
             'django.contrib.localflavor.ro.forms.ROCountySelect': {'bases': ['django.forms.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A Select widget that uses a list of Romanian counties (judete) as its\n    choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.ro.forms.ROIBANField': {'bases': ['django.forms.RegexField'],
                                                                 'constructor': ['*args',
                                                                                 '**kwargs'],
                                                                 'docstring': '\n    Romanian International Bank Account Number (IBAN) field\n\n    For Romanian IBAN validation algorithm see http://validari.ro/iban.html\n    ',
                                                                 'methods': [('clean',
                                                                              ['value'],
                                                                              '\n        Strips - and spaces, performs country code and checksum validation\n        ')],
                                                                 'properties': ['default_error_messages']},
             'django.contrib.localflavor.ro.forms.ROPhoneNumberField': {'bases': ['django.forms.RegexField'],
                                                                        'constructor': ['*args',
                                                                                        '**kwargs'],
                                                                        'docstring': 'Romanian phone number field',
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     '\n        Strips -, (, ) and spaces. Checks the final length.\n        ')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.ro.forms.ROPostalCodeField': {'bases': ['django.forms.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': 'Romanian postal code field.',
                                                                       'methods': [],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.se.forms.SECountySelect': {'bases': ['django.forms.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A Select form widget that uses a list of the Swedish counties (l\xc3\xa4n) as its\n    choices.\n\n    The cleaned value is the official county code -- see\n    http://en.wikipedia.org/wiki/Counties_of_Sweden for a list.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.se.forms.SEOrganisationNumberField': {'bases': ['django.forms.CharField'],
                                                                               'constructor': [],
                                                                               'docstring': '\n    A form field that validates input as a Swedish organisation number\n    (organisationsnummer).\n\n    It accepts the same input as SEPersonalIdentityField (for sole\n    proprietorships (enskild firma). However, co-ordination numbers are not\n    accepted.\n\n    It also accepts ordinary Swedish organisation numbers with the format\n    NNNNNNNNNN.\n\n    The return value will be YYYYMMDDXXXX for sole proprietors, and NNNNNNNNNN\n    for other organisations.\n    ',
                                                                               'methods': [('clean',
                                                                                            ['value'],
                                                                                            '')],
                                                                               'properties': ['default_error_messages']},
             'django.contrib.localflavor.se.forms.SEPersonalIdentityNumberField': {'bases': ['django.forms.CharField'],
                                                                                   'constructor': ['coordination_number=True',
                                                                                                   '*args',
                                                                                                   '**kwargs'],
                                                                                   'docstring': '\n    A form field that validates input as a Swedish personal identity number\n    (personnummer).\n\n    The correct formats are YYYYMMDD-XXXX, YYYYMMDDXXXX, YYMMDD-XXXX,\n    YYMMDDXXXX and YYMMDD+XXXX.\n\n    A + indicates that the person is older than 100 years, which will be taken\n    into consideration when the date is validated.\n    \n    The checksum will be calculated and checked. The birth date is checked to\n    be a valid date.\n\n    By default, co-ordination numbers (samordningsnummer) will be accepted. To\n    only allow real personal identity numbers, pass the keyword argument\n    coordination_number=False to the constructor.\n\n    The cleaned value will always have the format YYYYMMDDXXXX.\n    ',
                                                                                   'methods': [('clean',
                                                                                                ['value'],
                                                                                                '')],
                                                                                   'properties': ['coordination_number',
                                                                                                  'default_error_messages']},
             'django.contrib.localflavor.se.forms.SEPostalCodeField': {'bases': ['django.forms.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '\n    A form field that validates input as a Swedish postal code (postnummer).\n    Valid codes consist of five digits (XXXXX). The number can optionally be\n    formatted with a space after the third digit (XXX XX).\n\n    The cleaned value will never contain the space. \n    ',
                                                                       'methods': [('clean',
                                                                                    ['value'],
                                                                                    '')],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.sk.forms.SKDistrictSelect': {'bases': ['django.forms.fields.Select'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '\n    A select widget with list of Slovak districts as choices.\n    ',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.localflavor.sk.forms.SKPostalCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '\n    A form field that validates its input as Slovak postal code.\n    Valid form is XXXXX or XXX XX, where X represents integer.\n    ',
                                                                       'methods': [('clean',
                                                                                    ['value'],
                                                                                    '\n        Validates the input and returns a string that contains only numbers.\n        Returns an empty string for empty values.\n        ')],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.sk.forms.SKRegionSelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A select widget widget with list of Slovak regions as choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.tr.forms.TRIdentificationNumberField': {'bases': ['django.forms.fields.Field'],
                                                                                 'constructor': [],
                                                                                 'docstring': '\n    A Turkey Identification Number number.\n    See: http://tr.wikipedia.org/wiki/T%C3%BCrkiye_Cumhuriyeti_Kimlik_Numaras%C4%B1\n\n    Checks the following rules to determine whether the number is valid:\n\n        * The number is 11-digits.\n        * First digit is not 0.\n        * Conforms to the following two formula:\n          (sum(1st, 3rd, 5th, 7th, 9th)*7 - sum(2nd,4th,6th,8th)) % 10 = 10th digit\n          sum(1st to 10th) % 10 = 11th digit\n    ',
                                                                                 'methods': [('clean',
                                                                                              ['value'],
                                                                                              '')],
                                                                                 'properties': ['default_error_messages']},
             'django.contrib.localflavor.tr.forms.TRPhoneNumberField': {'bases': ['django.forms.fields.CharField'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     '')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.tr.forms.TRPostalCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '',
                                                                       'methods': [('clean',
                                                                                    ['value'],
                                                                                    '')],
                                                                       'properties': ['default_error_messages']},
             'django.contrib.localflavor.tr.forms.TRProvinceSelect': {'bases': ['django.forms.fields.Select'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '\n    A Select widget that uses a list of provinces in Turkey as its choices.\n    ',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.contrib.localflavor.uk.forms.UKCountySelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A Select widget that uses a list of UK Counties/Regions as its choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.uk.forms.UKNationSelect': {'bases': ['django.forms.fields.Select'],
                                                                    'constructor': ['attrs=None'],
                                                                    'docstring': '\n    A Select widget that uses a list of UK Nations as its choices.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.contrib.localflavor.uk.forms.UKPostcodeField': {'bases': ['django.forms.fields.CharField'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    A form field that validates its input is a UK postcode.\n\n    The regular expression used is sourced from the schema for British Standard\n    BS7666 address types: http://www.govtalk.gov.uk/gdsc/schemas/bs7666-v2-0.xsd\n\n    The value is uppercased and a space added in the correct place, if required.\n    ',
                                                                     'methods': [('clean',
                                                                                  ['value'],
                                                                                  '')],
                                                                     'properties': ['default_error_messages',
                                                                                    'outcode_pattern',
                                                                                    'incode_pattern',
                                                                                    'postcode_regex',
                                                                                    'space_regex']},
             'django.contrib.localflavor.us.forms.USPSSelect': {'bases': ['django.forms.fields.Select'],
                                                                'constructor': ['attrs=None'],
                                                                'docstring': '\n    A Select widget that uses a list of US Postal Service codes as its\n    choices.\n    ',
                                                                'methods': [],
                                                                'properties': []},
             'django.contrib.localflavor.us.forms.USPhoneNumberField': {'bases': ['django.forms.fields.CharField'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('clean',
                                                                                     ['value'],
                                                                                     '')],
                                                                        'properties': ['default_error_messages']},
             'django.contrib.localflavor.us.forms.USSocialSecurityNumberField': {'bases': ['django.forms.fields.Field'],
                                                                                 'constructor': [],
                                                                                 'docstring': '\n    A United States Social Security number.\n\n    Checks the following rules to determine whether the number is valid:\n\n        * Conforms to the XXX-XX-XXXX format.\n        * No group consists entirely of zeroes.\n        * The leading group is not "666" (block "666" will never be allocated).\n        * The number is not in the promotional block 987-65-4320 through\n          987-65-4329, which are permanently invalid.\n        * The number is not one known to be invalid due to otherwise widespread\n          promotional use or distribution (e.g., the Woolworth\'s number or the\n          1962 promotional number).\n    ',
                                                                                 'methods': [('clean',
                                                                                              ['value'],
                                                                                              '')],
                                                                                 'properties': ['default_error_messages']},
             'django.contrib.localflavor.us.forms.USStateField': {'bases': ['django.forms.fields.Field'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    A form field that validates its input is a U.S. state name or abbreviation.\n    It normalizes the input to the standard two-leter postal service\n    abbreviation for the given state.\n    ',
                                                                  'methods': [('clean',
                                                                               ['value'],
                                                                               '')],
                                                                  'properties': ['default_error_messages']},
             'django.contrib.localflavor.us.forms.USStateSelect': {'bases': ['django.forms.fields.Select'],
                                                                   'constructor': ['attrs=None'],
                                                                   'docstring': '\n    A Select widget that uses a list of U.S. states/territories as its choices.\n    ',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.localflavor.us.forms.USZipCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['default_error_messages']},
             'django.contrib.localflavor.us.models.PhoneNumberField': {'bases': ['django.db.models.fields.CharField'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '',
                                                                       'methods': [('formfield',
                                                                                    ['**kwargs'],
                                                                                    '')],
                                                                       'properties': ['description']},
             'django.contrib.localflavor.us.models.USPostalCodeField': {'bases': ['django.db.models.fields.CharField'],
                                                                        'constructor': ['*args',
                                                                                        '**kwargs'],
                                                                        'docstring': '',
                                                                        'methods': [],
                                                                        'properties': ['description']},
             'django.contrib.localflavor.us.models.USStateField': {'bases': ['django.db.models.fields.CharField'],
                                                                   'constructor': ['*args',
                                                                                   '**kwargs'],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['description']},
             'django.contrib.localflavor.uy.forms.UYCIField': {'bases': ['django.forms.fields.RegexField'],
                                                               'constructor': ['*args',
                                                                               '**kwargs'],
                                                               'docstring': "\n    A field that validates Uruguayan 'Cedula de identidad' (CI) numbers.\n    ",
                                                               'methods': [('clean',
                                                                            ['value'],
                                                                            '\n        Validates format and validation digit.\n\n        The official format is [X.]XXX.XXX-X but usually dots and/or slash are\n        omitted so, when validating, those characters are ignored if found in\n        the correct place. The three typically used formats are supported:\n        [X]XXXXXXX, [X]XXXXXX-X and [X.]XXX.XXX-X.\n        ')],
                                                               'properties': ['default_error_messages']},
             'django.contrib.localflavor.uy.forms.UYDepartamentSelect': {'bases': ['django.forms.fields.Select'],
                                                                         'constructor': ['attrs=None'],
                                                                         'docstring': '\n    A Select widget that uses a list of Uruguayan departaments as its choices.\n    ',
                                                                         'methods': [],
                                                                         'properties': []},
             'django.contrib.localflavor.za.forms.ZAIDField': {'bases': ['django.forms.fields.Field'],
                                                               'constructor': [],
                                                               'docstring': 'A form field for South African ID numbers -- the checksum is validated\n    using the Luhn checksum, and uses a simlistic (read: not entirely accurate)\n    check for the birthdate\n    ',
                                                               'methods': [('clean',
                                                                            ['value'],
                                                                            '')],
                                                               'properties': ['default_error_messages']},
             'django.contrib.localflavor.za.forms.ZAPostCodeField': {'bases': ['django.forms.fields.RegexField'],
                                                                     'constructor': ['*args',
                                                                                     '**kwargs'],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['default_error_messages']},
             'django.contrib.markup.tests.Templates': {'bases': ['django.utils.unittest.TestCase'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('test_textile', [], ''),
                                                                   ('test_no_textile', [], ''),
                                                                   ('test_markdown', [], ''),
                                                                   ('test_no_markdown', [], ''),
                                                                   ('test_docutils', [], ''),
                                                                   ('test_no_docutils', [], '')],
                                                       'properties': ['textile_content',
                                                                      'markdown_content',
                                                                      'rest_content']},
             'django.contrib.messages.api.MessageFailure': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': []},
             'django.contrib.messages.middleware.MessageMiddleware': {'bases': ['object'],
                                                                      'constructor': [],
                                                                      'docstring': '\n    Middleware that handles temporary messages.\n    ',
                                                                      'methods': [('process_request',
                                                                                   ['request'],
                                                                                   ''),
                                                                                  ('process_response',
                                                                                   ['request',
                                                                                    'response'],
                                                                                   '\n        Updates the storage backend (i.e., saves the messages).\n\n        If not all messages could not be stored and ``DEBUG`` is ``True``, a\n        ``ValueError`` is raised.\n        ')],
                                                                      'properties': []},
             'django.contrib.messages.storage.base.BaseStorage': {'bases': ['object'],
                                                                  'constructor': ['request',
                                                                                  '*args',
                                                                                  '**kwargs'],
                                                                  'docstring': '\n    This is the base backend for temporary message storage.\n\n    This is not a complete class; to be a usable storage backend, it must be\n    subclassed and the two methods ``_get`` and ``_store`` overridden.\n    ',
                                                                  'methods': [('__len__',
                                                                               [],
                                                                               ''),
                                                                              ('__iter__',
                                                                               [],
                                                                               ''),
                                                                              ('__contains__',
                                                                               ['item'],
                                                                               ''),
                                                                              ('_get',
                                                                               ['*args',
                                                                                '**kwargs'],
                                                                               '\n        Retrieves a list of stored messages. Returns a tuple of the messages\n        and a flag indicating whether or not all the messages originally\n        intended to be stored in this storage were, in fact, stored and\n        retrieved; e.g., ``(messages, all_retrieved)``.\n\n        **This method must be implemented by a subclass.**\n\n        If it is possible to tell if the backend was not used (as opposed to\n        just containing no messages) then ``None`` should be returned in\n        place of ``messages``.\n        '),
                                                                              ('_store',
                                                                               ['messages',
                                                                                'response',
                                                                                '*args',
                                                                                '**kwargs'],
                                                                               '\n        Stores a list of messages, returning a list of any messages which could\n        not be stored.\n\n        One type of object must be able to be stored, ``Message``.\n\n        **This method must be implemented by a subclass.**\n        '),
                                                                              ('_prepare_messages',
                                                                               ['messages'],
                                                                               '\n        Prepares a list of messages for storage.\n        '),
                                                                              ('update',
                                                                               ['response'],
                                                                               '\n        Stores all unread messages.\n\n        If the backend has yet to be iterated, previously stored messages will\n        be stored again. Otherwise, only messages added after the last\n        iteration will be stored.\n        '),
                                                                              ('add',
                                                                               ['level',
                                                                                'message',
                                                                                "extra_tags=''"],
                                                                               '\n        Queues a message to be stored.\n\n        The message is only queued if it contained something and its level is\n        not less than the recording level (``self.level``).\n        '),
                                                                              ('_get_level',
                                                                               [],
                                                                               '\n        Returns the minimum recorded level.\n\n        The default level is the ``MESSAGE_LEVEL`` setting. If this is\n        not found, the ``INFO`` level is used.\n        '),
                                                                              ('_set_level',
                                                                               ['value=None'],
                                                                               '\n        Sets a custom minimum recorded level.\n\n        If set to ``None``, the default level will be used (see the\n        ``_get_level`` method).\n        ')],
                                                                  'properties': ['request',
                                                                                 '_queued_messages',
                                                                                 'used',
                                                                                 'added_new',
                                                                                 '_loaded_messages',
                                                                                 '_loaded_data',
                                                                                 '_level',
                                                                                 'level']},
             'django.contrib.messages.storage.base.Message': {'bases': ['django.utils.encoding.StrAndUnicode'],
                                                              'constructor': ['level',
                                                                              'message',
                                                                              'extra_tags=None'],
                                                              'docstring': '\n    Represents an actual message that can be stored in any of the supported\n    storage classes (typically session- or cookie-based) and rendered in a view\n    or template.\n    ',
                                                              'methods': [('_prepare',
                                                                           [],
                                                                           '\n        Prepares the message for serialization by forcing the ``message``\n        and ``extra_tags`` to unicode in case they are lazy translations.\n\n        Known "safe" types (None, int, etc.) are not converted (see Django\'s\n        ``force_unicode`` implementation for details).\n        '),
                                                                          ('__eq__',
                                                                           ['other'],
                                                                           ''),
                                                                          ('__unicode__',
                                                                           [],
                                                                           ''),
                                                                          ('_get_tags', [], '')],
                                                              'properties': ['level',
                                                                             'message',
                                                                             'extra_tags',
                                                                             'tags']},
             'django.contrib.messages.storage.cookie.CookieStorage': {'bases': ['django.contrib.messages.storage.base.BaseStorage'],
                                                                      'constructor': [],
                                                                      'docstring': '\n    Stores messages in a cookie.\n    ',
                                                                      'methods': [('_get',
                                                                                   ['*args',
                                                                                    '**kwargs'],
                                                                                   '\n        Retrieves a list of messages from the messages cookie.  If the\n        not_finished sentinel value is found at the end of the message list,\n        remove it and return a result indicating that not all messages were\n        retrieved by this storage.\n        '),
                                                                                  ('_update_cookie',
                                                                                   ['encoded_data',
                                                                                    'response'],
                                                                                   '\n        Either sets the cookie with the encoded data if there is any data to\n        store, or deletes the cookie.\n        '),
                                                                                  ('_store',
                                                                                   ['messages',
                                                                                    'response',
                                                                                    'remove_oldest=True',
                                                                                    '*args',
                                                                                    '**kwargs'],
                                                                                   '\n        Stores the messages to a cookie, returning a list of any messages which\n        could not be stored.\n\n        If the encoded data is larger than ``max_cookie_size``, removes\n        messages until the data fits (these are the messages which are\n        returned), and add the not_finished sentinel value to indicate as much.\n        '),
                                                                                  ('_hash',
                                                                                   ['value'],
                                                                                   "\n        Creates an HMAC/SHA1 hash based on the value and the project setting's\n        SECRET_KEY, modified to make it unique for the present purpose.\n        "),
                                                                                  ('_encode',
                                                                                   ['messages',
                                                                                    'encode_empty=False'],
                                                                                   '\n        Returns an encoded version of the messages list which can be stored as\n        plain text.\n\n        Since the data will be retrieved from the client-side, the encoded data\n        also contains a hash to ensure that the data was not tampered with.\n        '),
                                                                                  ('_decode',
                                                                                   ['data'],
                                                                                   '\n        Safely decodes a encoded text stream back into a list of messages.\n\n        If the encoded text stream contained an invalid hash or was in an\n        invalid format, ``None`` is returned.\n        ')],
                                                                      'properties': ['cookie_name',
                                                                                     'max_cookie_size',
                                                                                     'not_finished',
                                                                                     'used']},
             'django.contrib.messages.storage.cookie.MessageDecoder': {'bases': ['django.utils.simplejson.JSONDecoder'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    Decodes JSON that includes serialized ``Message`` instances.\n    ',
                                                                       'methods': [('process_messages',
                                                                                    ['obj'],
                                                                                    ''),
                                                                                   ('decode',
                                                                                    ['s',
                                                                                     '**kwargs'],
                                                                                    '')],
                                                                       'properties': []},
             'django.contrib.messages.storage.cookie.MessageEncoder': {'bases': ['django.utils.simplejson.JSONEncoder'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    Compactly serializes instances of the ``Message`` class as JSON.\n    ',
                                                                       'methods': [('default',
                                                                                    ['obj'],
                                                                                    '')],
                                                                       'properties': ['message_key']},
             'django.contrib.messages.storage.fallback.FallbackStorage': {'bases': ['django.contrib.messages.storage.base.BaseStorage'],
                                                                          'constructor': ['*args',
                                                                                          '**kwargs'],
                                                                          'docstring': '\n    Tries to store all messages in the first backend, storing any unstored\n    messages in each subsequent backend backend.\n    ',
                                                                          'methods': [('_get',
                                                                                       ['*args',
                                                                                        '**kwargs'],
                                                                                       '\n        Gets a single list of messages from all storage backends.\n        '),
                                                                                      ('_store',
                                                                                       ['messages',
                                                                                        'response',
                                                                                        '*args',
                                                                                        '**kwargs'],
                                                                                       '\n        Stores the messages, returning any unstored messages after trying all\n        backends.\n\n        For each storage backend, any messages not stored are passed on to the\n        next backend.\n        ')],
                                                                          'properties': ['storage_classes',
                                                                                         'storages',
                                                                                         '_used_storages']},
             'django.contrib.messages.storage.session.SessionStorage': {'bases': ['django.contrib.messages.storage.base.BaseStorage'],
                                                                        'constructor': ['request',
                                                                                        '*args',
                                                                                        '**kwargs'],
                                                                        'docstring': '\n    Stores messages in the session (that is, django.contrib.sessions).\n    ',
                                                                        'methods': [('_get',
                                                                                     ['*args',
                                                                                      '**kwargs'],
                                                                                     "\n        Retrieves a list of messages from the request's session.  This storage\n        always stores everything it is given, so return True for the\n        all_retrieved flag.\n        "),
                                                                                    ('_store',
                                                                                     ['messages',
                                                                                      'response',
                                                                                      '*args',
                                                                                      '**kwargs'],
                                                                                     "\n        Stores a list of messages to the request's session.\n        ")],
                                                                        'properties': ['session_key']},
             'django.contrib.messages.storage.user_messages.LegacyFallbackStorage': {'bases': ['django.contrib.messages.storage.fallback.FallbackStorage'],
                                                                                     'constructor': [],
                                                                                     'docstring': '\n    Works like ``FallbackStorage`` but also handles retrieving (and clearing)\n    contrib.auth User messages.\n    ',
                                                                                     'methods': [],
                                                                                     'properties': ['storage_classes']},
             'django.contrib.messages.storage.user_messages.UserMessagesStorage': {'bases': ['django.contrib.messages.storage.base.BaseStorage'],
                                                                                   'constructor': [],
                                                                                   'docstring': '\n    Retrieves messages from the User, using the legacy user.message_set API.\n\n    This storage is "read-only" insofar as it can only retrieve and delete\n    messages, not store them.\n    ',
                                                                                   'methods': [('_get_messages_queryset',
                                                                                                [],
                                                                                                '\n        Returns the QuerySet containing all user messages (or ``None`` if\n        request.user is not a contrib.auth User).\n        '),
                                                                                               ('add',
                                                                                                ['*args',
                                                                                                 '**kwargs'],
                                                                                                ''),
                                                                                               ('_get',
                                                                                                ['*args',
                                                                                                 '**kwargs'],
                                                                                                '\n        Retrieves a list of messages assigned to the User.  This backend never\n        stores anything, so all_retrieved is assumed to be False.\n        '),
                                                                                               ('_store',
                                                                                                ['messages',
                                                                                                 '*args',
                                                                                                 '**kwargs'],
                                                                                                '\n        Removes any messages assigned to the User and returns the list of\n        messages (since no messages are stored in this read-only storage).\n        ')],
                                                                                   'properties': ['session_key']},
             'django.contrib.messages.tests.base.BaseTest': {'bases': ['django.test.TestCase'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('setUp', [], ''),
                                                                         ('tearDown', [], ''),
                                                                         ('restore_setting',
                                                                          ['setting'],
                                                                          ''),
                                                                         ('get_request',
                                                                          [],
                                                                          ''),
                                                                         ('get_response',
                                                                          [],
                                                                          ''),
                                                                         ('get_storage',
                                                                          ['data=None'],
                                                                          '\n        Returns the storage backend, setting its loaded data to the ``data``\n        argument.\n\n        This method avoids the storage ``_get`` method from getting called so\n        that other parts of the storage backend can be tested independent of\n        the message retrieval logic.\n        '),
                                                                         ('test_add', [], ''),
                                                                         ('test_add_lazy_translation',
                                                                          [],
                                                                          ''),
                                                                         ('test_no_update',
                                                                          [],
                                                                          ''),
                                                                         ('test_add_update',
                                                                          [],
                                                                          ''),
                                                                         ('test_existing_add_read_update',
                                                                          [],
                                                                          ''),
                                                                         ('test_existing_read_add_update',
                                                                          [],
                                                                          ''),
                                                                         ('test_full_request_response_cycle',
                                                                          [],
                                                                          '\n        With the message middleware enabled, tests that messages are properly\n        stored and then retrieved across the full request/redirect/response\n        cycle.\n        '),
                                                                         ('test_with_template_response',
                                                                          [],
                                                                          ''),
                                                                         ('test_multiple_posts',
                                                                          [],
                                                                          '\n        Tests that messages persist properly when multiple POSTs are made\n        before a GET.\n        '),
                                                                         ('test_middleware_disabled_auth_user',
                                                                          [],
                                                                          '\n        Tests that the messages API successfully falls back to using\n        user.message_set to store messages directly when the middleware is\n        disabled.\n        '),
                                                                         ('test_middleware_disabled_anon_user',
                                                                          [],
                                                                          '\n        Tests that, when the middleware is disabled and a user is not logged\n        in, an exception is raised when one attempts to store a message.\n        '),
                                                                         ('test_middleware_disabled_anon_user_fail_silently',
                                                                          [],
                                                                          "\n        Tests that, when the middleware is disabled and a user is not logged\n        in, an exception is not raised if 'fail_silently' = True\n        "),
                                                                         ('stored_messages_count',
                                                                          ['storage',
                                                                           'response'],
                                                                          '\n        Returns the number of messages being stored after a\n        ``storage.update()`` call.\n        '),
                                                                         ('test_get', [], ''),
                                                                         ('get_existing_storage',
                                                                          [],
                                                                          ''),
                                                                         ('test_existing_read',
                                                                          [],
                                                                          "\n        Tests that reading the existing storage doesn't cause the data to be\n        lost.\n        "),
                                                                         ('test_existing_add',
                                                                          [],
                                                                          ''),
                                                                         ('test_default_level',
                                                                          [],
                                                                          ''),
                                                                         ('test_low_level',
                                                                          [],
                                                                          ''),
                                                                         ('test_high_level',
                                                                          [],
                                                                          ''),
                                                                         ('test_settings_level',
                                                                          [],
                                                                          ''),
                                                                         ('test_tags', [], ''),
                                                                         ('test_custom_tags',
                                                                          [],
                                                                          '')],
                                                             'properties': ['storage_class',
                                                                            'restore_settings',
                                                                            'urls',
                                                                            'levels',
                                                                            '_remembered_settings',
                                                                            '_middleware_classes',
                                                                            '_template_context_processors',
                                                                            '_installed_apps',
                                                                            '_message_storage',
                                                                            'old_TEMPLATE_DIRS']},
             'django.contrib.messages.tests.cookie.CookieTest': {'bases': ['django.contrib.messages.tests.base.BaseTest'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('setUp', [], ''),
                                                                             ('tearDown',
                                                                              [],
                                                                              ''),
                                                                             ('stored_messages_count',
                                                                              ['storage',
                                                                               'response'],
                                                                              ''),
                                                                             ('test_get',
                                                                              [],
                                                                              ''),
                                                                             ('test_domain',
                                                                              [],
                                                                              '\n        Ensure that CookieStorage honors SESSION_COOKIE_DOMAIN.\n        Refs #15618.\n        '),
                                                                             ('test_get_bad_cookie',
                                                                              [],
                                                                              ''),
                                                                             ('test_max_cookie_length',
                                                                              [],
                                                                              '\n        Tests that, if the data exceeds what is allowed in a cookie, older\n        messages are removed before saving (and returned by the ``update``\n        method).\n        '),
                                                                             ('test_json_encoder_decoder',
                                                                              [],
                                                                              '\n        Tests that a complex nested data structure containing Message\n        instances is properly encoded/decoded by the custom JSON\n        encoder/decoder classes.\n        ')],
                                                                 'properties': ['storage_class',
                                                                                'old_SESSION_COOKIE_DOMAIN']},
             'django.contrib.messages.tests.fallback.FallbackTest': {'bases': ['django.contrib.messages.tests.base.BaseTest'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('get_request',
                                                                                  [],
                                                                                  ''),
                                                                                 ('get_cookie_storage',
                                                                                  ['storage'],
                                                                                  ''),
                                                                                 ('get_session_storage',
                                                                                  ['storage'],
                                                                                  ''),
                                                                                 ('stored_cookie_messages_count',
                                                                                  ['storage',
                                                                                   'response'],
                                                                                  ''),
                                                                                 ('stored_session_messages_count',
                                                                                  ['storage',
                                                                                   'response'],
                                                                                  ''),
                                                                                 ('stored_messages_count',
                                                                                  ['storage',
                                                                                   'response'],
                                                                                  '\n        Return the storage totals from both cookie and session backends.\n        '),
                                                                                 ('test_get',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_get_empty',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_get_fallback',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_get_fallback_only',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_flush_used_backends',
                                                                                  [],
                                                                                  ''),
                                                                                 ('test_no_fallback',
                                                                                  [],
                                                                                  "\n        Confirms that:\n\n        (1) A short number of messages whose data size doesn't exceed what is\n        allowed in a cookie will all be stored in the CookieBackend.\n\n        (2) If the CookieBackend can store all messages, the SessionBackend\n        won't be written to at all.\n        "),
                                                                                 ('test_session_fallback',
                                                                                  [],
                                                                                  '\n        Confirms that, if the data exceeds what is allowed in a cookie,\n        messages which did not fit are stored in the SessionBackend.\n        '),
                                                                                 ('test_session_fallback_only',
                                                                                  [],
                                                                                  '\n        Confirms that large messages, none of which fit in a cookie, are stored\n        in the SessionBackend (and nothing is stored in the CookieBackend).\n        ')],
                                                                     'properties': ['storage_class',
                                                                                    'session']},
             'django.contrib.messages.tests.middleware.MiddlewareTest': {'bases': ['django.utils.unittest.TestCase'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('setUp',
                                                                                      [],
                                                                                      ''),
                                                                                     ('test_response_without_messages',
                                                                                      [],
                                                                                      '\n        Makes sure that the response middleware is tolerant of messages not\n        existing on request.\n        ')],
                                                                         'properties': ['middleware']},
             'django.contrib.messages.tests.session.SessionTest': {'bases': ['django.contrib.messages.tests.base.BaseTest'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('get_request',
                                                                                [],
                                                                                ''),
                                                                               ('stored_messages_count',
                                                                                ['storage',
                                                                                 'response'],
                                                                                ''),
                                                                               ('test_get',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['storage_class',
                                                                                  'session']},
             'django.contrib.messages.tests.user_messages.LegacyFallbackTest': {'bases': ['django.contrib.messages.tests.fallback.FallbackTest',
                                                                                          'django.test.TestCase'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('setUp',
                                                                                             [],
                                                                                             ''),
                                                                                            ('get_request',
                                                                                             ['*args',
                                                                                              '**kwargs'],
                                                                                             ''),
                                                                                            ('test_get_legacy_only',
                                                                                             [],
                                                                                             ''),
                                                                                            ('test_get_legacy',
                                                                                             [],
                                                                                             '')],
                                                                                'properties': ['storage_class',
                                                                                               'user']},
             'django.contrib.messages.tests.user_messages.UserMessagesTest': {'bases': ['django.test.TestCase'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('setUp',
                                                                                           [],
                                                                                           ''),
                                                                                          ('test_add',
                                                                                           [],
                                                                                           ''),
                                                                                          ('test_get_anonymous',
                                                                                           [],
                                                                                           ''),
                                                                                          ('test_get',
                                                                                           [],
                                                                                           '')],
                                                                              'properties': ['user']},
             'django.contrib.redirects.admin.RedirectAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['list_display',
                                                                             'list_filter',
                                                                             'search_fields',
                                                                             'radio_fields']},
             'django.contrib.redirects.middleware.RedirectFallbackMiddleware': {'bases': ['object'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('process_response',
                                                                                             ['request',
                                                                                              'response'],
                                                                                             '')],
                                                                                'properties': []},
             'django.contrib.redirects.models.Redirect': {'bases': ['django.db.models.Model'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('__unicode__', [], '')],
                                                          'properties': ['site',
                                                                         'old_path',
                                                                         'new_path']},
             'django.contrib.sessions.backends.base.CreateError': {'bases': ['Exception'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    Used internally as a consistent exception type to catch from save (see the\n    docstring for SessionBase.save() for details).\n    ',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.sessions.backends.base.SessionBase': {'bases': ['object'],
                                                                   'constructor': ['session_key=None'],
                                                                   'docstring': '\n    Base class for all Session classes.\n    ',
                                                                   'methods': [('__contains__',
                                                                                ['key'],
                                                                                ''),
                                                                               ('__getitem__',
                                                                                ['key'],
                                                                                ''),
                                                                               ('__setitem__',
                                                                                ['key',
                                                                                 'value'],
                                                                                ''),
                                                                               ('__delitem__',
                                                                                ['key'],
                                                                                ''),
                                                                               ('keys', [], ''),
                                                                               ('items',
                                                                                [],
                                                                                ''),
                                                                               ('get',
                                                                                ['key',
                                                                                 'default=None'],
                                                                                ''),
                                                                               ('pop',
                                                                                ['key',
                                                                                 '*args'],
                                                                                ''),
                                                                               ('setdefault',
                                                                                ['key',
                                                                                 'value'],
                                                                                ''),
                                                                               ('set_test_cookie',
                                                                                [],
                                                                                ''),
                                                                               ('test_cookie_worked',
                                                                                [],
                                                                                ''),
                                                                               ('delete_test_cookie',
                                                                                [],
                                                                                ''),
                                                                               ('_hash',
                                                                                ['value'],
                                                                                ''),
                                                                               ('encode',
                                                                                ['session_dict'],
                                                                                'Returns the given session dictionary pickled and encoded as a string.'),
                                                                               ('decode',
                                                                                ['session_data'],
                                                                                ''),
                                                                               ('_decode_old',
                                                                                ['session_data'],
                                                                                ''),
                                                                               ('update',
                                                                                ['dict_'],
                                                                                ''),
                                                                               ('has_key',
                                                                                ['key'],
                                                                                ''),
                                                                               ('values',
                                                                                [],
                                                                                ''),
                                                                               ('iterkeys',
                                                                                [],
                                                                                ''),
                                                                               ('itervalues',
                                                                                [],
                                                                                ''),
                                                                               ('iteritems',
                                                                                [],
                                                                                ''),
                                                                               ('clear',
                                                                                [],
                                                                                ''),
                                                                               ('_get_new_session_key',
                                                                                [],
                                                                                "Returns session key that isn't being used."),
                                                                               ('_get_session_key',
                                                                                [],
                                                                                ''),
                                                                               ('_set_session_key',
                                                                                ['session_key'],
                                                                                ''),
                                                                               ('_get_session',
                                                                                ['no_load=False'],
                                                                                '\n        Lazily loads session from storage (unless "no_load" is True, when only\n        an empty dict is stored) and stores it in the current instance.\n        '),
                                                                               ('get_expiry_age',
                                                                                [],
                                                                                'Get the number of seconds until the session expires.'),
                                                                               ('get_expiry_date',
                                                                                [],
                                                                                'Get session the expiry date (as a datetime object).'),
                                                                               ('set_expiry',
                                                                                ['value'],
                                                                                '\n        Sets a custom expiration for the session. ``value`` can be an integer,\n        a Python ``datetime`` or ``timedelta`` object or ``None``.\n\n        If ``value`` is an integer, the session will expire after that many\n        seconds of inactivity. If set to ``0`` then the session will expire on\n        browser close.\n\n        If ``value`` is a ``datetime`` or ``timedelta`` object, the session\n        will expire at that specific future time.\n\n        If ``value`` is ``None``, the session uses the global session expiry\n        policy.\n        '),
                                                                               ('get_expire_at_browser_close',
                                                                                [],
                                                                                "\n        Returns ``True`` if the session is set to expire when the browser\n        closes, and ``False`` if there's an expiry date. Use\n        ``get_expiry_date()`` or ``get_expiry_age()`` to find the actual expiry\n        date/age, if there is one.\n        "),
                                                                               ('flush',
                                                                                [],
                                                                                '\n        Removes the current session data from the database and regenerates the\n        key.\n        '),
                                                                               ('cycle_key',
                                                                                [],
                                                                                '\n        Creates a new session key, whilst retaining the current session data.\n        '),
                                                                               ('exists',
                                                                                ['session_key'],
                                                                                '\n        Returns True if the given session_key already exists.\n        '),
                                                                               ('create',
                                                                                [],
                                                                                '\n        Creates a new session instance. Guaranteed to create a new object with\n        a unique key and will have saved the result once (with empty data)\n        before the method returns.\n        '),
                                                                               ('save',
                                                                                ['must_create=False'],
                                                                                "\n        Saves the session data. If 'must_create' is True, a new session object\n        is created (otherwise a CreateError exception is raised). Otherwise,\n        save() can update an existing object with the same key.\n        "),
                                                                               ('delete',
                                                                                ['session_key=None'],
                                                                                '\n        Deletes the session data under this key. If the key is None, the\n        current session key value is used.\n        '),
                                                                               ('load',
                                                                                [],
                                                                                '\n        Loads the session data and returns a dictionary.\n        ')],
                                                                   'properties': ['TEST_COOKIE_NAME',
                                                                                  'TEST_COOKIE_VALUE',
                                                                                  '_session_key',
                                                                                  'accessed',
                                                                                  'modified',
                                                                                  '_session_cache',
                                                                                  'session_key',
                                                                                  '_session']},
             'django.contrib.sessions.backends.cache.SessionStore': {'bases': ['django.contrib.sessions.backends.base.SessionBase'],
                                                                     'constructor': ['session_key=None'],
                                                                     'docstring': '\n    A cache-based session store.\n    ',
                                                                     'methods': [('load',
                                                                                  [],
                                                                                  ''),
                                                                                 ('create',
                                                                                  [],
                                                                                  ''),
                                                                                 ('save',
                                                                                  ['must_create=False'],
                                                                                  ''),
                                                                                 ('exists',
                                                                                  ['session_key'],
                                                                                  ''),
                                                                                 ('delete',
                                                                                  ['session_key=None'],
                                                                                  '')],
                                                                     'properties': ['_cache',
                                                                                    'session_key',
                                                                                    'modified']},
             'django.contrib.sessions.backends.cached_db.SessionStore': {'bases': ['django.contrib.sessions.backends.db.SessionStore'],
                                                                         'constructor': ['session_key=None'],
                                                                         'docstring': '\n    Implements cached, database backed sessions.\n    ',
                                                                         'methods': [('load',
                                                                                      [],
                                                                                      ''),
                                                                                     ('exists',
                                                                                      ['session_key'],
                                                                                      ''),
                                                                                     ('save',
                                                                                      ['must_create=False'],
                                                                                      ''),
                                                                                     ('delete',
                                                                                      ['session_key=None'],
                                                                                      ''),
                                                                                     ('flush',
                                                                                      [],
                                                                                      '\n        Removes the current session data from the database and regenerates the\n        key.\n        ')],
                                                                         'properties': []},
             'django.contrib.sessions.backends.db.SessionStore': {'bases': ['django.contrib.sessions.backends.base.SessionBase'],
                                                                  'constructor': ['session_key=None'],
                                                                  'docstring': '\n    Implements database session store.\n    ',
                                                                  'methods': [('load', [], ''),
                                                                              ('exists',
                                                                               ['session_key'],
                                                                               ''),
                                                                              ('create',
                                                                               [],
                                                                               ''),
                                                                              ('save',
                                                                               ['must_create=False'],
                                                                               "\n        Saves the current session data to the database. If 'must_create' is\n        True, a database error will be raised if the saving operation doesn't\n        create a *new* entry (as opposed to possibly updating an existing\n        entry).\n        "),
                                                                              ('delete',
                                                                               ['session_key=None'],
                                                                               '')],
                                                                  'properties': ['session_key',
                                                                                 'modified',
                                                                                 '_session_cache']},
             'django.contrib.sessions.backends.file.SessionStore': {'bases': ['django.contrib.sessions.backends.base.SessionBase'],
                                                                    'constructor': ['session_key=None'],
                                                                    'docstring': '\n    Implements a file based session store.\n    ',
                                                                    'methods': [('_key_to_file',
                                                                                 ['session_key=None'],
                                                                                 '\n        Get the file associated with this session key.\n        '),
                                                                                ('load',
                                                                                 [],
                                                                                 ''),
                                                                                ('create',
                                                                                 [],
                                                                                 ''),
                                                                                ('save',
                                                                                 ['must_create=False'],
                                                                                 ''),
                                                                                ('exists',
                                                                                 ['session_key'],
                                                                                 ''),
                                                                                ('delete',
                                                                                 ['session_key=None'],
                                                                                 ''),
                                                                                ('clean',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['storage_path',
                                                                                   'file_prefix',
                                                                                   'VALID_KEY_CHARS',
                                                                                   '_session_key',
                                                                                   'modified',
                                                                                   '_session_cache']},
             'django.contrib.sessions.middleware.SessionMiddleware': {'bases': ['object'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('process_request',
                                                                                   ['request'],
                                                                                   ''),
                                                                                  ('process_response',
                                                                                   ['request',
                                                                                    'response'],
                                                                                   '\n        If request.session was modified, or if the configuration is to save the\n        session every time, save the changes and set a session cookie.\n        ')],
                                                                      'properties': []},
             'django.contrib.sessions.models.Session': {'bases': ['django.db.models.Model'],
                                                        'constructor': [],
                                                        'docstring': '\n    Django provides full support for anonymous sessions. The session\n    framework lets you store and retrieve arbitrary data on a\n    per-site-visitor basis. It stores data on the server side and\n    abstracts the sending and receiving of cookies. Cookies contain a\n    session ID -- not the data itself.\n\n    The Django sessions framework is entirely cookie-based. It does\n    not fall back to putting session IDs in URLs. This is an intentional\n    design decision. Not only does that behavior make URLs ugly, it makes\n    your site vulnerable to session-ID theft via the "Referer" header.\n\n    For complete documentation on using Sessions in your code, consult\n    the sessions documentation that is shipped with Django (also available\n    on the Django Web site).\n    ',
                                                        'methods': [('get_decoded', [], '')],
                                                        'properties': ['session_key',
                                                                       'session_data',
                                                                       'expire_date',
                                                                       'objects']},
             'django.contrib.sessions.models.SessionManager': {'bases': ['django.db.models.Manager'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('encode',
                                                                            ['session_dict'],
                                                                            '\n        Returns the given session dictionary pickled and encoded as a string.\n        '),
                                                                           ('save',
                                                                            ['session_key',
                                                                             'session_dict',
                                                                             'expire_date'],
                                                                            '')],
                                                               'properties': []},
             'django.contrib.sessions.tests.CacheDBSessionTests': {'bases': ['django.contrib.sessions.models.SessionTestsMixin',
                                                                             'django.test.TestCase'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['backend']},
             'django.contrib.sessions.tests.CacheSessionTests': {'bases': ['django.contrib.sessions.models.SessionTestsMixin',
                                                                           'django.utils.unittest.TestCase'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['backend']},
             'django.contrib.sessions.tests.DatabaseSessionTests': {'bases': ['django.contrib.sessions.models.SessionTestsMixin',
                                                                              'django.test.TestCase'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('test_session_get_decoded',
                                                                                 [],
                                                                                 '\n        Test we can use Session.get_decoded to retrieve data stored\n        in normal way\n        '),
                                                                                ('test_sessionmanager_save',
                                                                                 [],
                                                                                 '\n        Test SessionManager.save method\n        ')],
                                                                    'properties': ['backend']},
             'django.contrib.sessions.tests.FileSessionTests': {'bases': ['django.contrib.sessions.models.SessionTestsMixin',
                                                                          'django.utils.unittest.TestCase'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('setUp', [], ''),
                                                                            ('tearDown',
                                                                             [],
                                                                             ''),
                                                                            ('test_configuration_check',
                                                                             [],
                                                                             ''),
                                                                            ('test_invalid_key_backslash',
                                                                             [],
                                                                             ''),
                                                                            ('test_invalid_key_forwardslash',
                                                                             [],
                                                                             '')],
                                                                'properties': ['backend',
                                                                               'original_session_file_path',
                                                                               'temp_session_store']},
             'django.contrib.sessions.tests.SessionMiddlewareTests': {'bases': ['django.utils.unittest.TestCase'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('setUp',
                                                                                   [],
                                                                                   ''),
                                                                                  ('tearDown',
                                                                                   [],
                                                                                   ''),
                                                                                  ('test_secure_session_cookie',
                                                                                   [],
                                                                                   ''),
                                                                                  ('test_httponly_session_cookie',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': ['old_SESSION_COOKIE_SECURE',
                                                                                     'old_SESSION_COOKIE_HTTPONLY']},
             'django.contrib.sessions.tests.SessionTestsMixin': {'bases': ['object'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('setUp', [], ''),
                                                                             ('tearDown',
                                                                              [],
                                                                              ''),
                                                                             ('test_new_session',
                                                                              [],
                                                                              ''),
                                                                             ('test_get_empty',
                                                                              [],
                                                                              ''),
                                                                             ('test_store',
                                                                              [],
                                                                              ''),
                                                                             ('test_pop',
                                                                              [],
                                                                              ''),
                                                                             ('test_pop_default',
                                                                              [],
                                                                              ''),
                                                                             ('test_setdefault',
                                                                              [],
                                                                              ''),
                                                                             ('test_update',
                                                                              [],
                                                                              ''),
                                                                             ('test_has_key',
                                                                              [],
                                                                              ''),
                                                                             ('test_values',
                                                                              [],
                                                                              ''),
                                                                             ('test_iterkeys',
                                                                              [],
                                                                              ''),
                                                                             ('test_itervalues',
                                                                              [],
                                                                              ''),
                                                                             ('test_iteritems',
                                                                              [],
                                                                              ''),
                                                                             ('test_clear',
                                                                              [],
                                                                              ''),
                                                                             ('test_save',
                                                                              [],
                                                                              ''),
                                                                             ('test_delete',
                                                                              [],
                                                                              ''),
                                                                             ('test_flush',
                                                                              [],
                                                                              ''),
                                                                             ('test_cycle',
                                                                              [],
                                                                              ''),
                                                                             ('test_invalid_key',
                                                                              [],
                                                                              ''),
                                                                             ('test_default_expiry',
                                                                              [],
                                                                              ''),
                                                                             ('test_custom_expiry_seconds',
                                                                              [],
                                                                              ''),
                                                                             ('test_custom_expiry_timedelta',
                                                                              [],
                                                                              ''),
                                                                             ('test_custom_expiry_datetime',
                                                                              [],
                                                                              ''),
                                                                             ('test_custom_expiry_reset',
                                                                              [],
                                                                              ''),
                                                                             ('test_get_expire_at_browser_close',
                                                                              [],
                                                                              ''),
                                                                             ('test_decode',
                                                                              [],
                                                                              ''),
                                                                             ('test_decode_django12',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['backend',
                                                                                'session',
                                                                                'accessed',
                                                                                'modified']},
             'django.contrib.sitemaps.FlatPageSitemap': {'bases': ['django.contrib.sites.models.Sitemap'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('items', [], '')],
                                                         'properties': []},
             'django.contrib.sitemaps.GenericSitemap': {'bases': ['django.contrib.sites.models.Sitemap'],
                                                        'constructor': ['info_dict',
                                                                        'priority=None',
                                                                        'changefreq=None'],
                                                        'docstring': '',
                                                        'methods': [('items', [], ''),
                                                                    ('lastmod', ['item'], '')],
                                                        'properties': ['priority',
                                                                       'changefreq',
                                                                       'queryset',
                                                                       'date_field']},
             'django.contrib.sitemaps.Sitemap': {'bases': ['object'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('__get',
                                                              ['name', 'obj', 'default=None'],
                                                              ''),
                                                             ('items', [], ''),
                                                             ('location', ['obj'], ''),
                                                             ('_get_paginator', [], ''),
                                                             ('get_urls',
                                                              ['page=1', 'site=None'],
                                                              '')],
                                                 'properties': ['limit',
                                                                '_paginator',
                                                                'paginator']},
             'django.contrib.sitemaps.SitemapNotFound': {'bases': ['Exception'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'django.contrib.sitemaps.management.commands.ping_google.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                 'constructor': [],
                                                                                 'docstring': '',
                                                                                 'methods': [('execute',
                                                                                              ['*args',
                                                                                               '**options'],
                                                                                              '')],
                                                                                 'properties': ['help']},
             'django.contrib.sitemaps.tests.urls.SimpleSitemap': {'bases': ['django.contrib.sitemaps.Sitemap'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('items', [], '')],
                                                                  'properties': ['changefreq',
                                                                                 'priority',
                                                                                 'location',
                                                                                 'lastmod']},
             'django.contrib.sites.admin.SiteAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['list_display',
                                                                     'search_fields']},
             'django.contrib.sites.managers.CurrentSiteManager': {'bases': ['django.db.models.Manager'],
                                                                  'constructor': ['field_name=None'],
                                                                  'docstring': 'Use this to limit objects to those associated with the current site.',
                                                                  'methods': [('_validate_field_name',
                                                                               [],
                                                                               ''),
                                                                              ('get_query_set',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['__field_name',
                                                                                 '__is_validated']},
             'django.contrib.sites.models.RequestSite': {'bases': ['object'],
                                                         'constructor': ['request'],
                                                         'docstring': '\n    A class that shares the primary interface of Site (i.e., it has\n    ``domain`` and ``name`` attributes) but gets its data from a Django\n    HttpRequest object rather than from a database.\n\n    The save() and delete() methods raise NotImplementedError.\n    ',
                                                         'methods': [('__unicode__', [], ''),
                                                                     ('save',
                                                                      ['force_insert=False',
                                                                       'force_update=False'],
                                                                      ''),
                                                                     ('delete', [], '')],
                                                         'properties': ['domain', 'name']},
             'django.contrib.sites.models.Site': {'bases': ['django.db.models.Model'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('__unicode__', [], ''),
                                                              ('save',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('delete', [], '')],
                                                  'properties': ['domain', 'name', 'objects']},
             'django.contrib.sites.models.SiteManager': {'bases': ['django.db.models.Manager'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('get_current',
                                                                      [],
                                                                      "\n        Returns the current ``Site`` based on the SITE_ID in the\n        project's settings. The ``Site`` object is cached the first\n        time it's retrieved from the database.\n        "),
                                                                     ('clear_cache',
                                                                      [],
                                                                      'Clears the ``Site`` object cache.')],
                                                         'properties': []},
             'django.contrib.sites.tests.SitesFrameworkTests': {'bases': ['django.test.TestCase'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('setUp', [], ''),
                                                                            ('tearDown',
                                                                             [],
                                                                             ''),
                                                                            ('test_site_manager',
                                                                             [],
                                                                             ''),
                                                                            ('test_site_cache',
                                                                             [],
                                                                             ''),
                                                                            ('test_get_current_site',
                                                                             [],
                                                                             '')],
                                                                'properties': ['old_Site_meta_installed']},
             'django.contrib.staticfiles.finders.AppDirectoriesFinder': {'bases': ['django.contrib.staticfiles.finders.BaseFinder'],
                                                                         'constructor': ['apps=None',
                                                                                         '*args',
                                                                                         '**kwargs'],
                                                                         'docstring': '\n    A static files finder that looks in the directory of each app as\n    specified in the source_dir attribute of the given storage class.\n    ',
                                                                         'methods': [('list',
                                                                                      ['ignore_patterns'],
                                                                                      '\n        List all files in all app storages.\n        '),
                                                                                     ('find',
                                                                                      ['path',
                                                                                       'all=False'],
                                                                                      '\n        Looks for files in the app directories.\n        '),
                                                                                     ('find_in_app',
                                                                                      ['app',
                                                                                       'path'],
                                                                                      "\n        Find a requested static file in an app's static locations.\n        ")],
                                                                         'properties': ['storage_class',
                                                                                        'apps',
                                                                                        'storages']},
             'django.contrib.staticfiles.finders.BaseFinder': {'bases': ['object'],
                                                               'constructor': [],
                                                               'docstring': '\n    A base file finder to be used for custom staticfiles finder classes.\n    ',
                                                               'methods': [('find',
                                                                            ['path',
                                                                             'all=False'],
                                                                            '\n        Given a relative file path this ought to find an\n        absolute file path.\n\n        If the ``all`` parameter is ``False`` (default) only\n        the first found file path will be returned; if set\n        to ``True`` a list of all found files paths is returned.\n        '),
                                                                           ('list',
                                                                            ['ignore_patterns=[]'],
                                                                            '\n        Given an optional list of paths to ignore, this should return\n        a two item iterable consisting of the relative path and storage\n        instance.\n        ')],
                                                               'properties': []},
             'django.contrib.staticfiles.finders.BaseStorageFinder': {'bases': ['django.contrib.staticfiles.finders.BaseFinder'],
                                                                      'constructor': ['storage=None',
                                                                                      '*args',
                                                                                      '**kwargs'],
                                                                      'docstring': '\n    A base static files finder to be used to extended\n    with an own storage class.\n    ',
                                                                      'methods': [('find',
                                                                                   ['path',
                                                                                    'all=False'],
                                                                                   "\n        Looks for files in the default file storage, if it's local.\n        "),
                                                                                  ('list',
                                                                                   ['ignore_patterns'],
                                                                                   '\n        List all files of the storage.\n        ')],
                                                                      'properties': ['storage']},
             'django.contrib.staticfiles.finders.DefaultStorageFinder': {'bases': ['django.contrib.staticfiles.finders.BaseStorageFinder'],
                                                                         'constructor': [],
                                                                         'docstring': '\n    A static files finder that uses the default storage backend.\n    ',
                                                                         'methods': [],
                                                                         'properties': ['storage']},
             'django.contrib.staticfiles.finders.FileSystemFinder': {'bases': ['django.contrib.staticfiles.finders.BaseFinder'],
                                                                     'constructor': ['apps=None',
                                                                                     '*args',
                                                                                     '**kwargs'],
                                                                     'docstring': '\n    A static files finder that uses the ``STATICFILES_DIRS`` setting\n    to locate files.\n    ',
                                                                     'methods': [('find',
                                                                                  ['path',
                                                                                   'all=False'],
                                                                                  '\n        Looks for files in the extra locations\n        as defined in ``STATICFILES_DIRS``.\n        '),
                                                                                 ('find_location',
                                                                                  ['root',
                                                                                   'path',
                                                                                   'prefix=None'],
                                                                                  '\n        Finds a requested static file in a location, returning the found\n        absolute path (or ``None`` if no match).\n        '),
                                                                                 ('list',
                                                                                  ['ignore_patterns'],
                                                                                  '\n        List all files in all locations.\n        ')],
                                                                     'properties': ['locations',
                                                                                    'storages']},
             'django.contrib.staticfiles.handlers.StaticFilesHandler': {'bases': ['django.core.handlers.wsgi.WSGIHandler'],
                                                                        'constructor': ['application',
                                                                                        'base_dir=None'],
                                                                        'docstring': '\n    WSGI middleware that intercepts calls to the static files directory, as\n    defined by the STATIC_URL setting, and serves those files.\n    ',
                                                                        'methods': [('get_base_dir',
                                                                                     [],
                                                                                     ''),
                                                                                    ('get_base_url',
                                                                                     [],
                                                                                     ''),
                                                                                    ('_should_handle',
                                                                                     ['path'],
                                                                                     "\n        Checks if the path should be handled. Ignores the path if:\n\n        * the host is provided as part of the base_url\n        * the request's path isn't under the media path (or equal)\n        "),
                                                                                    ('file_path',
                                                                                     ['url'],
                                                                                     '\n        Returns the relative path to the media file on disk for the given URL.\n        '),
                                                                                    ('serve',
                                                                                     ['request'],
                                                                                     '\n        Actually serves the request path.\n        '),
                                                                                    ('get_response',
                                                                                     ['request'],
                                                                                     ''),
                                                                                    ('__call__',
                                                                                     ['environ',
                                                                                      'start_response'],
                                                                                     '')],
                                                                        'properties': ['application',
                                                                                       'base_dir',
                                                                                       'base_url']},
             'django.contrib.staticfiles.management.commands.collectstatic.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                                      'constructor': ['*args',
                                                                                                      '**kwargs'],
                                                                                      'docstring': '\n    Command that allows to copy or symlink media files from different\n    locations to the settings.STATIC_ROOT.\n    ',
                                                                                      'methods': [('handle_noargs',
                                                                                                   ['**options'],
                                                                                                   ''),
                                                                                                  ('log',
                                                                                                   ['msg',
                                                                                                    'level=2'],
                                                                                                   '\n        Small log helper\n        '),
                                                                                                  ('delete_file',
                                                                                                   ['path',
                                                                                                    'prefixed_path',
                                                                                                    'source_storage',
                                                                                                    '**options'],
                                                                                                   ''),
                                                                                                  ('link_file',
                                                                                                   ['path',
                                                                                                    'prefixed_path',
                                                                                                    'source_storage',
                                                                                                    '**options'],
                                                                                                   '\n        Attempt to link ``path``\n        '),
                                                                                                  ('copy_file',
                                                                                                   ['path',
                                                                                                    'prefixed_path',
                                                                                                    'source_storage',
                                                                                                    '**options'],
                                                                                                   '\n        Attempt to copy ``path`` with storage\n        ')],
                                                                                      'properties': ['option_list',
                                                                                                     'help',
                                                                                                     'copied_files',
                                                                                                     'symlinked_files',
                                                                                                     'unmodified_files',
                                                                                                     'storage',
                                                                                                     'local',
                                                                                                     'verbosity']},
             'django.contrib.staticfiles.management.commands.findstatic.Command': {'bases': ['django.core.management.base.LabelCommand'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [('handle_label',
                                                                                                ['path',
                                                                                                 '**options'],
                                                                                                '')],
                                                                                   'properties': ['help',
                                                                                                  'args',
                                                                                                  'label',
                                                                                                  'option_list']},
             'django.contrib.staticfiles.management.commands.runserver.Command': {'bases': ['django.core.management.commands.runserver.BaseRunserverCommand'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [('get_handler',
                                                                                               ['*args',
                                                                                                '**options'],
                                                                                               '\n        Returns the static files serving handler.\n        ')],
                                                                                  'properties': ['option_list',
                                                                                                 'help']},
             'django.contrib.staticfiles.storage.AppStaticStorage': {'bases': ['django.core.files.storage.FileSystemStorage'],
                                                                     'constructor': ['app',
                                                                                     '*args',
                                                                                     '**kwargs'],
                                                                     'docstring': '\n    A file system storage backend that takes an app module and works\n    for the ``static`` directory of it.\n    ',
                                                                     'methods': [],
                                                                     'properties': ['prefix',
                                                                                    'source_dir',
                                                                                    'app_module']},
             'django.contrib.staticfiles.storage.StaticFilesStorage': {'bases': ['django.core.files.storage.FileSystemStorage'],
                                                                       'constructor': ['location=None',
                                                                                       'base_url=None',
                                                                                       '*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '\n    Standard file system storage for static files.\n\n    The defaults for ``location`` and ``base_url`` are\n    ``STATIC_ROOT`` and ``STATIC_URL``.\n    ',
                                                                       'methods': [],
                                                                       'properties': []},
             'django.contrib.syndication.feeds.Feed': {'bases': ['django.contrib.syndication.views.Feed'],
                                                       'constructor': ['slug', 'request'],
                                                       'docstring': 'Provided for backwards compatibility.',
                                                       'methods': [('get_object', ['bits'], ''),
                                                                   ('get_feed',
                                                                    ['url=None'],
                                                                    '\n        Returns a feedgenerator.DefaultFeed object, fully populated, for\n        this feed. Raises FeedDoesNotExist for invalid parameters.\n        ')],
                                                       'properties': ['slug',
                                                                      'request',
                                                                      'feed_url',
                                                                      'title_template',
                                                                      'description_template']},
             'django.contrib.syndication.views.Feed': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('__call__',
                                                                    ['request',
                                                                     '*args',
                                                                     '**kwargs'],
                                                                    ''),
                                                                   ('item_title', ['item'], ''),
                                                                   ('item_description',
                                                                    ['item'],
                                                                    ''),
                                                                   ('item_link', ['item'], ''),
                                                                   ('__get_dynamic_attr',
                                                                    ['attname',
                                                                     'obj',
                                                                     'default=None'],
                                                                    ''),
                                                                   ('feed_extra_kwargs',
                                                                    ['obj'],
                                                                    '\n        Returns an extra keyword arguments dictionary that is used when\n        initializing the feed generator.\n        '),
                                                                   ('item_extra_kwargs',
                                                                    ['item'],
                                                                    '\n        Returns an extra keyword arguments dictionary that is used with\n        the `add_item` call of the feed generator.\n        '),
                                                                   ('get_object',
                                                                    ['request',
                                                                     '*args',
                                                                     '**kwargs'],
                                                                    ''),
                                                                   ('get_feed',
                                                                    ['obj', 'request'],
                                                                    '\n        Returns a feedgenerator.DefaultFeed object, fully populated, for\n        this feed. Raises FeedDoesNotExist for invalid parameters.\n        ')],
                                                       'properties': ['feed_type',
                                                                      'title_template',
                                                                      'description_template']},
             'django.contrib.syndication.views.FeedDoesNotExist': {'bases': ['django.core.exceptions.ObjectDoesNotExist'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.contrib.webdesign.templatetags.webdesign.LoremNode': {'bases': ['django.template.Node'],
                                                                           'constructor': ['count',
                                                                                           'method',
                                                                                           'common'],
                                                                           'docstring': '',
                                                                           'methods': [('render',
                                                                                        ['context'],
                                                                                        '')],
                                                                           'properties': ['count',
                                                                                          'method',
                                                                                          'common']},
             'django.contrib.webdesign.tests.WebdesignTest': {'bases': ['unittest.TestCase'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('test_words',
                                                                           [],
                                                                           ''),
                                                                          ('test_paragraphs',
                                                                           [],
                                                                           ''),
                                                                          ('test_lorem_tag',
                                                                           [],
                                                                           '')],
                                                              'properties': []},
             'django.core.cache.backends.base.BaseCache': {'bases': ['object'],
                                                           'constructor': ['params'],
                                                           'docstring': '',
                                                           'methods': [('make_key',
                                                                        ['key',
                                                                         'version=None'],
                                                                        "Constructs the key used by all other methods. By default it\n        uses the key_func to generate a key (which, by default,\n        prepends the `key_prefix' and 'version'). An different key\n        function can be provided at the time of cache construction;\n        alternatively, you can subclass the cache backend to provide\n        custom key making behavior.\n        "),
                                                                       ('add',
                                                                        ['key',
                                                                         'value',
                                                                         'timeout=None',
                                                                         'version=None'],
                                                                        '\n        Set a value in the cache if the key does not already exist. If\n        timeout is given, that timeout will be used for the key; otherwise\n        the default cache timeout will be used.\n\n        Returns True if the value was stored, False otherwise.\n        '),
                                                                       ('get',
                                                                        ['key',
                                                                         'default=None',
                                                                         'version=None'],
                                                                        '\n        Fetch a given key from the cache. If the key does not exist, return\n        default, which itself defaults to None.\n        '),
                                                                       ('set',
                                                                        ['key',
                                                                         'value',
                                                                         'timeout=None',
                                                                         'version=None'],
                                                                        '\n        Set a value in the cache. If timeout is given, that timeout will be\n        used for the key; otherwise the default cache timeout will be used.\n        '),
                                                                       ('delete',
                                                                        ['key',
                                                                         'version=None'],
                                                                        '\n        Delete a key from the cache, failing silently.\n        '),
                                                                       ('get_many',
                                                                        ['keys',
                                                                         'version=None'],
                                                                        '\n        Fetch a bunch of keys from the cache. For certain backends (memcached,\n        pgsql) this can be *much* faster when fetching multiple values.\n\n        Returns a dict mapping each key in keys to its value. If the given\n        key is missing, it will be missing from the response dict.\n        '),
                                                                       ('has_key',
                                                                        ['key',
                                                                         'version=None'],
                                                                        '\n        Returns True if the key is in the cache and has not expired.\n        '),
                                                                       ('incr',
                                                                        ['key',
                                                                         'delta=1',
                                                                         'version=None'],
                                                                        '\n        Add delta to value in the cache. If the key does not exist, raise a\n        ValueError exception.\n        '),
                                                                       ('decr',
                                                                        ['key',
                                                                         'delta=1',
                                                                         'version=None'],
                                                                        '\n        Subtract delta from value in the cache. If the key does not exist, raise\n        a ValueError exception.\n        '),
                                                                       ('__contains__',
                                                                        ['key'],
                                                                        '\n        Returns True if the key is in the cache and has not expired.\n        '),
                                                                       ('set_many',
                                                                        ['data',
                                                                         'timeout=None',
                                                                         'version=None'],
                                                                        '\n        Set a bunch of values in the cache at once from a dict of key/value\n        pairs.  For certain backends (memcached), this is much more efficient\n        than calling set() multiple times.\n\n        If timeout is given, that timeout will be used for the key; otherwise\n        the default cache timeout will be used.\n        '),
                                                                       ('delete_many',
                                                                        ['keys',
                                                                         'version=None'],
                                                                        '\n        Set a bunch of values in the cache at once.  For certain backends\n        (memcached), this is much more efficient than calling delete() multiple\n        times.\n        '),
                                                                       ('clear',
                                                                        [],
                                                                        'Remove *all* values from the cache at once.'),
                                                                       ('validate_key',
                                                                        ['key'],
                                                                        '\n        Warn about keys that would not be portable to the memcached\n        backend. This encourages (but does not force) writing backend-portable\n        cache code.\n\n        '),
                                                                       ('incr_version',
                                                                        ['key',
                                                                         'delta=1',
                                                                         'version=None'],
                                                                        'Adds delta to the cache version for the supplied key. Returns the\n        new version.\n        '),
                                                                       ('decr_version',
                                                                        ['key',
                                                                         'delta=1',
                                                                         'version=None'],
                                                                        'Substracts delta from the cache version for the supplied key. Returns\n        the new version.\n        ')],
                                                           'properties': ['default_timeout',
                                                                          '_max_entries',
                                                                          '_cull_frequency',
                                                                          'key_prefix',
                                                                          'version',
                                                                          'key_func']},
             'django.core.cache.backends.base.CacheKeyWarning': {'bases': ['django.core.exceptions.DjangoRuntimeWarning'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': []},
             'django.core.cache.backends.base.InvalidCacheBackendError': {'bases': ['django.core.exceptions.ImproperlyConfigured'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [],
                                                                          'properties': []},
             'django.core.cache.backends.db.BaseDatabaseCache': {'bases': ['django.core.cache.backends.base.BaseCache'],
                                                                 'constructor': ['table',
                                                                                 'params'],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['_table',
                                                                                'cache_model_class']},
             'django.core.cache.backends.db.CacheClass': {'bases': ['django.core.cache.backends.db.DatabaseCache'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': []},
             'django.core.cache.backends.db.DatabaseCache': {'bases': ['django.core.cache.backends.db.BaseDatabaseCache'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('get',
                                                                          ['key',
                                                                           'default=None',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('set',
                                                                          ['key',
                                                                           'value',
                                                                           'timeout=None',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('add',
                                                                          ['key',
                                                                           'value',
                                                                           'timeout=None',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('_base_set',
                                                                          ['mode',
                                                                           'key',
                                                                           'value',
                                                                           'timeout=None'],
                                                                          ''),
                                                                         ('delete',
                                                                          ['key',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('has_key',
                                                                          ['key',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('_cull',
                                                                          ['db',
                                                                           'cursor',
                                                                           'now'],
                                                                          ''),
                                                                         ('clear', [], '')],
                                                             'properties': []},
             'django.core.cache.backends.db.Options': {'bases': ['object'],
                                                       'constructor': ['table'],
                                                       'docstring': 'A class that will quack like a Django model _meta class.\n\n    This allows cache operations to be controlled by the router\n    ',
                                                       'methods': [],
                                                       'properties': ['db_table',
                                                                      'app_label',
                                                                      'module_name',
                                                                      'verbose_name',
                                                                      'verbose_name_plural',
                                                                      'object_name',
                                                                      'abstract',
                                                                      'managed',
                                                                      'proxy']},
             'django.core.cache.backends.dummy.CacheClass': {'bases': ['django.core.cache.backends.dummy.DummyCache'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': []},
             'django.core.cache.backends.dummy.DummyCache': {'bases': ['django.core.cache.backends.base.BaseCache'],
                                                             'constructor': ['host',
                                                                             '*args',
                                                                             '**kwargs'],
                                                             'docstring': '',
                                                             'methods': [('add',
                                                                          ['key',
                                                                           'value',
                                                                           'timeout=None',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('get',
                                                                          ['key',
                                                                           'default=None',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('set',
                                                                          ['key',
                                                                           'value',
                                                                           'timeout=None',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('delete',
                                                                          ['key',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('get_many',
                                                                          ['keys',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('has_key',
                                                                          ['key',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('set_many',
                                                                          ['data',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('delete_many',
                                                                          ['keys',
                                                                           'version=None'],
                                                                          ''),
                                                                         ('clear', [], '')],
                                                             'properties': []},
             'django.core.cache.backends.filebased.CacheClass': {'bases': ['django.core.cache.backends.filebased.FileBasedCache'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': []},
             'django.core.cache.backends.filebased.FileBasedCache': {'bases': ['django.core.cache.backends.base.BaseCache'],
                                                                     'constructor': ['dir',
                                                                                     'params'],
                                                                     'docstring': '',
                                                                     'methods': [('add',
                                                                                  ['key',
                                                                                   'value',
                                                                                   'timeout=None',
                                                                                   'version=None'],
                                                                                  ''),
                                                                                 ('get',
                                                                                  ['key',
                                                                                   'default=None',
                                                                                   'version=None'],
                                                                                  ''),
                                                                                 ('set',
                                                                                  ['key',
                                                                                   'value',
                                                                                   'timeout=None',
                                                                                   'version=None'],
                                                                                  ''),
                                                                                 ('delete',
                                                                                  ['key',
                                                                                   'version=None'],
                                                                                  ''),
                                                                                 ('_delete',
                                                                                  ['fname'],
                                                                                  ''),
                                                                                 ('has_key',
                                                                                  ['key',
                                                                                   'version=None'],
                                                                                  ''),
                                                                                 ('_cull',
                                                                                  [],
                                                                                  ''),
                                                                                 ('_createdir',
                                                                                  [],
                                                                                  ''),
                                                                                 ('_key_to_file',
                                                                                  ['key'],
                                                                                  '\n        Convert the filename into an md5 string. We\'ll turn the first couple\n        bits of the path into directory prefixes to be nice to filesystems\n        that have problems with large numbers of files in a directory.\n\n        Thus, a cache key of "foo" gets turnned into a file named\n        ``{cache-dir}ac/bd/18db4cc2f85cedef654fccc4a4d8``.\n        '),
                                                                                 ('_get_num_entries',
                                                                                  [],
                                                                                  ''),
                                                                                 ('clear',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['_dir',
                                                                                    '_num_entries']},
             'django.core.cache.backends.locmem.CacheClass': {'bases': ['django.core.cache.backends.locmem.LocMemCache'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': []},
             'django.core.cache.backends.locmem.LocMemCache': {'bases': ['django.core.cache.backends.base.BaseCache'],
                                                               'constructor': ['name', 'params'],
                                                               'docstring': '',
                                                               'methods': [('add',
                                                                            ['key',
                                                                             'value',
                                                                             'timeout=None',
                                                                             'version=None'],
                                                                            ''),
                                                                           ('get',
                                                                            ['key',
                                                                             'default=None',
                                                                             'version=None'],
                                                                            ''),
                                                                           ('_set',
                                                                            ['key',
                                                                             'value',
                                                                             'timeout=None'],
                                                                            ''),
                                                                           ('set',
                                                                            ['key',
                                                                             'value',
                                                                             'timeout=None',
                                                                             'version=None'],
                                                                            ''),
                                                                           ('has_key',
                                                                            ['key',
                                                                             'version=None'],
                                                                            ''),
                                                                           ('_cull', [], ''),
                                                                           ('_delete',
                                                                            ['key'],
                                                                            ''),
                                                                           ('delete',
                                                                            ['key',
                                                                             'version=None'],
                                                                            ''),
                                                                           ('clear', [], '')],
                                                               'properties': ['_cache',
                                                                              '_expire_info',
                                                                              '_lock']},
             'django.core.cache.backends.memcached.BaseMemcachedCache': {'bases': ['django.core.cache.backends.base.BaseCache'],
                                                                         'constructor': ['server',
                                                                                         'params',
                                                                                         'library',
                                                                                         'value_not_found_exception'],
                                                                         'docstring': '',
                                                                         'methods': [('_get_memcache_timeout',
                                                                                      ['timeout'],
                                                                                      '\n        Memcached deals with long (> 30 days) timeouts in a special\n        way. Call this function to obtain a safe value for your timeout.\n        '),
                                                                                     ('add',
                                                                                      ['key',
                                                                                       'value',
                                                                                       'timeout=0',
                                                                                       'version=None'],
                                                                                      ''),
                                                                                     ('get',
                                                                                      ['key',
                                                                                       'default=None',
                                                                                       'version=None'],
                                                                                      ''),
                                                                                     ('set',
                                                                                      ['key',
                                                                                       'value',
                                                                                       'timeout=0',
                                                                                       'version=None'],
                                                                                      ''),
                                                                                     ('delete',
                                                                                      ['key',
                                                                                       'version=None'],
                                                                                      ''),
                                                                                     ('get_many',
                                                                                      ['keys',
                                                                                       'version=None'],
                                                                                      ''),
                                                                                     ('close',
                                                                                      ['**kwargs'],
                                                                                      ''),
                                                                                     ('incr',
                                                                                      ['key',
                                                                                       'delta=1',
                                                                                       'version=None'],
                                                                                      ''),
                                                                                     ('decr',
                                                                                      ['key',
                                                                                       'delta=1',
                                                                                       'version=None'],
                                                                                      ''),
                                                                                     ('set_many',
                                                                                      ['data',
                                                                                       'timeout=0',
                                                                                       'version=None'],
                                                                                      ''),
                                                                                     ('delete_many',
                                                                                      ['keys',
                                                                                       'version=None'],
                                                                                      ''),
                                                                                     ('clear',
                                                                                      [],
                                                                                      '')],
                                                                         'properties': ['_servers',
                                                                                        'LibraryValueNotFoundException',
                                                                                        '_lib',
                                                                                        '_options',
                                                                                        '_cache',
                                                                                        '_client']},
             'django.core.cache.backends.memcached.CacheClass': {'bases': ['django.core.cache.backends.memcached.BaseMemcachedCache'],
                                                                 'constructor': ['server',
                                                                                 'params'],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': []},
             'django.core.cache.backends.memcached.MemcachedCache': {'bases': ['django.core.cache.backends.memcached.BaseMemcachedCache'],
                                                                     'constructor': ['server',
                                                                                     'params'],
                                                                     'docstring': 'An implementation of a cache binding using python-memcached',
                                                                     'methods': [],
                                                                     'properties': []},
             'django.core.cache.backends.memcached.PyLibMCCache': {'bases': ['django.core.cache.backends.memcached.BaseMemcachedCache'],
                                                                   'constructor': ['server',
                                                                                   'params'],
                                                                   'docstring': 'An implementation of a cache binding using pylibmc',
                                                                   'methods': [],
                                                                   'properties': ['_local',
                                                                                  '_cache']},
             'django.core.context_processors.PermLookupDict': {'bases': ['django.contrib.auth.context_processors.PermLookupDict'],
                                                               'constructor': ['*args',
                                                                               '**kwargs'],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': []},
             'django.core.context_processors.PermWrapper': {'bases': ['django.contrib.auth.context_processors.PermWrapper'],
                                                            'constructor': ['*args', '**kwargs'],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': []},
             'django.core.exceptions.DjangoRuntimeWarning': {'bases': ['RuntimeWarning'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': []},
             'django.core.exceptions.FieldError': {'bases': ['Exception'],
                                                   'constructor': [],
                                                   'docstring': 'Some kind of problem with a model field.',
                                                   'methods': [],
                                                   'properties': []},
             'django.core.exceptions.ImproperlyConfigured': {'bases': ['Exception'],
                                                             'constructor': [],
                                                             'docstring': 'Django is somehow improperly configured',
                                                             'methods': [],
                                                             'properties': []},
             'django.core.exceptions.MiddlewareNotUsed': {'bases': ['Exception'],
                                                          'constructor': [],
                                                          'docstring': 'This middleware is not used in this server configuration',
                                                          'methods': [],
                                                          'properties': []},
             'django.core.exceptions.MultipleObjectsReturned': {'bases': ['Exception'],
                                                                'constructor': [],
                                                                'docstring': 'The query returned multiple objects when only one was expected.',
                                                                'methods': [],
                                                                'properties': []},
             'django.core.exceptions.ObjectDoesNotExist': {'bases': ['Exception'],
                                                           'constructor': [],
                                                           'docstring': 'The requested object does not exist',
                                                           'methods': [],
                                                           'properties': ['silent_variable_failure']},
             'django.core.exceptions.PermissionDenied': {'bases': ['Exception'],
                                                         'constructor': [],
                                                         'docstring': 'The user did not have permission to do that',
                                                         'methods': [],
                                                         'properties': []},
             'django.core.exceptions.SuspiciousOperation': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': 'The user did something suspicious',
                                                            'methods': [],
                                                            'properties': []},
             'django.core.exceptions.ValidationError': {'bases': ['Exception'],
                                                        'constructor': ['message',
                                                                        'code=None',
                                                                        'params=None'],
                                                        'docstring': 'An error while validating data.',
                                                        'methods': [('__str__', [], ''),
                                                                    ('__repr__', [], ''),
                                                                    ('update_error_dict',
                                                                     ['error_dict'],
                                                                     '')],
                                                        'properties': ['message_dict',
                                                                       'messages',
                                                                       'code',
                                                                       'params']},
             'django.core.exceptions.ViewDoesNotExist': {'bases': ['Exception'],
                                                         'constructor': [],
                                                         'docstring': 'The requested view does not exist',
                                                         'methods': [],
                                                         'properties': []},
             'django.core.files.base.ContentFile': {'bases': ['django.core.files.base.File'],
                                                    'constructor': ['content'],
                                                    'docstring': '\n    A File-like object that takes just raw content, rather than an actual file.\n    ',
                                                    'methods': [('__str__', [], ''),
                                                                ('__nonzero__', [], ''),
                                                                ('open', ['mode=None'], ''),
                                                                ('close', [], '')],
                                                    'properties': ['size']},
             'django.core.files.base.File': {'bases': ['django.core.files.utils.FileProxyMixin'],
                                             'constructor': ['file', 'name=None'],
                                             'docstring': '',
                                             'methods': [('__str__', [], ''),
                                                         ('__unicode__', [], ''),
                                                         ('__repr__', [], ''),
                                                         ('__nonzero__', [], ''),
                                                         ('__len__', [], ''),
                                                         ('_get_size', [], ''),
                                                         ('_set_size', ['size'], ''),
                                                         ('_get_closed', [], ''),
                                                         ('chunks',
                                                          ['chunk_size=None'],
                                                          '\n        Read the file and yield chucks of ``chunk_size`` bytes (defaults to\n        ``UploadedFile.DEFAULT_CHUNK_SIZE``).\n        '),
                                                         ('multiple_chunks',
                                                          ['chunk_size=None'],
                                                          "\n        Returns ``True`` if you can expect multiple chunks.\n\n        NB: If a particular file representation is in memory, subclasses should\n        always return ``False`` -- there's no good reason to read from memory in\n        chunks.\n        "),
                                                         ('__iter__', [], ''),
                                                         ('__enter__', [], ''),
                                                         ('__exit__',
                                                          ['exc_type', 'exc_value', 'tb'],
                                                          ''),
                                                         ('open', ['mode=None'], ''),
                                                         ('close', [], '')],
                                             'properties': ['DEFAULT_CHUNK_SIZE',
                                                            'file',
                                                            'name',
                                                            'mode',
                                                            '_size',
                                                            'size',
                                                            'closed']},
             'django.core.files.images.ImageFile': {'bases': ['django.core.files.File'],
                                                    'constructor': [],
                                                    'docstring': '\n    A mixin for use alongside django.core.files.base.File, which provides\n    additional features for dealing with images.\n    ',
                                                    'methods': [('_get_width', [], ''),
                                                                ('_get_height', [], ''),
                                                                ('_get_image_dimensions',
                                                                 [],
                                                                 '')],
                                                    'properties': ['width',
                                                                   'height',
                                                                   '_dimensions_cache']},
             'django.core.files.storage.DefaultStorage': {'bases': ['django.utils.functional.LazyObject'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('_setup', [], '')],
                                                          'properties': ['_wrapped']},
             'django.core.files.storage.FileSystemStorage': {'bases': ['django.core.files.storage.Storage'],
                                                             'constructor': ['location=None',
                                                                             'base_url=None'],
                                                             'docstring': '\n    Standard filesystem storage\n    ',
                                                             'methods': [('_open',
                                                                          ['name',
                                                                           "mode='rb'"],
                                                                          ''),
                                                                         ('_save',
                                                                          ['name', 'content'],
                                                                          ''),
                                                                         ('delete',
                                                                          ['name'],
                                                                          ''),
                                                                         ('exists',
                                                                          ['name'],
                                                                          ''),
                                                                         ('listdir',
                                                                          ['path'],
                                                                          ''),
                                                                         ('path', ['name'], ''),
                                                                         ('size', ['name'], ''),
                                                                         ('url', ['name'], ''),
                                                                         ('accessed_time',
                                                                          ['name'],
                                                                          ''),
                                                                         ('created_time',
                                                                          ['name'],
                                                                          ''),
                                                                         ('modified_time',
                                                                          ['name'],
                                                                          '')],
                                                             'properties': ['location',
                                                                            'base_url']},
             'django.core.files.storage.Storage': {'bases': ['object'],
                                                   'constructor': [],
                                                   'docstring': '\n    A base storage class, providing some default behaviors that all other\n    storage systems can inherit or override, as necessary.\n    ',
                                                   'methods': [('open',
                                                                ['name',
                                                                 "mode='rb'",
                                                                 'mixin=None'],
                                                                '\n        Retrieves the specified file from storage, using the optional mixin\n        class to customize what features are available on the File returned.\n        '),
                                                               ('save',
                                                                ['name', 'content'],
                                                                '\n        Saves new content to the file specified by name. The content should be a\n        proper File object, ready to be read from the beginning.\n        '),
                                                               ('get_valid_name',
                                                                ['name'],
                                                                "\n        Returns a filename, based on the provided filename, that's suitable for\n        use in the target storage system.\n        "),
                                                               ('get_available_name',
                                                                ['name'],
                                                                "\n        Returns a filename that's free on the target storage system, and\n        available for new content to be written to.\n        "),
                                                               ('path',
                                                                ['name'],
                                                                "\n        Returns a local filesystem path where the file can be retrieved using\n        Python's built-in open() function. Storage systems that can't be\n        accessed using open() should *not* implement this method.\n        "),
                                                               ('delete',
                                                                ['name'],
                                                                '\n        Deletes the specified file from the storage system.\n        '),
                                                               ('exists',
                                                                ['name'],
                                                                '\n        Returns True if a file referened by the given name already exists in the\n        storage system, or False if the name is available for a new file.\n        '),
                                                               ('listdir',
                                                                ['path'],
                                                                '\n        Lists the contents of the specified path, returning a 2-tuple of lists;\n        the first item being directories, the second item being files.\n        '),
                                                               ('size',
                                                                ['name'],
                                                                '\n        Returns the total size, in bytes, of the file specified by name.\n        '),
                                                               ('url',
                                                                ['name'],
                                                                "\n        Returns an absolute URL where the file's contents can be accessed\n        directly by a Web browser.\n        "),
                                                               ('accessed_time',
                                                                ['name'],
                                                                '\n        Returns the last accessed time (as datetime object) of the file\n        specified by name.\n        '),
                                                               ('created_time',
                                                                ['name'],
                                                                '\n        Returns the creation time (as datetime object) of the file\n        specified by name.\n        '),
                                                               ('modified_time',
                                                                ['name'],
                                                                '\n        Returns the last modified time (as datetime object) of the file\n        specified by name.\n        ')],
                                                   'properties': []},
             'django.core.files.temp.TemporaryFile': {'bases': ['django.core.files.utils.FileProxyMixin'],
                                                      'constructor': ["mode='w+b'",
                                                                      'bufsize=-1',
                                                                      "suffix=''",
                                                                      "prefix=''",
                                                                      'dir=None'],
                                                      'docstring': '\n        Temporary file object constructor that works in Windows and supports\n        reopening of the temporary file in windows.\n        ',
                                                      'methods': [('close', [], ''),
                                                                  ('__del__', [], '')],
                                                      'properties': ['name',
                                                                     'file',
                                                                     'close_called',
                                                                     'unlink']},
             'django.core.files.uploadedfile.InMemoryUploadedFile': {'bases': ['django.core.files.uploadedfile.UploadedFile'],
                                                                     'constructor': ['file',
                                                                                     'field_name',
                                                                                     'name',
                                                                                     'content_type',
                                                                                     'size',
                                                                                     'charset'],
                                                                     'docstring': '\n    A file uploaded into memory (i.e. stream-to-memory).\n    ',
                                                                     'methods': [('open',
                                                                                  ['mode=None'],
                                                                                  ''),
                                                                                 ('close',
                                                                                  [],
                                                                                  ''),
                                                                                 ('chunks',
                                                                                  ['chunk_size=None'],
                                                                                  ''),
                                                                                 ('multiple_chunks',
                                                                                  ['chunk_size=None'],
                                                                                  '')],
                                                                     'properties': ['field_name']},
             'django.core.files.uploadedfile.SimpleUploadedFile': {'bases': ['django.core.files.uploadedfile.InMemoryUploadedFile'],
                                                                   'constructor': ['name',
                                                                                   'content',
                                                                                   "content_type='text/plain'"],
                                                                   'docstring': '\n    A simple representation of a file, which just has content, size, and a name.\n    ',
                                                                   'methods': [('from_dict',
                                                                                ['file_dict'],
                                                                                '\n        Creates a SimpleUploadedFile object from\n        a dictionary object with the following keys:\n           - filename\n           - content-type\n           - content\n        ')],
                                                                   'properties': ['from_dict']},
             'django.core.files.uploadedfile.TemporaryUploadedFile': {'bases': ['django.core.files.uploadedfile.UploadedFile'],
                                                                      'constructor': ['name',
                                                                                      'content_type',
                                                                                      'size',
                                                                                      'charset'],
                                                                      'docstring': '\n    A file uploaded to a temporary location (i.e. stream-to-disk).\n    ',
                                                                      'methods': [('temporary_file_path',
                                                                                   [],
                                                                                   '\n        Returns the full path of this file.\n        '),
                                                                                  ('close',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': []},
             'django.core.files.uploadedfile.UploadedFile': {'bases': ['django.core.files.base.File'],
                                                             'constructor': ['file=None',
                                                                             'name=None',
                                                                             'content_type=None',
                                                                             'size=None',
                                                                             'charset=None'],
                                                             'docstring': '\n    A abstract uploaded file (``TemporaryUploadedFile`` and\n    ``InMemoryUploadedFile`` are the built-in concrete subclasses).\n\n    An ``UploadedFile`` object behaves somewhat like a file object and\n    represents some file data that the user submitted with a form.\n    ',
                                                             'methods': [('__repr__', [], ''),
                                                                         ('_get_name', [], ''),
                                                                         ('_set_name',
                                                                          ['name'],
                                                                          '')],
                                                             'properties': ['DEFAULT_CHUNK_SIZE',
                                                                            'size',
                                                                            'content_type',
                                                                            'charset',
                                                                            '_name',
                                                                            'name']},
             'django.core.files.uploadhandler.FileUploadHandler': {'bases': ['object'],
                                                                   'constructor': ['request=None'],
                                                                   'docstring': '\n    Base class for streaming upload handlers.\n    ',
                                                                   'methods': [('handle_raw_input',
                                                                                ['input_data',
                                                                                 'META',
                                                                                 'content_length',
                                                                                 'boundary',
                                                                                 'encoding=None'],
                                                                                "\n        Handle the raw input from the client.\n\n        Parameters:\n\n            :input_data:\n                An object that supports reading via .read().\n            :META:\n                ``request.META``.\n            :content_length:\n                The (integer) value of the Content-Length header from the\n                client.\n            :boundary: The boundary from the Content-Type header. Be sure to\n                prepend two '--'.\n        "),
                                                                               ('new_file',
                                                                                ['field_name',
                                                                                 'file_name',
                                                                                 'content_type',
                                                                                 'content_length',
                                                                                 'charset=None'],
                                                                                "\n        Signal that a new file has been started.\n\n        Warning: As with any data from the client, you should not trust\n        content_length (and sometimes won't even get it).\n        "),
                                                                               ('receive_data_chunk',
                                                                                ['raw_data',
                                                                                 'start'],
                                                                                '\n        Receive data from the streamed upload parser. ``start`` is the position\n        in the file of the chunk.\n        '),
                                                                               ('file_complete',
                                                                                ['file_size'],
                                                                                '\n        Signal that a file has completed. File size corresponds to the actual\n        size accumulated by all the chunks.\n\n        Subclasses should return a valid ``UploadedFile`` object.\n        '),
                                                                               ('upload_complete',
                                                                                [],
                                                                                '\n        Signal that the upload is complete. Subclasses should perform cleanup\n        that is necessary for this handler.\n        ')],
                                                                   'properties': ['chunk_size',
                                                                                  'file_name',
                                                                                  'content_type',
                                                                                  'content_length',
                                                                                  'charset',
                                                                                  'request',
                                                                                  'field_name']},
             'django.core.files.uploadhandler.MemoryFileUploadHandler': {'bases': ['django.core.files.uploadhandler.FileUploadHandler'],
                                                                         'constructor': [],
                                                                         'docstring': '\n    File upload handler to stream uploads into memory (used for small files).\n    ',
                                                                         'methods': [('handle_raw_input',
                                                                                      ['input_data',
                                                                                       'META',
                                                                                       'content_length',
                                                                                       'boundary',
                                                                                       'encoding=None'],
                                                                                      '\n        Use the content_length to signal whether or not this handler should be in use.\n        '),
                                                                                     ('new_file',
                                                                                      ['*args',
                                                                                       '**kwargs'],
                                                                                      ''),
                                                                                     ('receive_data_chunk',
                                                                                      ['raw_data',
                                                                                       'start'],
                                                                                      '\n        Add the data to the StringIO file.\n        '),
                                                                                     ('file_complete',
                                                                                      ['file_size'],
                                                                                      "\n        Return a file object if we're activated.\n        ")],
                                                                         'properties': ['activated',
                                                                                        'file']},
             'django.core.files.uploadhandler.SkipFile': {'bases': ['django.core.files.uploadhandler.UploadFileException'],
                                                          'constructor': [],
                                                          'docstring': '\n    This exception is raised by an upload handler that wants to skip a given file.\n    ',
                                                          'methods': [],
                                                          'properties': []},
             'django.core.files.uploadhandler.StopFutureHandlers': {'bases': ['django.core.files.uploadhandler.UploadFileException'],
                                                                    'constructor': [],
                                                                    'docstring': '\n    Upload handers that have handled a file and do not want future handlers to\n    run should raise this exception instead of returning None.\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.core.files.uploadhandler.StopUpload': {'bases': ['django.core.files.uploadhandler.UploadFileException'],
                                                            'constructor': ['connection_reset=False'],
                                                            'docstring': '\n    This exception is raised when an upload must abort.\n    ',
                                                            'methods': [('__unicode__', [], '')],
                                                            'properties': ['connection_reset']},
             'django.core.files.uploadhandler.TemporaryFileUploadHandler': {'bases': ['django.core.files.uploadhandler.FileUploadHandler'],
                                                                            'constructor': ['*args',
                                                                                            '**kwargs'],
                                                                            'docstring': '\n    Upload handler that streams data into a temporary file.\n    ',
                                                                            'methods': [('new_file',
                                                                                         ['file_name',
                                                                                          '*args',
                                                                                          '**kwargs'],
                                                                                         '\n        Create the file object to append to as data is coming in.\n        '),
                                                                                        ('receive_data_chunk',
                                                                                         ['raw_data',
                                                                                          'start'],
                                                                                         ''),
                                                                                        ('file_complete',
                                                                                         ['file_size'],
                                                                                         '')],
                                                                            'properties': ['file']},
             'django.core.files.uploadhandler.UploadFileException': {'bases': ['Exception'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    Any error having to do with uploading files.\n    ',
                                                                     'methods': [],
                                                                     'properties': []},
             'django.core.files.utils.FileProxyMixin': {'bases': ['object'],
                                                        'constructor': [],
                                                        'docstring': '\n    A mixin class used to forward file methods to an underlaying file\n    object.  The internal file object has to be called "file"::\n\n        class FileProxy(FileProxyMixin):\n            def __init__(self, file):\n                self.file = file\n    ',
                                                        'methods': [('__iter__', [], '')],
                                                        'properties': ['encoding',
                                                                       'fileno',
                                                                       'flush',
                                                                       'isatty',
                                                                       'newlines',
                                                                       'read',
                                                                       'readinto',
                                                                       'readline',
                                                                       'readlines',
                                                                       'seek',
                                                                       'softspace',
                                                                       'tell',
                                                                       'truncate',
                                                                       'write',
                                                                       'writelines',
                                                                       'xreadlines']},
             'django.core.handlers.base.BaseHandler': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('load_middleware',
                                                                    [],
                                                                    '\n        Populate middleware lists from settings.MIDDLEWARE_CLASSES.\n\n        Must be called after the environment is fixed (see __call__).\n        '),
                                                                   ('get_response',
                                                                    ['request'],
                                                                    'Returns an HttpResponse object for the given HttpRequest'),
                                                                   ('handle_uncaught_exception',
                                                                    ['request',
                                                                     'resolver',
                                                                     'exc_info'],
                                                                    '\n        Processing for any otherwise uncaught exceptions (those that will\n        generate HTTP 500 responses). Can be overridden by subclasses who want\n        customised 500 handling.\n\n        Be *very* careful when overriding this because the error could be\n        caused by anything, so assuming something like the database is always\n        available would be an error.\n        '),
                                                                   ('apply_response_fixes',
                                                                    ['request', 'response'],
                                                                    '\n        Applies each of the functions in self.response_fixes to the request and\n        response, modifying the response in the process. Returns the new\n        response.\n        ')],
                                                       'properties': ['response_fixes',
                                                                      '_request_middleware',
                                                                      '_view_middleware',
                                                                      '_response_middleware',
                                                                      '_exception_middleware',
                                                                      '_template_response_middleware']},
             'django.core.handlers.modpython.ModPythonHandler': {'bases': ['django.core.handlers.base.BaseHandler'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('__call__',
                                                                              ['req'],
                                                                              '')],
                                                                 'properties': ['request_class']},
             'django.core.handlers.modpython.ModPythonRequest': {'bases': ['django.http.HttpRequest'],
                                                                 'constructor': ['req'],
                                                                 'docstring': '',
                                                                 'methods': [('__repr__',
                                                                              [],
                                                                              ''),
                                                                             ('get_full_path',
                                                                              [],
                                                                              ''),
                                                                             ('is_secure',
                                                                              [],
                                                                              ''),
                                                                             ('_get_request',
                                                                              [],
                                                                              ''),
                                                                             ('_get_get',
                                                                              [],
                                                                              ''),
                                                                             ('_set_get',
                                                                              ['get'],
                                                                              ''),
                                                                             ('_get_post',
                                                                              [],
                                                                              ''),
                                                                             ('_set_post',
                                                                              ['post'],
                                                                              ''),
                                                                             ('_get_cookies',
                                                                              [],
                                                                              ''),
                                                                             ('_set_cookies',
                                                                              ['cookies'],
                                                                              ''),
                                                                             ('_get_files',
                                                                              [],
                                                                              ''),
                                                                             ('_get_meta',
                                                                              [],
                                                                              'Lazy loader that returns self.META dictionary'),
                                                                             ('_get_method',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['_req',
                                                                                'path',
                                                                                'django_root',
                                                                                'path_info',
                                                                                '_post_parse_error',
                                                                                '_stream',
                                                                                '_read_started',
                                                                                '_request',
                                                                                '_get',
                                                                                '_post',
                                                                                '_cookies',
                                                                                '_meta',
                                                                                'GET',
                                                                                'POST',
                                                                                'COOKIES',
                                                                                'FILES',
                                                                                'META',
                                                                                'REQUEST',
                                                                                'method']},
             'django.core.handlers.wsgi.LimitedStream': {'bases': ['object'],
                                                         'constructor': ['stream',
                                                                         'limit',
                                                                         'buf_size=64*1024*1024'],
                                                         'docstring': '\n    LimitedStream wraps another stream in order to not allow reading from it\n    past specified amount of bytes.\n    ',
                                                         'methods': [('_read_limited',
                                                                      ['size=None'],
                                                                      ''),
                                                                     ('read',
                                                                      ['size=None'],
                                                                      ''),
                                                                     ('readline',
                                                                      ['size=None'],
                                                                      '')],
                                                         'properties': ['stream',
                                                                        'remaining',
                                                                        'buffer',
                                                                        'buf_size']},
             'django.core.handlers.wsgi.WSGIHandler': {'bases': ['django.core.handlers.base.BaseHandler'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('__call__',
                                                                    ['environ',
                                                                     'start_response'],
                                                                    '')],
                                                       'properties': ['initLock',
                                                                      'request_class',
                                                                      '_request_middleware']},
             'django.core.handlers.wsgi.WSGIRequest': {'bases': ['django.http.HttpRequest'],
                                                       'constructor': ['environ'],
                                                       'docstring': '',
                                                       'methods': [('__repr__', [], ''),
                                                                   ('get_full_path', [], ''),
                                                                   ('is_secure', [], ''),
                                                                   ('_get_request', [], ''),
                                                                   ('_get_get', [], ''),
                                                                   ('_set_get', ['get'], ''),
                                                                   ('_get_post', [], ''),
                                                                   ('_set_post', ['post'], ''),
                                                                   ('_get_cookies', [], ''),
                                                                   ('_set_cookies',
                                                                    ['cookies'],
                                                                    ''),
                                                                   ('_get_files', [], '')],
                                                       'properties': ['environ',
                                                                      'path_info',
                                                                      'path',
                                                                      'META',
                                                                      'method',
                                                                      '_post_parse_error',
                                                                      '_stream',
                                                                      '_read_started',
                                                                      '_request',
                                                                      '_get',
                                                                      '_post',
                                                                      '_cookies',
                                                                      'GET',
                                                                      'POST',
                                                                      'COOKIES',
                                                                      'FILES',
                                                                      'REQUEST']},
             'django.core.mail.SMTPConnection': {'bases': ['django.core.mail.backends.smtp.EmailBackend'],
                                                 'constructor': ['*args', '**kwds'],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'django.core.mail.backends.base.BaseEmailBackend': {'bases': ['object'],
                                                                 'constructor': ['fail_silently=False',
                                                                                 '**kwargs'],
                                                                 'docstring': '\n    Base class for email backend implementations.\n\n    Subclasses must at least overwrite send_messages().\n    ',
                                                                 'methods': [('open',
                                                                              [],
                                                                              "Open a network connection.\n\n        This method can be overwritten by backend implementations to\n        open a network connection.\n\n        It's up to the backend implementation to track the status of\n        a network connection if it's needed by the backend.\n\n        This method can be called by applications to force a single\n        network connection to be used when sending mails. See the\n        send_messages() method of the SMTP backend for a reference\n        implementation.\n\n        The default implementation does nothing.\n        "),
                                                                             ('close',
                                                                              [],
                                                                              'Close a network connection.'),
                                                                             ('send_messages',
                                                                              ['email_messages'],
                                                                              '\n        Sends one or more EmailMessage objects and returns the number of email\n        messages sent.\n        ')],
                                                                 'properties': ['fail_silently']},
             'django.core.mail.backends.console.EmailBackend': {'bases': ['django.core.mail.backends.base.BaseEmailBackend'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': '',
                                                                'methods': [('send_messages',
                                                                             ['email_messages'],
                                                                             'Write all messages to the stream in a thread-safe way.')],
                                                                'properties': ['stream',
                                                                               '_lock']},
             'django.core.mail.backends.dummy.EmailBackend': {'bases': ['django.core.mail.backends.base.BaseEmailBackend'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('send_messages',
                                                                           ['email_messages'],
                                                                           '')],
                                                              'properties': []},
             'django.core.mail.backends.filebased.EmailBackend': {'bases': ['django.core.mail.backends.console.EmailBackend'],
                                                                  'constructor': ['*args',
                                                                                  '**kwargs'],
                                                                  'docstring': '',
                                                                  'methods': [('_get_filename',
                                                                               [],
                                                                               'Return a unique file name.'),
                                                                              ('open', [], ''),
                                                                              ('close', [], '')],
                                                                  'properties': ['_fname',
                                                                                 'file_path',
                                                                                 'stream']},
             'django.core.mail.backends.locmem.EmailBackend': {'bases': ['django.core.mail.backends.base.BaseEmailBackend'],
                                                               'constructor': ['*args',
                                                                               '**kwargs'],
                                                               'docstring': 'A email backend for use during test sessions.\n\n    The test connection stores email messages in a dummy outbox,\n    rather than sending them out on the wire.\n\n    The dummy outbox is accessible through the outbox instance attribute.\n    ',
                                                               'methods': [('send_messages',
                                                                            ['messages'],
                                                                            'Redirect messages to the dummy outbox')],
                                                               'properties': []},
             'django.core.mail.backends.smtp.EmailBackend': {'bases': ['django.core.mail.backends.base.BaseEmailBackend'],
                                                             'constructor': ['host=None',
                                                                             'port=None',
                                                                             'username=None',
                                                                             'password=None',
                                                                             'use_tls=None',
                                                                             'fail_silently=False',
                                                                             '**kwargs'],
                                                             'docstring': '\n    A wrapper that manages the SMTP network connection.\n    ',
                                                             'methods': [('open',
                                                                          [],
                                                                          '\n        Ensures we have a connection to the email server. Returns whether or\n        not a new connection was required (True or False).\n        '),
                                                                         ('close',
                                                                          [],
                                                                          'Closes the connection to the email server.'),
                                                                         ('send_messages',
                                                                          ['email_messages'],
                                                                          '\n        Sends one or more EmailMessage objects and returns the number of email\n        messages sent.\n        '),
                                                                         ('_send',
                                                                          ['email_message'],
                                                                          'A helper method that does the actual sending.')],
                                                             'properties': ['host',
                                                                            'port',
                                                                            'username',
                                                                            'password',
                                                                            'use_tls',
                                                                            'connection',
                                                                            '_lock']},
             'django.core.mail.message.BadHeaderError': {'bases': ['ValueError'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'django.core.mail.message.EmailMessage': {'bases': ['object'],
                                                       'constructor': ["subject=''",
                                                                       "body=''",
                                                                       'from_email=None',
                                                                       'to=None',
                                                                       'bcc=None',
                                                                       'connection=None',
                                                                       'attachments=None',
                                                                       'headers=None',
                                                                       'cc=None'],
                                                       'docstring': '\n    A container for email information.\n    ',
                                                       'methods': [('get_connection',
                                                                    ['fail_silently=False'],
                                                                    ''),
                                                                   ('message', [], ''),
                                                                   ('recipients',
                                                                    [],
                                                                    '\n        Returns a list of all recipients of the email (includes direct\n        addressees as well as Cc and Bcc entries).\n        '),
                                                                   ('send',
                                                                    ['fail_silently=False'],
                                                                    'Sends the email message.'),
                                                                   ('attach',
                                                                    ['filename=None',
                                                                     'content=None',
                                                                     'mimetype=None'],
                                                                    '\n        Attaches a file with the given filename and content. The filename can\n        be omitted and the mimetype is guessed, if not provided.\n\n        If the first parameter is a MIMEBase subclass it is inserted directly\n        into the resulting message attachments.\n        '),
                                                                   ('attach_file',
                                                                    ['path', 'mimetype=None'],
                                                                    'Attaches a file from the filesystem.'),
                                                                   ('_create_message',
                                                                    ['msg'],
                                                                    ''),
                                                                   ('_create_attachments',
                                                                    ['msg'],
                                                                    ''),
                                                                   ('_create_mime_attachment',
                                                                    ['content', 'mimetype'],
                                                                    '\n        Converts the content, mimetype pair into a MIME attachment object.\n        '),
                                                                   ('_create_attachment',
                                                                    ['filename',
                                                                     'content',
                                                                     'mimetype=None'],
                                                                    '\n        Converts the filename, content, mimetype triple into a MIME attachment\n        object.\n        ')],
                                                       'properties': ['content_subtype',
                                                                      'mixed_subtype',
                                                                      'encoding',
                                                                      'to',
                                                                      'cc',
                                                                      'bcc',
                                                                      'from_email',
                                                                      'subject',
                                                                      'body',
                                                                      'attachments',
                                                                      'extra_headers',
                                                                      'connection']},
             'django.core.mail.message.EmailMultiAlternatives': {'bases': ['django.core.mail.message.EmailMessage'],
                                                                 'constructor': ["subject=''",
                                                                                 "body=''",
                                                                                 'from_email=None',
                                                                                 'to=None',
                                                                                 'bcc=None',
                                                                                 'connection=None',
                                                                                 'attachments=None',
                                                                                 'headers=None',
                                                                                 'alternatives=None',
                                                                                 'cc=None'],
                                                                 'docstring': '\n    A version of EmailMessage that makes it easy to send multipart/alternative\n    messages. For example, including text and HTML versions of the text is\n    made easier.\n    ',
                                                                 'methods': [('attach_alternative',
                                                                              ['content',
                                                                               'mimetype'],
                                                                              'Attach an alternative content representation.'),
                                                                             ('_create_message',
                                                                              ['msg'],
                                                                              ''),
                                                                             ('_create_alternatives',
                                                                              ['msg'],
                                                                              '')],
                                                                 'properties': ['alternative_subtype',
                                                                                'alternatives']},
             'django.core.mail.message.SafeMIMEMultipart': {'bases': ['email.MIMEMultipart.MIMEMultipart'],
                                                            'constructor': ["_subtype='mixed'",
                                                                            'boundary=None',
                                                                            '_subparts=None',
                                                                            'encoding=None',
                                                                            '**_params'],
                                                            'docstring': '',
                                                            'methods': [('__setitem__',
                                                                         ['name', 'val'],
                                                                         ''),
                                                                        ('as_string',
                                                                         ['unixfrom=False'],
                                                                         "Return the entire formatted message as a string.\n        Optional `unixfrom' when True, means include the Unix From_ envelope\n        header.\n\n        This overrides the default as_string() implementation to not mangle\n        lines that begin with 'From '. See bug #13433 for details.\n        ")],
                                                            'properties': ['encoding']},
             'django.core.mail.message.SafeMIMEText': {'bases': ['email.MIMEText.MIMEText'],
                                                       'constructor': ['text',
                                                                       'subtype',
                                                                       'charset'],
                                                       'docstring': '',
                                                       'methods': [('__setitem__',
                                                                    ['name', 'val'],
                                                                    ''),
                                                                   ('as_string',
                                                                    ['unixfrom=False'],
                                                                    "Return the entire formatted message as a string.\n        Optional `unixfrom' when True, means include the Unix From_ envelope\n        header.\n\n        This overrides the default as_string() implementation to not mangle\n        lines that begin with 'From '. See bug #13433 for details.\n        ")],
                                                       'properties': ['encoding']},
             'django.core.mail.utils.CachedDnsName': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('__str__', [], ''),
                                                                  ('get_fqdn', [], '')],
                                                      'properties': ['_fqdn']},
             'django.core.management.LaxOptionParser': {'bases': ['optparse.OptionParser'],
                                                        'constructor': [],
                                                        'docstring': "\n    An option parser that doesn't raise any errors on unknown options.\n\n    This is needed because the --settings and --pythonpath options affect\n    the commands (and thus the options) that are available to the user.\n    ",
                                                        'methods': [('error', ['msg'], ''),
                                                                    ('print_help',
                                                                     [],
                                                                     "Output nothing.\n\n        The lax options are included in the normal option parser, so under\n        normal usage, we don't need to print the lax options.\n        "),
                                                                    ('print_lax_help',
                                                                     [],
                                                                     'Output the basic options available to every command.\n\n        This just redirects to the default print_help() behaviour.\n        '),
                                                                    ('_process_args',
                                                                     ['largs',
                                                                      'rargs',
                                                                      'values'],
                                                                     '\n        Overrides OptionParser._process_args to exclusively handle default\n        options and ignore args and other options.\n\n        This overrides the behavior of the super class, which stop parsing\n        at the first unrecognized option.\n        ')],
                                                        'properties': []},
             'django.core.management.ManagementUtility': {'bases': ['object'],
                                                          'constructor': ['argv=None'],
                                                          'docstring': '\n    Encapsulates the logic of the django-admin.py and manage.py utilities.\n\n    A ManagementUtility has a number of commands, which can be manipulated\n    by editing the self.commands dictionary.\n    ',
                                                          'methods': [('main_help_text',
                                                                       [],
                                                                       "\n        Returns the script's main help text, as a string.\n        "),
                                                                      ('fetch_command',
                                                                       ['subcommand'],
                                                                       '\n        Tries to fetch the given subcommand, printing a message with the\n        appropriate command called from the command line (usually\n        "django-admin.py" or "manage.py") if it can\'t be found.\n        '),
                                                                      ('autocomplete',
                                                                       [],
                                                                       "\n        Output completion suggestions for BASH.\n\n        The output of this function is passed to BASH's `COMREPLY` variable and\n        treated as completion suggestions. `COMREPLY` expects a space\n        separated string as the result.\n\n        The `COMP_WORDS` and `COMP_CWORD` BASH environment variables are used\n        to get information about the cli input. Please refer to the BASH\n        man-page for more information about this variables.\n\n        Subcommand options are saved as pairs. A pair consists of\n        the long option string (e.g. '--exclude') and a boolean\n        value indicating if the option requires arguments. When printing to\n        stdout, a equal sign is appended to options which require arguments.\n\n        Note: If debugging this function, it is recommended to write the debug\n        output in a separate file. Otherwise the debug output will be treated\n        and formatted as potential completion suggestions.\n        "),
                                                                      ('execute',
                                                                       [],
                                                                       '\n        Given the command-line arguments, this figures out which subcommand is\n        being run, creates a parser appropriate to that command, and runs it.\n        ')],
                                                          'properties': ['argv', 'prog_name']},
             'django.core.management.base.AppCommand': {'bases': ['django.core.management.base.BaseCommand'],
                                                        'constructor': [],
                                                        'docstring': '\n    A management command which takes one or more installed application\n    names as arguments, and does something with each of them.\n\n    Rather than implementing ``handle()``, subclasses must implement\n    ``handle_app()``, which will be called once for each application.\n\n    ',
                                                        'methods': [('handle',
                                                                     ['*app_labels',
                                                                      '**options'],
                                                                     ''),
                                                                    ('handle_app',
                                                                     ['app', '**options'],
                                                                     "\n        Perform the command's actions for ``app``, which will be the\n        Python module corresponding to an application name given on\n        the command line.\n\n        ")],
                                                        'properties': ['args']},
             'django.core.management.base.BaseCommand': {'bases': ['object'],
                                                         'constructor': [],
                                                         'docstring': "\n    The base class from which all management commands ultimately\n    derive.\n\n    Use this class if you want access to all of the mechanisms which\n    parse the command-line arguments and work out what code to call in\n    response; if you don't need to change any of that behavior,\n    consider using one of the subclasses defined in this file.\n\n    If you are interested in overriding/customizing various aspects of\n    the command-parsing and -execution behavior, the normal flow works\n    as follows:\n\n    1. ``django-admin.py`` or ``manage.py`` loads the command class\n       and calls its ``run_from_argv()`` method.\n\n    2. The ``run_from_argv()`` method calls ``create_parser()`` to get\n       an ``OptionParser`` for the arguments, parses them, performs\n       any environment changes requested by options like\n       ``pythonpath``, and then calls the ``execute()`` method,\n       passing the parsed arguments.\n\n    3. The ``execute()`` method attempts to carry out the command by\n       calling the ``handle()`` method with the parsed arguments; any\n       output produced by ``handle()`` will be printed to standard\n       output and, if the command is intended to produce a block of\n       SQL statements, will be wrapped in ``BEGIN`` and ``COMMIT``.\n\n    4. If ``handle()`` raised a ``CommandError``, ``execute()`` will\n       instead print an error message to ``stderr``.\n\n    Thus, the ``handle()`` method is typically the starting point for\n    subclasses; many built-in commands and command types either place\n    all of their logic in ``handle()``, or perform some additional\n    parsing work in ``handle()`` and then delegate from it to more\n    specialized methods as needed.\n\n    Several attributes affect behavior at various steps along the way:\n\n    ``args``\n        A string listing the arguments accepted by the command,\n        suitable for use in help messages; e.g., a command which takes\n        a list of application names might set this to '<appname\n        appname ...>'.\n\n    ``can_import_settings``\n        A boolean indicating whether the command needs to be able to\n        import Django settings; if ``True``, ``execute()`` will verify\n        that this is possible before proceeding. Default value is\n        ``True``.\n\n    ``help``\n        A short description of the command, which will be printed in\n        help messages.\n\n    ``option_list``\n        This is the list of ``optparse`` options which will be fed\n        into the command's ``OptionParser`` for parsing arguments.\n\n    ``output_transaction``\n        A boolean indicating whether the command outputs SQL\n        statements; if ``True``, the output will automatically be\n        wrapped with ``BEGIN;`` and ``COMMIT;``. Default value is\n        ``False``.\n\n    ``requires_model_validation``\n        A boolean; if ``True``, validation of installed models will be\n        performed prior to executing the command. Default value is\n        ``True``. To validate an individual application's models\n        rather than all applications' models, call\n        ``self.validate(app)`` from ``handle()``, where ``app`` is the\n        application's Python module.\n\n    ",
                                                         'methods': [('get_version',
                                                                      [],
                                                                      '\n        Return the Django version, which should be correct for all\n        built-in Django commands. User-supplied commands should\n        override this method.\n\n        '),
                                                                     ('usage',
                                                                      ['subcommand'],
                                                                      '\n        Return a brief description of how to use this command, by\n        default from the attribute ``self.help``.\n\n        '),
                                                                     ('create_parser',
                                                                      ['prog_name',
                                                                       'subcommand'],
                                                                      '\n        Create and return the ``OptionParser`` which will be used to\n        parse the arguments to this command.\n\n        '),
                                                                     ('print_help',
                                                                      ['prog_name',
                                                                       'subcommand'],
                                                                      '\n        Print the help message for this command, derived from\n        ``self.usage()``.\n\n        '),
                                                                     ('run_from_argv',
                                                                      ['argv'],
                                                                      '\n        Set up any environment changes requested (e.g., Python path\n        and Django settings), then run this command.\n\n        '),
                                                                     ('execute',
                                                                      ['*args', '**options'],
                                                                      '\n        Try to execute this command, performing model validation if\n        needed (as controlled by the attribute\n        ``self.requires_model_validation``). If the command raises a\n        ``CommandError``, intercept it and print it sensibly to\n        stderr.\n\n        '),
                                                                     ('validate',
                                                                      ['app=None',
                                                                       'display_num_errors=False'],
                                                                      '\n        Validates the given app, raising CommandError for any errors.\n\n        If app is None, then this will validate all installed apps.\n\n        '),
                                                                     ('handle',
                                                                      ['*args', '**options'],
                                                                      '\n        The actual logic of the command. Subclasses must implement\n        this method.\n\n        ')],
                                                         'properties': ['option_list',
                                                                        'help',
                                                                        'args',
                                                                        'can_import_settings',
                                                                        'requires_model_validation',
                                                                        'output_transaction',
                                                                        'style',
                                                                        'stdout',
                                                                        'stderr']},
             'django.core.management.base.CommandError': {'bases': ['Exception'],
                                                          'constructor': [],
                                                          'docstring': '\n    Exception class indicating a problem while executing a management\n    command.\n\n    If this exception is raised during the execution of a management\n    command, it will be caught and turned into a nicely-printed error\n    message to the appropriate output stream (i.e., stderr); as a\n    result, raising this exception (with a sensible description of the\n    error) is the preferred way to indicate that something has gone\n    wrong in the execution of a command.\n\n    ',
                                                          'methods': [],
                                                          'properties': []},
             'django.core.management.base.LabelCommand': {'bases': ['django.core.management.base.BaseCommand'],
                                                          'constructor': [],
                                                          'docstring': '\n    A management command which takes one or more arbitrary arguments\n    (labels) on the command line, and does something with each of\n    them.\n\n    Rather than implementing ``handle()``, subclasses must implement\n    ``handle_label()``, which will be called once for each label.\n\n    If the arguments should be names of installed applications, use\n    ``AppCommand`` instead.\n\n    ',
                                                          'methods': [('handle',
                                                                       ['*labels',
                                                                        '**options'],
                                                                       ''),
                                                                      ('handle_label',
                                                                       ['label', '**options'],
                                                                       "\n        Perform the command's actions for ``label``, which will be the\n        string as given on the command line.\n\n        ")],
                                                          'properties': ['args', 'label']},
             'django.core.management.base.NoArgsCommand': {'bases': ['django.core.management.base.BaseCommand'],
                                                           'constructor': [],
                                                           'docstring': '\n    A command which takes no arguments on the command line.\n\n    Rather than implementing ``handle()``, subclasses must implement\n    ``handle_noargs()``; ``handle()`` itself is overridden to ensure\n    no arguments are passed to the command.\n\n    Attempting to pass arguments will raise ``CommandError``.\n\n    ',
                                                           'methods': [('handle',
                                                                        ['*args', '**options'],
                                                                        ''),
                                                                       ('handle_noargs',
                                                                        ['**options'],
                                                                        "\n        Perform this command's actions.\n\n        ")],
                                                           'properties': ['args']},
             'django.core.management.commands.cleanup.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('handle_noargs',
                                                                              ['**options'],
                                                                              '')],
                                                                 'properties': ['help']},
             'django.core.management.commands.compilemessages.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('handle',
                                                                                      ['**options'],
                                                                                      '')],
                                                                         'properties': ['option_list',
                                                                                        'help',
                                                                                        'requires_model_validation',
                                                                                        'can_import_settings']},
             'django.core.management.commands.createcachetable.Command': {'bases': ['django.core.management.base.LabelCommand'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [('handle_label',
                                                                                       ['tablename',
                                                                                        '**options'],
                                                                                       '')],
                                                                          'properties': ['help',
                                                                                         'args',
                                                                                         'label',
                                                                                         'option_list',
                                                                                         'requires_model_validation']},
             'django.core.management.commands.dbshell.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('handle',
                                                                              ['**options'],
                                                                              '')],
                                                                 'properties': ['help',
                                                                                'option_list',
                                                                                'requires_model_validation']},
             'django.core.management.commands.diffsettings.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('handle_noargs',
                                                                                   ['**options'],
                                                                                   '')],
                                                                      'properties': ['help',
                                                                                     'requires_model_validation']},
             'django.core.management.commands.dumpdata.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('handle',
                                                                               ['*app_labels',
                                                                                '**options'],
                                                                               '')],
                                                                  'properties': ['option_list',
                                                                                 'help',
                                                                                 'args']},
             'django.core.management.commands.flush.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('handle_noargs',
                                                                            ['**options'],
                                                                            '')],
                                                               'properties': ['option_list',
                                                                              'help',
                                                                              'style']},
             'django.core.management.commands.inspectdb.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('handle_noargs',
                                                                                ['**options'],
                                                                                ''),
                                                                               ('handle_inspection',
                                                                                ['options'],
                                                                                ''),
                                                                               ('get_field_type',
                                                                                ['connection',
                                                                                 'table_name',
                                                                                 'row'],
                                                                                '\n        Given the database connection, the table name, and the cursor row\n        description, this routine will return the given field type name, as\n        well as any additional keyword parameters and notes for the field.\n        '),
                                                                               ('get_meta',
                                                                                ['table_name'],
                                                                                '\n        Return a sequence comprising the lines of code necessary\n        to construct the inner Meta class for the model corresponding\n        to the given database table name.\n        ')],
                                                                   'properties': ['help',
                                                                                  'option_list',
                                                                                  'requires_model_validation',
                                                                                  'db_module']},
             'django.core.management.commands.loaddata.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('handle',
                                                                               ['*fixture_labels',
                                                                                '**options'],
                                                                               '')],
                                                                  'properties': ['help',
                                                                                 'args',
                                                                                 'option_list',
                                                                                 'style']},
             'django.core.management.commands.makemessages.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('handle_noargs',
                                                                                   ['*args',
                                                                                    '**options'],
                                                                                   '')],
                                                                      'properties': ['option_list',
                                                                                     'help',
                                                                                     'requires_model_validation',
                                                                                     'can_import_settings']},
             'django.core.management.commands.reset.Command': {'bases': ['django.core.management.base.AppCommand'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('handle_app',
                                                                            ['app',
                                                                             '**options'],
                                                                            '')],
                                                               'properties': ['option_list',
                                                                              'help',
                                                                              'args',
                                                                              'output_transaction',
                                                                              'style']},
             'django.core.management.commands.runfcgi.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('handle',
                                                                              ['*args',
                                                                               '**options'],
                                                                              ''),
                                                                             ('usage',
                                                                              ['subcommand'],
                                                                              '')],
                                                                 'properties': ['help', 'args']},
             'django.core.management.commands.runserver.BaseRunserverCommand': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('get_handler',
                                                                                             ['*args',
                                                                                              '**options'],
                                                                                             '\n        Returns the default WSGI handler for the runner.\n        '),
                                                                                            ('handle',
                                                                                             ["addrport=''",
                                                                                              '*args',
                                                                                              '**options'],
                                                                                             ''),
                                                                                            ('run',
                                                                                             ['*args',
                                                                                              '**options'],
                                                                                             '\n        Runs the server, using the autoreloader if needed\n        '),
                                                                                            ('inner_run',
                                                                                             ['*args',
                                                                                              '**options'],
                                                                                             '')],
                                                                                'properties': ['option_list',
                                                                                               'help',
                                                                                               'args',
                                                                                               'requires_model_validation',
                                                                                               'use_ipv6',
                                                                                               '_raw_ipv6',
                                                                                               'addr',
                                                                                               'port']},
             'django.core.management.commands.runserver.Command': {'bases': ['django.core.management.commands.runserver.BaseRunserverCommand'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('get_handler',
                                                                                ['*args',
                                                                                 '**options'],
                                                                                '\n        Serves admin media like old-school (deprecation pending).\n        ')],
                                                                   'properties': ['option_list']},
             'django.core.management.commands.shell.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('ipython', [], ''),
                                                                           ('bpython', [], ''),
                                                                           ('run_shell',
                                                                            [],
                                                                            ''),
                                                                           ('handle_noargs',
                                                                            ['**options'],
                                                                            '')],
                                                               'properties': ['option_list',
                                                                              'help',
                                                                              'shells',
                                                                              'requires_model_validation']},
             'django.core.management.commands.sql.Command': {'bases': ['django.core.management.base.AppCommand'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('handle_app',
                                                                          ['app', '**options'],
                                                                          '')],
                                                             'properties': ['help',
                                                                            'option_list',
                                                                            'output_transaction']},
             'django.core.management.commands.sqlall.Command': {'bases': ['django.core.management.base.AppCommand'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('handle_app',
                                                                             ['app',
                                                                              '**options'],
                                                                             '')],
                                                                'properties': ['help',
                                                                               'option_list',
                                                                               'output_transaction']},
             'django.core.management.commands.sqlclear.Command': {'bases': ['django.core.management.base.AppCommand'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('handle_app',
                                                                               ['app',
                                                                                '**options'],
                                                                               '')],
                                                                  'properties': ['help',
                                                                                 'option_list',
                                                                                 'output_transaction']},
             'django.core.management.commands.sqlcustom.Command': {'bases': ['django.core.management.base.AppCommand'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('handle_app',
                                                                                ['app',
                                                                                 '**options'],
                                                                                '')],
                                                                   'properties': ['help',
                                                                                  'option_list',
                                                                                  'output_transaction']},
             'django.core.management.commands.sqlflush.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('handle_noargs',
                                                                               ['**options'],
                                                                               '')],
                                                                  'properties': ['help',
                                                                                 'option_list',
                                                                                 'output_transaction']},
             'django.core.management.commands.sqlindexes.Command': {'bases': ['django.core.management.base.AppCommand'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('handle_app',
                                                                                 ['app',
                                                                                  '**options'],
                                                                                 '')],
                                                                    'properties': ['help',
                                                                                   'option_list',
                                                                                   'output_transaction']},
             'django.core.management.commands.sqlinitialdata.Command': {'bases': ['django.core.management.base.AppCommand'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('handle',
                                                                                     ['*apps',
                                                                                      '**options'],
                                                                                     '')],
                                                                        'properties': ['help']},
             'django.core.management.commands.sqlreset.Command': {'bases': ['django.core.management.base.AppCommand'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('handle_app',
                                                                               ['app',
                                                                                '**options'],
                                                                               '')],
                                                                  'properties': ['help',
                                                                                 'option_list',
                                                                                 'output_transaction']},
             'django.core.management.commands.sqlsequencereset.Command': {'bases': ['django.core.management.base.AppCommand'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [('handle_app',
                                                                                       ['app',
                                                                                        '**options'],
                                                                                       '')],
                                                                          'properties': ['help',
                                                                                         'option_list',
                                                                                         'output_transaction']},
             'django.core.management.commands.startapp.Command': {'bases': ['django.core.management.base.LabelCommand'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('handle_label',
                                                                               ['app_name',
                                                                                'directory=None',
                                                                                '**options'],
                                                                               '')],
                                                                  'properties': ['help',
                                                                                 'args',
                                                                                 'label',
                                                                                 'requires_model_validation',
                                                                                 'can_import_settings']},
             'django.core.management.commands.startapp.ProjectCommand': {'bases': ['django.core.management.commands.startapp.Command'],
                                                                         'constructor': ['project_directory'],
                                                                         'docstring': '',
                                                                         'methods': [('handle_label',
                                                                                      ['app_name',
                                                                                       '**options'],
                                                                                      '')],
                                                                         'properties': ['help',
                                                                                        'project_directory']},
             'django.core.management.commands.startproject.Command': {'bases': ['django.core.management.base.LabelCommand'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('handle_label',
                                                                                   ['project_name',
                                                                                    '**options'],
                                                                                   '')],
                                                                      'properties': ['help',
                                                                                     'args',
                                                                                     'label',
                                                                                     'requires_model_validation',
                                                                                     'can_import_settings']},
             'django.core.management.commands.syncdb.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('handle_noargs',
                                                                             ['**options'],
                                                                             '')],
                                                                'properties': ['option_list',
                                                                               'help',
                                                                               'style']},
             'django.core.management.commands.test.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('handle',
                                                                           ['*test_labels',
                                                                            '**options'],
                                                                           '')],
                                                              'properties': ['option_list',
                                                                             'help',
                                                                             'args',
                                                                             'requires_model_validation']},
             'django.core.management.commands.testserver.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('handle',
                                                                                 ['*fixture_labels',
                                                                                  '**options'],
                                                                                 '')],
                                                                    'properties': ['option_list',
                                                                                   'help',
                                                                                   'args',
                                                                                   'requires_model_validation']},
             'django.core.management.commands.validate.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('handle_noargs',
                                                                               ['**options'],
                                                                               '')],
                                                                  'properties': ['help',
                                                                                 'requires_model_validation']},
             'django.core.management.validation.ModelErrorCollection': {'bases': [],
                                                                        'constructor': ['outfile=sys.stdout'],
                                                                        'docstring': '',
                                                                        'methods': [('add',
                                                                                     ['context',
                                                                                      'error'],
                                                                                     '')],
                                                                        'properties': ['errors',
                                                                                       'outfile',
                                                                                       'style']},
             'django.core.paginator.EmptyPage': {'bases': ['django.core.paginator.InvalidPage'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'django.core.paginator.InvalidPage': {'bases': ['Exception'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'django.core.paginator.Page': {'bases': ['object'],
                                            'constructor': ['object_list',
                                                            'number',
                                                            'paginator'],
                                            'docstring': '',
                                            'methods': [('__repr__', [], ''),
                                                        ('has_next', [], ''),
                                                        ('has_previous', [], ''),
                                                        ('has_other_pages', [], ''),
                                                        ('next_page_number', [], ''),
                                                        ('previous_page_number', [], ''),
                                                        ('start_index',
                                                         [],
                                                         '\n        Returns the 1-based index of the first object on this page,\n        relative to total objects in the paginator.\n        '),
                                                        ('end_index',
                                                         [],
                                                         '\n        Returns the 1-based index of the last object on this page,\n        relative to total objects found (hits).\n        ')],
                                            'properties': ['object_list', 'number', 'paginator']},
             'django.core.paginator.PageNotAnInteger': {'bases': ['django.core.paginator.InvalidPage'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'django.core.paginator.Paginator': {'bases': ['object'],
                                                 'constructor': ['object_list',
                                                                 'per_page',
                                                                 'orphans=0',
                                                                 'allow_empty_first_page=True'],
                                                 'docstring': '',
                                                 'methods': [('validate_number',
                                                              ['number'],
                                                              'Validates the given 1-based page number.'),
                                                             ('page',
                                                              ['number'],
                                                              'Returns a Page object for the given 1-based page number.'),
                                                             ('_get_count',
                                                              [],
                                                              'Returns the total number of objects, across all pages.'),
                                                             ('_get_num_pages',
                                                              [],
                                                              'Returns the total number of pages.'),
                                                             ('_get_page_range',
                                                              [],
                                                              '\n        Returns a 1-based range of pages for iterating through within\n        a template for loop.\n        ')],
                                                 'properties': ['object_list',
                                                                'per_page',
                                                                'orphans',
                                                                'allow_empty_first_page',
                                                                '_num_pages',
                                                                '_count',
                                                                'count',
                                                                'num_pages',
                                                                'page_range']},
             'django.core.serializers.base.DeserializationError': {'bases': ['Exception'],
                                                                   'constructor': [],
                                                                   'docstring': 'Something bad happened during deserialization.',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.core.serializers.base.DeserializedObject': {'bases': ['object'],
                                                                 'constructor': ['obj',
                                                                                 'm2m_data=None'],
                                                                 'docstring': '\n    A deserialized model.\n\n    Basically a container for holding the pre-saved deserialized data along\n    with the many-to-many data saved with the object.\n\n    Call ``save()`` to save the object (with the many-to-many data) to the\n    database; call ``save(save_m2m=False)`` to save just the object fields\n    (and not touch the many-to-many stuff.)\n    ',
                                                                 'methods': [('__repr__',
                                                                              [],
                                                                              ''),
                                                                             ('save',
                                                                              ['save_m2m=True',
                                                                               'using=None'],
                                                                              '')],
                                                                 'properties': ['object',
                                                                                'm2m_data']},
             'django.core.serializers.base.Deserializer': {'bases': ['object'],
                                                           'constructor': ['stream_or_string',
                                                                           '**options'],
                                                           'docstring': '\n    Abstract base deserializer class.\n    ',
                                                           'methods': [('__iter__', [], ''),
                                                                       ('next',
                                                                        [],
                                                                        'Iteration iterface -- return the next item in the stream')],
                                                           'properties': ['options', 'stream']},
             'django.core.serializers.base.SerializationError': {'bases': ['Exception'],
                                                                 'constructor': [],
                                                                 'docstring': 'Something bad happened during serialization.',
                                                                 'methods': [],
                                                                 'properties': []},
             'django.core.serializers.base.Serializer': {'bases': ['object'],
                                                         'constructor': [],
                                                         'docstring': '\n    Abstract serializer base class.\n    ',
                                                         'methods': [('serialize',
                                                                      ['queryset',
                                                                       '**options'],
                                                                      '\n        Serialize a queryset.\n        '),
                                                                     ('get_string_value',
                                                                      ['obj', 'field'],
                                                                      "\n        Convert a field's value to a string.\n        "),
                                                                     ('start_serialization',
                                                                      [],
                                                                      '\n        Called when serializing of the queryset starts.\n        '),
                                                                     ('end_serialization',
                                                                      [],
                                                                      '\n        Called when serializing of the queryset ends.\n        '),
                                                                     ('start_object',
                                                                      ['obj'],
                                                                      '\n        Called when serializing of an object starts.\n        '),
                                                                     ('end_object',
                                                                      ['obj'],
                                                                      '\n        Called when serializing of an object ends.\n        '),
                                                                     ('handle_field',
                                                                      ['obj', 'field'],
                                                                      '\n        Called to handle each individual (non-relational) field on an object.\n        '),
                                                                     ('handle_fk_field',
                                                                      ['obj', 'field'],
                                                                      '\n        Called to handle a ForeignKey field.\n        '),
                                                                     ('handle_m2m_field',
                                                                      ['obj', 'field'],
                                                                      '\n        Called to handle a ManyToManyField.\n        '),
                                                                     ('getvalue',
                                                                      [],
                                                                      '\n        Return the fully serialized queryset (or None if the output stream is\n        not seekable).\n        ')],
                                                         'properties': ['internal_use_only',
                                                                        'options',
                                                                        'stream',
                                                                        'selected_fields',
                                                                        'use_natural_keys']},
             'django.core.serializers.json.DjangoJSONEncoder': {'bases': ['django.utils.simplejson.JSONEncoder'],
                                                                'constructor': [],
                                                                'docstring': '\n    JSONEncoder subclass that knows how to encode date/time and decimal types.\n    ',
                                                                'methods': [('default',
                                                                             ['o'],
                                                                             '')],
                                                                'properties': ['DATE_FORMAT',
                                                                               'TIME_FORMAT']},
             'django.core.serializers.json.Serializer': {'bases': ['django.core.serializers.python.Serializer'],
                                                         'constructor': [],
                                                         'docstring': '\n    Convert a queryset to JSON.\n    ',
                                                         'methods': [('end_serialization',
                                                                      [],
                                                                      ''),
                                                                     ('getvalue', [], '')],
                                                         'properties': ['internal_use_only']},
             'django.core.serializers.python.Serializer': {'bases': ['django.core.serializers.base.Serializer'],
                                                           'constructor': [],
                                                           'docstring': '\n    Serializes a QuerySet to basic Python objects.\n    ',
                                                           'methods': [('start_serialization',
                                                                        [],
                                                                        ''),
                                                                       ('end_serialization',
                                                                        [],
                                                                        ''),
                                                                       ('start_object',
                                                                        ['obj'],
                                                                        ''),
                                                                       ('end_object',
                                                                        ['obj'],
                                                                        ''),
                                                                       ('handle_field',
                                                                        ['obj', 'field'],
                                                                        ''),
                                                                       ('handle_fk_field',
                                                                        ['obj', 'field'],
                                                                        ''),
                                                                       ('handle_m2m_field',
                                                                        ['obj', 'field'],
                                                                        ''),
                                                                       ('getvalue', [], '')],
                                                           'properties': ['internal_use_only',
                                                                          '_current',
                                                                          'objects']},
             'django.core.serializers.pyyaml.DjangoSafeDumper': {'bases': ['yaml.SafeDumper'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('represent_decimal',
                                                                              ['data'],
                                                                              '')],
                                                                 'properties': []},
             'django.core.serializers.pyyaml.Serializer': {'bases': ['django.core.serializers.python.Serializer'],
                                                           'constructor': [],
                                                           'docstring': '\n    Convert a queryset to YAML.\n    ',
                                                           'methods': [('handle_field',
                                                                        ['obj', 'field'],
                                                                        ''),
                                                                       ('end_serialization',
                                                                        [],
                                                                        ''),
                                                                       ('getvalue', [], '')],
                                                           'properties': ['internal_use_only']},
             'django.core.serializers.xml_serializer.Deserializer': {'bases': ['django.core.serializers.base.Deserializer'],
                                                                     'constructor': ['stream_or_string',
                                                                                     '**options'],
                                                                     'docstring': '\n    Deserialize XML.\n    ',
                                                                     'methods': [('next',
                                                                                  [],
                                                                                  ''),
                                                                                 ('_handle_object',
                                                                                  ['node'],
                                                                                  '\n        Convert an <object> node to a DeserializedObject.\n        '),
                                                                                 ('_handle_fk_field_node',
                                                                                  ['node',
                                                                                   'field'],
                                                                                  '\n        Handle a <field> node for a ForeignKey\n        '),
                                                                                 ('_handle_m2m_field_node',
                                                                                  ['node',
                                                                                   'field'],
                                                                                  '\n        Handle a <field> node for a ManyToManyField.\n        '),
                                                                                 ('_get_model_from_node',
                                                                                  ['node',
                                                                                   'attr'],
                                                                                  '\n        Helper to look up a model from a <object model=...> or a <field\n        rel=... to=...> node.\n        ')],
                                                                     'properties': ['event_stream',
                                                                                    'db']},
             'django.core.serializers.xml_serializer.Serializer': {'bases': ['django.core.serializers.base.Serializer'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    Serializes a QuerySet to XML.\n    ',
                                                                   'methods': [('indent',
                                                                                ['level'],
                                                                                ''),
                                                                               ('start_serialization',
                                                                                [],
                                                                                '\n        Start serialization -- open the XML document and the root element.\n        '),
                                                                               ('end_serialization',
                                                                                [],
                                                                                '\n        End serialization -- end the document.\n        '),
                                                                               ('start_object',
                                                                                ['obj'],
                                                                                '\n        Called as each object is handled.\n        '),
                                                                               ('end_object',
                                                                                ['obj'],
                                                                                '\n        Called after handling all fields for an object.\n        '),
                                                                               ('handle_field',
                                                                                ['obj',
                                                                                 'field'],
                                                                                '\n        Called to handle each field on an object (except for ForeignKeys and\n        ManyToManyFields)\n        '),
                                                                               ('handle_fk_field',
                                                                                ['obj',
                                                                                 'field'],
                                                                                '\n        Called to handle a ForeignKey (we need to treat them slightly\n        differently from regular fields).\n        '),
                                                                               ('handle_m2m_field',
                                                                                ['obj',
                                                                                 'field'],
                                                                                "\n        Called to handle a ManyToManyField. Related objects are only\n        serialized as references to the object's PK (i.e. the related *data*\n        is not dumped, just the relation).\n        "),
                                                                               ('_start_relational_field',
                                                                                ['field'],
                                                                                '\n        Helper to output the <field> element for relational fields\n        ')],
                                                                   'properties': ['xml']},
             'django.core.servers.basehttp.AdminMediaHandler': {'bases': ['django.contrib.staticfiles.handlers.StaticFilesHandler'],
                                                                'constructor': [],
                                                                'docstring': "\n    WSGI middleware that intercepts calls to the admin media directory, as\n    defined by the ADMIN_MEDIA_PREFIX setting, and serves those images.\n    Use this ONLY LOCALLY, for development! This hasn't been tested for\n    security and is not super efficient.\n\n    This is pending for deprecation since 1.3.\n    ",
                                                                'methods': [('get_base_dir',
                                                                             [],
                                                                             ''),
                                                                            ('get_base_url',
                                                                             [],
                                                                             ''),
                                                                            ('file_path',
                                                                             ['url'],
                                                                             '\n        Returns the path to the media file on disk for the given URL.\n\n        The passed URL is assumed to begin with ``self.base_url``.  If the\n        resulting file path is outside the media directory, then a ValueError\n        is raised.\n        '),
                                                                            ('serve',
                                                                             ['request'],
                                                                             ''),
                                                                            ('_should_handle',
                                                                             ['path'],
                                                                             "\n        Checks if the path should be handled. Ignores the path if:\n\n        * the host is provided as part of the base_url\n        * the request's path isn't under the base path\n        ")],
                                                                'properties': []},
             'django.core.servers.basehttp.FileWrapper': {'bases': ['object'],
                                                          'constructor': ['filelike',
                                                                          'blksize=8192'],
                                                          'docstring': 'Wrapper to convert file-like objects to iterables',
                                                          'methods': [('__getitem__',
                                                                       ['key'],
                                                                       ''),
                                                                      ('__iter__', [], ''),
                                                                      ('next', [], '')],
                                                          'properties': ['filelike',
                                                                         'blksize',
                                                                         'close']},
             'django.core.servers.basehttp.Headers': {'bases': ['object'],
                                                      'constructor': ['headers'],
                                                      'docstring': 'Manage a collection of HTTP response headers',
                                                      'methods': [('__len__',
                                                                   [],
                                                                   'Return the total number of headers, including duplicates.'),
                                                                  ('__setitem__',
                                                                   ['name', 'val'],
                                                                   'Set the value of a header.'),
                                                                  ('__delitem__',
                                                                   ['name'],
                                                                   'Delete all occurrences of a header, if present.\n\n        Does *not* raise an exception if the header is missing.\n        '),
                                                                  ('__getitem__',
                                                                   ['name'],
                                                                   "Get the first header value for 'name'\n\n        Return None if the header is missing instead of raising an exception.\n\n        Note that if the header appeared multiple times, the first exactly which\n        occurrance gets returned is undefined.  Use getall() to get all\n        the values matching a header field name.\n        "),
                                                                  ('has_key',
                                                                   ['name'],
                                                                   'Return true if the message contains the header.'),
                                                                  ('get_all',
                                                                   ['name'],
                                                                   'Return a list of all the values for the named field.\n\n        These will be sorted in the order they appeared in the original header\n        list or were added to this instance, and may contain duplicates.  Any\n        fields deleted and re-inserted are always appended to the header list.\n        If no fields exist with the given name, returns an empty list.\n        '),
                                                                  ('get',
                                                                   ['name', 'default=None'],
                                                                   "Get the first header value for 'name', or return 'default'"),
                                                                  ('keys',
                                                                   [],
                                                                   'Return a list of all the header field names.\n\n        These will be sorted in the order they appeared in the original header\n        list, or were added to this instance, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        '),
                                                                  ('values',
                                                                   [],
                                                                   'Return a list of all header values.\n\n        These will be sorted in the order they appeared in the original header\n        list, or were added to this instance, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        '),
                                                                  ('items',
                                                                   [],
                                                                   'Get all the header fields and values.\n\n        These will be sorted in the order they were in the original header\n        list, or were added to this instance, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        '),
                                                                  ('__repr__', [], ''),
                                                                  ('__str__',
                                                                   [],
                                                                   'str() returns the formatted headers, complete with end line,\n        suitable for direct HTTP transmission.'),
                                                                  ('setdefault',
                                                                   ['name', 'value'],
                                                                   "Return first matching header value for 'name', or 'value'\n\n        If there is no header named 'name', add a new header with name 'name'\n        and value 'value'."),
                                                                  ('add_header',
                                                                   ['_name',
                                                                    '_value',
                                                                    '**_params'],
                                                                   'Extended header setting.\n\n        _name is the header field to add.  keyword arguments can be used to set\n        additional parameters for the header field, with underscores converted\n        to dashes.  Normally the parameter will be added as key="value" unless\n        value is None, in which case only the key will be added.\n\n        Example:\n\n        h.add_header(\'content-disposition\', \'attachment\', filename=\'bud.gif\')\n\n        Note that unlike the corresponding \'email.Message\' method, this does\n        *not* handle \'(charset, language, value)\' tuples: all values must be\n        strings or None.\n        ')],
                                                      'properties': ['_headers', '__contains__']},
             'django.core.servers.basehttp.ServerHandler': {'bases': ['object'],
                                                            'constructor': ['stdin',
                                                                            'stdout',
                                                                            'stderr',
                                                                            'environ',
                                                                            'multithread=True',
                                                                            'multiprocess=False'],
                                                            'docstring': 'Manage the invocation of a WSGI application',
                                                            'methods': [('run',
                                                                         ['application'],
                                                                         'Invoke the application'),
                                                                        ('setup_environ',
                                                                         [],
                                                                         'Set up the environment for one request'),
                                                                        ('finish_response',
                                                                         [],
                                                                         "\n        Send any iterable data, then close self and the iterable\n\n        Subclasses intended for use in asynchronous servers will want to\n        redefine this method, such that it sets up callbacks in the event loop\n        to iterate over the data, and to call 'self.close()' once the response\n        is finished.\n        "),
                                                                        ('get_scheme',
                                                                         [],
                                                                         'Return the URL scheme being used'),
                                                                        ('set_content_length',
                                                                         [],
                                                                         'Compute Content-Length or switch to chunked encoding if possible'),
                                                                        ('cleanup_headers',
                                                                         [],
                                                                         'Make any necessary header changes or defaults\n\n        Subclasses can extend this to add other defaults.\n        '),
                                                                        ('start_response',
                                                                         ['status',
                                                                          'headers',
                                                                          'exc_info=None'],
                                                                         "'start_response()' callable as specified by PEP 333"),
                                                                        ('send_preamble',
                                                                         [],
                                                                         'Transmit version/status/date/server, via self._write()'),
                                                                        ('write',
                                                                         ['data'],
                                                                         "'write()' callable as specified by PEP 333"),
                                                                        ('sendfile',
                                                                         [],
                                                                         "Platform-specific file transmission\n\n        Override this method in subclasses to support platform-specific\n        file transmission.  It is only called if the application's\n        return iterable ('self.result') is an instance of\n        'self.wsgi_file_wrapper'.\n\n        This method should return a true value if it was able to actually\n        transmit the wrapped file-like object using a platform-specific\n        approach.  It should return a false value if normal iteration\n        should be used instead.  An exception can be raised to indicate\n        that transmission was attempted, but failed.\n\n        NOTE: this method should call 'self.send_headers()' if\n        'self.headers_sent' is false and it is going to attempt direct\n        transmission of the file1.\n        "),
                                                                        ('finish_content',
                                                                         [],
                                                                         'Ensure headers and content have both been sent'),
                                                                        ('close', [], ''),
                                                                        ('send_headers',
                                                                         [],
                                                                         'Transmit headers to the client, via self._write()'),
                                                                        ('result_is_file',
                                                                         [],
                                                                         "True if 'self.result' is an instance of 'self.wsgi_file_wrapper'"),
                                                                        ('client_is_modern',
                                                                         [],
                                                                         'True if client can accept status and headers'),
                                                                        ('log_exception',
                                                                         ['exc_info'],
                                                                         "Log the 'exc_info' tuple in the server log\n\n        Subclasses may override to retarget the output or change its format.\n        "),
                                                                        ('handle_error',
                                                                         [],
                                                                         'Log current error, and send error output to client if possible'),
                                                                        ('error_output',
                                                                         ['environ',
                                                                          'start_response'],
                                                                         ''),
                                                                        ('_write',
                                                                         ['data'],
                                                                         ''),
                                                                        ('_flush', [], ''),
                                                                        ('get_stdin', [], ''),
                                                                        ('get_stderr', [], ''),
                                                                        ('add_cgi_vars',
                                                                         [],
                                                                         '')],
                                                            'properties': ['wsgi_version',
                                                                           'wsgi_multithread',
                                                                           'wsgi_multiprocess',
                                                                           'wsgi_run_once',
                                                                           'origin_server',
                                                                           'http_version',
                                                                           'server_software',
                                                                           'os_environ',
                                                                           'wsgi_file_wrapper',
                                                                           'headers_class',
                                                                           'traceback_limit',
                                                                           'error_status',
                                                                           'error_headers',
                                                                           'status',
                                                                           'result',
                                                                           'headers_sent',
                                                                           'headers',
                                                                           'bytes_sent',
                                                                           'stdin',
                                                                           'stdout',
                                                                           'stderr',
                                                                           'base_env',
                                                                           'environ',
                                                                           '_write',
                                                                           '_flush']},
             'django.core.servers.basehttp.WSGIRequestHandler': {'bases': ['BaseHTTPServer.BaseHTTPRequestHandler'],
                                                                 'constructor': ['*args',
                                                                                 '**kwargs'],
                                                                 'docstring': '',
                                                                 'methods': [('get_environ',
                                                                              [],
                                                                              ''),
                                                                             ('get_stderr',
                                                                              [],
                                                                              ''),
                                                                             ('handle',
                                                                              [],
                                                                              'Handle a single HTTP request'),
                                                                             ('log_message',
                                                                              ['format',
                                                                               '*args'],
                                                                              '')],
                                                                 'properties': ['server_version',
                                                                                'admin_media_prefix',
                                                                                'path',
                                                                                'style',
                                                                                'raw_requestline']},
             'django.core.servers.basehttp.WSGIServer': {'bases': ['BaseHTTPServer.HTTPServer'],
                                                         'constructor': ['*args', '**kwargs'],
                                                         'docstring': 'BaseHTTPServer that implements the Python WSGI protocol',
                                                         'methods': [('server_bind',
                                                                      [],
                                                                      'Override server_bind to store the server name.'),
                                                                     ('setup_environ', [], ''),
                                                                     ('get_app', [], ''),
                                                                     ('set_app',
                                                                      ['application'],
                                                                      '')],
                                                         'properties': ['application',
                                                                        'address_family',
                                                                        'base_environ']},
             'django.core.servers.basehttp.WSGIServerException': {'bases': ['Exception'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': []},
             'django.core.urlresolvers.NoReverseMatch': {'bases': ['Exception'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['silent_variable_failure']},
             'django.core.urlresolvers.RegexURLPattern': {'bases': ['object'],
                                                          'constructor': ['regex',
                                                                          'callback',
                                                                          'default_args=None',
                                                                          'name=None'],
                                                          'docstring': '',
                                                          'methods': [('__repr__', [], ''),
                                                                      ('add_prefix',
                                                                       ['prefix'],
                                                                       '\n        Adds the prefix string to a string-based callback.\n        '),
                                                                      ('resolve', ['path'], ''),
                                                                      ('_get_callback', [], '')],
                                                          'properties': ['regex',
                                                                         '_callback',
                                                                         '_callback_str',
                                                                         'default_args',
                                                                         'name',
                                                                         'callback']},
             'django.core.urlresolvers.RegexURLResolver': {'bases': ['object'],
                                                           'constructor': ['regex',
                                                                           'urlconf_name',
                                                                           'default_kwargs=None',
                                                                           'app_name=None',
                                                                           'namespace=None'],
                                                           'docstring': '',
                                                           'methods': [('__repr__', [], ''),
                                                                       ('_populate', [], ''),
                                                                       ('_get_reverse_dict',
                                                                        [],
                                                                        ''),
                                                                       ('_get_namespace_dict',
                                                                        [],
                                                                        ''),
                                                                       ('_get_app_dict',
                                                                        [],
                                                                        ''),
                                                                       ('resolve',
                                                                        ['path'],
                                                                        ''),
                                                                       ('_get_urlconf_module',
                                                                        [],
                                                                        ''),
                                                                       ('_get_url_patterns',
                                                                        [],
                                                                        ''),
                                                                       ('_resolve_special',
                                                                        ['view_type'],
                                                                        ''),
                                                                       ('resolve404', [], ''),
                                                                       ('resolve500', [], ''),
                                                                       ('reverse',
                                                                        ['lookup_view',
                                                                         '*args',
                                                                         '**kwargs'],
                                                                        '')],
                                                           'properties': ['regex',
                                                                          'urlconf_name',
                                                                          '_urlconf_module',
                                                                          'callback',
                                                                          'default_kwargs',
                                                                          'namespace',
                                                                          'app_name',
                                                                          '_reverse_dict',
                                                                          '_namespace_dict',
                                                                          '_app_dict',
                                                                          'reverse_dict',
                                                                          'namespace_dict',
                                                                          'app_dict',
                                                                          'urlconf_module',
                                                                          'url_patterns']},
             'django.core.urlresolvers.Resolver404': {'bases': ['django.http.Http404'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': []},
             'django.core.urlresolvers.ResolverMatch': {'bases': ['object'],
                                                        'constructor': ['func',
                                                                        'args',
                                                                        'kwargs',
                                                                        'url_name=None',
                                                                        'app_name=None',
                                                                        'namespaces=None'],
                                                        'docstring': '',
                                                        'methods': [('namespace', [], ''),
                                                                    ('view_name', [], ''),
                                                                    ('__getitem__',
                                                                     ['index'],
                                                                     ''),
                                                                    ('__repr__', [], '')],
                                                        'properties': ['func',
                                                                       'args',
                                                                       'kwargs',
                                                                       'app_name',
                                                                       'namespaces',
                                                                       'url_name',
                                                                       'namespace',
                                                                       'view_name']},
             'django.core.validators.BaseValidator': {'bases': ['object'],
                                                      'constructor': ['limit_value'],
                                                      'docstring': '',
                                                      'methods': [('__call__', ['value'], '')],
                                                      'properties': ['compare',
                                                                     'clean',
                                                                     'message',
                                                                     'code',
                                                                     'limit_value']},
             'django.core.validators.EmailValidator': {'bases': ['django.core.validators.RegexValidator'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('__call__', ['value'], '')],
                                                       'properties': []},
             'django.core.validators.HeadRequest': {'bases': ['urllib2.Request'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('get_method', [], '')],
                                                    'properties': []},
             'django.core.validators.MaxLengthValidator': {'bases': ['django.core.validators.BaseValidator'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['compare',
                                                                          'clean',
                                                                          'message',
                                                                          'code']},
             'django.core.validators.MaxValueValidator': {'bases': ['django.core.validators.BaseValidator'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['compare',
                                                                         'message',
                                                                         'code']},
             'django.core.validators.MinLengthValidator': {'bases': ['django.core.validators.BaseValidator'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['compare',
                                                                          'clean',
                                                                          'message',
                                                                          'code']},
             'django.core.validators.MinValueValidator': {'bases': ['django.core.validators.BaseValidator'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['compare',
                                                                         'message',
                                                                         'code']},
             'django.core.validators.RegexValidator': {'bases': ['object'],
                                                       'constructor': ['regex=None',
                                                                       'message=None',
                                                                       'code=None'],
                                                       'docstring': '',
                                                       'methods': [('__call__',
                                                                    ['value'],
                                                                    '\n        Validates that the input matches the regular expression.\n        ')],
                                                       'properties': ['regex',
                                                                      'message',
                                                                      'code']},
             'django.core.validators.URLValidator': {'bases': ['django.core.validators.RegexValidator'],
                                                     'constructor': ['verify_exists=False',
                                                                     'validator_user_agent=URL_VALIDATOR_USER_AGENT'],
                                                     'docstring': '',
                                                     'methods': [('__call__', ['value'], '')],
                                                     'properties': ['regex',
                                                                    'verify_exists',
                                                                    'user_agent']},
             'django.db.backends.BaseDatabaseClient': {'bases': ['object'],
                                                       'constructor': ['connection'],
                                                       'docstring': '\n    This class encapsulates all backend-specific methods for opening a\n    client shell.\n    ',
                                                       'methods': [('runshell', [], '')],
                                                       'properties': ['executable_name',
                                                                      'connection']},
             'django.db.backends.BaseDatabaseFeatures': {'bases': ['object'],
                                                         'constructor': ['connection'],
                                                         'docstring': '',
                                                         'methods': [('confirm',
                                                                      [],
                                                                      'Perform manual checks of any database features that might vary between installs'),
                                                                     ('_supports_transactions',
                                                                      [],
                                                                      'Confirm support for transactions'),
                                                                     ('_supports_stddev',
                                                                      [],
                                                                      'Confirm support for STDDEV and related stats functions'),
                                                                     ('_can_introspect_foreign_keys',
                                                                      [],
                                                                      'Confirm support for introspected foreign keys')],
                                                         'properties': ['allows_group_by_pk',
                                                                        'needs_datetime_string_cast',
                                                                        'empty_fetchmany_value',
                                                                        'update_can_self_select',
                                                                        'interprets_empty_strings_as_nulls',
                                                                        'ignores_nulls_in_unique_constraints',
                                                                        'can_use_chunked_reads',
                                                                        'can_return_id_from_insert',
                                                                        'uses_autocommit',
                                                                        'uses_savepoints',
                                                                        'related_fields_match_type',
                                                                        'allow_sliced_subqueries',
                                                                        'test_db_allows_multiple_connections',
                                                                        'supports_unspecified_pk',
                                                                        'supports_forward_references',
                                                                        'requires_rollback_on_dirty_transaction',
                                                                        'supports_long_model_names',
                                                                        'has_real_datatype',
                                                                        'supports_subqueries_in_group_by',
                                                                        'supports_bitwise_or',
                                                                        'supports_microsecond_precision',
                                                                        'supports_regex_backreferencing',
                                                                        'supports_date_lookup_using_string',
                                                                        'supports_timezones',
                                                                        'requires_explicit_null_ordering_when_grouping',
                                                                        'supports_1000_query_parameters',
                                                                        'allows_primary_key_0',
                                                                        'can_defer_constraint_checks',
                                                                        'supports_mixed_date_datetime_comparisons',
                                                                        '_confirmed',
                                                                        'supports_transactions',
                                                                        'supports_stddev',
                                                                        'can_introspect_foreign_keys',
                                                                        'connection']},
             'django.db.backends.BaseDatabaseIntrospection': {'bases': ['object'],
                                                              'constructor': ['connection'],
                                                              'docstring': '\n    This class encapsulates all backend-specific introspection utilities\n    ',
                                                              'methods': [('get_field_type',
                                                                           ['data_type',
                                                                            'description'],
                                                                           'Hook for a database backend to use the cursor description to\n        match a Django field type to a database column.\n\n        For Oracle, the column data_type on its own is insufficient to\n        distinguish between a FloatField and IntegerField, for example.'),
                                                                          ('table_name_converter',
                                                                           ['name'],
                                                                           'Apply a conversion to the name for the purposes of comparison.\n\n        The default table name converter is for case sensitive comparison.\n        '),
                                                                          ('table_names',
                                                                           [],
                                                                           'Returns a list of names of all tables that exist in the database.'),
                                                                          ('django_table_names',
                                                                           ['only_existing=False'],
                                                                           '\n        Returns a list of all table names that have associated Django models and\n        are in INSTALLED_APPS.\n\n        If only_existing is True, the resulting list will only include the tables\n        that actually exist in the database.\n        '),
                                                                          ('installed_models',
                                                                           ['tables'],
                                                                           'Returns a set of all models represented by the provided list of table names.'),
                                                                          ('sequence_list',
                                                                           [],
                                                                           'Returns a list of information about all DB sequences for all models in all apps.')],
                                                              'properties': ['data_types_reverse',
                                                                             'connection']},
             'django.db.backends.BaseDatabaseOperations': {'bases': ['object'],
                                                           'constructor': [],
                                                           'docstring': '\n    This class encapsulates all backend-specific differences, such as the way\n    a backend performs ordering or calculates the ID of a recently-inserted\n    row.\n    ',
                                                           'methods': [('autoinc_sql',
                                                                        ['table', 'column'],
                                                                        '\n        Returns any SQL needed to support auto-incrementing primary keys, or\n        None if no SQL is necessary.\n\n        This SQL is executed when a table is created.\n        '),
                                                                       ('date_extract_sql',
                                                                        ['lookup_type',
                                                                         'field_name'],
                                                                        "\n        Given a lookup_type of 'year', 'month' or 'day', returns the SQL that\n        extracts a value from the given date field field_name.\n        "),
                                                                       ('date_interval_sql',
                                                                        ['sql',
                                                                         'connector',
                                                                         'timedelta'],
                                                                        '\n        Implements the date interval functionality for expressions\n        '),
                                                                       ('date_trunc_sql',
                                                                        ['lookup_type',
                                                                         'field_name'],
                                                                        "\n        Given a lookup_type of 'year', 'month' or 'day', returns the SQL that\n        truncates the given date field field_name to a DATE object with only\n        the given specificity.\n        "),
                                                                       ('datetime_cast_sql',
                                                                        [],
                                                                        "\n        Returns the SQL necessary to cast a datetime value so that it will be\n        retrieved as a Python datetime object instead of a string.\n\n        This SQL should include a '%s' in place of the field's name.\n        "),
                                                                       ('deferrable_sql',
                                                                        [],
                                                                        '\n        Returns the SQL necessary to make a constraint "initially deferred"\n        during a CREATE TABLE statement.\n        '),
                                                                       ('drop_foreignkey_sql',
                                                                        [],
                                                                        '\n        Returns the SQL command that drops a foreign key.\n        '),
                                                                       ('drop_sequence_sql',
                                                                        ['table'],
                                                                        '\n        Returns any SQL necessary to drop the sequence for the given table.\n        Returns None if no SQL is necessary.\n        '),
                                                                       ('fetch_returned_insert_id',
                                                                        ['cursor'],
                                                                        '\n        Given a cursor object that has just performed an INSERT...RETURNING\n        statement into a table that has an auto-incrementing ID, returns the\n        newly created ID.\n        '),
                                                                       ('field_cast_sql',
                                                                        ['db_type'],
                                                                        "\n        Given a column type (e.g. 'BLOB', 'VARCHAR'), returns the SQL necessary\n        to cast it before using it in a WHERE statement. Note that the\n        resulting string should contain a '%s' placeholder for the column being\n        searched against.\n        "),
                                                                       ('force_no_ordering',
                                                                        [],
                                                                        '\n        Returns a list used in the "ORDER BY" clause to force no ordering at\n        all. Returning an empty list means that nothing will be included in the\n        ordering.\n        '),
                                                                       ('fulltext_search_sql',
                                                                        ['field_name'],
                                                                        "\n        Returns the SQL WHERE clause to use in order to perform a full-text\n        search of the given field_name. Note that the resulting string should\n        contain a '%s' placeholder for the value being searched against.\n        "),
                                                                       ('last_executed_query',
                                                                        ['cursor',
                                                                         'sql',
                                                                         'params'],
                                                                        '\n        Returns a string of the query last executed by the given cursor, with\n        placeholders replaced with actual values.\n\n        `sql` is the raw query containing placeholders, and `params` is the\n        sequence of parameters. These are used by default, but this method\n        exists for database backends to provide a better implementation\n        according to their own quoting schemes.\n        '),
                                                                       ('last_insert_id',
                                                                        ['cursor',
                                                                         'table_name',
                                                                         'pk_name'],
                                                                        '\n        Given a cursor object that has just performed an INSERT statement into\n        a table that has an auto-incrementing ID, returns the newly created ID.\n\n        This method also receives the table name and the name of the primary-key\n        column.\n        '),
                                                                       ('lookup_cast',
                                                                        ['lookup_type'],
                                                                        '\n        Returns the string to use in a query when performing lookups\n        ("contains", "like", etc). The resulting string should contain a \'%s\'\n        placeholder for the column being searched against.\n        '),
                                                                       ('max_in_list_size',
                                                                        [],
                                                                        "\n        Returns the maximum number of items that can be passed in a single 'IN'\n        list condition, or None if the backend does not impose a limit.\n        "),
                                                                       ('max_name_length',
                                                                        [],
                                                                        '\n        Returns the maximum length of table and column names, or None if there\n        is no limit.\n        '),
                                                                       ('no_limit_value',
                                                                        [],
                                                                        '\n        Returns the value to use for the LIMIT when we are wanting "LIMIT\n        infinity". Returns None if the limit clause can be omitted in this case.\n        '),
                                                                       ('pk_default_value',
                                                                        [],
                                                                        '\n        Returns the value to use during an INSERT statement to specify that\n        the field should use its default value.\n        '),
                                                                       ('process_clob',
                                                                        ['value'],
                                                                        '\n        Returns the value of a CLOB column, for backends that return a locator\n        object that requires additional processing.\n        '),
                                                                       ('return_insert_id',
                                                                        [],
                                                                        '\n        For backends that support returning the last insert ID as part\n        of an insert query, this method returns the SQL and params to\n        append to the INSERT query. The returned fragment should\n        contain a format string to hold the appropriate column.\n        '),
                                                                       ('compiler',
                                                                        ['compiler_name'],
                                                                        '\n        Returns the SQLCompiler class corresponding to the given name,\n        in the namespace corresponding to the `compiler_module` attribute\n        on this backend.\n        '),
                                                                       ('quote_name',
                                                                        ['name'],
                                                                        "\n        Returns a quoted version of the given table, index or column name. Does\n        not quote the given name if it's already been quoted.\n        "),
                                                                       ('random_function_sql',
                                                                        [],
                                                                        '\n        Returns a SQL expression that returns a random value.\n        '),
                                                                       ('regex_lookup',
                                                                        ['lookup_type'],
                                                                        '\n        Returns the string to use in a query when performing regular expression\n        lookups (using "regex" or "iregex"). The resulting string should\n        contain a \'%s\' placeholder for the column being searched against.\n\n        If the feature is not supported (or part of it is not supported), a\n        NotImplementedError exception can be raised.\n        '),
                                                                       ('savepoint_create_sql',
                                                                        ['sid'],
                                                                        '\n        Returns the SQL for starting a new savepoint. Only required if the\n        "uses_savepoints" feature is True. The "sid" parameter is a string\n        for the savepoint id.\n        '),
                                                                       ('savepoint_commit_sql',
                                                                        ['sid'],
                                                                        '\n        Returns the SQL for committing the given savepoint.\n        '),
                                                                       ('savepoint_rollback_sql',
                                                                        ['sid'],
                                                                        '\n        Returns the SQL for rolling back the given savepoint.\n        '),
                                                                       ('sql_flush',
                                                                        ['style',
                                                                         'tables',
                                                                         'sequences'],
                                                                        '\n        Returns a list of SQL statements required to remove all data from\n        the given database tables (without actually removing the tables\n        themselves).\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        '),
                                                                       ('sequence_reset_sql',
                                                                        ['style',
                                                                         'model_list'],
                                                                        '\n        Returns a list of the SQL statements required to reset sequences for\n        the given models.\n\n        The `style` argument is a Style object as returned by either\n        color_style() or no_style() in django.core.management.color.\n        '),
                                                                       ('start_transaction_sql',
                                                                        [],
                                                                        '\n        Returns the SQL statement required to start a transaction.\n        '),
                                                                       ('end_transaction_sql',
                                                                        ['success=True'],
                                                                        ''),
                                                                       ('tablespace_sql',
                                                                        ['tablespace',
                                                                         'inline=False'],
                                                                        "\n        Returns the SQL that will be appended to tables or rows to define\n        a tablespace. Returns '' if the backend doesn't use tablespaces.\n        "),
                                                                       ('prep_for_like_query',
                                                                        ['x'],
                                                                        'Prepares a value for use in a LIKE query.'),
                                                                       ('value_to_db_date',
                                                                        ['value'],
                                                                        '\n        Transform a date value to an object compatible with what is expected\n        by the backend driver for date columns.\n        '),
                                                                       ('value_to_db_datetime',
                                                                        ['value'],
                                                                        '\n        Transform a datetime value to an object compatible with what is expected\n        by the backend driver for datetime columns.\n        '),
                                                                       ('value_to_db_time',
                                                                        ['value'],
                                                                        '\n        Transform a datetime value to an object compatible with what is expected\n        by the backend driver for time columns.\n        '),
                                                                       ('value_to_db_decimal',
                                                                        ['value',
                                                                         'max_digits',
                                                                         'decimal_places'],
                                                                        '\n        Transform a decimal.Decimal value to an object compatible with what is\n        expected by the backend driver for decimal (numeric) columns.\n        '),
                                                                       ('year_lookup_bounds',
                                                                        ['value'],
                                                                        '\n        Returns a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a field value using a year lookup\n\n        `value` is an int, containing the looked-up year.\n        '),
                                                                       ('year_lookup_bounds_for_date_field',
                                                                        ['value'],
                                                                        "\n        Returns a two-elements list with the lower and upper bound to be used\n        with a BETWEEN operator to query a DateField value using a year lookup\n\n        `value` is an int, containing the looked-up year.\n\n        By default, it just calls `self.year_lookup_bounds`. Some backends need\n        this hook because on their DB date fields can't be compared to values\n        which include a time part.\n        "),
                                                                       ('convert_values',
                                                                        ['value', 'field'],
                                                                        'Coerce the value returned by the database backend into a consistent type that\n        is compatible with the field type.\n        '),
                                                                       ('check_aggregate_support',
                                                                        ['aggregate_func'],
                                                                        'Check that the backend supports the provided aggregate\n\n        This is used on specific backends to rule out known aggregates\n        that are known to have faulty implementations. If the named\n        aggregate function has a known problem, the backend should\n        raise NotImplemented.\n        '),
                                                                       ('combine_expression',
                                                                        ['connector',
                                                                         'sub_expressions'],
                                                                        'Combine a list of subexpressions into a single expression, using\n        the provided connecting operator. This is required because operators\n        can vary between backends (e.g., Oracle with %% and &) and between\n        subexpression types (e.g., date expressions)\n        ')],
                                                           'properties': ['compiler_module',
                                                                          '_cache',
                                                                          'prep_for_iexact_query']},
             'django.db.backends.BaseDatabaseValidation': {'bases': ['object'],
                                                           'constructor': ['connection'],
                                                           'docstring': '\n    This class encapsualtes all backend-specific model validation.\n    ',
                                                           'methods': [('validate_field',
                                                                        ['errors',
                                                                         'opts',
                                                                         'f'],
                                                                        'By default, there is no backend-specific validation')],
                                                           'properties': ['connection']},
             'django.db.backends.BaseDatabaseWrapper': {'bases': ['threading.local'],
                                                        'constructor': ['settings_dict',
                                                                        'alias=DEFAULT_DB_ALIAS'],
                                                        'docstring': '\n    Represents a database connection.\n    ',
                                                        'methods': [('__eq__', ['other'], ''),
                                                                    ('__ne__', ['other'], ''),
                                                                    ('_commit', [], ''),
                                                                    ('_rollback', [], ''),
                                                                    ('_enter_transaction_management',
                                                                     ['managed'],
                                                                     '\n        A hook for backend-specific changes required when entering manual\n        transaction handling.\n        '),
                                                                    ('_leave_transaction_management',
                                                                     ['managed'],
                                                                     '\n        A hook for backend-specific changes required when leaving manual\n        transaction handling. Will usually be implemented only when\n        _enter_transaction_management() is also required.\n        '),
                                                                    ('_savepoint', ['sid'], ''),
                                                                    ('_savepoint_rollback',
                                                                     ['sid'],
                                                                     ''),
                                                                    ('_savepoint_commit',
                                                                     ['sid'],
                                                                     ''),
                                                                    ('enter_transaction_management',
                                                                     ['managed=True'],
                                                                     '\n        Enters transaction management for a running thread. It must be balanced with\n        the appropriate leave_transaction_management call, since the actual state is\n        managed as a stack.\n\n        The state and dirty flag are carried over from the surrounding block or\n        from the settings, if there is no surrounding block (dirty is always false\n        when no current block is running).\n        '),
                                                                    ('leave_transaction_management',
                                                                     [],
                                                                     '\n        Leaves transaction management for a running thread. A dirty flag is carried\n        over to the surrounding block, as a commit will commit all changes, even\n        those from outside. (Commits are on connection level.)\n        '),
                                                                    ('is_dirty',
                                                                     [],
                                                                     '\n        Returns True if the current transaction requires a commit for changes to\n        happen.\n        '),
                                                                    ('set_dirty',
                                                                     [],
                                                                     '\n        Sets a dirty flag for the current thread and code streak. This can be used\n        to decide in a managed block of code to decide whether there are open\n        changes waiting for commit.\n        '),
                                                                    ('set_clean',
                                                                     [],
                                                                     '\n        Resets a dirty flag for the current thread and code streak. This can be used\n        to decide in a managed block of code to decide whether a commit or rollback\n        should happen.\n        '),
                                                                    ('clean_savepoints',
                                                                     [],
                                                                     ''),
                                                                    ('is_managed',
                                                                     [],
                                                                     '\n        Checks whether the transaction manager is in manual or in auto state.\n        '),
                                                                    ('managed',
                                                                     ['flag=True'],
                                                                     '\n        Puts the transaction manager into a manual state: managed transactions have\n        to be committed explicitly by the user. If you switch off transaction\n        management and there is a pending commit/rollback, the data will be\n        commited.\n        '),
                                                                    ('commit_unless_managed',
                                                                     [],
                                                                     '\n        Commits changes if the system is not in managed transaction mode.\n        '),
                                                                    ('rollback_unless_managed',
                                                                     [],
                                                                     '\n        Rolls back changes if the system is not in managed transaction mode.\n        '),
                                                                    ('commit',
                                                                     [],
                                                                     '\n        Does the commit itself and resets the dirty flag.\n        '),
                                                                    ('rollback',
                                                                     [],
                                                                     '\n        This function does the rollback itself and resets the dirty flag.\n        '),
                                                                    ('savepoint',
                                                                     [],
                                                                     '\n        Creates a savepoint (if supported and required by the backend) inside the\n        current transaction. Returns an identifier for the savepoint that will be\n        used for the subsequent rollback or commit.\n        '),
                                                                    ('savepoint_rollback',
                                                                     ['sid'],
                                                                     '\n        Rolls back the most recent savepoint (if one exists). Does nothing if\n        savepoints are not supported.\n        '),
                                                                    ('savepoint_commit',
                                                                     ['sid'],
                                                                     '\n        Commits the most recent savepoint (if one exists). Does nothing if\n        savepoints are not supported.\n        '),
                                                                    ('close', [], ''),
                                                                    ('cursor', [], ''),
                                                                    ('make_debug_cursor',
                                                                     ['cursor'],
                                                                     '')],
                                                        'properties': ['ops',
                                                                       'vendor',
                                                                       'connection',
                                                                       'queries',
                                                                       'settings_dict',
                                                                       'alias',
                                                                       'use_debug_cursor',
                                                                       'transaction_state',
                                                                       'savepoint_state',
                                                                       '_dirty']},
             'django.db.backends.creation.BaseDatabaseCreation': {'bases': ['object'],
                                                                  'constructor': ['connection'],
                                                                  'docstring': '\n    This class encapsulates all backend-specific differences that pertain to\n    database *creation*, such as the column types to use for particular Django\n    Fields, the SQL used to create and destroy tables, and the creation and\n    destruction of test databases.\n    ',
                                                                  'methods': [('_digest',
                                                                               ['*args'],
                                                                               '\n        Generates a 32-bit digest of a set of arguments that can be used to\n        shorten identifying names.\n        '),
                                                                              ('sql_create_model',
                                                                               ['model',
                                                                                'style',
                                                                                'known_models=set()'],
                                                                               '\n        Returns the SQL required to create a single model, as a tuple of:\n            (list_of_sql, pending_references_dict)\n        '),
                                                                              ('sql_for_inline_foreign_key_references',
                                                                               ['field',
                                                                                'known_models',
                                                                                'style'],
                                                                               'Return the SQL snippet defining the foreign key reference for a field'),
                                                                              ('sql_for_pending_references',
                                                                               ['model',
                                                                                'style',
                                                                                'pending_references'],
                                                                               'Returns any ALTER TABLE statements to add constraints after the fact.'),
                                                                              ('sql_for_many_to_many',
                                                                               ['model',
                                                                                'style'],
                                                                               'Return the CREATE TABLE statments for all the many-to-many tables defined on a model'),
                                                                              ('sql_for_many_to_many_field',
                                                                               ['model',
                                                                                'f',
                                                                                'style'],
                                                                               'Return the CREATE TABLE statements for a single m2m field'),
                                                                              ('sql_for_inline_many_to_many_references',
                                                                               ['model',
                                                                                'field',
                                                                                'style'],
                                                                               'Create the references to other tables required by a many-to-many table'),
                                                                              ('sql_indexes_for_model',
                                                                               ['model',
                                                                                'style'],
                                                                               'Returns the CREATE INDEX SQL statements for a single model'),
                                                                              ('sql_indexes_for_field',
                                                                               ['model',
                                                                                'f',
                                                                                'style'],
                                                                               'Return the CREATE INDEX SQL statements for a single model field'),
                                                                              ('sql_destroy_model',
                                                                               ['model',
                                                                                'references_to_delete',
                                                                                'style'],
                                                                               'Return the DROP TABLE and restraint dropping statements for a single model'),
                                                                              ('sql_remove_table_constraints',
                                                                               ['model',
                                                                                'references_to_delete',
                                                                                'style'],
                                                                               ''),
                                                                              ('sql_destroy_many_to_many',
                                                                               ['model',
                                                                                'f',
                                                                                'style'],
                                                                               'Returns the DROP TABLE statements for a single m2m field'),
                                                                              ('create_test_db',
                                                                               ['verbosity=1',
                                                                                'autoclobber=False'],
                                                                               '\n        Creates a test database, prompting the user for confirmation if the\n        database already exists. Returns the name of the test database created.\n        '),
                                                                              ('_get_test_db_name',
                                                                               [],
                                                                               "\n        Internal implementation - returns the name of the test DB that will be\n        created. Only useful when called from create_test_db() and\n        _create_test_db() and when no external munging is done with the 'NAME'\n        or 'TEST_NAME' settings.\n        "),
                                                                              ('_create_test_db',
                                                                               ['verbosity',
                                                                                'autoclobber'],
                                                                               'Internal implementation - creates the test db tables.'),
                                                                              ('destroy_test_db',
                                                                               ['old_database_name',
                                                                                'verbosity=1'],
                                                                               '\n        Destroy a test database, prompting the user for confirmation if the\n        database already exists. Returns the name of the test database created.\n        '),
                                                                              ('_destroy_test_db',
                                                                               ['test_database_name',
                                                                                'verbosity'],
                                                                               'Internal implementation - remove the test db tables.'),
                                                                              ('set_autocommit',
                                                                               [],
                                                                               'Make sure a connection is in autocommit mode.'),
                                                                              ('sql_table_creation_suffix',
                                                                               [],
                                                                               'SQL to append to the end of the test table creation statements'),
                                                                              ('test_db_signature',
                                                                               [],
                                                                               '\n        Returns a tuple with elements of self.connection.settings_dict (a\n        DATABASES setting value) that uniquely identify a database\n        accordingly to the RDBMS particularities.\n        ')],
                                                                  'properties': ['data_types',
                                                                                 'connection']},
             'django.db.backends.dummy.base.DatabaseClient': {'bases': ['django.db.backends.dummy.base.BaseDatabaseClient'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['runshell']},
             'django.db.backends.dummy.base.DatabaseError': {'bases': ['Exception'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': []},
             'django.db.backends.dummy.base.DatabaseIntrospection': {'bases': ['django.db.backends.dummy.base.BaseDatabaseIntrospection'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['get_table_list',
                                                                                    'get_table_description',
                                                                                    'get_relations',
                                                                                    'get_indexes']},
             'django.db.backends.dummy.base.DatabaseOperations': {'bases': ['django.db.backends.dummy.base.BaseDatabaseOperations'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': ['quote_name']},
             'django.db.backends.dummy.base.DatabaseWrapper': {'bases': ['django.db.backends.dummy.base.BaseDatabaseWrapper'],
                                                               'constructor': ['*args',
                                                                               '**kwargs'],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['operators',
                                                                              '_commit',
                                                                              '_rollback',
                                                                              'enter_transaction_management',
                                                                              'leave_transaction_management',
                                                                              'set_dirty',
                                                                              'set_clean',
                                                                              'commit_unless_managed',
                                                                              'rollback_unless_managed',
                                                                              'savepoint',
                                                                              'savepoint_commit',
                                                                              'savepoint_rollback',
                                                                              'close',
                                                                              'cursor',
                                                                              'features',
                                                                              'ops',
                                                                              'client',
                                                                              'creation',
                                                                              'introspection',
                                                                              'validation']},
             'django.db.backends.dummy.base.IntegrityError': {'bases': ['django.db.backends.dummy.base.DatabaseError'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': []},
             'django.db.backends.mysql.base.CursorWrapper': {'bases': ['object'],
                                                             'constructor': ['cursor'],
                                                             'docstring': "\n    A thin wrapper around MySQLdb's normal cursor class so that we can catch\n    particular exception instances and reraise them with the right types.\n\n    Implemented as a wrapper, rather than a subclass, so that we aren't stuck\n    to the particular underlying representation returned by Connection.cursor().\n    ",
                                                             'methods': [('execute',
                                                                          ['query',
                                                                           'args=None'],
                                                                          ''),
                                                                         ('executemany',
                                                                          ['query', 'args'],
                                                                          ''),
                                                                         ('__getattr__',
                                                                          ['attr'],
                                                                          ''),
                                                                         ('__iter__', [], '')],
                                                             'properties': ['codes_for_integrityerror',
                                                                            'cursor']},
             'django.db.backends.mysql.base.DatabaseFeatures': {'bases': ['django.db.backends.mysql.base.BaseDatabaseFeatures'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('_can_introspect_foreign_keys',
                                                                             [],
                                                                             'Confirm support for introspected foreign keys')],
                                                                'properties': ['empty_fetchmany_value',
                                                                               'update_can_self_select',
                                                                               'allows_group_by_pk',
                                                                               'related_fields_match_type',
                                                                               'allow_sliced_subqueries',
                                                                               'supports_forward_references',
                                                                               'supports_long_model_names',
                                                                               'supports_microsecond_precision',
                                                                               'supports_regex_backreferencing',
                                                                               'supports_date_lookup_using_string',
                                                                               'supports_timezones',
                                                                               'requires_explicit_null_ordering_when_grouping',
                                                                               'allows_primary_key_0']},
             'django.db.backends.mysql.base.DatabaseOperations': {'bases': ['django.db.backends.mysql.base.BaseDatabaseOperations'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('date_extract_sql',
                                                                               ['lookup_type',
                                                                                'field_name'],
                                                                               ''),
                                                                              ('date_trunc_sql',
                                                                               ['lookup_type',
                                                                                'field_name'],
                                                                               ''),
                                                                              ('date_interval_sql',
                                                                               ['sql',
                                                                                'connector',
                                                                                'timedelta'],
                                                                               ''),
                                                                              ('drop_foreignkey_sql',
                                                                               [],
                                                                               ''),
                                                                              ('force_no_ordering',
                                                                               [],
                                                                               '\n        "ORDER BY NULL" prevents MySQL from implicitly ordering by grouped\n        columns. If no ordering would otherwise be applied, we don\'t want any\n        implicit sorting going on.\n        '),
                                                                              ('fulltext_search_sql',
                                                                               ['field_name'],
                                                                               ''),
                                                                              ('no_limit_value',
                                                                               [],
                                                                               ''),
                                                                              ('quote_name',
                                                                               ['name'],
                                                                               ''),
                                                                              ('random_function_sql',
                                                                               [],
                                                                               ''),
                                                                              ('sql_flush',
                                                                               ['style',
                                                                                'tables',
                                                                                'sequences'],
                                                                               ''),
                                                                              ('value_to_db_datetime',
                                                                               ['value'],
                                                                               ''),
                                                                              ('value_to_db_time',
                                                                               ['value'],
                                                                               ''),
                                                                              ('year_lookup_bounds',
                                                                               ['value'],
                                                                               ''),
                                                                              ('max_name_length',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['compiler_module']},
             'django.db.backends.mysql.base.DatabaseWrapper': {'bases': ['django.db.backends.mysql.base.BaseDatabaseWrapper'],
                                                               'constructor': ['*args',
                                                                               '**kwargs'],
                                                               'docstring': '',
                                                               'methods': [('_valid_connection',
                                                                            [],
                                                                            ''),
                                                                           ('_cursor', [], ''),
                                                                           ('_rollback',
                                                                            [],
                                                                            ''),
                                                                           ('get_server_version',
                                                                            [],
                                                                            '')],
                                                               'properties': ['vendor',
                                                                              'operators',
                                                                              'server_version',
                                                                              'features',
                                                                              'ops',
                                                                              'client',
                                                                              'creation',
                                                                              'introspection',
                                                                              'validation',
                                                                              'connection']},
             'django.db.backends.mysql.client.DatabaseClient': {'bases': ['django.db.backends.BaseDatabaseClient'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('runshell',
                                                                             [],
                                                                             '')],
                                                                'properties': ['executable_name']},
             'django.db.backends.mysql.compiler.SQLAggregateCompiler': {'bases': ['django.db.models.sql.compiler.SQLAggregateCompiler',
                                                                                  'django.db.backends.mysql.compiler.SQLCompiler'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [],
                                                                        'properties': []},
             'django.db.backends.mysql.compiler.SQLCompiler': {'bases': ['django.db.models.sql.compiler.SQLCompiler'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('resolve_columns',
                                                                            ['row',
                                                                             'fields=()'],
                                                                            '')],
                                                               'properties': []},
             'django.db.backends.mysql.compiler.SQLDateCompiler': {'bases': ['django.db.models.sql.compiler.SQLDateCompiler',
                                                                             'django.db.backends.mysql.compiler.SQLCompiler'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.db.backends.mysql.compiler.SQLDeleteCompiler': {'bases': ['django.db.models.sql.compiler.SQLDeleteCompiler',
                                                                               'django.db.backends.mysql.compiler.SQLCompiler'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': []},
             'django.db.backends.mysql.compiler.SQLInsertCompiler': {'bases': ['django.db.models.sql.compiler.SQLInsertCompiler',
                                                                               'django.db.backends.mysql.compiler.SQLCompiler'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': []},
             'django.db.backends.mysql.compiler.SQLUpdateCompiler': {'bases': ['django.db.models.sql.compiler.SQLUpdateCompiler',
                                                                               'django.db.backends.mysql.compiler.SQLCompiler'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': []},
             'django.db.backends.mysql.creation.DatabaseCreation': {'bases': ['django.db.backends.creation.BaseDatabaseCreation'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('sql_table_creation_suffix',
                                                                                 [],
                                                                                 ''),
                                                                                ('sql_for_inline_foreign_key_references',
                                                                                 ['field',
                                                                                  'known_models',
                                                                                  'style'],
                                                                                 'All inline references are pending under MySQL'),
                                                                                ('sql_for_inline_many_to_many_references',
                                                                                 ['model',
                                                                                  'field',
                                                                                  'style'],
                                                                                 '')],
                                                                    'properties': ['data_types']},
             'django.db.backends.mysql.introspection.DatabaseIntrospection': {'bases': ['django.db.backends.BaseDatabaseIntrospection'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('get_table_list',
                                                                                           ['cursor'],
                                                                                           'Returns a list of table names in the current database.'),
                                                                                          ('get_table_description',
                                                                                           ['cursor',
                                                                                            'table_name'],
                                                                                           'Returns a description of the table, with the DB-API cursor.description interface.'),
                                                                                          ('_name_to_index',
                                                                                           ['cursor',
                                                                                            'table_name'],
                                                                                           '\n        Returns a dictionary of {field_name: field_index} for the given table.\n        Indexes are 0-based.\n        '),
                                                                                          ('get_relations',
                                                                                           ['cursor',
                                                                                            'table_name'],
                                                                                           '\n        Returns a dictionary of {field_index: (field_index_other_table, other_table)}\n        representing all relationships to the given table. Indexes are 0-based.\n        '),
                                                                                          ('get_indexes',
                                                                                           ['cursor',
                                                                                            'table_name'],
                                                                                           "\n        Returns a dictionary of fieldname -> infodict for the given table,\n        where each infodict is in the format:\n            {'primary_key': boolean representing whether it's the primary key,\n             'unique': boolean representing whether it's a unique index}\n        ")],
                                                                              'properties': ['data_types_reverse']},
             'django.db.backends.mysql.validation.DatabaseValidation': {'bases': ['django.db.backends.BaseDatabaseValidation'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('validate_field',
                                                                                     ['errors',
                                                                                      'opts',
                                                                                      'f'],
                                                                                     '\n        There are some field length restrictions for MySQL:\n\n        - Prior to version 5.0.3, character fields could not exceed 255\n          characters in length.\n        - No character (varchar) fields can have a length exceeding 255\n          characters if they have a unique index on them.\n        ')],
                                                                        'properties': []},
             'django.db.backends.oracle.base.CursorIterator': {'bases': ['object'],
                                                               'constructor': ['cursor'],
                                                               'docstring': 'Cursor iterator wrapper that invokes our custom row factory.',
                                                               'methods': [('__iter__', [], ''),
                                                                           ('next', [], '')],
                                                               'properties': ['cursor', 'iter']},
             'django.db.backends.oracle.base.DatabaseFeatures': {'bases': ['django.db.backends.oracle.base.BaseDatabaseFeatures'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['empty_fetchmany_value',
                                                                                'needs_datetime_string_cast',
                                                                                'interprets_empty_strings_as_nulls',
                                                                                'uses_savepoints',
                                                                                'can_return_id_from_insert',
                                                                                'allow_sliced_subqueries',
                                                                                'supports_subqueries_in_group_by',
                                                                                'supports_timezones',
                                                                                'supports_bitwise_or',
                                                                                'can_defer_constraint_checks',
                                                                                'ignores_nulls_in_unique_constraints']},
             'django.db.backends.oracle.base.DatabaseOperations': {'bases': ['django.db.backends.oracle.base.BaseDatabaseOperations'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('autoinc_sql',
                                                                                ['table',
                                                                                 'column'],
                                                                                ''),
                                                                               ('date_extract_sql',
                                                                                ['lookup_type',
                                                                                 'field_name'],
                                                                                ''),
                                                                               ('date_interval_sql',
                                                                                ['sql',
                                                                                 'connector',
                                                                                 'timedelta'],
                                                                                "\n        Implements the interval functionality for expressions\n        format for Oracle:\n        (datefield + INTERVAL '3 00:03:20.000000' DAY(1) TO SECOND(6))\n        "),
                                                                               ('date_trunc_sql',
                                                                                ['lookup_type',
                                                                                 'field_name'],
                                                                                ''),
                                                                               ('convert_values',
                                                                                ['value',
                                                                                 'field'],
                                                                                ''),
                                                                               ('datetime_cast_sql',
                                                                                [],
                                                                                ''),
                                                                               ('deferrable_sql',
                                                                                [],
                                                                                ''),
                                                                               ('drop_sequence_sql',
                                                                                ['table'],
                                                                                ''),
                                                                               ('fetch_returned_insert_id',
                                                                                ['cursor'],
                                                                                ''),
                                                                               ('field_cast_sql',
                                                                                ['db_type'],
                                                                                ''),
                                                                               ('last_insert_id',
                                                                                ['cursor',
                                                                                 'table_name',
                                                                                 'pk_name'],
                                                                                ''),
                                                                               ('lookup_cast',
                                                                                ['lookup_type'],
                                                                                ''),
                                                                               ('max_in_list_size',
                                                                                [],
                                                                                ''),
                                                                               ('max_name_length',
                                                                                [],
                                                                                ''),
                                                                               ('prep_for_iexact_query',
                                                                                ['x'],
                                                                                ''),
                                                                               ('process_clob',
                                                                                ['value'],
                                                                                ''),
                                                                               ('quote_name',
                                                                                ['name'],
                                                                                ''),
                                                                               ('random_function_sql',
                                                                                [],
                                                                                ''),
                                                                               ('regex_lookup_9',
                                                                                ['lookup_type'],
                                                                                ''),
                                                                               ('regex_lookup_10',
                                                                                ['lookup_type'],
                                                                                ''),
                                                                               ('regex_lookup',
                                                                                ['lookup_type'],
                                                                                ''),
                                                                               ('return_insert_id',
                                                                                [],
                                                                                ''),
                                                                               ('savepoint_create_sql',
                                                                                ['sid'],
                                                                                ''),
                                                                               ('savepoint_rollback_sql',
                                                                                ['sid'],
                                                                                ''),
                                                                               ('sql_flush',
                                                                                ['style',
                                                                                 'tables',
                                                                                 'sequences'],
                                                                                ''),
                                                                               ('sequence_reset_sql',
                                                                                ['style',
                                                                                 'model_list'],
                                                                                ''),
                                                                               ('start_transaction_sql',
                                                                                [],
                                                                                ''),
                                                                               ('tablespace_sql',
                                                                                ['tablespace',
                                                                                 'inline=False'],
                                                                                ''),
                                                                               ('value_to_db_datetime',
                                                                                ['value'],
                                                                                ''),
                                                                               ('value_to_db_time',
                                                                                ['value'],
                                                                                ''),
                                                                               ('year_lookup_bounds_for_date_field',
                                                                                ['value'],
                                                                                ''),
                                                                               ('combine_expression',
                                                                                ['connector',
                                                                                 'sub_expressions'],
                                                                                'Oracle requires special cases for %% and & operators in query expressions')],
                                                                   'properties': ['compiler_module']},
             'django.db.backends.oracle.base.DatabaseWrapper': {'bases': ['django.db.backends.oracle.base.BaseDatabaseWrapper'],
                                                                'constructor': ['*args',
                                                                                '**kwargs'],
                                                                'docstring': '',
                                                                'methods': [('_valid_connection',
                                                                             [],
                                                                             ''),
                                                                            ('_connect_string',
                                                                             [],
                                                                             ''),
                                                                            ('_cursor', [], ''),
                                                                            ('_savepoint_commit',
                                                                             ['sid'],
                                                                             ''),
                                                                            ('_commit', [], '')],
                                                                'properties': ['vendor',
                                                                               'operators',
                                                                               '_standard_operators',
                                                                               '_likec_operators',
                                                                               'oracle_version',
                                                                               'features',
                                                                               'ops',
                                                                               'client',
                                                                               'creation',
                                                                               'introspection',
                                                                               'validation',
                                                                               'connection']},
             'django.db.backends.oracle.base.FormatStylePlaceholderCursor': {'bases': ['object'],
                                                                             'constructor': ['connection'],
                                                                             'docstring': '\n    Django uses "format" (e.g. \'%s\') style placeholders, but Oracle uses ":var"\n    style. This fixes it -- but note that if you want to use a literal "%s" in\n    a query, you\'ll need to use "%%s".\n\n    We also do automatic conversion between Unicode on the Python side and\n    UTF-8 -- for talking to Oracle -- in here.\n    ',
                                                                             'methods': [('_format_params',
                                                                                          ['params'],
                                                                                          ''),
                                                                                         ('_guess_input_sizes',
                                                                                          ['params_list'],
                                                                                          ''),
                                                                                         ('_param_generator',
                                                                                          ['params'],
                                                                                          ''),
                                                                                         ('execute',
                                                                                          ['query',
                                                                                           'params=None'],
                                                                                          ''),
                                                                                         ('executemany',
                                                                                          ['query',
                                                                                           'params=None'],
                                                                                          ''),
                                                                                         ('fetchone',
                                                                                          [],
                                                                                          ''),
                                                                                         ('fetchmany',
                                                                                          ['size=None'],
                                                                                          ''),
                                                                                         ('fetchall',
                                                                                          [],
                                                                                          ''),
                                                                                         ('var',
                                                                                          ['*args'],
                                                                                          ''),
                                                                                         ('arrayvar',
                                                                                          ['*args'],
                                                                                          ''),
                                                                                         ('__getattr__',
                                                                                          ['attr'],
                                                                                          ''),
                                                                                         ('__iter__',
                                                                                          [],
                                                                                          '')],
                                                                             'properties': ['charset',
                                                                                            'cursor']},
             'django.db.backends.oracle.base.InsertIdVar': {'bases': ['object'],
                                                            'constructor': [],
                                                            'docstring': '\n    A late-binding cursor variable that can be passed to Cursor.execute\n    as a parameter, in order to receive the id of the row created by an\n    insert statement.\n    ',
                                                            'methods': [('bind_parameter',
                                                                         ['cursor'],
                                                                         '')],
                                                            'properties': []},
             'django.db.backends.oracle.base.OracleParam': {'bases': ['object'],
                                                            'constructor': ['param',
                                                                            'cursor',
                                                                            'strings_only=False'],
                                                            'docstring': '\n    Wrapper object for formatting parameters for Oracle. If the string\n    representation of the value is large enough (greater than 4000 characters)\n    the input size needs to be set as CLOB. Alternatively, if the parameter\n    has an `input_size` attribute, then the value of the `input_size` attribute\n    will be used instead. Otherwise, no input size will be set for the\n    parameter when executing the query.\n    ',
                                                            'methods': [],
                                                            'properties': ['smart_str',
                                                                           'input_size']},
             'django.db.backends.oracle.base.VariableWrapper': {'bases': ['object'],
                                                                'constructor': ['var'],
                                                                'docstring': '\n    An adapter class for cursor variables that prevents the wrapped object\n    from being converted into a string when used to instanciate an OracleParam.\n    This can be used generally for any other object that should be passed into\n    Cursor.execute as-is.\n    ',
                                                                'methods': [('bind_parameter',
                                                                             ['cursor'],
                                                                             ''),
                                                                            ('__getattr__',
                                                                             ['key'],
                                                                             ''),
                                                                            ('__setattr__',
                                                                             ['key', 'value'],
                                                                             '')],
                                                                'properties': ['var']},
             'django.db.backends.oracle.base._UninitializedOperatorsDescriptor': {'bases': ['object'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [('__get__',
                                                                                               ['instance',
                                                                                                'owner'],
                                                                                               '')],
                                                                                  'properties': []},
             'django.db.backends.oracle.client.DatabaseClient': {'bases': ['django.db.backends.BaseDatabaseClient'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('runshell',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['executable_name']},
             'django.db.backends.oracle.compiler.SQLAggregateCompiler': {'bases': ['django.db.models.sql.compiler.SQLAggregateCompiler',
                                                                                   'django.db.backends.oracle.compiler.SQLCompiler'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [],
                                                                         'properties': []},
             'django.db.backends.oracle.compiler.SQLCompiler': {'bases': ['django.db.models.sql.compiler.SQLCompiler'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('resolve_columns',
                                                                             ['row',
                                                                              'fields=()'],
                                                                             ''),
                                                                            ('as_sql',
                                                                             ['with_limits=True',
                                                                              'with_col_aliases=False'],
                                                                             "\n        Creates the SQL for this query. Returns the SQL string and list\n        of parameters.  This is overriden from the original Query class\n        to handle the additional SQL Oracle requires to emulate LIMIT\n        and OFFSET.\n\n        If 'with_limits' is False, any limit/offset information is not\n        included in the query.\n        ")],
                                                                'properties': []},
             'django.db.backends.oracle.compiler.SQLDateCompiler': {'bases': ['django.db.models.sql.compiler.SQLDateCompiler',
                                                                              'django.db.backends.oracle.compiler.SQLCompiler'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.db.backends.oracle.compiler.SQLDeleteCompiler': {'bases': ['django.db.models.sql.compiler.SQLDeleteCompiler',
                                                                                'django.db.backends.oracle.compiler.SQLCompiler'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.db.backends.oracle.compiler.SQLInsertCompiler': {'bases': ['django.db.models.sql.compiler.SQLInsertCompiler',
                                                                                'django.db.backends.oracle.compiler.SQLCompiler'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.db.backends.oracle.compiler.SQLUpdateCompiler': {'bases': ['django.db.models.sql.compiler.SQLUpdateCompiler',
                                                                                'django.db.backends.oracle.compiler.SQLCompiler'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': []},
             'django.db.backends.oracle.creation.DatabaseCreation': {'bases': ['django.db.backends.creation.BaseDatabaseCreation'],
                                                                     'constructor': ['connection'],
                                                                     'docstring': '',
                                                                     'methods': [('_create_test_db',
                                                                                  ['verbosity=1',
                                                                                   'autoclobber=False'],
                                                                                  ''),
                                                                                 ('_destroy_test_db',
                                                                                  ['test_database_name',
                                                                                   'verbosity=1'],
                                                                                  '\n        Destroy a test database, prompting the user for confirmation if the\n        database already exists. Returns the name of the test database created.\n        '),
                                                                                 ('_execute_test_db_creation',
                                                                                  ['cursor',
                                                                                   'parameters',
                                                                                   'verbosity'],
                                                                                  ''),
                                                                                 ('_create_test_user',
                                                                                  ['cursor',
                                                                                   'parameters',
                                                                                   'verbosity'],
                                                                                  ''),
                                                                                 ('_execute_test_db_destruction',
                                                                                  ['cursor',
                                                                                   'parameters',
                                                                                   'verbosity'],
                                                                                  ''),
                                                                                 ('_destroy_test_user',
                                                                                  ['cursor',
                                                                                   'parameters',
                                                                                   'verbosity'],
                                                                                  ''),
                                                                                 ('_execute_statements',
                                                                                  ['cursor',
                                                                                   'statements',
                                                                                   'parameters',
                                                                                   'verbosity'],
                                                                                  ''),
                                                                                 ('_test_database_name',
                                                                                  [],
                                                                                  ''),
                                                                                 ('_test_database_create',
                                                                                  [],
                                                                                  ''),
                                                                                 ('_test_user_create',
                                                                                  [],
                                                                                  ''),
                                                                                 ('_test_database_user',
                                                                                  [],
                                                                                  ''),
                                                                                 ('_test_database_passwd',
                                                                                  [],
                                                                                  ''),
                                                                                 ('_test_database_tblspace',
                                                                                  [],
                                                                                  ''),
                                                                                 ('_test_database_tblspace_tmp',
                                                                                  [],
                                                                                  ''),
                                                                                 ('_get_test_db_name',
                                                                                  [],
                                                                                  "\n        We need to return the 'production' DB name to get the test DB creation\n        machinery to work. This isn't a great deal in this case because DB\n        names as handled by Django haven't real counterparts in Oracle.\n        "),
                                                                                 ('test_db_signature',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['data_types',
                                                                                    'remember']},
             'django.db.backends.oracle.introspection.DatabaseIntrospection': {'bases': ['django.db.backends.BaseDatabaseIntrospection'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('get_field_type',
                                                                                            ['data_type',
                                                                                             'description'],
                                                                                            ''),
                                                                                           ('get_table_list',
                                                                                            ['cursor'],
                                                                                            'Returns a list of table names in the current database.'),
                                                                                           ('get_table_description',
                                                                                            ['cursor',
                                                                                             'table_name'],
                                                                                            'Returns a description of the table, with the DB-API cursor.description interface.'),
                                                                                           ('table_name_converter',
                                                                                            ['name'],
                                                                                            'Table name comparison is case insensitive under Oracle'),
                                                                                           ('_name_to_index',
                                                                                            ['cursor',
                                                                                             'table_name'],
                                                                                            '\n        Returns a dictionary of {field_name: field_index} for the given table.\n        Indexes are 0-based.\n        '),
                                                                                           ('get_relations',
                                                                                            ['cursor',
                                                                                             'table_name'],
                                                                                            '\n        Returns a dictionary of {field_index: (field_index_other_table, other_table)}\n        representing all relationships to the given table. Indexes are 0-based.\n        '),
                                                                                           ('get_indexes',
                                                                                            ['cursor',
                                                                                             'table_name'],
                                                                                            "\n        Returns a dictionary of fieldname -> infodict for the given table,\n        where each infodict is in the format:\n            {'primary_key': boolean representing whether it's the primary key,\n             'unique': boolean representing whether it's a unique index}\n        ")],
                                                                               'properties': ['data_types_reverse']},
             'django.db.backends.postgresql.base.DatabaseFeatures': {'bases': ['django.db.backends.postgresql.base.BaseDatabaseFeatures'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['uses_savepoints',
                                                                                    'requires_rollback_on_dirty_transaction',
                                                                                    'has_real_datatype',
                                                                                    'can_defer_constraint_checks']},
             'django.db.backends.postgresql.base.DatabaseWrapper': {'bases': ['django.db.backends.postgresql.base.BaseDatabaseWrapper'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [('_cursor',
                                                                                 [],
                                                                                 ''),
                                                                                ('_commit',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['vendor',
                                                                                   'operators',
                                                                                   'features',
                                                                                   'ops',
                                                                                   'client',
                                                                                   'creation',
                                                                                   'introspection',
                                                                                   'validation',
                                                                                   'connection']},
             'django.db.backends.postgresql.base.UnicodeCursorWrapper': {'bases': ['object'],
                                                                         'constructor': ['cursor',
                                                                                         'charset'],
                                                                         'docstring': "\n    A thin wrapper around psycopg cursors that allows them to accept Unicode\n    strings as params.\n\n    This is necessary because psycopg doesn't apply any DB quoting to\n    parameters that are Unicode strings. If a param is Unicode, this will\n    convert it to a bytestring using database client's encoding before passing\n    it to psycopg.\n\n    All results retrieved from the database are converted into Unicode strings\n    before being returned to the caller.\n    ",
                                                                         'methods': [('format_params',
                                                                                      ['params'],
                                                                                      ''),
                                                                                     ('execute',
                                                                                      ['sql',
                                                                                       'params=()'],
                                                                                      ''),
                                                                                     ('executemany',
                                                                                      ['sql',
                                                                                       'param_list'],
                                                                                      ''),
                                                                                     ('__getattr__',
                                                                                      ['attr'],
                                                                                      ''),
                                                                                     ('__iter__',
                                                                                      [],
                                                                                      '')],
                                                                         'properties': ['cursor',
                                                                                        'charset']},
             'django.db.backends.postgresql.client.DatabaseClient': {'bases': ['django.db.backends.BaseDatabaseClient'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('runshell',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['executable_name']},
             'django.db.backends.postgresql.creation.DatabaseCreation': {'bases': ['django.db.backends.creation.BaseDatabaseCreation'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('sql_table_creation_suffix',
                                                                                      [],
                                                                                      ''),
                                                                                     ('sql_indexes_for_field',
                                                                                      ['model',
                                                                                       'f',
                                                                                       'style'],
                                                                                      '')],
                                                                         'properties': ['data_types']},
             'django.db.backends.postgresql.introspection.DatabaseIntrospection': {'bases': ['django.db.backends.BaseDatabaseIntrospection'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [('get_table_list',
                                                                                                ['cursor'],
                                                                                                'Returns a list of table names in the current database.'),
                                                                                               ('get_table_description',
                                                                                                ['cursor',
                                                                                                 'table_name'],
                                                                                                'Returns a description of the table, with the DB-API cursor.description interface.'),
                                                                                               ('get_relations',
                                                                                                ['cursor',
                                                                                                 'table_name'],
                                                                                                '\n        Returns a dictionary of {field_index: (field_index_other_table, other_table)}\n        representing all relationships to the given table. Indexes are 0-based.\n        '),
                                                                                               ('get_indexes',
                                                                                                ['cursor',
                                                                                                 'table_name'],
                                                                                                "\n        Returns a dictionary of fieldname -> infodict for the given table,\n        where each infodict is in the format:\n            {'primary_key': boolean representing whether it's the primary key,\n             'unique': boolean representing whether it's a unique index}\n        ")],
                                                                                   'properties': ['data_types_reverse']},
             'django.db.backends.postgresql.operations.DatabaseOperations': {'bases': ['django.db.backends.BaseDatabaseOperations'],
                                                                             'constructor': ['connection'],
                                                                             'docstring': '',
                                                                             'methods': [('_get_postgres_version',
                                                                                          [],
                                                                                          ''),
                                                                                         ('date_extract_sql',
                                                                                          ['lookup_type',
                                                                                           'field_name'],
                                                                                          ''),
                                                                                         ('date_interval_sql',
                                                                                          ['sql',
                                                                                           'connector',
                                                                                           'timedelta'],
                                                                                          "\n        implements the interval functionality for expressions\n        format for Postgres:\n            (datefield + interval '3 days 200 seconds 5 microseconds')\n        "),
                                                                                         ('date_trunc_sql',
                                                                                          ['lookup_type',
                                                                                           'field_name'],
                                                                                          ''),
                                                                                         ('deferrable_sql',
                                                                                          [],
                                                                                          ''),
                                                                                         ('lookup_cast',
                                                                                          ['lookup_type'],
                                                                                          ''),
                                                                                         ('field_cast_sql',
                                                                                          ['db_type'],
                                                                                          ''),
                                                                                         ('last_insert_id',
                                                                                          ['cursor',
                                                                                           'table_name',
                                                                                           'pk_name'],
                                                                                          ''),
                                                                                         ('no_limit_value',
                                                                                          [],
                                                                                          ''),
                                                                                         ('quote_name',
                                                                                          ['name'],
                                                                                          ''),
                                                                                         ('sql_flush',
                                                                                          ['style',
                                                                                           'tables',
                                                                                           'sequences'],
                                                                                          ''),
                                                                                         ('sequence_reset_sql',
                                                                                          ['style',
                                                                                           'model_list'],
                                                                                          ''),
                                                                                         ('savepoint_create_sql',
                                                                                          ['sid'],
                                                                                          ''),
                                                                                         ('savepoint_commit_sql',
                                                                                          ['sid'],
                                                                                          ''),
                                                                                         ('savepoint_rollback_sql',
                                                                                          ['sid'],
                                                                                          ''),
                                                                                         ('prep_for_iexact_query',
                                                                                          ['x'],
                                                                                          ''),
                                                                                         ('check_aggregate_support',
                                                                                          ['aggregate'],
                                                                                          'Check that the backend fully supports the provided aggregate.\n\n        The population and sample statistics (STDDEV_POP, STDDEV_SAMP,\n        VAR_POP, VAR_SAMP) were first implemented in Postgres 8.2.\n\n        The implementation of population statistics (STDDEV_POP and VAR_POP)\n        under Postgres 8.2 - 8.2.4 is known to be faulty. Raise\n        NotImplementedError if this is the database in use.\n        '),
                                                                                         ('max_name_length',
                                                                                          [],
                                                                                          '\n        Returns the maximum length of an identifier.\n\n        Note that the maximum length of an identifier is 63 by default, but can\n        be changed by recompiling PostgreSQL after editing the NAMEDATALEN\n        macro in src/include/pg_config_manual.h .\n\n        This implementation simply returns 63, but can easily be overridden by a\n        custom database backend that inherits most of its behavior from this one.\n        ')],
                                                                             'properties': ['_postgres_version',
                                                                                            'connection',
                                                                                            'postgres_version']},
             'django.db.backends.postgresql_psycopg2.base.CursorWrapper': {'bases': ['object'],
                                                                           'constructor': ['cursor'],
                                                                           'docstring': "\n    A thin wrapper around psycopg2's normal cursor class so that we can catch\n    particular exception instances and reraise them with the right types.\n    ",
                                                                           'methods': [('execute',
                                                                                        ['query',
                                                                                         'args=None'],
                                                                                        ''),
                                                                                       ('executemany',
                                                                                        ['query',
                                                                                         'args'],
                                                                                        ''),
                                                                                       ('__getattr__',
                                                                                        ['attr'],
                                                                                        ''),
                                                                                       ('__iter__',
                                                                                        [],
                                                                                        '')],
                                                                           'properties': ['cursor']},
             'django.db.backends.postgresql_psycopg2.base.DatabaseFeatures': {'bases': ['django.db.backends.postgresql_psycopg2.base.BaseDatabaseFeatures'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [],
                                                                              'properties': ['needs_datetime_string_cast',
                                                                                             'can_return_id_from_insert',
                                                                                             'requires_rollback_on_dirty_transaction',
                                                                                             'has_real_datatype',
                                                                                             'can_defer_constraint_checks']},
             'django.db.backends.postgresql_psycopg2.base.DatabaseOperations': {'bases': ['django.db.backends.postgresql.operations.DatabaseOperations'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('last_executed_query',
                                                                                             ['cursor',
                                                                                              'sql',
                                                                                              'params'],
                                                                                             ''),
                                                                                            ('return_insert_id',
                                                                                             [],
                                                                                             '')],
                                                                                'properties': []},
             'django.db.backends.postgresql_psycopg2.base.DatabaseWrapper': {'bases': ['django.db.backends.postgresql_psycopg2.base.BaseDatabaseWrapper'],
                                                                             'constructor': ['*args',
                                                                                             '**kwargs'],
                                                                             'docstring': '',
                                                                             'methods': [('_cursor',
                                                                                          [],
                                                                                          ''),
                                                                                         ('_enter_transaction_management',
                                                                                          ['managed'],
                                                                                          '\n        Switch the isolation level when needing transaction support, so that\n        the same transaction is visible across all the queries.\n        '),
                                                                                         ('_leave_transaction_management',
                                                                                          ['managed'],
                                                                                          '\n        If the normal operating mode is "autocommit", switch back to that when\n        leaving transaction management.\n        '),
                                                                                         ('_set_isolation_level',
                                                                                          ['level'],
                                                                                          "\n        Do all the related feature configurations for changing isolation\n        levels. This doesn't touch the uses_autocommit feature, since that\n        controls the movement *between* isolation levels.\n        "),
                                                                                         ('_commit',
                                                                                          [],
                                                                                          '')],
                                                                             'properties': ['vendor',
                                                                                            'operators',
                                                                                            'features',
                                                                                            'ops',
                                                                                            'client',
                                                                                            'creation',
                                                                                            'introspection',
                                                                                            'validation',
                                                                                            'connection',
                                                                                            'isolation_level']},
             'django.db.backends.postgresql_psycopg2.introspection.DatabaseIntrospection': {'bases': ['django.db.backends.postgresql.introspection.DatabaseIntrospection'],
                                                                                            'constructor': [],
                                                                                            'docstring': '',
                                                                                            'methods': [('get_relations',
                                                                                                         ['cursor',
                                                                                                          'table_name'],
                                                                                                         '\n        Returns a dictionary of {field_index: (field_index_other_table, other_table)}\n        representing all relationships to the given table. Indexes are 0-based.\n        ')],
                                                                                            'properties': []},
             'django.db.backends.sqlite3.base.DatabaseFeatures': {'bases': ['django.db.backends.sqlite3.base.BaseDatabaseFeatures'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('_supports_stddev',
                                                                               [],
                                                                               "Confirm support for STDDEV and related stats functions\n\n        SQLite supports STDDEV as an extension package; so\n        connection.ops.check_aggregate_support() can't unilaterally\n        rule out support for STDDEV. We need to manually check\n        whether the call works.\n        ")],
                                                                  'properties': ['can_use_chunked_reads',
                                                                                 'test_db_allows_multiple_connections',
                                                                                 'supports_unspecified_pk',
                                                                                 'supports_1000_query_parameters',
                                                                                 'supports_mixed_date_datetime_comparisons']},
             'django.db.backends.sqlite3.base.DatabaseOperations': {'bases': ['django.db.backends.sqlite3.base.BaseDatabaseOperations'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('date_extract_sql',
                                                                                 ['lookup_type',
                                                                                  'field_name'],
                                                                                 ''),
                                                                                ('date_interval_sql',
                                                                                 ['sql',
                                                                                  'connector',
                                                                                  'timedelta'],
                                                                                 ''),
                                                                                ('date_trunc_sql',
                                                                                 ['lookup_type',
                                                                                  'field_name'],
                                                                                 ''),
                                                                                ('drop_foreignkey_sql',
                                                                                 [],
                                                                                 ''),
                                                                                ('pk_default_value',
                                                                                 [],
                                                                                 ''),
                                                                                ('quote_name',
                                                                                 ['name'],
                                                                                 ''),
                                                                                ('no_limit_value',
                                                                                 [],
                                                                                 ''),
                                                                                ('sql_flush',
                                                                                 ['style',
                                                                                  'tables',
                                                                                  'sequences'],
                                                                                 ''),
                                                                                ('year_lookup_bounds',
                                                                                 ['value'],
                                                                                 ''),
                                                                                ('convert_values',
                                                                                 ['value',
                                                                                  'field'],
                                                                                 'SQLite returns floats when it should be returning decimals,\n        and gets dates and datetimes wrong.\n        For consistency with other backends, coerce when required.\n        ')],
                                                                    'properties': []},
             'django.db.backends.sqlite3.base.DatabaseWrapper': {'bases': ['django.db.backends.sqlite3.base.BaseDatabaseWrapper'],
                                                                 'constructor': ['*args',
                                                                                 '**kwargs'],
                                                                 'docstring': '',
                                                                 'methods': [('_cursor',
                                                                              [],
                                                                              ''),
                                                                             ('close', [], '')],
                                                                 'properties': ['vendor',
                                                                                'operators',
                                                                                'features',
                                                                                'ops',
                                                                                'client',
                                                                                'creation',
                                                                                'introspection',
                                                                                'validation',
                                                                                'connection']},
             'django.db.backends.sqlite3.base.SQLiteCursorWrapper': {'bases': ['sqlite3.dbapi2.Cursor'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    Django uses "format" style placeholders, but pysqlite2 uses "qmark" style.\n    This fixes it -- but note that if you want to use a literal "%s" in a query,\n    you\'ll need to use "%%s".\n    ',
                                                                     'methods': [('execute',
                                                                                  ['query',
                                                                                   'params=()'],
                                                                                  ''),
                                                                                 ('executemany',
                                                                                  ['query',
                                                                                   'param_list'],
                                                                                  ''),
                                                                                 ('convert_query',
                                                                                  ['query'],
                                                                                  '')],
                                                                     'properties': []},
             'django.db.backends.sqlite3.client.DatabaseClient': {'bases': ['django.db.backends.BaseDatabaseClient'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('runshell',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['executable_name']},
             'django.db.backends.sqlite3.creation.DatabaseCreation': {'bases': ['django.db.backends.creation.BaseDatabaseCreation'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('sql_for_pending_references',
                                                                                   ['model',
                                                                                    'style',
                                                                                    'pending_references'],
                                                                                   "SQLite3 doesn't support constraints"),
                                                                                  ('sql_remove_table_constraints',
                                                                                   ['model',
                                                                                    'references_to_delete',
                                                                                    'style'],
                                                                                   "SQLite3 doesn't support constraints"),
                                                                                  ('_get_test_db_name',
                                                                                   [],
                                                                                   ''),
                                                                                  ('_create_test_db',
                                                                                   ['verbosity',
                                                                                    'autoclobber'],
                                                                                   ''),
                                                                                  ('_destroy_test_db',
                                                                                   ['test_database_name',
                                                                                    'verbosity'],
                                                                                   '')],
                                                                      'properties': ['data_types']},
             'django.db.backends.sqlite3.introspection.DatabaseIntrospection': {'bases': ['django.db.backends.BaseDatabaseIntrospection'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('get_table_list',
                                                                                             ['cursor'],
                                                                                             'Returns a list of table names in the current database.'),
                                                                                            ('get_table_description',
                                                                                             ['cursor',
                                                                                              'table_name'],
                                                                                             'Returns a description of the table, with the DB-API cursor.description interface.'),
                                                                                            ('get_relations',
                                                                                             ['cursor',
                                                                                              'table_name'],
                                                                                             '\n        Returns a dictionary of {field_index: (field_index_other_table, other_table)}\n        representing all relationships to the given table. Indexes are 0-based.\n        '),
                                                                                            ('get_indexes',
                                                                                             ['cursor',
                                                                                              'table_name'],
                                                                                             "\n        Returns a dictionary of fieldname -> infodict for the given table,\n        where each infodict is in the format:\n            {'primary_key': boolean representing whether it's the primary key,\n             'unique': boolean representing whether it's a unique index}\n        "),
                                                                                            ('_table_info',
                                                                                             ['cursor',
                                                                                              'name'],
                                                                                             '')],
                                                                                'properties': ['data_types_reverse']},
             'django.db.backends.sqlite3.introspection.FlexibleFieldLookupDict': {'bases': ['object'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [('__getitem__',
                                                                                               ['key'],
                                                                                               '')],
                                                                                  'properties': ['base_data_types_reverse']},
             'django.db.backends.util.CursorDebugWrapper': {'bases': ['django.db.backends.util.CursorWrapper'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('execute',
                                                                         ['sql', 'params=()'],
                                                                         ''),
                                                                        ('executemany',
                                                                         ['sql', 'param_list'],
                                                                         '')],
                                                            'properties': []},
             'django.db.backends.util.CursorWrapper': {'bases': ['object'],
                                                       'constructor': ['cursor', 'db'],
                                                       'docstring': '',
                                                       'methods': [('__getattr__',
                                                                    ['attr'],
                                                                    ''),
                                                                   ('__iter__', [], '')],
                                                       'properties': ['cursor', 'db']},
             'django.db.models.aggregates.Aggregate': {'bases': ['object'],
                                                       'constructor': ['lookup', '**extra'],
                                                       'docstring': '\n    Default Aggregate definition.\n    ',
                                                       'methods': [('_default_alias', [], ''),
                                                                   ('add_to_query',
                                                                    ['query',
                                                                     'alias',
                                                                     'col',
                                                                     'source',
                                                                     'is_summary'],
                                                                    'Add the aggregate to the nominated query.\n\n        This method is used to convert the generic Aggregate definition into a\n        backend-specific definition.\n\n         * query is the backend-specific query instance to which the aggregate\n           is to be added.\n         * col is a column reference describing the subject field\n           of the aggregate. It can be an alias, or a tuple describing\n           a table and column name.\n         * source is the underlying field or aggregate definition for\n           the column reference. If the aggregate is not an ordinal or\n           computed type, this reference is used to determine the coerced\n           output type of the aggregate.\n         * is_summary is a boolean that is set True if the aggregate is a\n           summary value rather than an annotation.\n        ')],
                                                       'properties': ['lookup',
                                                                      'extra',
                                                                      'default_alias']},
             'django.db.models.aggregates.Avg': {'bases': ['django.db.models.aggregates.Aggregate'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['name']},
             'django.db.models.aggregates.Count': {'bases': ['django.db.models.aggregates.Aggregate'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['name']},
             'django.db.models.aggregates.Max': {'bases': ['django.db.models.aggregates.Aggregate'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['name']},
             'django.db.models.aggregates.Min': {'bases': ['django.db.models.aggregates.Aggregate'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['name']},
             'django.db.models.aggregates.StdDev': {'bases': ['django.db.models.aggregates.Aggregate'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['name']},
             'django.db.models.aggregates.Sum': {'bases': ['django.db.models.aggregates.Aggregate'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['name']},
             'django.db.models.aggregates.Variance': {'bases': ['django.db.models.aggregates.Aggregate'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['name']},
             'django.db.models.base.Empty': {'bases': ['object'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': []},
             'django.db.models.base.Model': {'bases': ['object'],
                                             'constructor': ['*args', '**kwargs'],
                                             'docstring': '',
                                             'methods': [('__repr__', [], ''),
                                                         ('__str__', [], ''),
                                                         ('__eq__', ['other'], ''),
                                                         ('__ne__', ['other'], ''),
                                                         ('__hash__', [], ''),
                                                         ('__reduce__',
                                                          [],
                                                          "\n        Provide pickling support. Normally, this just dispatches to Python's\n        standard handling. However, for models with deferred field loading, we\n        need to do things manually, as they're dynamically created classes and\n        only module-level classes can be pickled by the default path.\n        "),
                                                         ('_get_pk_val', ['meta=None'], ''),
                                                         ('_set_pk_val', ['value'], ''),
                                                         ('serializable_value',
                                                          ['field_name'],
                                                          "\n        Returns the value of the field name for this instance. If the field is\n        a foreign key, returns the id value, instead of the object. If there's\n        no Field object with this name on the model, the model attribute's\n        value is returned directly.\n\n        Used to serialize a field's value (in the serializer, or form output,\n        for example). Normally, you would just access the attribute directly\n        and not use this method.\n        "),
                                                         ('save',
                                                          ['force_insert=False',
                                                           'force_update=False',
                                                           'using=None'],
                                                          '\n        Saves the current instance. Override this in a subclass if you want to\n        control the saving process.\n\n        The \'force_insert\' and \'force_update\' parameters can be used to insist\n        that the "save" must be an SQL insert or update (or equivalent for\n        non-SQL backends), respectively. Normally, they should not be set.\n        '),
                                                         ('save_base',
                                                          ['raw=False',
                                                           'cls=None',
                                                           'origin=None',
                                                           'force_insert=False',
                                                           'force_update=False',
                                                           'using=None'],
                                                          "\n        Does the heavy-lifting involved in saving. Subclasses shouldn't need to\n        override this method. It's separate from save() in order to hide the\n        need for overrides of save() to pass around internal-only parameters\n        ('raw', 'cls', and 'origin').\n        "),
                                                         ('delete', ['using=None'], ''),
                                                         ('_get_FIELD_display', ['field'], ''),
                                                         ('_get_next_or_previous_by_FIELD',
                                                          ['field', 'is_next', '**kwargs'],
                                                          ''),
                                                         ('_get_next_or_previous_in_order',
                                                          ['is_next'],
                                                          ''),
                                                         ('prepare_database_save',
                                                          ['unused'],
                                                          ''),
                                                         ('clean',
                                                          [],
                                                          '\n        Hook for doing any extra model-wide validation after clean() has been\n        called on every field by self.clean_fields. Any ValidationError raised\n        by this method will not be associated with a particular field; it will\n        have a special-case association with the field defined by NON_FIELD_ERRORS.\n        '),
                                                         ('validate_unique',
                                                          ['exclude=None'],
                                                          '\n        Checks unique constraints on the model and raises ``ValidationError``\n        if any failed.\n        '),
                                                         ('_get_unique_checks',
                                                          ['exclude=None'],
                                                          "\n        Gather a list of checks to perform. Since validate_unique could be\n        called from a ModelForm, some fields may have been excluded; we can't\n        perform a unique check on a model that is missing fields involved\n        in that check.\n        Fields that did not validate should also be excluded, but they need\n        to be passed in via the exclude argument.\n        "),
                                                         ('_perform_unique_checks',
                                                          ['unique_checks'],
                                                          ''),
                                                         ('_perform_date_checks',
                                                          ['date_checks'],
                                                          ''),
                                                         ('date_error_message',
                                                          ['lookup_type',
                                                           'field',
                                                           'unique_for'],
                                                          ''),
                                                         ('unique_error_message',
                                                          ['model_class', 'unique_check'],
                                                          ''),
                                                         ('full_clean',
                                                          ['exclude=None'],
                                                          '\n        Calls clean_fields, clean, and validate_unique, on the model,\n        and raises a ``ValidationError`` for any errors that occured.\n        '),
                                                         ('clean_fields',
                                                          ['exclude=None'],
                                                          '\n        Cleans all fields and raises a ValidationError containing message_dict\n        of all validation errors if any occur.\n        ')],
                                             'properties': ['__metaclass__',
                                                            '_deferred',
                                                            '_state',
                                                            'pk',
                                                            '_order']},
             'django.db.models.base.ModelBase': {'bases': ['type'],
                                                 'constructor': [],
                                                 'docstring': '\n    Metaclass for all models.\n    ',
                                                 'methods': [('__new__',
                                                              ['name', 'bases', 'attrs'],
                                                              ''),
                                                             ('copy_managers',
                                                              ['base_managers'],
                                                              ''),
                                                             ('add_to_class',
                                                              ['name', 'value'],
                                                              ''),
                                                             ('_prepare',
                                                              [],
                                                              '\n        Creates some methods once self._meta has been populated.\n        ')],
                                                 'properties': []},
             'django.db.models.base.ModelState': {'bases': ['object'],
                                                  'constructor': ['db=None'],
                                                  'docstring': '\n    A class for storing instance state\n    ',
                                                  'methods': [],
                                                  'properties': ['db', 'adding']},
             'django.db.models.deletion.Collector': {'bases': ['object'],
                                                     'constructor': ['using'],
                                                     'docstring': '',
                                                     'methods': [('add',
                                                                  ['objs',
                                                                   'source=None',
                                                                   'nullable=False',
                                                                   'reverse_dependency=False'],
                                                                  "\n        Adds 'objs' to the collection of objects to be deleted.  If the call is\n        the result of a cascade, 'source' should be the model that caused it\n        and 'nullable' should be set to True, if the relation can be null.\n\n        Returns a list of all objects that were not already collected.\n        "),
                                                                 ('add_batch',
                                                                  ['model', 'field', 'objs'],
                                                                  "\n        Schedules a batch delete. Every instance of 'model' that is related to\n        an instance of 'obj' through 'field' will be deleted.\n        "),
                                                                 ('add_field_update',
                                                                  ['field', 'value', 'objs'],
                                                                  "\n        Schedules a field update. 'objs' must be a homogenous iterable\n        collection of model instances (e.g. a QuerySet).\n        "),
                                                                 ('collect',
                                                                  ['objs',
                                                                   'source=None',
                                                                   'nullable=False',
                                                                   'collect_related=True',
                                                                   'source_attr=None',
                                                                   'reverse_dependency=False'],
                                                                  "\n        Adds 'objs' to the collection of objects to be deleted as well as all\n        parent instances.  'objs' must be a homogenous iterable collection of\n        model instances (e.g. a QuerySet).  If 'collect_related' is True,\n        related objects will be handled by their respective on_delete handler.\n\n        If the call is the result of a cascade, 'source' should be the model\n        that caused it and 'nullable' should be set to True, if the relation\n        can be null.\n\n        If 'reverse_dependency' is True, 'source' will be deleted before the\n        current model, rather than after. (Needed for cascading to parent\n        models, the one case in which the cascade follows the forwards\n        direction of an FK rather than the reverse direction.)\n        "),
                                                                 ('related_objects',
                                                                  ['related', 'objs'],
                                                                  '\n        Gets a QuerySet of objects related to ``objs`` via the relation ``related``.\n\n        '),
                                                                 ('instances_with_model',
                                                                  [],
                                                                  ''),
                                                                 ('sort', [], ''),
                                                                 ('delete', [], '')],
                                                     'properties': ['using',
                                                                    'data',
                                                                    'batches',
                                                                    'field_updates',
                                                                    'dependencies']},
             'django.db.models.deletion.ProtectedError': {'bases': ['django.db.IntegrityError'],
                                                          'constructor': ['msg',
                                                                          'protected_objects'],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['protected_objects']},
             'django.db.models.expressions.DateModifierNode': {'bases': ['django.db.models.expressions.ExpressionNode'],
                                                               'constructor': ['children',
                                                                               'connector',
                                                                               'negated=False'],
                                                               'docstring': '\n    Node that implements the following syntax:\n    filter(end_date__gt=F(\'start_date\') + datetime.timedelta(days=3, seconds=200))\n\n    which translates into:\n    POSTGRES:\n        WHERE end_date > (start_date + INTERVAL \'3 days 200 seconds\')\n\n    MYSQL:\n        WHERE end_date > (start_date + INTERVAL \'3 0:0:200:0\' DAY_MICROSECOND)\n\n    ORACLE:\n        WHERE end_date > (start_date + INTERVAL \'3 00:03:20.000000\' DAY(1) TO SECOND(6))\n\n    SQLITE:\n        WHERE end_date > django_format_dtdelta(start_date, "+" "3", "200", "0")\n        (A custom function is used in order to preserve six digits of fractional\n        second information on sqlite, and to format both date and datetime values.)\n\n    Note that microsecond comparisons are not well supported with MySQL, since \n    MySQL does not store microsecond information.\n\n    Only adding and subtracting timedeltas is supported, attempts to use other \n    operations raise a TypeError.\n    ',
                                                               'methods': [('evaluate',
                                                                            ['evaluator',
                                                                             'qn',
                                                                             'connection'],
                                                                            '')],
                                                               'properties': []},
             'django.db.models.expressions.ExpressionNode': {'bases': ['django.utils.tree.Node'],
                                                             'constructor': ['children=None',
                                                                             'connector=None',
                                                                             'negated=False'],
                                                             'docstring': '\n    Base class for all query expressions.\n    ',
                                                             'methods': [('_combine',
                                                                          ['other',
                                                                           'connector',
                                                                           'reversed',
                                                                           'node=None'],
                                                                          ''),
                                                                         ('prepare',
                                                                          ['evaluator',
                                                                           'query',
                                                                           'allow_joins'],
                                                                          ''),
                                                                         ('evaluate',
                                                                          ['evaluator',
                                                                           'qn',
                                                                           'connection'],
                                                                          ''),
                                                                         ('__add__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__sub__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__mul__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__div__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__mod__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__and__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__or__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__radd__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__rsub__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__rmul__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__rdiv__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__rmod__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__rand__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__ror__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('prepare_database_save',
                                                                          ['unused'],
                                                                          '')],
                                                             'properties': ['ADD',
                                                                            'SUB',
                                                                            'MUL',
                                                                            'DIV',
                                                                            'MOD',
                                                                            'AND',
                                                                            'OR']},
             'django.db.models.expressions.F': {'bases': ['django.db.models.expressions.ExpressionNode'],
                                                'constructor': ['name'],
                                                'docstring': '\n    An expression representing the value of the given field.\n    ',
                                                'methods': [('__deepcopy__', ['memodict'], ''),
                                                            ('prepare',
                                                             ['evaluator',
                                                              'query',
                                                              'allow_joins'],
                                                             ''),
                                                            ('evaluate',
                                                             ['evaluator', 'qn', 'connection'],
                                                             '')],
                                                'properties': ['name']},
             'django.db.models.fields.AutoField': {'bases': ['django.db.models.fields.Field'],
                                                   'constructor': ['*args', '**kwargs'],
                                                   'docstring': '',
                                                   'methods': [('get_internal_type', [], ''),
                                                               ('to_python', ['value'], ''),
                                                               ('validate',
                                                                ['value', 'model_instance'],
                                                                ''),
                                                               ('get_prep_value',
                                                                ['value'],
                                                                ''),
                                                               ('contribute_to_class',
                                                                ['cls', 'name'],
                                                                ''),
                                                               ('formfield', ['**kwargs'], '')],
                                                   'properties': ['description',
                                                                  'empty_strings_allowed',
                                                                  'default_error_messages']},
             'django.db.models.fields.BigIntegerField': {'bases': ['django.db.models.fields.IntegerField'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('get_internal_type',
                                                                      [],
                                                                      ''),
                                                                     ('formfield',
                                                                      ['**kwargs'],
                                                                      '')],
                                                         'properties': ['empty_strings_allowed',
                                                                        'description',
                                                                        'MAX_BIGINT']},
             'django.db.models.fields.BooleanField': {'bases': ['django.db.models.fields.Field'],
                                                      'constructor': ['*args', '**kwargs'],
                                                      'docstring': '',
                                                      'methods': [('get_internal_type', [], ''),
                                                                  ('to_python', ['value'], ''),
                                                                  ('get_prep_lookup',
                                                                   ['lookup_type', 'value'],
                                                                   ''),
                                                                  ('get_prep_value',
                                                                   ['value'],
                                                                   ''),
                                                                  ('formfield',
                                                                   ['**kwargs'],
                                                                   '')],
                                                      'properties': ['empty_strings_allowed',
                                                                     'default_error_messages',
                                                                     'description']},
             'django.db.models.fields.CharField': {'bases': ['django.db.models.fields.Field'],
                                                   'constructor': ['*args', '**kwargs'],
                                                   'docstring': '',
                                                   'methods': [('get_internal_type', [], ''),
                                                               ('to_python', ['value'], ''),
                                                               ('get_prep_value',
                                                                ['value'],
                                                                ''),
                                                               ('formfield', ['**kwargs'], '')],
                                                   'properties': ['description']},
             'django.db.models.fields.CommaSeparatedIntegerField': {'bases': ['django.db.models.fields.CharField'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('formfield',
                                                                                 ['**kwargs'],
                                                                                 '')],
                                                                    'properties': ['default_validators',
                                                                                   'description']},
             'django.db.models.fields.DateField': {'bases': ['django.db.models.fields.Field'],
                                                   'constructor': ['verbose_name=None',
                                                                   'name=None',
                                                                   'auto_now=False',
                                                                   'auto_now_add=False',
                                                                   '**kwargs'],
                                                   'docstring': '',
                                                   'methods': [('get_internal_type', [], ''),
                                                               ('to_python', ['value'], ''),
                                                               ('pre_save',
                                                                ['model_instance', 'add'],
                                                                ''),
                                                               ('contribute_to_class',
                                                                ['cls', 'name'],
                                                                ''),
                                                               ('get_prep_lookup',
                                                                ['lookup_type', 'value'],
                                                                ''),
                                                               ('get_prep_value',
                                                                ['value'],
                                                                ''),
                                                               ('get_db_prep_value',
                                                                ['value',
                                                                 'connection',
                                                                 'prepared=False'],
                                                                ''),
                                                               ('value_to_string', ['obj'], ''),
                                                               ('formfield', ['**kwargs'], '')],
                                                   'properties': ['description',
                                                                  'empty_strings_allowed',
                                                                  'default_error_messages',
                                                                  'auto_now',
                                                                  'auto_now_add']},
             'django.db.models.fields.DateTimeField': {'bases': ['django.db.models.fields.DateField'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('get_internal_type',
                                                                    [],
                                                                    ''),
                                                                   ('to_python', ['value'], ''),
                                                                   ('pre_save',
                                                                    ['model_instance', 'add'],
                                                                    ''),
                                                                   ('get_prep_value',
                                                                    ['value'],
                                                                    ''),
                                                                   ('get_db_prep_value',
                                                                    ['value',
                                                                     'connection',
                                                                     'prepared=False'],
                                                                    ''),
                                                                   ('value_to_string',
                                                                    ['obj'],
                                                                    ''),
                                                                   ('formfield',
                                                                    ['**kwargs'],
                                                                    '')],
                                                       'properties': ['default_error_messages',
                                                                      'description']},
             'django.db.models.fields.DecimalField': {'bases': ['django.db.models.fields.Field'],
                                                      'constructor': ['verbose_name=None',
                                                                      'name=None',
                                                                      'max_digits=None',
                                                                      'decimal_places=None',
                                                                      '**kwargs'],
                                                      'docstring': '',
                                                      'methods': [('get_internal_type', [], ''),
                                                                  ('to_python', ['value'], ''),
                                                                  ('_format', ['value'], ''),
                                                                  ('format_number',
                                                                   ['value'],
                                                                   '\n        Formats a number into a string with the requisite number of digits and\n        decimal places.\n        '),
                                                                  ('get_db_prep_save',
                                                                   ['value', 'connection'],
                                                                   ''),
                                                                  ('get_prep_value',
                                                                   ['value'],
                                                                   ''),
                                                                  ('formfield',
                                                                   ['**kwargs'],
                                                                   '')],
                                                      'properties': ['empty_strings_allowed',
                                                                     'default_error_messages',
                                                                     'description',
                                                                     'max_digits',
                                                                     'decimal_places']},
             'django.db.models.fields.EmailField': {'bases': ['django.db.models.fields.CharField'],
                                                    'constructor': ['*args', '**kwargs'],
                                                    'docstring': '',
                                                    'methods': [('formfield', ['**kwargs'], '')],
                                                    'properties': ['default_validators',
                                                                   'description']},
             'django.db.models.fields.Field': {'bases': ['object'],
                                               'constructor': ['verbose_name=None',
                                                               'name=None',
                                                               'primary_key=False',
                                                               'max_length=None',
                                                               'unique=False',
                                                               'blank=False',
                                                               'null=False',
                                                               'db_index=False',
                                                               'rel=None',
                                                               'default=NOT_PROVIDED',
                                                               'editable=True',
                                                               'serialize=True',
                                                               'unique_for_date=None',
                                                               'unique_for_month=None',
                                                               'unique_for_year=None',
                                                               'choices=None',
                                                               "help_text=''",
                                                               'db_column=None',
                                                               'db_tablespace=None',
                                                               'auto_created=False',
                                                               'validators=[]',
                                                               'error_messages=None'],
                                               'docstring': 'Base class for all field types',
                                               'methods': [('_description', [], ''),
                                                           ('__cmp__', ['other'], ''),
                                                           ('__deepcopy__', ['memodict'], ''),
                                                           ('to_python',
                                                            ['value'],
                                                            "\n        Converts the input value into the expected Python data type, raising\n        django.core.exceptions.ValidationError if the data can't be converted.\n        Returns the converted value. Subclasses should override this.\n        "),
                                                           ('run_validators', ['value'], ''),
                                                           ('validate',
                                                            ['value', 'model_instance'],
                                                            '\n        Validates value and throws ValidationError. Subclasses should override\n        this to provide validation logic.\n        '),
                                                           ('clean',
                                                            ['value', 'model_instance'],
                                                            "\n        Convert the value's type and run validation. Validation errors from to_python\n        and validate are propagated. The correct value is returned if no error is\n        raised.\n        "),
                                                           ('db_type',
                                                            ['connection'],
                                                            '\n        Returns the database column data type for this field, for the provided\n        connection.\n        '),
                                                           ('unique', [], ''),
                                                           ('set_attributes_from_name',
                                                            ['name'],
                                                            ''),
                                                           ('contribute_to_class',
                                                            ['cls', 'name'],
                                                            ''),
                                                           ('get_attname', [], ''),
                                                           ('get_attname_column', [], ''),
                                                           ('get_cache_name', [], ''),
                                                           ('get_internal_type', [], ''),
                                                           ('pre_save',
                                                            ['model_instance', 'add'],
                                                            "Returns field's value just before saving."),
                                                           ('get_prep_value',
                                                            ['value'],
                                                            'Perform preliminary non-db specific value checks and conversions.'),
                                                           ('get_db_prep_value',
                                                            ['value',
                                                             'connection',
                                                             'prepared=False'],
                                                            "Returns field's value prepared for interacting with the database\n        backend.\n\n        Used by the default implementations of ``get_db_prep_save``and\n        `get_db_prep_lookup```\n        "),
                                                           ('get_db_prep_save',
                                                            ['value', 'connection'],
                                                            "Returns field's value prepared for saving into a database."),
                                                           ('get_prep_lookup',
                                                            ['lookup_type', 'value'],
                                                            'Perform preliminary non-db specific lookup checks and conversions'),
                                                           ('get_db_prep_lookup',
                                                            ['lookup_type',
                                                             'value',
                                                             'connection',
                                                             'prepared=False'],
                                                            "Returns field's value prepared for database lookup."),
                                                           ('has_default',
                                                            [],
                                                            'Returns a boolean of whether this field has a default value.'),
                                                           ('get_default',
                                                            [],
                                                            'Returns the default value for this field.'),
                                                           ('get_validator_unique_lookup_type',
                                                            [],
                                                            ''),
                                                           ('get_choices',
                                                            ['include_blank=True',
                                                             'blank_choice=BLANK_CHOICE_DASH'],
                                                            'Returns choices with a default blank choices included, for use\n        as SelectField choices for this field.'),
                                                           ('get_choices_default', [], ''),
                                                           ('get_flatchoices',
                                                            ['include_blank=True',
                                                             'blank_choice=BLANK_CHOICE_DASH'],
                                                            'Returns flattened choices with a default blank choice included.'),
                                                           ('_get_val_from_obj', ['obj'], ''),
                                                           ('value_to_string',
                                                            ['obj'],
                                                            '\n        Returns a string value of this field from the passed obj.\n        This is used by the serialization framework.\n        '),
                                                           ('bind',
                                                            ['fieldmapping',
                                                             'original',
                                                             'bound_field_class'],
                                                            ''),
                                                           ('_get_choices', [], ''),
                                                           ('_get_flatchoices',
                                                            [],
                                                            'Flattened version of choices tuple.'),
                                                           ('save_form_data',
                                                            ['instance', 'data'],
                                                            ''),
                                                           ('formfield',
                                                            ['form_class=forms.CharField',
                                                             '**kwargs'],
                                                            'Returns a django.forms.Field instance for this database Field.'),
                                                           ('value_from_object',
                                                            ['obj'],
                                                            'Returns the value of this field in the given model instance.')],
                                               'properties': ['__metaclass__',
                                                              'empty_strings_allowed',
                                                              'creation_counter',
                                                              'auto_creation_counter',
                                                              'default_validators',
                                                              'default_error_messages',
                                                              'description',
                                                              'name',
                                                              'verbose_name',
                                                              'primary_key',
                                                              'max_length',
                                                              '_unique',
                                                              'blank',
                                                              'null',
                                                              'rel',
                                                              'default',
                                                              'editable',
                                                              'serialize',
                                                              'unique_for_date',
                                                              'unique_for_month',
                                                              'unique_for_year',
                                                              '_choices',
                                                              'help_text',
                                                              'db_column',
                                                              'db_tablespace',
                                                              'auto_created',
                                                              'db_index',
                                                              'validators',
                                                              'error_messages',
                                                              'unique',
                                                              'attname',
                                                              'column',
                                                              'model',
                                                              'choices',
                                                              'flatchoices']},
             'django.db.models.fields.FieldDoesNotExist': {'bases': ['Exception'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': []},
             'django.db.models.fields.FilePathField': {'bases': ['django.db.models.fields.Field'],
                                                       'constructor': ['verbose_name=None',
                                                                       'name=None',
                                                                       "path=''",
                                                                       'match=None',
                                                                       'recursive=False',
                                                                       '**kwargs'],
                                                       'docstring': '',
                                                       'methods': [('formfield',
                                                                    ['**kwargs'],
                                                                    ''),
                                                                   ('get_internal_type',
                                                                    [],
                                                                    '')],
                                                       'properties': ['description',
                                                                      'path',
                                                                      'match',
                                                                      'recursive']},
             'django.db.models.fields.FloatField': {'bases': ['django.db.models.fields.Field'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('get_prep_value',
                                                                 ['value'],
                                                                 ''),
                                                                ('get_internal_type', [], ''),
                                                                ('to_python', ['value'], ''),
                                                                ('formfield', ['**kwargs'], '')],
                                                    'properties': ['empty_strings_allowed',
                                                                   'default_error_messages',
                                                                   'description']},
             'django.db.models.fields.IPAddressField': {'bases': ['django.db.models.fields.Field'],
                                                        'constructor': ['*args', '**kwargs'],
                                                        'docstring': '',
                                                        'methods': [('get_internal_type',
                                                                     [],
                                                                     ''),
                                                                    ('formfield',
                                                                     ['**kwargs'],
                                                                     '')],
                                                        'properties': ['empty_strings_allowed',
                                                                       'description']},
             'django.db.models.fields.IntegerField': {'bases': ['django.db.models.fields.Field'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('get_prep_value',
                                                                   ['value'],
                                                                   ''),
                                                                  ('get_prep_lookup',
                                                                   ['lookup_type', 'value'],
                                                                   ''),
                                                                  ('get_internal_type', [], ''),
                                                                  ('to_python', ['value'], ''),
                                                                  ('formfield',
                                                                   ['**kwargs'],
                                                                   '')],
                                                      'properties': ['empty_strings_allowed',
                                                                     'default_error_messages',
                                                                     'description']},
             'django.db.models.fields.NOT_PROVIDED': {'bases': [],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': []},
             'django.db.models.fields.NullBooleanField': {'bases': ['django.db.models.fields.Field'],
                                                          'constructor': ['*args', '**kwargs'],
                                                          'docstring': '',
                                                          'methods': [('get_internal_type',
                                                                       [],
                                                                       ''),
                                                                      ('to_python',
                                                                       ['value'],
                                                                       ''),
                                                                      ('get_prep_lookup',
                                                                       ['lookup_type',
                                                                        'value'],
                                                                       ''),
                                                                      ('get_prep_value',
                                                                       ['value'],
                                                                       ''),
                                                                      ('formfield',
                                                                       ['**kwargs'],
                                                                       '')],
                                                          'properties': ['empty_strings_allowed',
                                                                         'default_error_messages',
                                                                         'description']},
             'django.db.models.fields.PositiveIntegerField': {'bases': ['django.db.models.fields.IntegerField'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('get_internal_type',
                                                                           [],
                                                                           ''),
                                                                          ('formfield',
                                                                           ['**kwargs'],
                                                                           '')],
                                                              'properties': ['description']},
             'django.db.models.fields.PositiveSmallIntegerField': {'bases': ['django.db.models.fields.IntegerField'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('get_internal_type',
                                                                                [],
                                                                                ''),
                                                                               ('formfield',
                                                                                ['**kwargs'],
                                                                                '')],
                                                                   'properties': ['description']},
             'django.db.models.fields.SlugField': {'bases': ['django.db.models.fields.CharField'],
                                                   'constructor': ['*args', '**kwargs'],
                                                   'docstring': '',
                                                   'methods': [('get_internal_type', [], ''),
                                                               ('formfield', ['**kwargs'], '')],
                                                   'properties': ['description']},
             'django.db.models.fields.SmallIntegerField': {'bases': ['django.db.models.fields.IntegerField'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('get_internal_type',
                                                                        [],
                                                                        '')],
                                                           'properties': ['description']},
             'django.db.models.fields.TextField': {'bases': ['django.db.models.fields.Field'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('get_internal_type', [], ''),
                                                               ('get_prep_value',
                                                                ['value'],
                                                                ''),
                                                               ('formfield', ['**kwargs'], '')],
                                                   'properties': ['description']},
             'django.db.models.fields.TimeField': {'bases': ['django.db.models.fields.Field'],
                                                   'constructor': ['verbose_name=None',
                                                                   'name=None',
                                                                   'auto_now=False',
                                                                   'auto_now_add=False',
                                                                   '**kwargs'],
                                                   'docstring': '',
                                                   'methods': [('get_internal_type', [], ''),
                                                               ('to_python', ['value'], ''),
                                                               ('pre_save',
                                                                ['model_instance', 'add'],
                                                                ''),
                                                               ('get_prep_value',
                                                                ['value'],
                                                                ''),
                                                               ('get_db_prep_value',
                                                                ['value',
                                                                 'connection',
                                                                 'prepared=False'],
                                                                ''),
                                                               ('value_to_string', ['obj'], ''),
                                                               ('formfield', ['**kwargs'], '')],
                                                   'properties': ['description',
                                                                  'empty_strings_allowed',
                                                                  'default_error_messages',
                                                                  'auto_now',
                                                                  'auto_now_add']},
             'django.db.models.fields.URLField': {'bases': ['django.db.models.fields.CharField'],
                                                  'constructor': ['verbose_name=None',
                                                                  'name=None',
                                                                  'verify_exists=True',
                                                                  '**kwargs'],
                                                  'docstring': '',
                                                  'methods': [('formfield', ['**kwargs'], '')],
                                                  'properties': ['description']},
             'django.db.models.fields.XMLField': {'bases': ['django.db.models.fields.TextField'],
                                                  'constructor': ['verbose_name=None',
                                                                  'name=None',
                                                                  'schema_path=None',
                                                                  '**kwargs'],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['description', 'schema_path']},
             'django.db.models.fields.files.FieldFile': {'bases': ['django.core.files.base.File'],
                                                         'constructor': ['instance',
                                                                         'field',
                                                                         'name'],
                                                         'docstring': '',
                                                         'methods': [('__eq__', ['other'], ''),
                                                                     ('__ne__', ['other'], ''),
                                                                     ('__hash__', [], ''),
                                                                     ('_require_file', [], ''),
                                                                     ('_get_file', [], ''),
                                                                     ('_set_file',
                                                                      ['file'],
                                                                      ''),
                                                                     ('_del_file', [], ''),
                                                                     ('_get_path', [], ''),
                                                                     ('_get_url', [], ''),
                                                                     ('_get_size', [], ''),
                                                                     ('open',
                                                                      ["mode='rb'"],
                                                                      ''),
                                                                     ('save',
                                                                      ['name',
                                                                       'content',
                                                                       'save=True'],
                                                                      ''),
                                                                     ('delete',
                                                                      ['save=True'],
                                                                      ''),
                                                                     ('_get_closed', [], ''),
                                                                     ('close', [], ''),
                                                                     ('__getstate__', [], '')],
                                                         'properties': ['instance',
                                                                        'field',
                                                                        'storage',
                                                                        '_committed',
                                                                        '_file',
                                                                        'file',
                                                                        'path',
                                                                        'url',
                                                                        'size',
                                                                        'name',
                                                                        '_size',
                                                                        'closed']},
             'django.db.models.fields.files.FileDescriptor': {'bases': ['object'],
                                                              'constructor': ['field'],
                                                              'docstring': '\n    The descriptor for the file attribute on the model instance. Returns a\n    FieldFile when accessed so you can do stuff like::\n\n        >>> instance.file.size\n\n    Assigns a file object on assignment so you can do::\n\n        >>> instance.file = File(...)\n\n    ',
                                                              'methods': [('__get__',
                                                                           ['instance=None',
                                                                            'owner=None'],
                                                                           ''),
                                                                          ('__set__',
                                                                           ['instance',
                                                                            'value'],
                                                                           '')],
                                                              'properties': ['field']},
             'django.db.models.fields.files.FileField': {'bases': ['django.db.models.fields.Field'],
                                                         'constructor': ['verbose_name=None',
                                                                         'name=None',
                                                                         "upload_to=''",
                                                                         'storage=None',
                                                                         '**kwargs'],
                                                         'docstring': '',
                                                         'methods': [('get_internal_type',
                                                                      [],
                                                                      ''),
                                                                     ('get_prep_lookup',
                                                                      ['lookup_type', 'value'],
                                                                      ''),
                                                                     ('get_prep_value',
                                                                      ['value'],
                                                                      "Returns field's value prepared for saving into a database."),
                                                                     ('pre_save',
                                                                      ['model_instance',
                                                                       'add'],
                                                                      "Returns field's value just before saving."),
                                                                     ('contribute_to_class',
                                                                      ['cls', 'name'],
                                                                      ''),
                                                                     ('get_directory_name',
                                                                      [],
                                                                      ''),
                                                                     ('get_filename',
                                                                      ['filename'],
                                                                      ''),
                                                                     ('generate_filename',
                                                                      ['instance', 'filename'],
                                                                      ''),
                                                                     ('save_form_data',
                                                                      ['instance', 'data'],
                                                                      ''),
                                                                     ('formfield',
                                                                      ['**kwargs'],
                                                                      '')],
                                                         'properties': ['attr_class',
                                                                        'descriptor_class',
                                                                        'description',
                                                                        'storage',
                                                                        'upload_to',
                                                                        'generate_filename']},
             'django.db.models.fields.files.ImageField': {'bases': ['django.core.files.base.FileField'],
                                                          'constructor': ['verbose_name=None',
                                                                          'name=None',
                                                                          'width_field=None',
                                                                          'height_field=None',
                                                                          '**kwargs'],
                                                          'docstring': '',
                                                          'methods': [('contribute_to_class',
                                                                       ['cls', 'name'],
                                                                       ''),
                                                                      ('update_dimension_fields',
                                                                       ['instance',
                                                                        'force=False',
                                                                        '*args',
                                                                        '**kwargs'],
                                                                       "\n        Updates field's width and height fields, if defined.\n\n        This method is hooked up to model's post_init signal to update\n        dimensions after instantiating a model instance.  However, dimensions\n        won't be updated if the dimensions fields are already populated.  This\n        avoids unnecessary recalculation when loading an object from the\n        database.\n\n        Dimensions can be forced to update with force=True, which is how\n        ImageFileDescriptor.__set__ calls this method.\n        "),
                                                                      ('formfield',
                                                                       ['**kwargs'],
                                                                       '')],
                                                          'properties': ['attr_class',
                                                                         'descriptor_class',
                                                                         'description',
                                                                         'width_field',
                                                                         'height_field']},
             'django.db.models.fields.files.ImageFieldFile': {'bases': ['django.core.files.images.ImageFile',
                                                                        'django.db.models.fields.FieldFile'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('delete',
                                                                           ['save=True'],
                                                                           '')],
                                                              'properties': ['_dimensions_cache']},
             'django.db.models.fields.files.ImageFileDescriptor': {'bases': ['django.core.files.base.FileDescriptor'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    Just like the FileDescriptor, but for ImageFields. The only difference is\n    assigning the width/height to the width_field/height_field, if appropriate.\n    ',
                                                                   'methods': [('__set__',
                                                                                ['instance',
                                                                                 'value'],
                                                                                '')],
                                                                   'properties': []},
             'django.db.models.fields.proxy.OrderWrt': {'bases': ['django.db.models.fields.IntegerField'],
                                                        'constructor': ['*args', '**kwargs'],
                                                        'docstring': '\n    A proxy for the _order database field that is used when\n    Meta.order_with_respect_to is specified.\n    ',
                                                        'methods': [],
                                                        'properties': []},
             'django.db.models.fields.related.ForeignKey': {'bases': ['django.db.models.fields.related.RelatedField',
                                                                      'django.db.models.fields.Field'],
                                                            'constructor': ['to',
                                                                            'to_field=None',
                                                                            'rel_class=ManyToOneRel',
                                                                            '**kwargs'],
                                                            'docstring': '',
                                                            'methods': [('validate',
                                                                         ['value',
                                                                          'model_instance'],
                                                                         ''),
                                                                        ('get_attname', [], ''),
                                                                        ('get_validator_unique_lookup_type',
                                                                         [],
                                                                         ''),
                                                                        ('get_default',
                                                                         [],
                                                                         'Here we check if the default value is an object and return the to_field if so.'),
                                                                        ('get_db_prep_save',
                                                                         ['value',
                                                                          'connection'],
                                                                         ''),
                                                                        ('value_to_string',
                                                                         ['obj'],
                                                                         ''),
                                                                        ('contribute_to_class',
                                                                         ['cls', 'name'],
                                                                         ''),
                                                                        ('contribute_to_related_class',
                                                                         ['cls', 'related'],
                                                                         ''),
                                                                        ('formfield',
                                                                         ['**kwargs'],
                                                                         ''),
                                                                        ('db_type',
                                                                         ['connection'],
                                                                         '')],
                                                            'properties': ['empty_strings_allowed',
                                                                           'default_error_messages',
                                                                           'description']},
             'django.db.models.fields.related.ForeignRelatedObjectsDescriptor': {'bases': ['object'],
                                                                                 'constructor': ['related'],
                                                                                 'docstring': '',
                                                                                 'methods': [('__get__',
                                                                                              ['instance',
                                                                                               'instance_type=None'],
                                                                                              ''),
                                                                                             ('__set__',
                                                                                              ['instance',
                                                                                               'value'],
                                                                                              ''),
                                                                                             ('delete_manager',
                                                                                              ['instance'],
                                                                                              "\n        Returns a queryset based on the related model's base manager (rather\n        than the default manager, as returned by __get__). Used by\n        Model.delete().\n        "),
                                                                                             ('create_manager',
                                                                                              ['instance',
                                                                                               'superclass'],
                                                                                              '\n        Creates the managers used by other methods (__get__() and delete()).\n        ')],
                                                                                 'properties': ['related']},
             'django.db.models.fields.related.ManyRelatedObjectsDescriptor': {'bases': ['object'],
                                                                              'constructor': ['related'],
                                                                              'docstring': '',
                                                                              'methods': [('__get__',
                                                                                           ['instance',
                                                                                            'instance_type=None'],
                                                                                           ''),
                                                                                          ('__set__',
                                                                                           ['instance',
                                                                                            'value'],
                                                                                           '')],
                                                                              'properties': ['related']},
             'django.db.models.fields.related.ManyToManyField': {'bases': ['django.db.models.fields.related.RelatedField',
                                                                           'django.db.models.fields.Field'],
                                                                 'constructor': ['to',
                                                                                 '**kwargs'],
                                                                 'docstring': '',
                                                                 'methods': [('get_choices_default',
                                                                              [],
                                                                              ''),
                                                                             ('_get_m2m_db_table',
                                                                              ['opts'],
                                                                              'Function that can be curried to provide the m2m table name for this relation'),
                                                                             ('_get_m2m_attr',
                                                                              ['related',
                                                                               'attr'],
                                                                              'Function that can be curried to provide the source accessor or DB column name for the m2m table'),
                                                                             ('_get_m2m_reverse_attr',
                                                                              ['related',
                                                                               'attr'],
                                                                              'Function that can be curried to provide the related accessor or DB column name for the m2m table'),
                                                                             ('value_to_string',
                                                                              ['obj'],
                                                                              ''),
                                                                             ('contribute_to_class',
                                                                              ['cls', 'name'],
                                                                              ''),
                                                                             ('contribute_to_related_class',
                                                                              ['cls',
                                                                               'related'],
                                                                              ''),
                                                                             ('set_attributes_from_rel',
                                                                              [],
                                                                              ''),
                                                                             ('value_from_object',
                                                                              ['obj'],
                                                                              'Returns the value of this field in the given model instance.'),
                                                                             ('save_form_data',
                                                                              ['instance',
                                                                               'data'],
                                                                              ''),
                                                                             ('formfield',
                                                                              ['**kwargs'],
                                                                              ''),
                                                                             ('db_type',
                                                                              ['connection'],
                                                                              '')],
                                                                 'properties': ['description',
                                                                                'db_table',
                                                                                'help_text',
                                                                                'm2m_db_table',
                                                                                'm2m_column_name',
                                                                                'm2m_reverse_name',
                                                                                'm2m_field_name',
                                                                                'm2m_reverse_field_name',
                                                                                'm2m_target_field_name',
                                                                                'm2m_reverse_target_field_name']},
             'django.db.models.fields.related.ManyToManyRel': {'bases': ['object'],
                                                               'constructor': ['to',
                                                                               'related_name=None',
                                                                               'limit_choices_to=None',
                                                                               'symmetrical=True',
                                                                               'through=None'],
                                                               'docstring': '',
                                                               'methods': [('is_hidden',
                                                                            [],
                                                                            'Should the related object be hidden?'),
                                                                           ('get_related_field',
                                                                            [],
                                                                            "\n        Returns the field in the to' object to which this relationship is tied\n        (this is always the primary key on the target model). Provided for\n        symmetry with ManyToOneRel.\n        ")],
                                                               'properties': ['to',
                                                                              'related_name',
                                                                              'limit_choices_to',
                                                                              'symmetrical',
                                                                              'multiple',
                                                                              'through']},
             'django.db.models.fields.related.ManyToOneRel': {'bases': ['object'],
                                                              'constructor': ['to',
                                                                              'field_name',
                                                                              'related_name=None',
                                                                              'limit_choices_to=None',
                                                                              'parent_link=False',
                                                                              'on_delete=None'],
                                                              'docstring': '',
                                                              'methods': [('is_hidden',
                                                                           [],
                                                                           'Should the related object be hidden?'),
                                                                          ('get_related_field',
                                                                           [],
                                                                           "\n        Returns the Field in the 'to' object to which this relationship is\n        tied.\n        ")],
                                                              'properties': ['to',
                                                                             'field_name',
                                                                             'related_name',
                                                                             'limit_choices_to',
                                                                             'multiple',
                                                                             'parent_link',
                                                                             'on_delete']},
             'django.db.models.fields.related.OneToOneField': {'bases': ['django.db.models.fields.related.ForeignKey'],
                                                               'constructor': ['to',
                                                                               'to_field=None',
                                                                               '**kwargs'],
                                                               'docstring': '\n    A OneToOneField is essentially the same as a ForeignKey, with the exception\n    that always carries a "unique" constraint with it and the reverse relation\n    always returns the object pointed to (since there will only ever be one),\n    rather than returning a list.\n    ',
                                                               'methods': [('contribute_to_related_class',
                                                                            ['cls', 'related'],
                                                                            ''),
                                                                           ('formfield',
                                                                            ['**kwargs'],
                                                                            ''),
                                                                           ('save_form_data',
                                                                            ['instance',
                                                                             'data'],
                                                                            '')],
                                                               'properties': ['description']},
             'django.db.models.fields.related.OneToOneRel': {'bases': ['django.db.models.fields.related.ManyToOneRel'],
                                                             'constructor': ['to',
                                                                             'field_name',
                                                                             'related_name=None',
                                                                             'limit_choices_to=None',
                                                                             'parent_link=False',
                                                                             'on_delete=None'],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['multiple']},
             'django.db.models.fields.related.RelatedField': {'bases': ['object'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('contribute_to_class',
                                                                           ['cls', 'name'],
                                                                           ''),
                                                                          ('set_attributes_from_rel',
                                                                           [],
                                                                           ''),
                                                                          ('do_related_class',
                                                                           ['other', 'cls'],
                                                                           ''),
                                                                          ('get_prep_lookup',
                                                                           ['lookup_type',
                                                                            'value'],
                                                                           ''),
                                                                          ('get_db_prep_lookup',
                                                                           ['lookup_type',
                                                                            'value',
                                                                            'connection',
                                                                            'prepared=False'],
                                                                           ''),
                                                                          ('_pk_trace',
                                                                           ['value',
                                                                            'prep_func',
                                                                            'lookup_type',
                                                                            '**kwargs'],
                                                                           ''),
                                                                          ('related_query_name',
                                                                           [],
                                                                           '')],
                                                              'properties': ['opts',
                                                                             'name',
                                                                             'verbose_name',
                                                                             'related']},
             'django.db.models.fields.related.ReverseManyRelatedObjectsDescriptor': {'bases': ['object'],
                                                                                     'constructor': ['m2m_field'],
                                                                                     'docstring': '',
                                                                                     'methods': [('_through',
                                                                                                  [],
                                                                                                  ''),
                                                                                                 ('__get__',
                                                                                                  ['instance',
                                                                                                   'instance_type=None'],
                                                                                                  ''),
                                                                                                 ('__set__',
                                                                                                  ['instance',
                                                                                                   'value'],
                                                                                                  '')],
                                                                                     'properties': ['field',
                                                                                                    'through']},
             'django.db.models.fields.related.ReverseSingleRelatedObjectDescriptor': {'bases': ['object'],
                                                                                      'constructor': ['field_with_rel'],
                                                                                      'docstring': '',
                                                                                      'methods': [('__get__',
                                                                                                   ['instance',
                                                                                                    'instance_type=None'],
                                                                                                   ''),
                                                                                                  ('__set__',
                                                                                                   ['instance',
                                                                                                    'value'],
                                                                                                   '')],
                                                                                      'properties': ['field']},
             'django.db.models.fields.related.SingleRelatedObjectDescriptor': {'bases': ['object'],
                                                                               'constructor': ['related'],
                                                                               'docstring': '',
                                                                               'methods': [('__get__',
                                                                                            ['instance',
                                                                                             'instance_type=None'],
                                                                                            ''),
                                                                                           ('__set__',
                                                                                            ['instance',
                                                                                             'value'],
                                                                                            '')],
                                                                               'properties': ['related',
                                                                                              'cache_name']},
             'django.db.models.fields.subclassing.Creator': {'bases': ['object'],
                                                             'constructor': ['field'],
                                                             'docstring': '\n    A placeholder class that provides a way to set the attribute on the model.\n    ',
                                                             'methods': [('__get__',
                                                                          ['obj', 'type=None'],
                                                                          ''),
                                                                         ('__set__',
                                                                          ['obj', 'value'],
                                                                          '')],
                                                             'properties': ['field']},
             'django.db.models.fields.subclassing.LegacyConnection': {'bases': ['type'],
                                                                      'constructor': [],
                                                                      'docstring': '\n    A metaclass to normalize arguments give to the get_db_prep_* and db_type\n    methods on fields.\n    ',
                                                                      'methods': [('__new__',
                                                                                   ['name',
                                                                                    'bases',
                                                                                    'attrs'],
                                                                                   '')],
                                                                      'properties': []},
             'django.db.models.fields.subclassing.SubfieldBase': {'bases': ['django.db.models.fields.subclassing.LegacyConnection'],
                                                                  'constructor': [],
                                                                  'docstring': "\n    A metaclass for custom Field subclasses. This ensures the model's attribute\n    has the descriptor protocol attached to it.\n    ",
                                                                  'methods': [('__new__',
                                                                               ['name',
                                                                                'bases',
                                                                                'attrs'],
                                                                               '')],
                                                                  'properties': []},
             'django.db.models.loading.AppCache': {'bases': ['object'],
                                                   'constructor': [],
                                                   'docstring': '\n    A cache that stores installed applications and their models. Used to\n    provide reverse-relations and for app introspection (e.g. admin).\n    ',
                                                   'methods': [('_populate',
                                                                [],
                                                                '\n        Fill in all the cache information. This method is threadsafe, in the\n        sense that every caller will see the same state upon return, and if the\n        cache is already initialised, it does no work.\n        '),
                                                               ('load_app',
                                                                ['app_name',
                                                                 'can_postpone=False'],
                                                                '\n        Loads the app with the provided fully qualified name, and returns the\n        model module.\n        '),
                                                               ('app_cache_ready',
                                                                [],
                                                                '\n        Returns true if the model cache is fully populated.\n\n        Useful for code that wants to cache the results of get_models() for\n        themselves once it is safe to do so.\n        '),
                                                               ('get_apps',
                                                                [],
                                                                'Returns a list of all installed modules that contain models.'),
                                                               ('get_app',
                                                                ['app_label', 'emptyOK=False'],
                                                                "\n        Returns the module containing the models for the given app_label. If\n        the app has no models in it and 'emptyOK' is True, returns None.\n        "),
                                                               ('get_app_errors',
                                                                [],
                                                                'Returns the map of known problems with the INSTALLED_APPS.'),
                                                               ('get_models',
                                                                ['app_mod=None',
                                                                 'include_auto_created=False',
                                                                 'include_deferred=False'],
                                                                '\n        Given a module containing models, returns a list of the models.\n        Otherwise returns a list of all installed models.\n\n        By default, auto-created models (i.e., m2m models without an\n        explicit intermediate table) are not included. However, if you\n        specify include_auto_created=True, they will be.\n\n        By default, models created to satisfy deferred attribute\n        queries are *not* included in the list of models. However, if\n        you specify include_deferred, they will be.\n        '),
                                                               ('get_model',
                                                                ['app_label',
                                                                 'model_name',
                                                                 'seed_cache=True'],
                                                                '\n        Returns the model matching the given app_label and case-insensitive\n        model_name.\n\n        Returns None if no model is found.\n        '),
                                                               ('register_models',
                                                                ['app_label', '*models'],
                                                                '\n        Register a set of models as belonging to an app.\n        ')],
                                                   'properties': ['__shared_state',
                                                                  '__dict__',
                                                                  'loaded']},
             'django.db.models.manager.EmptyManager': {'bases': ['django.db.models.manager.Manager'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('get_query_set', [], '')],
                                                       'properties': []},
             'django.db.models.manager.Manager': {'bases': ['object'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('contribute_to_class',
                                                               ['model', 'name'],
                                                               ''),
                                                              ('_set_creation_counter',
                                                               [],
                                                               '\n        Sets the creation counter value for this instance and increments the\n        class-level copy.\n        '),
                                                              ('_copy_to_model',
                                                               ['model'],
                                                               "\n        Makes a copy of the manager and assigns it to 'model', which should be\n        a child of the existing model (used when inheriting a manager from an\n        abstract base class).\n        "),
                                                              ('db_manager', ['using'], ''),
                                                              ('get_empty_query_set', [], ''),
                                                              ('get_query_set',
                                                               [],
                                                               'Returns a new QuerySet object.  Subclasses can override this method\n        to easily customize the behavior of the Manager.\n        '),
                                                              ('none', [], ''),
                                                              ('all', [], ''),
                                                              ('count', [], ''),
                                                              ('dates',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('distinct',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('extra',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('get',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('get_or_create',
                                                               ['**kwargs'],
                                                               ''),
                                                              ('create', ['**kwargs'], ''),
                                                              ('filter',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('aggregate',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('annotate',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('complex_filter',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('exclude',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('in_bulk',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('iterator',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('latest',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('order_by',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('select_related',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('values',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('values_list',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('update',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('reverse',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('defer',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('only',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('using',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('exists',
                                                               ['*args', '**kwargs'],
                                                               ''),
                                                              ('_insert',
                                                               ['values', '**kwargs'],
                                                               ''),
                                                              ('_update',
                                                               ['values', '**kwargs'],
                                                               ''),
                                                              ('raw',
                                                               ['raw_query',
                                                                'params=None',
                                                                '*args',
                                                                '**kwargs'],
                                                               '')],
                                                  'properties': ['creation_counter',
                                                                 'model',
                                                                 '_inherited',
                                                                 '_db',
                                                                 'db']},
             'django.db.models.manager.ManagerDescriptor': {'bases': ['object'],
                                                            'constructor': ['manager'],
                                                            'docstring': '',
                                                            'methods': [('__get__',
                                                                         ['instance',
                                                                          'type=None'],
                                                                         '')],
                                                            'properties': ['manager']},
             'django.db.models.options.Options': {'bases': ['object'],
                                                  'constructor': ['meta', 'app_label=None'],
                                                  'docstring': '',
                                                  'methods': [('contribute_to_class',
                                                               ['cls', 'name'],
                                                               ''),
                                                              ('_prepare', ['model'], ''),
                                                              ('add_field', ['field'], ''),
                                                              ('add_virtual_field',
                                                               ['field'],
                                                               ''),
                                                              ('setup_pk', ['field'], ''),
                                                              ('setup_proxy',
                                                               ['target'],
                                                               '\n        Does the internal setup so that the current model is a proxy for\n        "target".\n        '),
                                                              ('__repr__', [], ''),
                                                              ('__str__', [], ''),
                                                              ('verbose_name_raw',
                                                               [],
                                                               '\n        There are a few places where the untranslated verbose name is needed\n        (so that we get the same value regardless of currently active\n        locale).\n        '),
                                                              ('_fields',
                                                               [],
                                                               "\n        The getter for self.fields. This returns the list of field objects\n        available to this model (including through parent models).\n\n        Callers are not permitted to modify this list, since it's a reference\n        to this instance (not a copy).\n        "),
                                                              ('get_fields_with_model',
                                                               [],
                                                               '\n        Returns a sequence of (field, model) pairs for all fields. The "model"\n        element is None for fields on the current model. Mostly of use when\n        constructing queries so that we know which model a field belongs to.\n        '),
                                                              ('_fill_fields_cache', [], ''),
                                                              ('_many_to_many', [], ''),
                                                              ('get_m2m_with_model',
                                                               [],
                                                               '\n        The many-to-many version of get_fields_with_model().\n        '),
                                                              ('_fill_m2m_cache', [], ''),
                                                              ('get_field',
                                                               ['name', 'many_to_many=True'],
                                                               '\n        Returns the requested field by name. Raises FieldDoesNotExist on error.\n        '),
                                                              ('get_field_by_name',
                                                               ['name'],
                                                               "\n        Returns the (field_object, model, direct, m2m), where field_object is\n        the Field instance for the given name, model is the model containing\n        this field (None for local fields), direct is True if the field exists\n        on this model, and m2m is True for many-to-many relations. When\n        'direct' is False, 'field_object' is the corresponding RelatedObject\n        for this field (since the field doesn't have an instance associated\n        with it).\n\n        Uses a cache internally, so after the first access, this is very fast.\n        "),
                                                              ('get_all_field_names',
                                                               [],
                                                               '\n        Returns a list of all field names that are possible for this model\n        (including reverse relation names). This is used for pretty printing\n        debugging output (a list of choices), so any internal-only field names\n        are not included.\n        '),
                                                              ('init_name_map',
                                                               [],
                                                               '\n        Initialises the field name -> field object mapping.\n        '),
                                                              ('get_add_permission', [], ''),
                                                              ('get_change_permission', [], ''),
                                                              ('get_delete_permission', [], ''),
                                                              ('get_all_related_objects',
                                                               ['local_only=False',
                                                                'include_hidden=False'],
                                                               ''),
                                                              ('get_all_related_objects_with_model',
                                                               ['local_only=False',
                                                                'include_hidden=False'],
                                                               '\n        Returns a list of (related-object, model) pairs. Similar to\n        get_fields_with_model().\n        '),
                                                              ('_fill_related_objects_cache',
                                                               [],
                                                               ''),
                                                              ('get_all_related_many_to_many_objects',
                                                               ['local_only=False'],
                                                               ''),
                                                              ('get_all_related_m2m_objects_with_model',
                                                               [],
                                                               '\n        Returns a list of (related-m2m-object, model) pairs. Similar to\n        get_fields_with_model().\n        '),
                                                              ('_fill_related_many_to_many_cache',
                                                               [],
                                                               ''),
                                                              ('get_base_chain',
                                                               ['model'],
                                                               "\n        Returns a list of parent classes leading to 'model' (order from closet\n        to most distant ancestor). This has to handle the case were 'model' is\n        a granparent or even more distant relation.\n        "),
                                                              ('get_parent_list',
                                                               [],
                                                               '\n        Returns a list of all the ancestor of this model as a list. Useful for\n        determining if something is an ancestor, regardless of lineage.\n        '),
                                                              ('get_ancestor_link',
                                                               ['ancestor'],
                                                               '\n        Returns the field on the current model which points to the given\n        "ancestor". This is possible an indirect link (a pointer to a parent\n        model, which points, eventually, to the ancestor). Used when\n        constructing table joins for model inheritance.\n\n        Returns None if the model isn\'t an ancestor of this one.\n        '),
                                                              ('get_ordered_objects',
                                                               [],
                                                               'Returns a list of Options objects that are ordered with respect to this object.'),
                                                              ('pk_index',
                                                               [],
                                                               '\n        Returns the index of the primary key field in the self.fields list.\n        ')],
                                                  'properties': ['local_fields',
                                                                 'local_many_to_many',
                                                                 'virtual_fields',
                                                                 'module_name',
                                                                 'verbose_name',
                                                                 'verbose_name_plural',
                                                                 'db_table',
                                                                 'ordering',
                                                                 'unique_together',
                                                                 'permissions',
                                                                 'object_name',
                                                                 'app_label',
                                                                 'get_latest_by',
                                                                 'order_with_respect_to',
                                                                 'db_tablespace',
                                                                 'admin',
                                                                 'meta',
                                                                 'pk',
                                                                 'has_auto_field',
                                                                 'auto_field',
                                                                 'abstract',
                                                                 'managed',
                                                                 'proxy',
                                                                 'proxy_for_model',
                                                                 'parents',
                                                                 'duplicate_targets',
                                                                 'auto_created',
                                                                 'abstract_managers',
                                                                 'concrete_managers',
                                                                 'related_fkey_lookups',
                                                                 'installed',
                                                                 '_m2m_cache',
                                                                 '_field_cache',
                                                                 '_field_name_cache',
                                                                 '_name_map',
                                                                 'verbose_name_raw',
                                                                 'fields',
                                                                 'many_to_many',
                                                                 '_related_objects_cache',
                                                                 '_related_many_to_many_cache',
                                                                 '_ordered_objects']},
             'django.db.models.query.DateQuerySet': {'bases': ['django.db.models.query_utils.QuerySet'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('iterator', [], ''),
                                                                 ('_setup_query',
                                                                  [],
                                                                  '\n        Sets up any special features of the query attribute.\n\n        Called by the _clone() method after initializing the rest of the\n        instance.\n        '),
                                                                 ('_clone',
                                                                  ['klass=None',
                                                                   'setup=False',
                                                                   '**kwargs'],
                                                                  '')],
                                                     'properties': ['query']},
             'django.db.models.query.EmptyQuerySet': {'bases': ['django.db.models.query_utils.QuerySet'],
                                                      'constructor': ['model=None',
                                                                      'query=None',
                                                                      'using=None'],
                                                      'docstring': '',
                                                      'methods': [('__and__', ['other'], ''),
                                                                  ('__or__', ['other'], ''),
                                                                  ('count', [], ''),
                                                                  ('delete', [], ''),
                                                                  ('_clone',
                                                                   ['klass=None',
                                                                    'setup=False',
                                                                    '**kwargs'],
                                                                   ''),
                                                                  ('iterator', [], ''),
                                                                  ('all',
                                                                   [],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('filter',
                                                                   ['*args', '**kwargs'],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('exclude',
                                                                   ['*args', '**kwargs'],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('complex_filter',
                                                                   ['filter_obj'],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('select_related',
                                                                   ['*fields', '**kwargs'],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('annotate',
                                                                   ['*args', '**kwargs'],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('order_by',
                                                                   ['*field_names'],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('distinct',
                                                                   ['true_or_false=True'],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('extra',
                                                                   ['select=None',
                                                                    'where=None',
                                                                    'params=None',
                                                                    'tables=None',
                                                                    'order_by=None',
                                                                    'select_params=None'],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('reverse',
                                                                   [],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('defer',
                                                                   ['*fields'],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('only',
                                                                   ['*fields'],
                                                                   '\n        Always returns EmptyQuerySet.\n        '),
                                                                  ('update',
                                                                   ['**kwargs'],
                                                                   "\n        Don't update anything.\n        ")],
                                                      'properties': ['_result_cache',
                                                                     'value_annotation']},
             'django.db.models.query.QuerySet': {'bases': ['object'],
                                                 'constructor': ['model=None',
                                                                 'query=None',
                                                                 'using=None'],
                                                 'docstring': '\n    Represents a lazy database lookup for a set of objects.\n    ',
                                                 'methods': [('__deepcopy__',
                                                              ['memo'],
                                                              "\n        Deep copy of a QuerySet doesn't populate the cache\n        "),
                                                             ('__getstate__',
                                                              [],
                                                              '\n        Allows the QuerySet to be pickled.\n        '),
                                                             ('__repr__', [], ''),
                                                             ('__len__', [], ''),
                                                             ('__iter__', [], ''),
                                                             ('_result_iter', [], ''),
                                                             ('__nonzero__', [], ''),
                                                             ('__contains__', ['val'], ''),
                                                             ('__getitem__',
                                                              ['k'],
                                                              '\n        Retrieves an item or slice from the set of results.\n        '),
                                                             ('__and__', ['other'], ''),
                                                             ('__or__', ['other'], ''),
                                                             ('iterator',
                                                              [],
                                                              '\n        An iterator over the results from applying this QuerySet to the\n        database.\n        '),
                                                             ('aggregate',
                                                              ['*args', '**kwargs'],
                                                              "\n        Returns a dictionary containing the calculations (aggregation)\n        over the current queryset\n\n        If args is present the expression is passed as a kwarg using\n        the Aggregate object's default alias.\n        "),
                                                             ('count',
                                                              [],
                                                              '\n        Performs a SELECT COUNT() and returns the number of records as an\n        integer.\n\n        If the QuerySet is already fully cached this simply returns the length\n        of the cached results set to avoid multiple SELECT COUNT(*) calls.\n        '),
                                                             ('get',
                                                              ['*args', '**kwargs'],
                                                              '\n        Performs the query and returns a single object matching the given\n        keyword arguments.\n        '),
                                                             ('create',
                                                              ['**kwargs'],
                                                              '\n        Creates a new object with the given kwargs, saving it to the database\n        and returning the created object.\n        '),
                                                             ('get_or_create',
                                                              ['**kwargs'],
                                                              '\n        Looks up an object with the given kwargs, creating one if necessary.\n        Returns a tuple of (object, created), where created is a boolean\n        specifying whether an object was created.\n        '),
                                                             ('latest',
                                                              ['field_name=None'],
                                                              "\n        Returns the latest object, according to the model's 'get_latest_by'\n        option or optional given field_name.\n        "),
                                                             ('in_bulk',
                                                              ['id_list'],
                                                              '\n        Returns a dictionary mapping each of the given IDs to the object with\n        that ID.\n        '),
                                                             ('delete',
                                                              [],
                                                              '\n        Deletes the records in the current QuerySet.\n        '),
                                                             ('update',
                                                              ['**kwargs'],
                                                              '\n        Updates all elements in the current QuerySet, setting all the given\n        fields to the appropriate values.\n        '),
                                                             ('_update',
                                                              ['values'],
                                                              '\n        A version of update that accepts field objects instead of field names.\n        Used primarily for model saving and not intended for use by general\n        code (it requires too much poking around at model internals to be\n        useful at that level).\n        '),
                                                             ('exists', [], ''),
                                                             ('values', ['*fields'], ''),
                                                             ('values_list',
                                                              ['*fields', '**kwargs'],
                                                              ''),
                                                             ('dates',
                                                              ['field_name',
                                                               'kind',
                                                               "order='ASC'"],
                                                              "\n        Returns a list of datetime objects representing all available dates for\n        the given field_name, scoped to 'kind'.\n        "),
                                                             ('none',
                                                              [],
                                                              '\n        Returns an empty QuerySet.\n        '),
                                                             ('all',
                                                              [],
                                                              '\n        Returns a new QuerySet that is a copy of the current one. This allows a\n        QuerySet to proxy for a model manager in some cases.\n        '),
                                                             ('filter',
                                                              ['*args', '**kwargs'],
                                                              '\n        Returns a new QuerySet instance with the args ANDed to the existing\n        set.\n        '),
                                                             ('exclude',
                                                              ['*args', '**kwargs'],
                                                              '\n        Returns a new QuerySet instance with NOT (args) ANDed to the existing\n        set.\n        '),
                                                             ('_filter_or_exclude',
                                                              ['negate', '*args', '**kwargs'],
                                                              ''),
                                                             ('complex_filter',
                                                              ['filter_obj'],
                                                              "\n        Returns a new QuerySet instance with filter_obj added to the filters.\n\n        filter_obj can be a Q object (or anything with an add_to_query()\n        method) or a dictionary of keyword lookup arguments.\n\n        This exists to support framework features such as 'limit_choices_to',\n        and usually it will be more natural to use other methods.\n        "),
                                                             ('select_related',
                                                              ['*fields', '**kwargs'],
                                                              '\n        Returns a new QuerySet instance that will select related objects.\n\n        If fields are specified, they must be ForeignKey fields and only those\n        related objects are included in the selection.\n        '),
                                                             ('dup_select_related',
                                                              ['other'],
                                                              "\n        Copies the related selection status from the QuerySet 'other' to the\n        current QuerySet.\n        "),
                                                             ('annotate',
                                                              ['*args', '**kwargs'],
                                                              '\n        Return a query set in which the returned objects have been annotated\n        with data aggregated from related fields.\n        '),
                                                             ('order_by',
                                                              ['*field_names'],
                                                              '\n        Returns a new QuerySet instance with the ordering changed.\n        '),
                                                             ('distinct',
                                                              ['true_or_false=True'],
                                                              '\n        Returns a new QuerySet instance that will select only distinct results.\n        '),
                                                             ('extra',
                                                              ['select=None',
                                                               'where=None',
                                                               'params=None',
                                                               'tables=None',
                                                               'order_by=None',
                                                               'select_params=None'],
                                                              '\n        Adds extra SQL fragments to the query.\n        '),
                                                             ('reverse',
                                                              [],
                                                              '\n        Reverses the ordering of the QuerySet.\n        '),
                                                             ('defer',
                                                              ['*fields'],
                                                              '\n        Defers the loading of data for certain fields until they are accessed.\n        The set of fields to defer is added to any existing set of deferred\n        fields. The only exception to this is if None is passed in as the only\n        parameter, in which case all deferrals are removed (None acts as a\n        reset option).\n        '),
                                                             ('only',
                                                              ['*fields'],
                                                              '\n        Essentially, the opposite of defer. Only the fields passed into this\n        method and that are not already specified as deferred are loaded\n        immediately when the queryset is evaluated.\n        '),
                                                             ('using',
                                                              ['alias'],
                                                              "\n        Selects which database this QuerySet should excecute it's query against.\n        "),
                                                             ('ordered',
                                                              [],
                                                              '\n        Returns True if the QuerySet is ordered -- i.e. has an order_by()\n        clause or a default ordering on the model.\n        '),
                                                             ('_clone',
                                                              ['klass=None',
                                                               'setup=False',
                                                               '**kwargs'],
                                                              ''),
                                                             ('_fill_cache',
                                                              ['num=None'],
                                                              "\n        Fills the result cache with 'num' more entries (or until the results\n        iterator is exhausted).\n        "),
                                                             ('_next_is_sticky',
                                                              [],
                                                              '\n        Indicates that the next filter call and the one following that should\n        be treated as a single filter. This is only important when it comes to\n        determining when to reuse tables for many-to-many filters. Required so\n        that we can filter naturally on the results of related managers.\n\n        This doesn\'t return a clone of the current QuerySet (it returns\n        "self"). The method is only used internally and should be immediately\n        followed by a filter() that does create a clone.\n        '),
                                                             ('_merge_sanity_check',
                                                              ['other'],
                                                              "\n        Checks that we are merging two comparable QuerySet classes. By default\n        this does nothing, but see the ValuesQuerySet for an example of where\n        it's useful.\n        "),
                                                             ('_setup_aggregate_query',
                                                              ['aggregates'],
                                                              '\n        Prepare the query for computing a result that contains aggregate annotations.\n        '),
                                                             ('_prepare', [], ''),
                                                             ('_as_sql',
                                                              ['connection'],
                                                              "\n        Returns the internal query's SQL and parameters (as a tuple).\n        ")],
                                                 'properties': ['model',
                                                                '_db',
                                                                'query',
                                                                '_result_cache',
                                                                '_iter',
                                                                '_sticky_filter',
                                                                '_for_write',
                                                                'ordered',
                                                                'db',
                                                                'value_annotation']},
             'django.db.models.query.RawQuerySet': {'bases': ['object'],
                                                    'constructor': ['raw_query',
                                                                    'model=None',
                                                                    'query=None',
                                                                    'params=None',
                                                                    'translations=None',
                                                                    'using=None'],
                                                    'docstring': '\n    Provides an iterator which converts the results of raw SQL queries into\n    annotated model instances.\n    ',
                                                    'methods': [('__iter__', [], ''),
                                                                ('__repr__', [], ''),
                                                                ('__getitem__', ['k'], ''),
                                                                ('using',
                                                                 ['alias'],
                                                                 "\n        Selects which database this Raw QuerySet should excecute it's query against.\n        ")],
                                                    'properties': ['raw_query',
                                                                   'model',
                                                                   '_db',
                                                                   'query',
                                                                   'params',
                                                                   'translations',
                                                                   'db',
                                                                   'columns',
                                                                   '_columns',
                                                                   'model_fields',
                                                                   '_model_fields']},
             'django.db.models.query.ValuesListQuerySet': {'bases': ['django.db.models.query.ValuesQuerySet'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('iterator', [], ''),
                                                                       ('_clone',
                                                                        ['*args', '**kwargs'],
                                                                        '')],
                                                           'properties': []},
             'django.db.models.query.ValuesQuerySet': {'bases': ['django.db.models.query_utils.QuerySet'],
                                                       'constructor': ['*args', '**kwargs'],
                                                       'docstring': '',
                                                       'methods': [('iterator', [], ''),
                                                                   ('_setup_query',
                                                                    [],
                                                                    '\n        Constructs the field_names list that the values query will be\n        retrieving.\n\n        Called by the _clone() method after initializing the rest of the\n        instance.\n        '),
                                                                   ('_clone',
                                                                    ['klass=None',
                                                                     'setup=False',
                                                                     '**kwargs'],
                                                                    '\n        Cloning a ValuesQuerySet preserves the current fields.\n        '),
                                                                   ('_merge_sanity_check',
                                                                    ['other'],
                                                                    ''),
                                                                   ('_setup_aggregate_query',
                                                                    ['aggregates'],
                                                                    '\n        Prepare the query for computing a result that contains aggregate annotations.\n        '),
                                                                   ('_as_sql',
                                                                    ['connection'],
                                                                    "\n        For ValueQuerySet (and subclasses like ValuesListQuerySet), they can\n        only be used as nested queries if they're already set up to select only\n        a single field (in which case, that is the field column that is\n        returned). This differs from QuerySet.as_sql(), where the column to\n        select is set up by Django.\n        "),
                                                                   ('_prepare',
                                                                    [],
                                                                    "\n        Validates that we aren't trying to do a query like\n        value__in=qs.values('value1', 'value2'), which isn't valid.\n        ")],
                                                       'properties': ['extra_names',
                                                                      'aggregate_names',
                                                                      'field_names']},
             'django.db.models.query_utils.DeferredAttribute': {'bases': ['object'],
                                                                'constructor': ['field_name',
                                                                                'model'],
                                                                'docstring': '\n    A wrapper for a deferred-loading field. When the value is read from this\n    object the first time, the query is executed.\n    ',
                                                                'methods': [('__get__',
                                                                             ['instance',
                                                                              'owner'],
                                                                             '\n        Retrieves and caches the value from the datastore on the first lookup.\n        Returns the cached value.\n        '),
                                                                            ('__set__',
                                                                             ['instance',
                                                                              'value'],
                                                                             '\n        Deferred loading attributes can be set normally (which means there will\n        never be a database lookup involved.\n        ')],
                                                                'properties': ['field_name',
                                                                               'model_ref',
                                                                               'loaded']},
             'django.db.models.query_utils.InvalidQuery': {'bases': ['Exception'],
                                                           'constructor': [],
                                                           'docstring': "\n    The query passed to raw isn't a safe query to use with raw.\n    ",
                                                           'methods': [],
                                                           'properties': []},
             'django.db.models.query_utils.Q': {'bases': ['django.utils.tree.Node'],
                                                'constructor': ['*args', '**kwargs'],
                                                'docstring': '\n    Encapsulates filters as objects that can then be combined logically (using\n    & and |).\n    ',
                                                'methods': [('_combine', ['other', 'conn'], ''),
                                                            ('__or__', ['other'], ''),
                                                            ('__and__', ['other'], ''),
                                                            ('__invert__', [], '')],
                                                'properties': ['AND', 'OR', 'default']},
             'django.db.models.query_utils.QueryWrapper': {'bases': ['object'],
                                                           'constructor': ['sql', 'params'],
                                                           'docstring': '\n    A type that indicates the contents are an SQL fragment and the associate\n    parameters. Can be used to pass opaque data to a where-clause, for example.\n    ',
                                                           'methods': [('as_sql',
                                                                        ['qn=None',
                                                                         'connection=None'],
                                                                        '')],
                                                           'properties': ['data']},
             'django.db.models.related.BoundRelatedObject': {'bases': ['object'],
                                                             'constructor': ['related_object',
                                                                             'field_mapping',
                                                                             'original'],
                                                             'docstring': '',
                                                             'methods': [('template_name',
                                                                          [],
                                                                          ''),
                                                                         ('__repr__', [], '')],
                                                             'properties': ['relation',
                                                                            'field_mappings']},
             'django.db.models.related.RelatedObject': {'bases': ['object'],
                                                        'constructor': ['parent_model',
                                                                        'model',
                                                                        'field'],
                                                        'docstring': '',
                                                        'methods': [('get_choices',
                                                                     ['include_blank=True',
                                                                      'blank_choice=BLANK_CHOICE_DASH',
                                                                      'limit_to_currently_related=False'],
                                                                     'Returns choices with a default blank choices included, for use\n        as SelectField choices for this field.\n\n        Analogue of django.db.models.fields.Field.get_choices, provided\n        initially for utilisation by RelatedFilterSpec.\n        '),
                                                                    ('get_db_prep_lookup',
                                                                     ['lookup_type',
                                                                      'value',
                                                                      'connection',
                                                                      'prepared=False'],
                                                                     ''),
                                                                    ('editable_fields',
                                                                     [],
                                                                     'Get the fields in this class that should be edited inline.'),
                                                                    ('__repr__', [], ''),
                                                                    ('bind',
                                                                     ['field_mapping',
                                                                      'original',
                                                                      'bound_related_object_class=BoundRelatedObject'],
                                                                     ''),
                                                                    ('get_accessor_name',
                                                                     [],
                                                                     ''),
                                                                    ('get_cache_name', [], '')],
                                                        'properties': ['parent_model',
                                                                       'model',
                                                                       'opts',
                                                                       'field',
                                                                       'name',
                                                                       'var_name']},
             'django.db.models.sql.aggregates.Aggregate': {'bases': ['object'],
                                                           'constructor': ['col',
                                                                           'source=None',
                                                                           'is_summary=False',
                                                                           '**extra'],
                                                           'docstring': '\n    Default SQL Aggregate.\n    ',
                                                           'methods': [('relabel_aliases',
                                                                        ['change_map'],
                                                                        ''),
                                                                       ('as_sql',
                                                                        ['qn', 'connection'],
                                                                        'Return the aggregate, rendered as SQL.')],
                                                           'properties': ['is_ordinal',
                                                                          'is_computed',
                                                                          'sql_template',
                                                                          'col',
                                                                          'source',
                                                                          'is_summary',
                                                                          'extra',
                                                                          'field']},
             'django.db.models.sql.aggregates.AggregateField': {'bases': ['object'],
                                                                'constructor': ['internal_type'],
                                                                'docstring': 'An internal field mockup used to identify aggregates in the\n    data-conversion parts of the database backend.\n    ',
                                                                'methods': [('get_internal_type',
                                                                             [],
                                                                             '')],
                                                                'properties': ['internal_type']},
             'django.db.models.sql.aggregates.Avg': {'bases': ['django.db.models.sql.aggregates.Aggregate'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['is_computed',
                                                                    'sql_function']},
             'django.db.models.sql.aggregates.Count': {'bases': ['django.db.models.sql.aggregates.Aggregate'],
                                                       'constructor': ['col',
                                                                       'distinct=False',
                                                                       '**extra'],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['is_ordinal',
                                                                      'sql_function',
                                                                      'sql_template']},
             'django.db.models.sql.aggregates.Max': {'bases': ['django.db.models.sql.aggregates.Aggregate'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['sql_function']},
             'django.db.models.sql.aggregates.Min': {'bases': ['django.db.models.sql.aggregates.Aggregate'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['sql_function']},
             'django.db.models.sql.aggregates.StdDev': {'bases': ['django.db.models.sql.aggregates.Aggregate'],
                                                        'constructor': ['col',
                                                                        'sample=False',
                                                                        '**extra'],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['is_computed',
                                                                       'sql_function']},
             'django.db.models.sql.aggregates.Sum': {'bases': ['django.db.models.sql.aggregates.Aggregate'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['sql_function']},
             'django.db.models.sql.aggregates.Variance': {'bases': ['django.db.models.sql.aggregates.Aggregate'],
                                                          'constructor': ['col',
                                                                          'sample=False',
                                                                          '**extra'],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['is_computed',
                                                                         'sql_function']},
             'django.db.models.sql.compiler.SQLAggregateCompiler': {'bases': ['django.db.models.sql.compiler.SQLCompiler'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('as_sql',
                                                                                 ['qn=None'],
                                                                                 '\n        Creates the SQL for this query. Returns the SQL string and list of\n        parameters.\n        ')],
                                                                    'properties': []},
             'django.db.models.sql.compiler.SQLCompiler': {'bases': ['object'],
                                                           'constructor': ['query',
                                                                           'connection',
                                                                           'using'],
                                                           'docstring': '',
                                                           'methods': [('pre_sql_setup',
                                                                        [],
                                                                        "\n        Does any necessary class setup immediately prior to producing SQL. This\n        is for things that can't necessarily be done in __init__ because we\n        might not have all the pieces in place at that time.\n        "),
                                                                       ('quote_name_unless_alias',
                                                                        ['name'],
                                                                        "\n        A wrapper around connection.ops.quote_name that doesn't quote aliases\n        for table names. This avoids problems with some SQL dialects that treat\n        quoted strings specially (e.g. PostgreSQL).\n        "),
                                                                       ('as_sql',
                                                                        ['with_limits=True',
                                                                         'with_col_aliases=False'],
                                                                        "\n        Creates the SQL for this query. Returns the SQL string and list of\n        parameters.\n\n        If 'with_limits' is False, any limit/offset information is not included\n        in the query.\n        "),
                                                                       ('as_nested_sql',
                                                                        [],
                                                                        "\n        Perform the same functionality as the as_sql() method, returning an\n        SQL string and parameters. However, the alias prefixes are bumped\n        beforehand (in a copy -- the current query isn't changed), and any\n        ordering is removed if the query is unsliced.\n\n        Used when nesting this query inside another.\n        "),
                                                                       ('get_columns',
                                                                        ['with_aliases=False'],
                                                                        "\n        Returns the list of columns to use in the select statement. If no\n        columns have been specified, returns all columns relating to fields in\n        the model.\n\n        If 'with_aliases' is true, any column names that are duplicated\n        (without the table names) are given unique aliases. This is needed in\n        some cases to avoid ambiguity with nested queries.\n        "),
                                                                       ('get_default_columns',
                                                                        ['with_aliases=False',
                                                                         'col_aliases=None',
                                                                         'start_alias=None',
                                                                         'opts=None',
                                                                         'as_pairs=False',
                                                                         'local_only=False'],
                                                                        '\n        Computes the default columns for selecting every field in the base\n        model. Will sometimes be called to pull in related models (e.g. via\n        select_related), in which case "opts" and "start_alias" will be given\n        to provide a starting point for the traversal.\n\n        Returns a list of strings, quoted appropriately for use in SQL\n        directly, as well as a set of aliases used in the select statement (if\n        \'as_pairs\' is True, returns a list of (alias, col_name) pairs instead\n        of strings as the first component and None as the second component).\n        '),
                                                                       ('get_ordering',
                                                                        [],
                                                                        '\n        Returns a tuple containing a list representing the SQL elements in the\n        "order by" clause, and the list of SQL elements that need to be added\n        to the GROUP BY clause as a result of the ordering.\n\n        Also sets the ordering_aliases attribute on this instance to a list of\n        extra aliases needed in the select.\n\n        Determining the ordering SQL can change the tables we need to include,\n        so this should be run *before* get_from_clause().\n        '),
                                                                       ('find_ordering_name',
                                                                        ['name',
                                                                         'opts',
                                                                         'alias=None',
                                                                         "default_order='ASC'",
                                                                         'already_seen=None'],
                                                                        "\n        Returns the table alias (the name might be ambiguous, the alias will\n        not be) and column name for ordering by the given 'name' parameter.\n        The 'name' is of the form 'field1__field2__...__fieldN'.\n        "),
                                                                       ('get_from_clause',
                                                                        [],
                                                                        '\n        Returns a list of strings that are joined together to go after the\n        "FROM" part of the query, as well as a list any extra parameters that\n        need to be included. Sub-classes, can override this to create a\n        from-clause via a "select".\n\n        This should only be called after any SQL construction methods that\n        might change the tables we need. This means the select columns and\n        ordering must be done first.\n        '),
                                                                       ('get_grouping',
                                                                        [],
                                                                        '\n        Returns a tuple representing the SQL elements in the "group by" clause.\n        '),
                                                                       ('fill_related_selections',
                                                                        ['opts=None',
                                                                         'root_alias=None',
                                                                         'cur_depth=1',
                                                                         'used=None',
                                                                         'requested=None',
                                                                         'restricted=None',
                                                                         'nullable=None',
                                                                         'dupe_set=None',
                                                                         'avoid_set=None'],
                                                                        '\n        Fill in the information needed for a select_related query. The current\n        depth is measured as the number of connections away from the root model\n        (for example, cur_depth=1 means we are looking at models with direct\n        connections to the root model).\n        '),
                                                                       ('deferred_to_columns',
                                                                        [],
                                                                        '\n        Converts the self.deferred_loading data structure to mapping of table\n        names to sets of column names which are to be loaded. Returns the\n        dictionary.\n        '),
                                                                       ('results_iter',
                                                                        [],
                                                                        '\n        Returns an iterator over the results from executing this query.\n        '),
                                                                       ('execute_sql',
                                                                        ['result_type=MULTI'],
                                                                        "\n        Run the query against the database and returns the result(s). The\n        return value is a single data item if result_type is SINGLE, or an\n        iterator over the results if the result_type is MULTI.\n\n        result_type is either MULTI (use fetchmany() to retrieve all rows),\n        SINGLE (only retrieve a single row), or None. In this last case, the\n        cursor is returned if any query is executed, since it's used by\n        subclasses such as InsertQuery). It's possible, however, that no query\n        is needed, as the filters describe an empty set. In that case, None is\n        returned, to avoid any unnecessary database interaction.\n        ")],
                                                           'properties': ['query',
                                                                          'connection',
                                                                          'using',
                                                                          'quote_cache',
                                                                          '_select_aliases']},
             'django.db.models.sql.compiler.SQLDateCompiler': {'bases': ['django.db.models.sql.compiler.SQLCompiler'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('results_iter',
                                                                            [],
                                                                            '\n        Returns an iterator over the results from executing this query.\n        ')],
                                                               'properties': []},
             'django.db.models.sql.compiler.SQLDeleteCompiler': {'bases': ['django.db.models.sql.compiler.SQLCompiler'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('as_sql',
                                                                              [],
                                                                              '\n        Creates the SQL for this query. Returns the SQL string and list of\n        parameters.\n        ')],
                                                                 'properties': []},
             'django.db.models.sql.compiler.SQLInsertCompiler': {'bases': ['django.db.models.sql.compiler.SQLCompiler'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('placeholder',
                                                                              ['field', 'val'],
                                                                              ''),
                                                                             ('as_sql', [], ''),
                                                                             ('execute_sql',
                                                                              ['return_id=False'],
                                                                              '')],
                                                                 'properties': ['return_id']},
             'django.db.models.sql.compiler.SQLUpdateCompiler': {'bases': ['django.db.models.sql.compiler.SQLCompiler'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('as_sql',
                                                                              [],
                                                                              '\n        Creates the SQL for this query. Returns the SQL string and list of\n        parameters.\n        '),
                                                                             ('execute_sql',
                                                                              ['result_type'],
                                                                              '\n        Execute the specified update. Returns the number of rows affected by\n        the primary update query. The "primary update query" is the first\n        non-empty query that is executed. Row counts for any subsequent,\n        related queries are not available.\n        '),
                                                                             ('pre_sql_setup',
                                                                              [],
                                                                              '\n        If the update depends on results from other tables, we need to do some\n        munging of the "where" conditions to match the format required for\n        (portable) SQL updates. That is done here.\n\n        Further, if we are going to be running multiple updates, we pull out\n        the id values to update at this point so that they don\'t change as a\n        result of the progressive updates.\n        ')],
                                                                 'properties': []},
             'django.db.models.sql.datastructures.Date': {'bases': ['object'],
                                                          'constructor': ['col', 'lookup_type'],
                                                          'docstring': '\n    Add a date selection column.\n    ',
                                                          'methods': [('relabel_aliases',
                                                                       ['change_map'],
                                                                       ''),
                                                                      ('as_sql',
                                                                       ['qn', 'connection'],
                                                                       '')],
                                                          'properties': ['col', 'lookup_type']},
             'django.db.models.sql.datastructures.Empty': {'bases': ['object'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': []},
             'django.db.models.sql.datastructures.EmptyResultSet': {'bases': ['Exception'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.db.models.sql.datastructures.FullResultSet': {'bases': ['Exception'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': []},
             'django.db.models.sql.datastructures.MultiJoin': {'bases': ['Exception'],
                                                               'constructor': ['level'],
                                                               'docstring': '\n    Used by join construction code to indicate the point at which a\n    multi-valued join was attempted (if the caller wants to treat that\n    exceptionally).\n    ',
                                                               'methods': [],
                                                               'properties': ['level']},
             'django.db.models.sql.datastructures.RawValue': {'bases': ['object'],
                                                              'constructor': ['value'],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['value']},
             'django.db.models.sql.expressions.SQLEvaluator': {'bases': ['object'],
                                                               'constructor': ['expression',
                                                                               'query',
                                                                               'allow_joins=True'],
                                                               'docstring': '',
                                                               'methods': [('prepare', [], ''),
                                                                           ('as_sql',
                                                                            ['qn',
                                                                             'connection'],
                                                                            ''),
                                                                           ('relabel_aliases',
                                                                            ['change_map'],
                                                                            ''),
                                                                           ('prepare_node',
                                                                            ['node',
                                                                             'query',
                                                                             'allow_joins'],
                                                                            ''),
                                                                           ('prepare_leaf',
                                                                            ['node',
                                                                             'query',
                                                                             'allow_joins'],
                                                                            ''),
                                                                           ('evaluate_node',
                                                                            ['node',
                                                                             'qn',
                                                                             'connection'],
                                                                            ''),
                                                                           ('evaluate_leaf',
                                                                            ['node',
                                                                             'qn',
                                                                             'connection'],
                                                                            ''),
                                                                           ('evaluate_date_modifier_node',
                                                                            ['node',
                                                                             'qn',
                                                                             'connection'],
                                                                            '')],
                                                               'properties': ['expression',
                                                                              'opts',
                                                                              'cols',
                                                                              'contains_aggregate']},
             'django.db.models.sql.query.Query': {'bases': ['object'],
                                                  'constructor': ['model', 'where=WhereNode'],
                                                  'docstring': '\n    A single SQL query.\n    ',
                                                  'methods': [('__str__',
                                                               [],
                                                               "\n        Returns the query as a string of SQL with the parameter values\n        substituted in.\n\n        Parameter values won't necessarily be quoted correctly, since that is\n        done by the database interface at execution time.\n        "),
                                                              ('__deepcopy__', ['memo'], ''),
                                                              ('__getstate__',
                                                               [],
                                                               '\n        Pickling support.\n        '),
                                                              ('__setstate__',
                                                               ['obj_dict'],
                                                               '\n        Unpickling support.\n        '),
                                                              ('prepare', [], ''),
                                                              ('get_compiler',
                                                               ['using=None',
                                                                'connection=None'],
                                                               ''),
                                                              ('get_meta',
                                                               [],
                                                               '\n        Returns the Options instance (the model._meta) from which to start\n        processing. Normally, this is self.model._meta, but it can be changed\n        by subclasses.\n        '),
                                                              ('clone',
                                                               ['klass=None',
                                                                'memo=None',
                                                                '**kwargs'],
                                                               "\n        Creates a copy of the current instance. The 'kwargs' parameter can be\n        used by clients to update attributes after copying has taken place.\n        "),
                                                              ('convert_values',
                                                               ['value',
                                                                'field',
                                                                'connection'],
                                                               'Convert the database-returned value into a type that is consistent\n        across database backends.\n\n        By default, this defers to the underlying backend operations, but\n        it can be overridden by Query classes for specific backends.\n        '),
                                                              ('resolve_aggregate',
                                                               ['value',
                                                                'aggregate',
                                                                'connection'],
                                                               'Resolve the value of aggregates returned by the database to\n        consistent (and reasonable) types.\n\n        This is required because of the predisposition of certain backends\n        to return Decimal and long types when they are not needed.\n        '),
                                                              ('get_aggregation',
                                                               ['using'],
                                                               '\n        Returns the dictionary with the values of the existing aggregations.\n        '),
                                                              ('get_count',
                                                               ['using'],
                                                               '\n        Performs a COUNT() query using the current filter constraints.\n        '),
                                                              ('has_results', ['using'], ''),
                                                              ('combine',
                                                               ['rhs', 'connector'],
                                                               '\n        Merge the \'rhs\' query into the current one (with any \'rhs\' effects\n        being applied *after* (that is, "to the right of") anything in the\n        current query. \'rhs\' is not modified during a call to this function.\n\n        The \'connector\' parameter describes how to connect filters from the\n        \'rhs\' query.\n        '),
                                                              ('deferred_to_data',
                                                               ['target', 'callback'],
                                                               '\n        Converts the self.deferred_loading data structure to an alternate data\n        structure, describing the field that *will* be loaded. This is used to\n        compute the columns to select from the database and also by the\n        QuerySet class to work out which fields are being initialised on each\n        model. Models that have all their fields included aren\'t mentioned in\n        the result, only those that have field restrictions in place.\n\n        The "target" parameter is the instance that is populated (in place).\n        The "callback" is a function that is called whenever a (model, field)\n        pair need to be added to "target". It accepts three parameters:\n        "target", and the model and list of fields being added for that model.\n        '),
                                                              ('deferred_to_columns_cb',
                                                               ['target', 'model', 'fields'],
                                                               '\n        Callback used by deferred_to_columns(). The "target" parameter should\n        be a set instance.\n        '),
                                                              ('table_alias',
                                                               ['table_name', 'create=False'],
                                                               "\n        Returns a table alias for the given table_name and whether this is a\n        new alias or not.\n\n        If 'create' is true, a new alias is always created. Otherwise, the\n        most recently created alias for the table (if one exists) is reused.\n        "),
                                                              ('ref_alias',
                                                               ['alias'],
                                                               ' Increases the reference count for this alias. '),
                                                              ('unref_alias',
                                                               ['alias'],
                                                               ' Decreases the reference count for this alias. '),
                                                              ('promote_alias',
                                                               ['alias',
                                                                'unconditional=False'],
                                                               "\n        Promotes the join type of an alias to an outer join if it's possible\n        for the join to contain NULL values on the left. If 'unconditional' is\n        False, the join is only promoted if it is nullable, otherwise it is\n        always promoted.\n\n        Returns True if the join was promoted.\n        "),
                                                              ('promote_alias_chain',
                                                               ['chain', 'must_promote=False'],
                                                               "\n        Walks along a chain of aliases, promoting the first nullable join and\n        any joins following that. If 'must_promote' is True, all the aliases in\n        the chain are promoted.\n        "),
                                                              ('promote_unused_aliases',
                                                               ['initial_refcounts',
                                                                'used_aliases'],
                                                               '\n        Given a "before" copy of the alias_refcounts dictionary (as\n        \'initial_refcounts\') and a collection of aliases that may have been\n        changed or created, works out which aliases have been created since\n        then and which ones haven\'t been used and promotes all of those\n        aliases, plus any children of theirs in the alias tree, to outer joins.\n        '),
                                                              ('change_aliases',
                                                               ['change_map'],
                                                               '\n        Changes the aliases in change_map (which maps old-alias -> new-alias),\n        relabelling any references to them in select columns and the where\n        clause.\n        '),
                                                              ('bump_prefix',
                                                               ['exceptions=()'],
                                                               "\n        Changes the alias prefix to the next letter in the alphabet and\n        relabels all the aliases. Even tables that previously had no alias will\n        get an alias after this call (it's mostly used for nested queries and\n        the outer query will already be using the non-aliased table name).\n\n        Subclasses who create their own prefix should override this method to\n        produce a similar result (a new prefix and relabelled aliases).\n\n        The 'exceptions' parameter is a container that holds alias names which\n        should not be changed.\n        "),
                                                              ('get_initial_alias',
                                                               [],
                                                               '\n        Returns the first alias for this query, after increasing its reference\n        count.\n        '),
                                                              ('count_active_tables',
                                                               [],
                                                               '\n        Returns the number of tables in this query with a non-zero reference\n        count.\n        '),
                                                              ('join',
                                                               ['connection',
                                                                'always_create=False',
                                                                'exclusions=()',
                                                                'promote=False',
                                                                'outer_if_first=False',
                                                                'nullable=False',
                                                                'reuse=None'],
                                                               '\n        Returns an alias for the join in \'connection\', either reusing an\n        existing alias for that join or creating a new one. \'connection\' is a\n        tuple (lhs, table, lhs_col, col) where \'lhs\' is either an existing\n        table alias or a table name. The join correspods to the SQL equivalent\n        of::\n\n            lhs.lhs_col = table.col\n\n        If \'always_create\' is True and \'reuse\' is None, a new alias is always\n        created, regardless of whether one already exists or not. If\n        \'always_create\' is True and \'reuse\' is a set, an alias in \'reuse\' that\n        matches the connection will be returned, if possible.  If\n        \'always_create\' is False, the first existing alias that matches the\n        \'connection\' is returned, if any. Otherwise a new join is created.\n\n        If \'exclusions\' is specified, it is something satisfying the container\n        protocol ("foo in exclusions" must work) and specifies a list of\n        aliases that should not be returned, even if they satisfy the join.\n\n        If \'promote\' is True, the join type for the alias will be LOUTER (if\n        the alias previously existed, the join type will be promoted from INNER\n        to LOUTER, if necessary).\n\n        If \'outer_if_first\' is True and a new join is created, it will have the\n        LOUTER join type. This is used when joining certain types of querysets\n        and Q-objects together.\n\n        If \'nullable\' is True, the join can potentially involve NULL values and\n        is a candidate for promotion (to "left outer") when combining querysets.\n        '),
                                                              ('setup_inherited_models',
                                                               [],
                                                               '\n        If the model that is the basis for this QuerySet inherits other models,\n        we need to ensure that those other models have their tables included in\n        the query.\n\n        We do this as a separate step so that subclasses know which\n        tables are going to be active in the query, without needing to compute\n        all the select columns (this method is called from pre_sql_setup(),\n        whereas column determination is a later part, and side-effect, of\n        as_sql()).\n        '),
                                                              ('remove_inherited_models',
                                                               [],
                                                               '\n        Undoes the effects of setup_inherited_models(). Should be called\n        whenever select columns (self.select) are set explicitly.\n        '),
                                                              ('need_force_having',
                                                               ['q_object'],
                                                               '\n        Returns whether or not all elements of this q_object need to be put\n        together in the HAVING clause.\n        '),
                                                              ('add_aggregate',
                                                               ['aggregate',
                                                                'model',
                                                                'alias',
                                                                'is_summary'],
                                                               '\n        Adds a single aggregate expression to the Query\n        '),
                                                              ('add_filter',
                                                               ['filter_expr',
                                                                'connector=AND',
                                                                'negate=False',
                                                                'trim=False',
                                                                'can_reuse=None',
                                                                'process_extras=True',
                                                                'force_having=False'],
                                                               "\n        Add a single filter to the query. The 'filter_expr' is a pair:\n        (filter_string, value). E.g. ('name__contains', 'fred')\n\n        If 'negate' is True, this is an exclude() filter. It's important to\n        note that this method does not negate anything in the where-clause\n        object when inserting the filter constraints. This is because negated\n        filters often require multiple calls to add_filter() and the negation\n        should only happen once. So the caller is responsible for this (the\n        caller will normally be add_q(), so that as an example).\n\n        If 'trim' is True, we automatically trim the final join group (used\n        internally when constructing nested queries).\n\n        If 'can_reuse' is a set, we are processing a component of a\n        multi-component filter (e.g. filter(Q1, Q2)). In this case, 'can_reuse'\n        will be a set of table aliases that can be reused in this filter, even\n        if we would otherwise force the creation of new aliases for a join\n        (needed for nested Q-filters). The set is updated by this method.\n\n        If 'process_extras' is set, any extra filters returned from the table\n        joining process will be processed. This parameter is set to False\n        during the processing of extra filters to avoid infinite recursion.\n        "),
                                                              ('add_q',
                                                               ['q_object',
                                                                'used_aliases=None',
                                                                'force_having=False'],
                                                               "\n        Adds a Q-object to the current filter.\n\n        Can also be used to add anything that has an 'add_to_query()' method.\n        "),
                                                              ('setup_joins',
                                                               ['names',
                                                                'opts',
                                                                'alias',
                                                                'dupe_multis',
                                                                'allow_many=True',
                                                                'allow_explicit_fk=False',
                                                                'can_reuse=None',
                                                                'negate=False',
                                                                'process_extras=True'],
                                                               "\n        Compute the necessary table joins for the passage through the fields\n        given in 'names'. 'opts' is the Options class for the current model\n        (which gives the table we are joining to), 'alias' is the alias for the\n        table we are joining to. If dupe_multis is True, any many-to-many or\n        many-to-one joins will always create a new alias (necessary for\n        disjunctive filters). If can_reuse is not None, it's a list of aliases\n        that can be reused in these joins (nothing else can be reused in this\n        case). Finally, 'negate' is used in the same sense as for add_filter()\n        -- it indicates an exclude() filter, or something similar. It is only\n        passed in here so that it can be passed to a field's extra_filter() for\n        customised behaviour.\n\n        Returns the final field involved in the join, the target database\n        column (used for any 'where' constraint), the final 'opts' value and the\n        list of tables joined.\n        "),
                                                              ('trim_joins',
                                                               ['target',
                                                                'join_list',
                                                                'last',
                                                                'trim'],
                                                               "\n        Sometimes joins at the end of a multi-table sequence can be trimmed. If\n        the final join is against the same column as we are comparing against,\n        and is an inner join, we can go back one step in a join chain and\n        compare against the LHS of the join instead (and then repeat the\n        optimization). The result, potentially, involves less table joins.\n\n        The 'target' parameter is the final field being joined to, 'join_list'\n        is the full list of join aliases.\n\n        The 'last' list contains offsets into 'join_list', corresponding to\n        each component of the filter.  Many-to-many relations, for example, add\n        two tables to the join list and we want to deal with both tables the\n        same way, so 'last' has an entry for the first of the two tables and\n        then the table immediately after the second table, in that case.\n\n        The 'trim' parameter forces the final piece of the join list to be\n        trimmed before anything. See the documentation of add_filter() for\n        details about this.\n\n        Returns the final active column and table alias and the new active\n        join_list.\n        "),
                                                              ('update_dupe_avoidance',
                                                               ['opts', 'col', 'alias'],
                                                               "\n        For a column that is one of multiple pointing to the same table, update\n        the internal data structures to note that this alias shouldn't be used\n        for those other columns.\n        "),
                                                              ('split_exclude',
                                                               ['filter_expr',
                                                                'prefix',
                                                                'can_reuse'],
                                                               '\n        When doing an exclude against any kind of N-to-many relation, we need\n        to use a subquery. This method constructs the nested query, given the\n        original exclude filter (filter_expr) and the portion up to the first\n        N-to-many relation field.\n        '),
                                                              ('set_limits',
                                                               ['low=None', 'high=None'],
                                                               '\n        Adjusts the limits on the rows retrieved. We use low/high to set these,\n        as it makes it more Pythonic to read and write. When the SQL query is\n        created, they are converted to the appropriate offset and limit values.\n\n        Any limits passed in here are applied relative to the existing\n        constraints. So low is added to the current low value and both will be\n        clamped to any existing high value.\n        '),
                                                              ('clear_limits',
                                                               [],
                                                               '\n        Clears any existing limits.\n        '),
                                                              ('can_filter',
                                                               [],
                                                               '\n        Returns True if adding filters to this instance is still possible.\n\n        Typically, this means no limits or offsets have been put on the results.\n        '),
                                                              ('clear_select_fields',
                                                               [],
                                                               '\n        Clears the list of fields to select (but not extra_select columns).\n        Some queryset types completely replace any existing list of select\n        columns.\n        '),
                                                              ('add_fields',
                                                               ['field_names',
                                                                'allow_m2m=True'],
                                                               '\n        Adds the given (model) fields to the select set. The field names are\n        added in the order specified.\n        '),
                                                              ('add_ordering',
                                                               ['*ordering'],
                                                               '\n        Adds items from the \'ordering\' sequence to the query\'s "order by"\n        clause. These items are either field names (not column names) --\n        possibly with a direction prefix (\'-\' or \'?\') -- or ordinals,\n        corresponding to column positions in the \'select\' list.\n\n        If \'ordering\' is empty, all ordering is cleared from the query.\n        '),
                                                              ('clear_ordering',
                                                               ['force_empty=False'],
                                                               "\n        Removes any ordering settings. If 'force_empty' is True, there will be\n        no ordering in the resulting query (not even the model's default).\n        "),
                                                              ('set_group_by',
                                                               [],
                                                               '\n        Expands the GROUP BY clause required by the query.\n\n        This will usually be the set of all non-aggregate fields in the\n        return data. If the database backend supports grouping by the\n        primary key, and the query would be equivalent, the optimization\n        will be made automatically.\n        '),
                                                              ('add_count_column',
                                                               [],
                                                               '\n        Converts the query to do count(...) or count(distinct(pk)) in order to\n        get its size.\n        '),
                                                              ('add_select_related',
                                                               ['fields'],
                                                               '\n        Sets up the select_related data structure so that we only select\n        certain related models (as opposed to all models, when\n        self.select_related=True).\n        '),
                                                              ('add_extra',
                                                               ['select',
                                                                'select_params',
                                                                'where',
                                                                'params',
                                                                'tables',
                                                                'order_by'],
                                                               '\n        Adds data to the various extra_* attributes for user-created additions\n        to the query.\n        '),
                                                              ('clear_deferred_loading',
                                                               [],
                                                               '\n        Remove any fields from the deferred loading set.\n        '),
                                                              ('add_deferred_loading',
                                                               ['field_names'],
                                                               '\n        Add the given list of model field names to the set of fields to\n        exclude from loading from the database when automatic column selection\n        is done. The new field names are added to any existing field names that\n        are deferred (or removed from any existing field names that are marked\n        as the only ones for immediate loading).\n        '),
                                                              ('add_immediate_loading',
                                                               ['field_names'],
                                                               '\n        Add the given list of model field names to the set of fields to\n        retrieve when the SQL is executed ("immediate loading" fields). The\n        field names replace any existing immediate loading field names. If\n        there are field names already specified for deferred loading, those\n        names are removed from the new field_names before storing the new names\n        for immediate loading. (That is, immediate loading overrides any\n        existing immediate values, but respects existing deferrals.)\n        '),
                                                              ('get_loaded_field_names',
                                                               [],
                                                               "\n        If any fields are marked to be deferred, returns a dictionary mapping\n        models to a set of names in those fields that will be loaded. If a\n        model is not in the returned dictionary, none of it's fields are\n        deferred.\n\n        If no fields are marked for deferral, returns an empty dictionary.\n        "),
                                                              ('get_loaded_field_names_cb',
                                                               ['target', 'model', 'fields'],
                                                               '\n        Callback used by get_deferred_field_names().\n        '),
                                                              ('set_aggregate_mask',
                                                               ['names'],
                                                               'Set the mask of aggregates that will actually be returned by the SELECT'),
                                                              ('set_extra_mask',
                                                               ['names'],
                                                               "\n        Set the mask of extra select items that will be returned by SELECT,\n        we don't actually remove them from the Query since they might be used\n        later\n        "),
                                                              ('_aggregate_select',
                                                               [],
                                                               'The SortedDict of aggregate columns that are not masked, and should\n        be used in the SELECT clause.\n\n        This result is cached for optimization purposes.\n        '),
                                                              ('_extra_select', [], ''),
                                                              ('set_start',
                                                               ['start'],
                                                               "\n        Sets the table from which to start joining. The start position is\n        specified by the related attribute from the base model. This will\n        automatically set to the select column to be the column linked from the\n        previous table.\n\n        This method is primarily for internal use and the error checking isn't\n        as friendly as add_filter(). Mostly useful for querying directly\n        against the join table of many-to-many relation in a subquery.\n        ")],
                                                  'properties': ['INNER',
                                                                 'LOUTER',
                                                                 'alias_prefix',
                                                                 'query_terms',
                                                                 'aggregates_module',
                                                                 'compiler',
                                                                 'model',
                                                                 'alias_refcount',
                                                                 'alias_map',
                                                                 'table_map',
                                                                 'join_map',
                                                                 'rev_join_map',
                                                                 'quote_cache',
                                                                 'default_cols',
                                                                 'default_ordering',
                                                                 'standard_ordering',
                                                                 'ordering_aliases',
                                                                 'select_fields',
                                                                 'related_select_fields',
                                                                 'dupe_avoidance',
                                                                 'used_aliases',
                                                                 'filter_is_sticky',
                                                                 'included_inherited_models',
                                                                 'select',
                                                                 'tables',
                                                                 'where',
                                                                 'where_class',
                                                                 'group_by',
                                                                 'having',
                                                                 'order_by',
                                                                 'low_mark',
                                                                 'high_mark',
                                                                 'distinct',
                                                                 'select_related',
                                                                 'related_select_cols',
                                                                 'aggregates',
                                                                 'aggregate_select_mask',
                                                                 '_aggregate_select_cache',
                                                                 'max_depth',
                                                                 'extra',
                                                                 'extra_select_mask',
                                                                 '_extra_select_cache',
                                                                 'extra_tables',
                                                                 'extra_order_by',
                                                                 'deferred_loading',
                                                                 'aggregate_select',
                                                                 'extra_select']},
             'django.db.models.sql.query.RawQuery': {'bases': ['object'],
                                                     'constructor': ['sql',
                                                                     'using',
                                                                     'params=None'],
                                                     'docstring': '\n    A single raw SQL query\n    ',
                                                     'methods': [('clone', ['using'], ''),
                                                                 ('convert_values',
                                                                  ['value',
                                                                   'field',
                                                                   'connection'],
                                                                  'Convert the database-returned value into a type that is consistent\n        across database backends.\n\n        By default, this defers to the underlying backend operations, but\n        it can be overridden by Query classes for specific backends.\n        '),
                                                                 ('get_columns', [], ''),
                                                                 ('__iter__', [], ''),
                                                                 ('__repr__', [], ''),
                                                                 ('_execute_query', [], '')],
                                                     'properties': ['params',
                                                                    'sql',
                                                                    'using',
                                                                    'cursor',
                                                                    'low_mark',
                                                                    'high_mark',
                                                                    'extra_select',
                                                                    'aggregate_select']},
             'django.db.models.sql.subqueries.AggregateQuery': {'bases': ['django.db.models.sql.query.Query'],
                                                                'constructor': [],
                                                                'docstring': '\n    An AggregateQuery takes another query as a parameter to the FROM\n    clause and only selects the elements in the provided list.\n    ',
                                                                'methods': [('add_subquery',
                                                                             ['query',
                                                                              'using'],
                                                                             '')],
                                                                'properties': ['compiler',
                                                                               'subquery',
                                                                               'sub_params']},
             'django.db.models.sql.subqueries.DateQuery': {'bases': ['django.db.models.sql.query.Query'],
                                                           'constructor': [],
                                                           'docstring': '\n    A DateQuery is a normal query, except that it specifically selects a single\n    date field. This requires some special handling when converting the results\n    back to Python objects, so we put it in a separate class.\n    ',
                                                           'methods': [('add_date_select',
                                                                        ['field_name',
                                                                         'lookup_type',
                                                                         "order='ASC'"],
                                                                        '\n        Converts the query into a date extraction query.\n        ')],
                                                           'properties': ['compiler',
                                                                          'select',
                                                                          'select_fields',
                                                                          'select_related',
                                                                          'distinct',
                                                                          'order_by']},
             'django.db.models.sql.subqueries.DeleteQuery': {'bases': ['django.db.models.sql.query.Query'],
                                                             'constructor': [],
                                                             'docstring': '\n    Delete queries are done through this class, since they are more constrained\n    than general queries.\n    ',
                                                             'methods': [('do_query',
                                                                          ['table',
                                                                           'where',
                                                                           'using'],
                                                                          ''),
                                                                         ('delete_batch',
                                                                          ['pk_list',
                                                                           'using',
                                                                           'field=None'],
                                                                          '\n        Set up and execute delete queries for all the objects in pk_list.\n\n        More than one physical query may be executed if there are a\n        lot of values in pk_list.\n        ')],
                                                             'properties': ['compiler',
                                                                            'tables',
                                                                            'where']},
             'django.db.models.sql.subqueries.InsertQuery': {'bases': ['django.db.models.sql.query.Query'],
                                                             'constructor': ['*args',
                                                                             '**kwargs'],
                                                             'docstring': '',
                                                             'methods': [('clone',
                                                                          ['klass=None',
                                                                           '**kwargs'],
                                                                          ''),
                                                                         ('insert_values',
                                                                          ['insert_values',
                                                                           'raw_values=False'],
                                                                          "\n        Set up the insert query from the 'insert_values' dictionary. The\n        dictionary gives the model field names and their target values.\n\n        If 'raw_values' is True, the values in the 'insert_values' dictionary\n        are inserted directly into the query, rather than passed as SQL\n        parameters. This provides a way to insert NULL and DEFAULT keywords\n        into the query, for example.\n        ")],
                                                             'properties': ['compiler',
                                                                            'columns',
                                                                            'values',
                                                                            'params']},
             'django.db.models.sql.subqueries.UpdateQuery': {'bases': ['django.db.models.sql.query.Query'],
                                                             'constructor': ['*args',
                                                                             '**kwargs'],
                                                             'docstring': '\n    Represents an "update" SQL query.\n    ',
                                                             'methods': [('_setup_query',
                                                                          [],
                                                                          '\n        Runs on initialization and after cloning. Any attributes that would\n        normally be set in __init__ should go in here, instead, so that they\n        are also set up after a clone() call.\n        '),
                                                                         ('clone',
                                                                          ['klass=None',
                                                                           '**kwargs'],
                                                                          ''),
                                                                         ('update_batch',
                                                                          ['pk_list',
                                                                           'values',
                                                                           'using'],
                                                                          ''),
                                                                         ('add_update_values',
                                                                          ['values'],
                                                                          '\n        Convert a dictionary of field name to value mappings into an update\n        query. This is the entry point for the public update() method on\n        querysets.\n        '),
                                                                         ('add_update_fields',
                                                                          ['values_seq'],
                                                                          '\n        Turn a sequence of (field, model, value) triples into an update query.\n        Used by add_update_values() as well as the "fast" update path when\n        saving models.\n        '),
                                                                         ('add_related_update',
                                                                          ['model',
                                                                           'field',
                                                                           'value'],
                                                                          '\n        Adds (name, value) to an update query for an ancestor model.\n\n        Updates are coalesced so that we only run one update query per ancestor.\n        '),
                                                                         ('get_related_updates',
                                                                          [],
                                                                          '\n        Returns a list of query objects: one for each update required to an\n        ancestor model. Each query will have the same filtering conditions as\n        the current query but will only update a single table.\n        ')],
                                                             'properties': ['compiler',
                                                                            'values',
                                                                            'related_ids',
                                                                            'related_updates',
                                                                            'where']},
             'django.db.models.sql.where.Constraint': {'bases': ['object'],
                                                       'constructor': ['alias', 'col', 'field'],
                                                       'docstring': '\n    An object that can be passed to WhereNode.add() and knows how to\n    pre-process itself prior to including in the WhereNode.\n    ',
                                                       'methods': [('__getstate__',
                                                                    [],
                                                                    "Save the state of the Constraint for pickling.\n\n        Fields aren't necessarily pickleable, because they can have\n        callable default values. So, instead of pickling the field\n        store a reference so we can restore it manually\n        "),
                                                                   ('__setstate__',
                                                                    ['data'],
                                                                    'Restore the constraint '),
                                                                   ('prepare',
                                                                    ['lookup_type', 'value'],
                                                                    ''),
                                                                   ('process',
                                                                    ['lookup_type',
                                                                     'value',
                                                                     'connection'],
                                                                    '\n        Returns a tuple of data suitable for inclusion in a WhereNode\n        instance.\n        '),
                                                                   ('relabel_aliases',
                                                                    ['change_map'],
                                                                    '')],
                                                       'properties': ['alias', 'col', 'field']},
             'django.db.models.sql.where.EmptyShortCircuit': {'bases': ['Exception'],
                                                              'constructor': [],
                                                              'docstring': '\n    Internal exception used to indicate that a "matches nothing" node should be\n    added to the where-clause.\n    ',
                                                              'methods': [],
                                                              'properties': []},
             'django.db.models.sql.where.EverythingNode': {'bases': ['object'],
                                                           'constructor': [],
                                                           'docstring': '\n    A node that matches everything.\n    ',
                                                           'methods': [('as_sql',
                                                                        ['qn=None',
                                                                         'connection=None'],
                                                                        ''),
                                                                       ('relabel_aliases',
                                                                        ['change_map',
                                                                         'node=None'],
                                                                        '')],
                                                           'properties': []},
             'django.db.models.sql.where.ExtraWhere': {'bases': ['object'],
                                                       'constructor': ['sqls', 'params'],
                                                       'docstring': '',
                                                       'methods': [('as_sql',
                                                                    ['qn=None',
                                                                     'connection=None'],
                                                                    '')],
                                                       'properties': ['sqls', 'params']},
             'django.db.models.sql.where.NothingNode': {'bases': ['object'],
                                                        'constructor': [],
                                                        'docstring': '\n    A node that matches nothing.\n    ',
                                                        'methods': [('as_sql',
                                                                     ['qn=None',
                                                                      'connection=None'],
                                                                     ''),
                                                                    ('relabel_aliases',
                                                                     ['change_map',
                                                                      'node=None'],
                                                                     '')],
                                                        'properties': []},
             'django.db.models.sql.where.WhereNode': {'bases': ['django.utils.tree.Node'],
                                                      'constructor': [],
                                                      'docstring': '\n    Used to represent the SQL where-clause.\n\n    The class is tied to the Query class that created it (in order to create\n    the correct SQL).\n\n    The children in this tree are usually either Q-like objects or lists of\n    [table_alias, field_name, db_type, lookup_type, value_annotation,\n    params]. However, a child could also be any class with as_sql() and\n    relabel_aliases() methods.\n    ',
                                                      'methods': [('add',
                                                                   ['data', 'connector'],
                                                                   "\n        Add a node to the where-tree. If the data is a list or tuple, it is\n        expected to be of the form (obj, lookup_type, value), where obj is\n        a Constraint object, and is then slightly munged before being stored\n        (to avoid storing any reference to field objects). Otherwise, the 'data'\n        is stored unchanged and can be any class with an 'as_sql()' method.\n        "),
                                                                  ('as_sql',
                                                                   ['qn', 'connection'],
                                                                   "\n        Returns the SQL version of the where clause and the value to be\n        substituted in. Returns None, None if this node is empty.\n\n        If 'node' is provided, that is the root of the SQL generation\n        (generally not needed except by the internal implementation for\n        recursion).\n        "),
                                                                  ('make_atom',
                                                                   ['child',
                                                                    'qn',
                                                                    'connection'],
                                                                   '\n        Turn a tuple (table_alias, column_name, db_type, lookup_type,\n        value_annot, params) into valid SQL.\n\n        Returns the string for the SQL fragment and the parameters to use for\n        it.\n        '),
                                                                  ('sql_for_columns',
                                                                   ['data',
                                                                    'qn',
                                                                    'connection'],
                                                                   '\n        Returns the SQL fragment used for the left-hand side of a column\n        constraint (for example, the "T1.foo" portion in the clause\n        "WHERE ... T1.foo = 6").\n        '),
                                                                  ('relabel_aliases',
                                                                   ['change_map', 'node=None'],
                                                                   "\n        Relabels the alias values of any children. 'change_map' is a dictionary\n        mapping old (current) alias values to the new values.\n        ")],
                                                      'properties': ['default']},
             'django.db.transaction.Transaction': {'bases': ['object'],
                                                   'constructor': ['entering',
                                                                   'exiting',
                                                                   'using'],
                                                   'docstring': "\n    Acts as either a decorator, or a context manager.  If it's a decorator it\n    takes a function and returns a wrapped function.  If it's a contextmanager\n    it's used with the ``with`` statement.  In either event entering/exiting\n    are called before and after, respectively, the function/block is executed.\n\n    autocommit, commit_on_success, and commit_manually contain the\n    implementations of entering and exiting.\n    ",
                                                   'methods': [('__enter__', [], ''),
                                                               ('__exit__',
                                                                ['exc_type',
                                                                 'exc_value',
                                                                 'traceback'],
                                                                ''),
                                                               ('__call__', ['func'], '')],
                                                   'properties': ['entering',
                                                                  'exiting',
                                                                  'using']},
             'django.db.transaction.TransactionManagementError': {'bases': ['Exception'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    This exception is thrown when something bad happens with transaction\n    management.\n    ',
                                                                  'methods': [],
                                                                  'properties': []},
             'django.db.utils.ConnectionDoesNotExist': {'bases': ['Exception'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'django.db.utils.ConnectionHandler': {'bases': ['object'],
                                                   'constructor': ['databases'],
                                                   'docstring': '',
                                                   'methods': [('ensure_defaults',
                                                                ['alias'],
                                                                '\n        Puts the defaults into the settings dictionary for a given connection\n        where no settings is provided.\n        '),
                                                               ('__getitem__', ['alias'], ''),
                                                               ('__iter__', [], ''),
                                                               ('all', [], '')],
                                                   'properties': ['databases', '_connections']},
             'django.db.utils.ConnectionRouter': {'bases': ['object'],
                                                  'constructor': ['routers'],
                                                  'docstring': '',
                                                  'methods': [('_router_func', [], ''),
                                                              ('allow_relation',
                                                               ['obj1', 'obj2', '**hints'],
                                                               ''),
                                                              ('allow_syncdb',
                                                               ['db', 'model'],
                                                               '')],
                                                  'properties': ['routers',
                                                                 'db_for_read',
                                                                 'db_for_write']},
             'django.db.utils.DatabaseError': {'bases': ['Exception'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'django.db.utils.IntegrityError': {'bases': ['django.db.utils.DatabaseError'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': []},
             'django.dispatch.dispatcher.Signal': {'bases': ['object'],
                                                   'constructor': ['providing_args=None'],
                                                   'docstring': '\n    Base class for all signals\n    \n    Internal attributes:\n    \n        receivers\n            { receriverkey (id) : weakref(receiver) }\n    ',
                                                   'methods': [('connect',
                                                                ['receiver',
                                                                 'sender=None',
                                                                 'weak=True',
                                                                 'dispatch_uid=None'],
                                                                '\n        Connect receiver to sender for signal.\n    \n        Arguments:\n        \n            receiver\n                A function or an instance method which is to receive signals.\n                Receivers must be hashable objects.\n\n                If weak is True, then receiver must be weak-referencable (more\n                precisely saferef.safeRef() must be able to create a reference\n                to the receiver).\n        \n                Receivers must be able to accept keyword arguments.\n\n                If receivers have a dispatch_uid attribute, the receiver will\n                not be added if another receiver already exists with that\n                dispatch_uid.\n\n            sender\n                The sender to which the receiver should respond. Must either be\n                of type Signal, or None to receive events from any sender.\n\n            weak\n                Whether to use weak references to the receiver. By default, the\n                module will attempt to use weak references to the receiver\n                objects. If this parameter is false, then strong references will\n                be used.\n        \n            dispatch_uid\n                An identifier used to uniquely identify a particular instance of\n                a receiver. This will usually be a string, though it may be\n                anything hashable.\n        '),
                                                               ('disconnect',
                                                                ['receiver=None',
                                                                 'sender=None',
                                                                 'weak=True',
                                                                 'dispatch_uid=None'],
                                                                '\n        Disconnect receiver from sender for signal.\n\n        If weak references are used, disconnect need not be called. The receiver\n        will be remove from dispatch automatically.\n    \n        Arguments:\n        \n            receiver\n                The registered receiver to disconnect. May be none if\n                dispatch_uid is specified.\n            \n            sender\n                The registered sender to disconnect\n            \n            weak\n                The weakref state to disconnect\n            \n            dispatch_uid\n                the unique identifier of the receiver to disconnect\n        '),
                                                               ('send',
                                                                ['sender', '**named'],
                                                                '\n        Send signal from sender to all connected receivers.\n\n        If any receiver raises an error, the error propagates back through send,\n        terminating the dispatch loop, so it is quite possible to not have all\n        receivers called if a raises an error.\n\n        Arguments:\n        \n            sender\n                The sender of the signal Either a specific object or None.\n    \n            named\n                Named arguments which will be passed to receivers.\n\n        Returns a list of tuple pairs [(receiver, response), ... ].\n        '),
                                                               ('send_robust',
                                                                ['sender', '**named'],
                                                                '\n        Send signal from sender to all connected receivers catching errors.\n\n        Arguments:\n        \n            sender\n                The sender of the signal. Can be any python object (normally one\n                registered with a connect if you actually want something to\n                occur).\n\n            named\n                Named arguments which will be passed to receivers. These\n                arguments must be a subset of the argument names defined in\n                providing_args.\n\n        Return a list of tuple pairs [(receiver, response), ... ]. May raise\n        DispatcherKeyError.\n\n        If any receiver raises an error (specifically any subclass of\n        Exception), the error instance is returned as the result for that\n        receiver.\n        '),
                                                               ('_live_receivers',
                                                                ['senderkey'],
                                                                '\n        Filter sequence of receivers to get resolved, live receivers.\n\n        This checks for weak references and resolves them, then returning only\n        live receivers.\n        '),
                                                               ('_remove_receiver',
                                                                ['receiver'],
                                                                '\n        Remove dead receivers from connections.\n        ')],
                                                   'properties': ['receivers',
                                                                  'providing_args',
                                                                  'lock']},
             'django.dispatch.saferef.BoundMethodWeakref': {'bases': ['object'],
                                                            'constructor': ['target',
                                                                            'onDelete=None'],
                                                            'docstring': "'Safe' and reusable weak references to instance methods\n\n    BoundMethodWeakref objects provide a mechanism for\n    referencing a bound method without requiring that the\n    method object itself (which is normally a transient\n    object) is kept alive.  Instead, the BoundMethodWeakref\n    object keeps weak references to both the object and the\n    function which together define the instance method.\n\n    Attributes:\n        key -- the identity key for the reference, calculated\n            by the class's calculateKey method applied to the\n            target instance method\n        deletionMethods -- sequence of callable objects taking\n            single argument, a reference to this object which\n            will be called when *either* the target object or\n            target function is garbage collected (i.e. when\n            this object becomes invalid).  These are specified\n            as the onDelete parameters of safeRef calls.\n        weakSelf -- weak reference to the target object\n        weakFunc -- weak reference to the target function\n\n    Class Attributes:\n        _allInstances -- class attribute pointing to all live\n            BoundMethodWeakref objects indexed by the class's\n            calculateKey(target) method applied to the target\n            objects.  This weak value dictionary is used to\n            short-circuit creation so that multiple references\n            to the same (object, function) pair produce the\n            same BoundMethodWeakref instance.\n\n    ",
                                                            'methods': [('__new__',
                                                                         ['target',
                                                                          'onDelete=None',
                                                                          '*arguments',
                                                                          '**named'],
                                                                         'Create new instance or return current instance\n\n        Basically this method of construction allows us to\n        short-circuit creation of references to already-\n        referenced instance methods.  The key corresponding\n        to the target is calculated, and if there is already\n        an existing reference, that is returned, with its\n        deletionMethods attribute updated.  Otherwise the\n        new instance is created and registered in the table\n        of already-referenced methods.\n        '),
                                                                        ('calculateKey',
                                                                         ['target'],
                                                                         "Calculate the reference key for this reference\n\n        Currently this is a two-tuple of the id()'s of the\n        target object and the target function respectively.\n        "),
                                                                        ('__str__',
                                                                         [],
                                                                         'Give a friendly representation of the object'),
                                                                        ('__nonzero__',
                                                                         [],
                                                                         'Whether we are still a valid reference'),
                                                                        ('__cmp__',
                                                                         ['other'],
                                                                         'Compare with another reference'),
                                                                        ('__call__',
                                                                         [],
                                                                         'Return a strong reference to the bound method\n\n        If the target cannot be retrieved, then will\n        return None, otherwise returns a bound instance\n        method for our object and function.\n\n        Note:\n            You may call this method any number of times,\n            as it does not invalidate the reference.\n        ')],
                                                            'properties': ['_allInstances',
                                                                           'deletionMethods',
                                                                           'key',
                                                                           'weakSelf',
                                                                           'weakFunc',
                                                                           'selfName',
                                                                           'funcName',
                                                                           'calculateKey',
                                                                           '__repr__']},
             'django.dispatch.saferef.BoundNonDescriptorMethodWeakref': {'bases': ['django.dispatch.saferef.BoundMethodWeakref'],
                                                                         'constructor': ['target',
                                                                                         'onDelete=None'],
                                                                         'docstring': 'A specialized BoundMethodWeakref, for platforms where instance methods\n    are not descriptors.\n\n    It assumes that the function name and the target attribute name are the\n    same, instead of assuming that the function is a descriptor. This approach\n    is equally fast, but not 100% reliable because functions can be stored on an\n    attribute named differenty than the function\'s name such as in:\n\n    class A: pass\n    def foo(self): return "foo"\n    A.bar = foo\n\n    But this shouldn\'t be a common use case. So, on platforms where methods\n    aren\'t descriptors (such as Jython) this implementation has the advantage\n    of working in the most cases.\n    ',
                                                                         'methods': [('__call__',
                                                                                      [],
                                                                                      'Return a strong reference to the bound method\n\n        If the target cannot be retrieved, then will\n        return None, otherwise returns a bound instance\n        method for our object and function.\n\n        Note:\n            You may call this method any number of times,\n            as it does not invalidate the reference.\n        ')],
                                                                         'properties': []},
             'django.forms.extras.widgets.SelectDateWidget': {'bases': ['django.forms.widgets.Widget'],
                                                              'constructor': ['attrs=None',
                                                                              'years=None',
                                                                              'required=True'],
                                                              'docstring': '\n    A Widget that splits date input into three <select> boxes.\n\n    This also serves as an example of a Widget that has more than one HTML\n    element and hence implements value_from_datadict.\n    ',
                                                              'methods': [('render',
                                                                           ['name',
                                                                            'value',
                                                                            'attrs=None'],
                                                                           ''),
                                                                          ('id_for_label',
                                                                           ['id_'],
                                                                           ''),
                                                                          ('value_from_datadict',
                                                                           ['data',
                                                                            'files',
                                                                            'name'],
                                                                           ''),
                                                                          ('create_select',
                                                                           ['name',
                                                                            'field',
                                                                            'value',
                                                                            'val',
                                                                            'choices'],
                                                                           '')],
                                                              'properties': ['none_value',
                                                                             'month_field',
                                                                             'day_field',
                                                                             'year_field',
                                                                             'attrs',
                                                                             'required',
                                                                             'years',
                                                                             'id_for_label']},
             'django.forms.fields.BooleanField': {'bases': ['django.forms.fields.Field'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('to_python',
                                                               ['value'],
                                                               'Returns a Python boolean object.')],
                                                  'properties': ['widget']},
             'django.forms.fields.CharField': {'bases': ['django.forms.fields.Field'],
                                               'constructor': ['max_length=None',
                                                               'min_length=None',
                                                               '*args',
                                                               '**kwargs'],
                                               'docstring': '',
                                               'methods': [('to_python',
                                                            ['value'],
                                                            'Returns a Unicode object.'),
                                                           ('widget_attrs', ['widget'], '')],
                                               'properties': ['max_length', 'min_length']},
             'django.forms.fields.ChoiceField': {'bases': ['django.forms.fields.Field'],
                                                 'constructor': ['choices=()',
                                                                 'required=True',
                                                                 'widget=None',
                                                                 'label=None',
                                                                 'initial=None',
                                                                 'help_text=None',
                                                                 '*args',
                                                                 '**kwargs'],
                                                 'docstring': '',
                                                 'methods': [('_get_choices', [], ''),
                                                             ('_set_choices', ['value'], ''),
                                                             ('to_python',
                                                              ['value'],
                                                              'Returns a Unicode object.'),
                                                             ('validate',
                                                              ['value'],
                                                              '\n        Validates that the input is in self.choices.\n        '),
                                                             ('valid_value',
                                                              ['value'],
                                                              'Check to see if the provided value is a valid choice')],
                                                 'properties': ['widget',
                                                                'default_error_messages',
                                                                'choices',
                                                                '_choices']},
             'django.forms.fields.ComboField': {'bases': ['django.forms.fields.Field'],
                                                'constructor': ['fields=()',
                                                                '*args',
                                                                '**kwargs'],
                                                'docstring': '\n    A Field whose clean() method calls multiple Field clean() methods.\n    ',
                                                'methods': [('clean',
                                                             ['value'],
                                                             '\n        Validates the given value against all of self.fields, which is a\n        list of Field instances.\n        ')],
                                                'properties': ['fields']},
             'django.forms.fields.DateField': {'bases': ['django.forms.fields.Field'],
                                               'constructor': ['input_formats=None',
                                                               '*args',
                                                               '**kwargs'],
                                               'docstring': '',
                                               'methods': [('to_python',
                                                            ['value'],
                                                            '\n        Validates that the input can be converted to a date. Returns a Python\n        datetime.date object.\n        ')],
                                               'properties': ['widget',
                                                              'default_error_messages',
                                                              'input_formats']},
             'django.forms.fields.DateTimeField': {'bases': ['django.forms.fields.Field'],
                                                   'constructor': ['input_formats=None',
                                                                   '*args',
                                                                   '**kwargs'],
                                                   'docstring': '',
                                                   'methods': [('to_python',
                                                                ['value'],
                                                                '\n        Validates that the input can be converted to a datetime. Returns a\n        Python datetime.datetime object.\n        ')],
                                                   'properties': ['widget',
                                                                  'default_error_messages',
                                                                  'input_formats']},
             'django.forms.fields.DecimalField': {'bases': ['django.forms.fields.Field'],
                                                  'constructor': ['max_value=None',
                                                                  'min_value=None',
                                                                  'max_digits=None',
                                                                  'decimal_places=None',
                                                                  '*args',
                                                                  '**kwargs'],
                                                  'docstring': '',
                                                  'methods': [('to_python',
                                                               ['value'],
                                                               '\n        Validates that the input is a decimal number. Returns a Decimal\n        instance. Returns None for empty values. Ensures that there are no more\n        than max_digits in the number, and no more than decimal_places digits\n        after the decimal point.\n        '),
                                                              ('validate', ['value'], '')],
                                                  'properties': ['default_error_messages',
                                                                 'max_value',
                                                                 'min_value',
                                                                 'max_digits',
                                                                 'decimal_places']},
             'django.forms.fields.EmailField': {'bases': ['django.forms.fields.CharField'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('clean', ['value'], '')],
                                                'properties': ['default_error_messages',
                                                               'default_validators']},
             'django.forms.fields.Field': {'bases': ['object'],
                                           'constructor': ['required=True',
                                                           'widget=None',
                                                           'label=None',
                                                           'initial=None',
                                                           'help_text=None',
                                                           'error_messages=None',
                                                           'show_hidden_initial=False',
                                                           'validators=[]',
                                                           'localize=False'],
                                           'docstring': '',
                                           'methods': [('prepare_value', ['value'], ''),
                                                       ('to_python', ['value'], ''),
                                                       ('validate', ['value'], ''),
                                                       ('run_validators', ['value'], ''),
                                                       ('clean',
                                                        ['value'],
                                                        '\n        Validates the given value and returns its "cleaned" value as an\n        appropriate Python object.\n\n        Raises ValidationError for any errors.\n        '),
                                                       ('bound_data',
                                                        ['data', 'initial'],
                                                        '\n        Return the value that should be shown for this field on render of a\n        bound form, given the submitted POST data for the field and the initial\n        data, if any.\n\n        For most fields, this will simply be data; FileFields need to handle it\n        a bit differently.\n        '),
                                                       ('widget_attrs',
                                                        ['widget'],
                                                        '\n        Given a Widget instance (*not* a Widget class), returns a dictionary of\n        any HTML attributes that should be added to the Widget, based on this\n        Field.\n        '),
                                                       ('__deepcopy__', ['memo'], '')],
                                           'properties': ['widget',
                                                          'hidden_widget',
                                                          'default_validators',
                                                          'default_error_messages',
                                                          'creation_counter',
                                                          'required',
                                                          'label',
                                                          'initial',
                                                          'show_hidden_initial',
                                                          'help_text',
                                                          'localize',
                                                          'error_messages',
                                                          'validators']},
             'django.forms.fields.FileField': {'bases': ['django.forms.fields.Field'],
                                               'constructor': ['*args', '**kwargs'],
                                               'docstring': '',
                                               'methods': [('to_python', ['data'], ''),
                                                           ('clean',
                                                            ['data', 'initial=None'],
                                                            ''),
                                                           ('bound_data',
                                                            ['data', 'initial'],
                                                            '')],
                                               'properties': ['widget',
                                                              'default_error_messages',
                                                              'max_length']},
             'django.forms.fields.FilePathField': {'bases': ['django.forms.fields.ChoiceField'],
                                                   'constructor': ['path',
                                                                   'match=None',
                                                                   'recursive=False',
                                                                   'required=True',
                                                                   'widget=None',
                                                                   'label=None',
                                                                   'initial=None',
                                                                   'help_text=None',
                                                                   '*args',
                                                                   '**kwargs'],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['path',
                                                                  'match',
                                                                  'recursive',
                                                                  'choices',
                                                                  'match_re']},
             'django.forms.fields.FloatField': {'bases': ['django.forms.fields.IntegerField'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('to_python',
                                                             ['value'],
                                                             '\n        Validates that float() can be called on the input. Returns the result\n        of float(). Returns None for empty values.\n        ')],
                                                'properties': ['default_error_messages']},
             'django.forms.fields.IPAddressField': {'bases': ['django.forms.fields.CharField'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['default_error_messages',
                                                                   'default_validators']},
             'django.forms.fields.ImageField': {'bases': ['django.forms.fields.FileField'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('to_python',
                                                             ['data'],
                                                             '\n        Checks that the file-upload field data contains a valid image (GIF, JPG,\n        PNG, possibly others -- whatever the Python Imaging Library supports).\n        ')],
                                                'properties': ['default_error_messages']},
             'django.forms.fields.IntegerField': {'bases': ['django.forms.fields.Field'],
                                                  'constructor': ['max_value=None',
                                                                  'min_value=None',
                                                                  '*args',
                                                                  '**kwargs'],
                                                  'docstring': '',
                                                  'methods': [('to_python',
                                                               ['value'],
                                                               '\n        Validates that int() can be called on the input. Returns the result\n        of int(). Returns None for empty values.\n        ')],
                                                  'properties': ['default_error_messages',
                                                                 'max_value',
                                                                 'min_value']},
             'django.forms.fields.MultiValueField': {'bases': ['django.forms.fields.Field'],
                                                     'constructor': ['fields=()',
                                                                     '*args',
                                                                     '**kwargs'],
                                                     'docstring': '\n    A Field that aggregates the logic of multiple Fields.\n\n    Its clean() method takes a "decompressed" list of values, which are then\n    cleaned into a single value according to self.fields. Each value in\n    this list is cleaned by the corresponding field -- the first value is\n    cleaned by the first field, the second value is cleaned by the second\n    field, etc. Once all fields are cleaned, the list of clean values is\n    "compressed" into a single value.\n\n    Subclasses should not have to implement clean(). Instead, they must\n    implement compress(), which takes a list of valid values and returns a\n    "compressed" version of those values -- a single value.\n\n    You\'ll probably want to use this with MultiWidget.\n    ',
                                                     'methods': [('validate', ['value'], ''),
                                                                 ('clean',
                                                                  ['value'],
                                                                  '\n        Validates every value in the given list. A value is validated against\n        the corresponding Field in self.fields.\n\n        For example, if this MultiValueField was instantiated with\n        fields=(DateField(), TimeField()), clean() would call\n        DateField.clean(value[0]) and TimeField.clean(value[1]).\n        '),
                                                                 ('compress',
                                                                  ['data_list'],
                                                                  '\n        Returns a single value for the given list of values. The values can be\n        assumed to be valid.\n\n        For example, if this MultiValueField was instantiated with\n        fields=(DateField(), TimeField()), this might return a datetime\n        object created by combining the date and time in data_list.\n        ')],
                                                     'properties': ['default_error_messages',
                                                                    'fields']},
             'django.forms.fields.MultipleChoiceField': {'bases': ['django.forms.fields.ChoiceField'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('to_python',
                                                                      ['value'],
                                                                      ''),
                                                                     ('validate',
                                                                      ['value'],
                                                                      '\n        Validates that the input is a list or tuple.\n        ')],
                                                         'properties': ['hidden_widget',
                                                                        'widget',
                                                                        'default_error_messages']},
             'django.forms.fields.NullBooleanField': {'bases': ['django.forms.fields.BooleanField'],
                                                      'constructor': [],
                                                      'docstring': '\n    A field whose valid values are None, True and False. Invalid values are\n    cleaned to None.\n    ',
                                                      'methods': [('to_python',
                                                                   ['value'],
                                                                   "\n        Explicitly checks for the string 'True' and 'False', which is what a\n        hidden field will submit for True and False, and for '1' and '0', which\n        is what a RadioField will submit. Unlike the Booleanfield we need to\n        explicitly check for True, because we are not using the bool() function\n        "),
                                                                  ('validate', ['value'], '')],
                                                      'properties': ['widget']},
             'django.forms.fields.RegexField': {'bases': ['django.forms.fields.CharField'],
                                                'constructor': ['regex',
                                                                'max_length=None',
                                                                'min_length=None',
                                                                'error_message=None',
                                                                '*args',
                                                                '**kwargs'],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['regex']},
             'django.forms.fields.SlugField': {'bases': ['django.forms.fields.CharField'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['default_error_messages',
                                                              'default_validators']},
             'django.forms.fields.SplitDateTimeField': {'bases': ['django.forms.fields.MultiValueField'],
                                                        'constructor': ['input_date_formats=None',
                                                                        'input_time_formats=None',
                                                                        '*args',
                                                                        '**kwargs'],
                                                        'docstring': '',
                                                        'methods': [('compress',
                                                                     ['data_list'],
                                                                     '')],
                                                        'properties': ['widget',
                                                                       'hidden_widget',
                                                                       'default_error_messages']},
             'django.forms.fields.TimeField': {'bases': ['django.forms.fields.Field'],
                                               'constructor': ['input_formats=None',
                                                               '*args',
                                                               '**kwargs'],
                                               'docstring': '',
                                               'methods': [('to_python',
                                                            ['value'],
                                                            '\n        Validates that the input can be converted to a time. Returns a Python\n        datetime.time object.\n        ')],
                                               'properties': ['widget',
                                                              'default_error_messages',
                                                              'input_formats']},
             'django.forms.fields.TypedChoiceField': {'bases': ['django.forms.fields.ChoiceField'],
                                                      'constructor': ['*args', '**kwargs'],
                                                      'docstring': '',
                                                      'methods': [('to_python',
                                                                   ['value'],
                                                                   '\n        Validates that the value is in self.choices and can be coerced to the\n        right type.\n        '),
                                                                  ('validate', ['value'], '')],
                                                      'properties': ['coerce', 'empty_value']},
             'django.forms.fields.TypedMultipleChoiceField': {'bases': ['django.forms.fields.MultipleChoiceField'],
                                                              'constructor': ['*args',
                                                                              '**kwargs'],
                                                              'docstring': '',
                                                              'methods': [('to_python',
                                                                           ['value'],
                                                                           '\n        Validates that the values are in self.choices and can be coerced to the\n        right type.\n        '),
                                                                          ('validate',
                                                                           ['value'],
                                                                           '')],
                                                              'properties': ['coerce',
                                                                             'empty_value']},
             'django.forms.fields.URLField': {'bases': ['django.forms.fields.CharField'],
                                              'constructor': ['max_length=None',
                                                              'min_length=None',
                                                              'verify_exists=False',
                                                              'validator_user_agent=validators.URL_VALIDATOR_USER_AGENT',
                                                              '*args',
                                                              '**kwargs'],
                                              'docstring': '',
                                              'methods': [('to_python', ['value'], '')],
                                              'properties': ['default_error_messages']},
             'django.forms.forms.BaseForm': {'bases': ['django.utils.encoding.StrAndUnicode'],
                                             'constructor': ['data=None',
                                                             'files=None',
                                                             "auto_id='id_%s'",
                                                             'prefix=None',
                                                             'initial=None',
                                                             'error_class=ErrorList',
                                                             "label_suffix=':'",
                                                             'empty_permitted=False'],
                                             'docstring': '',
                                             'methods': [('__unicode__', [], ''),
                                                         ('__iter__', [], ''),
                                                         ('__getitem__',
                                                          ['name'],
                                                          'Returns a BoundField with the given name.'),
                                                         ('_get_errors',
                                                          [],
                                                          'Returns an ErrorDict for the data provided for the form'),
                                                         ('is_valid',
                                                          [],
                                                          '\n        Returns True if the form has no errors. Otherwise, False. If errors are\n        being ignored, returns False.\n        '),
                                                         ('add_prefix',
                                                          ['field_name'],
                                                          '\n        Returns the field name with a prefix appended, if this Form has a\n        prefix set.\n\n        Subclasses may wish to override.\n        '),
                                                         ('add_initial_prefix',
                                                          ['field_name'],
                                                          "\n        Add a 'initial' prefix for checking dynamic initial values\n        "),
                                                         ('_html_output',
                                                          ['normal_row',
                                                           'error_row',
                                                           'row_ender',
                                                           'help_text_html',
                                                           'errors_on_separate_row'],
                                                          'Helper function for outputting HTML. Used by as_table(), as_ul(), as_p().'),
                                                         ('as_table',
                                                          [],
                                                          'Returns this form rendered as HTML <tr>s -- excluding the <table></table>.'),
                                                         ('as_ul',
                                                          [],
                                                          'Returns this form rendered as HTML <li>s -- excluding the <ul></ul>.'),
                                                         ('as_p',
                                                          [],
                                                          'Returns this form rendered as HTML <p>s.'),
                                                         ('non_field_errors',
                                                          [],
                                                          "\n        Returns an ErrorList of errors that aren't associated with a particular\n        field -- i.e., from Form.clean(). Returns an empty ErrorList if there\n        are none.\n        "),
                                                         ('_raw_value',
                                                          ['fieldname'],
                                                          '\n        Returns the raw_value for a particular field name. This is just a\n        convenient wrapper around widget.value_from_datadict.\n        '),
                                                         ('full_clean',
                                                          [],
                                                          '\n        Cleans all of self.data and populates self._errors and\n        self.cleaned_data.\n        '),
                                                         ('_clean_fields', [], ''),
                                                         ('_clean_form', [], ''),
                                                         ('_post_clean',
                                                          [],
                                                          '\n        An internal hook for performing additional cleaning after form cleaning\n        is complete. Used for model validation in model forms.\n        '),
                                                         ('clean',
                                                          [],
                                                          "\n        Hook for doing any extra form-wide cleaning after Field.clean() been\n        called on every field. Any ValidationError raised by this method will\n        not be associated with a particular field; it will have a special-case\n        association with the field named '__all__'.\n        "),
                                                         ('has_changed',
                                                          [],
                                                          '\n        Returns True if data differs from initial.\n        '),
                                                         ('_get_changed_data', [], ''),
                                                         ('_get_media',
                                                          [],
                                                          '\n        Provide a description of all media required to render the widgets on this form\n        '),
                                                         ('is_multipart',
                                                          [],
                                                          '\n        Returns True if the form needs to be multipart-encrypted, i.e. it has\n        FileInput. Otherwise, False.\n        '),
                                                         ('hidden_fields',
                                                          [],
                                                          '\n        Returns a list of all the BoundField objects that are hidden fields.\n        Useful for manual form layout in templates.\n        '),
                                                         ('visible_fields',
                                                          [],
                                                          "\n        Returns a list of BoundField objects that aren't hidden fields.\n        The opposite of the hidden_fields() method.\n        ")],
                                             'properties': ['is_bound',
                                                            'data',
                                                            'files',
                                                            'auto_id',
                                                            'prefix',
                                                            'initial',
                                                            'error_class',
                                                            'label_suffix',
                                                            'empty_permitted',
                                                            '_errors',
                                                            '_changed_data',
                                                            'fields',
                                                            'errors',
                                                            'cleaned_data',
                                                            'changed_data',
                                                            'media']},
             'django.forms.forms.BoundField': {'bases': ['django.utils.encoding.StrAndUnicode'],
                                               'constructor': ['form', 'field', 'name'],
                                               'docstring': 'A Field plus data',
                                               'methods': [('__unicode__',
                                                            [],
                                                            'Renders this field as an HTML widget.'),
                                                           ('_errors',
                                                            [],
                                                            '\n        Returns an ErrorList for this field. Returns an empty ErrorList\n        if there are none.\n        '),
                                                           ('as_widget',
                                                            ['widget=None',
                                                             'attrs=None',
                                                             'only_initial=False'],
                                                            "\n        Renders the field by rendering the passed widget, adding any HTML\n        attributes passed as attrs.  If no widget is specified, then the\n        field's default widget will be used.\n        "),
                                                           ('as_text',
                                                            ['attrs=None', '**kwargs'],
                                                            '\n        Returns a string of HTML for representing this as an <input type="text">.\n        '),
                                                           ('as_textarea',
                                                            ['attrs=None', '**kwargs'],
                                                            'Returns a string of HTML for representing this as a <textarea>.'),
                                                           ('as_hidden',
                                                            ['attrs=None', '**kwargs'],
                                                            '\n        Returns a string of HTML for representing this as an <input type="hidden">.\n        '),
                                                           ('_data',
                                                            [],
                                                            "\n        Returns the data for this BoundField, or None if it wasn't given.\n        "),
                                                           ('value',
                                                            [],
                                                            '\n        Returns the value for this BoundField, using the initial value if\n        the form is not bound or the data otherwise.\n        '),
                                                           ('label_tag',
                                                            ['contents=None', 'attrs=None'],
                                                            "\n        Wraps the given contents in a <label>, if the field has an ID attribute.\n        Does not HTML-escape the contents. If contents aren't given, uses the\n        field's HTML-escaped label.\n\n        If attrs are given, they're used as HTML attributes on the <label> tag.\n        "),
                                                           ('css_classes',
                                                            ['extra_classes=None'],
                                                            '\n        Returns a string of space-separated CSS classes for this field.\n        '),
                                                           ('_is_hidden',
                                                            [],
                                                            "Returns True if this BoundField's widget is hidden."),
                                                           ('_auto_id',
                                                            [],
                                                            '\n        Calculates and returns the ID attribute for this BoundField, if the\n        associated Form has specified auto_id. Returns an empty string otherwise.\n        '),
                                                           ('_id_for_label',
                                                            [],
                                                            "\n        Wrapper around the field widget's `id_for_label` class method.\n        Useful, for example, for focusing on this field regardless of whether\n        it has a single widget or a MutiWidget.\n        ")],
                                               'properties': ['form',
                                                              'field',
                                                              'name',
                                                              'html_name',
                                                              'html_initial_name',
                                                              'html_initial_id',
                                                              'label',
                                                              'help_text',
                                                              'errors',
                                                              'data',
                                                              'is_hidden',
                                                              'auto_id',
                                                              'id_for_label']},
             'django.forms.forms.DeclarativeFieldsMetaclass': {'bases': ['type'],
                                                               'constructor': [],
                                                               'docstring': "\n    Metaclass that converts Field attributes to a dictionary called\n    'base_fields', taking into account parent class 'base_fields' as well.\n    ",
                                                               'methods': [('__new__',
                                                                            ['name',
                                                                             'bases',
                                                                             'attrs'],
                                                                            '')],
                                                               'properties': []},
             'django.forms.forms.Form': {'bases': ['django.forms.forms.BaseForm'],
                                         'constructor': [],
                                         'docstring': 'A collection of Fields, plus their associated data.',
                                         'methods': [],
                                         'properties': ['__metaclass__']},
             'django.forms.formsets.BaseFormSet': {'bases': ['django.utils.encoding.StrAndUnicode'],
                                                   'constructor': ['data=None',
                                                                   'files=None',
                                                                   "auto_id='id_%s'",
                                                                   'prefix=None',
                                                                   'initial=None',
                                                                   'error_class=ErrorList'],
                                                   'docstring': '\n    A collection of instances of the same Form class.\n    ',
                                                   'methods': [('__unicode__', [], ''),
                                                               ('__iter__',
                                                                [],
                                                                'Yields the forms in the order they should be rendered'),
                                                               ('__getitem__',
                                                                ['index'],
                                                                'Returns the form at the given index, based on the rendering order'),
                                                               ('__len__', [], ''),
                                                               ('_management_form',
                                                                [],
                                                                'Returns the ManagementForm instance for this FormSet.'),
                                                               ('total_form_count',
                                                                [],
                                                                'Returns the total number of forms in this FormSet.'),
                                                               ('initial_form_count',
                                                                [],
                                                                'Returns the number of forms that are required in this FormSet.'),
                                                               ('_construct_forms', [], ''),
                                                               ('_construct_form',
                                                                ['i', '**kwargs'],
                                                                '\n        Instantiates and returns the i-th form instance in a formset.\n        '),
                                                               ('_get_initial_forms',
                                                                [],
                                                                'Return a list of all the initial forms in this formset.'),
                                                               ('_get_extra_forms',
                                                                [],
                                                                'Return a list of all the extra forms in this formset.'),
                                                               ('_get_empty_form',
                                                                ['**kwargs'],
                                                                ''),
                                                               ('_get_cleaned_data',
                                                                [],
                                                                '\n        Returns a list of form.cleaned_data dicts for every form in self.forms.\n        '),
                                                               ('_get_deleted_forms',
                                                                [],
                                                                '\n        Returns a list of forms that have been marked for deletion. Raises an\n        AttributeError if deletion is not allowed.\n        '),
                                                               ('_get_ordered_forms',
                                                                [],
                                                                '\n        Returns a list of form in the order specified by the incoming data.\n        Raises an AttributeError if ordering is not allowed.\n        '),
                                                               ('get_default_prefix', [], ''),
                                                               ('non_form_errors',
                                                                [],
                                                                "\n        Returns an ErrorList of errors that aren't associated with a particular\n        form -- i.e., from formset.clean(). Returns an empty ErrorList if there\n        are none.\n        "),
                                                               ('_get_errors',
                                                                [],
                                                                '\n        Returns a list of form.errors for every form in self.forms.\n        '),
                                                               ('_should_delete_form',
                                                                ['form'],
                                                                ''),
                                                               ('is_valid',
                                                                [],
                                                                '\n        Returns True if form.errors is empty for every form in self.forms.\n        '),
                                                               ('full_clean',
                                                                [],
                                                                '\n        Cleans all of self.data and populates self._errors.\n        '),
                                                               ('clean',
                                                                [],
                                                                '\n        Hook for doing any extra formset-wide cleaning after Form.clean() has\n        been called on every form. Any ValidationError raised by this method\n        will not be associated with a particular form; it will be accesible\n        via formset.non_form_errors()\n        '),
                                                               ('add_fields',
                                                                ['form', 'index'],
                                                                'A hook for adding extra fields on to each form instance.'),
                                                               ('add_prefix', ['index'], ''),
                                                               ('is_multipart',
                                                                [],
                                                                '\n        Returns True if the formset needs to be multipart-encrypted, i.e. it\n        has FileInput. Otherwise, False.\n        '),
                                                               ('_get_media', [], ''),
                                                               ('as_table',
                                                                [],
                                                                'Returns this formset rendered as HTML <tr>s -- excluding the <table></table>.'),
                                                               ('as_p',
                                                                [],
                                                                'Returns this formset rendered as HTML <p>s.'),
                                                               ('as_ul',
                                                                [],
                                                                'Returns this formset rendered as HTML <li>s.')],
                                                   'properties': ['is_bound',
                                                                  'prefix',
                                                                  'auto_id',
                                                                  'data',
                                                                  'files',
                                                                  'initial',
                                                                  'error_class',
                                                                  '_errors',
                                                                  '_non_form_errors',
                                                                  'management_form',
                                                                  'forms',
                                                                  'initial_forms',
                                                                  'extra_forms',
                                                                  'empty_form',
                                                                  'cleaned_data',
                                                                  '_deleted_form_indexes',
                                                                  'deleted_forms',
                                                                  '_ordering',
                                                                  'ordered_forms',
                                                                  'get_default_prefix',
                                                                  'errors',
                                                                  'media']},
             'django.forms.formsets.ManagementForm': {'bases': ['forms.Form'],
                                                      'constructor': ['*args', '**kwargs'],
                                                      'docstring': '\n    ``ManagementForm`` is used to keep track of how many form instances\n    are displayed on the page. If adding new forms via javascript, you should\n    increment the count field of this form as well.\n    ',
                                                      'methods': [],
                                                      'properties': []},
             'django.forms.models.BaseInlineFormSet': {'bases': ['django.forms.models.BaseModelFormSet'],
                                                       'constructor': ['data=None',
                                                                       'files=None',
                                                                       'instance=None',
                                                                       'save_as_new=False',
                                                                       'prefix=None',
                                                                       'queryset=None'],
                                                       'docstring': 'A formset for child objects related to a parent.',
                                                       'methods': [('initial_form_count',
                                                                    [],
                                                                    ''),
                                                                   ('_construct_form',
                                                                    ['i', '**kwargs'],
                                                                    ''),
                                                                   ('get_default_prefix',
                                                                    [],
                                                                    ''),
                                                                   ('save_new',
                                                                    ['form', 'commit=True'],
                                                                    ''),
                                                                   ('add_fields',
                                                                    ['form', 'index'],
                                                                    ''),
                                                                   ('get_unique_error_message',
                                                                    ['unique_check'],
                                                                    '')],
                                                       'properties': ['instance',
                                                                      'save_as_new',
                                                                      'rel_name',
                                                                      'get_default_prefix']},
             'django.forms.models.BaseModelForm': {'bases': ['forms.BaseForm'],
                                                   'constructor': ['data=None',
                                                                   'files=None',
                                                                   "auto_id='id_%s'",
                                                                   'prefix=None',
                                                                   'initial=None',
                                                                   'error_class=ErrorList',
                                                                   "label_suffix=':'",
                                                                   'empty_permitted=False',
                                                                   'instance=None'],
                                                   'docstring': '',
                                                   'methods': [('_update_errors',
                                                                ['message_dict'],
                                                                ''),
                                                               ('_get_validation_exclusions',
                                                                [],
                                                                '\n        For backwards-compatibility, several types of fields need to be\n        excluded from model validation. See the following tickets for\n        details: #12507, #12521, #12553\n        '),
                                                               ('clean', [], ''),
                                                               ('_post_clean', [], ''),
                                                               ('validate_unique',
                                                                [],
                                                                "\n        Calls the instance's validate_unique() method and updates the form's\n        validation errors if any were raised.\n        "),
                                                               ('save',
                                                                ['commit=True'],
                                                                "\n        Saves this ``form``'s cleaned_data into model instance\n        ``self.instance``.\n\n        If commit=True, then the changes to ``instance`` will be saved to the\n        database. Returns ``instance``.\n        ")],
                                                   'properties': ['instance',
                                                                  '_validate_unique']},
             'django.forms.models.BaseModelFormSet': {'bases': ['formsets.BaseFormSet'],
                                                      'constructor': ['data=None',
                                                                      'files=None',
                                                                      "auto_id='id_%s'",
                                                                      'prefix=None',
                                                                      'queryset=None',
                                                                      '**kwargs'],
                                                      'docstring': '\n    A ``FormSet`` for editing a queryset and/or adding new objects to it.\n    ',
                                                      'methods': [('initial_form_count',
                                                                   [],
                                                                   'Returns the number of forms that are required in this FormSet.'),
                                                                  ('_existing_object',
                                                                   ['pk'],
                                                                   ''),
                                                                  ('_construct_form',
                                                                   ['i', '**kwargs'],
                                                                   ''),
                                                                  ('get_queryset', [], ''),
                                                                  ('save_new',
                                                                   ['form', 'commit=True'],
                                                                   'Saves and returns a new model instance for the given form.'),
                                                                  ('save_existing',
                                                                   ['form',
                                                                    'instance',
                                                                    'commit=True'],
                                                                   'Saves and returns an existing model instance for the given form.'),
                                                                  ('save',
                                                                   ['commit=True'],
                                                                   'Saves model instances for every form, adding and changing instances\n        as necessary, and returns the list of instances.\n        '),
                                                                  ('clean', [], ''),
                                                                  ('validate_unique', [], ''),
                                                                  ('get_unique_error_message',
                                                                   ['unique_check'],
                                                                   ''),
                                                                  ('get_date_error_message',
                                                                   ['date_check'],
                                                                   ''),
                                                                  ('get_form_error', [], ''),
                                                                  ('save_existing_objects',
                                                                   ['commit=True'],
                                                                   ''),
                                                                  ('save_new_objects',
                                                                   ['commit=True'],
                                                                   ''),
                                                                  ('add_fields',
                                                                   ['form', 'index'],
                                                                   "Add a hidden field for the object's primary key.")],
                                                      'properties': ['model',
                                                                     'queryset',
                                                                     '_object_dict',
                                                                     '_queryset',
                                                                     'saved_forms',
                                                                     'save_m2m',
                                                                     'changed_objects',
                                                                     'deleted_objects',
                                                                     'new_objects',
                                                                     '_pk_field']},
             'django.forms.models.InlineForeignKeyField': {'bases': ['fields.Field'],
                                                           'constructor': ['parent_instance',
                                                                           '*args',
                                                                           '**kwargs'],
                                                           'docstring': '\n    A basic integer field that deals with validating the given value to a\n    given parent instance in an inline.\n    ',
                                                           'methods': [('clean', ['value'], '')],
                                                           'properties': ['default_error_messages',
                                                                          'parent_instance',
                                                                          'pk_field',
                                                                          'to_field']},
             'django.forms.models.InlineForeignKeyHiddenInput': {'bases': ['widgets.HiddenInput'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('_has_changed',
                                                                              ['initial',
                                                                               'data'],
                                                                              '')],
                                                                 'properties': []},
             'django.forms.models.ModelChoiceField': {'bases': ['fields.ChoiceField'],
                                                      'constructor': ['queryset',
                                                                      "empty_label=u'---------'",
                                                                      'cache_choices=False',
                                                                      'required=True',
                                                                      'widget=None',
                                                                      'label=None',
                                                                      'initial=None',
                                                                      'help_text=None',
                                                                      'to_field_name=None',
                                                                      '*args',
                                                                      '**kwargs'],
                                                      'docstring': 'A ChoiceField whose choices are a model QuerySet.',
                                                      'methods': [('__deepcopy__',
                                                                   ['memo'],
                                                                   ''),
                                                                  ('_get_queryset', [], ''),
                                                                  ('_set_queryset',
                                                                   ['queryset'],
                                                                   ''),
                                                                  ('label_from_instance',
                                                                   ['obj'],
                                                                   "\n        This method is used to convert objects into strings; it's used to\n        generate the labels for the choices presented by this object. Subclasses\n        can override this method to customize the display of the choices.\n        "),
                                                                  ('_get_choices', [], ''),
                                                                  ('prepare_value',
                                                                   ['value'],
                                                                   ''),
                                                                  ('to_python', ['value'], ''),
                                                                  ('validate', ['value'], '')],
                                                      'properties': ['default_error_messages',
                                                                     'empty_label',
                                                                     'cache_choices',
                                                                     'queryset',
                                                                     'choice_cache',
                                                                     'to_field_name',
                                                                     '_queryset',
                                                                     'choices']},
             'django.forms.models.ModelChoiceIterator': {'bases': ['object'],
                                                         'constructor': ['field'],
                                                         'docstring': '',
                                                         'methods': [('__iter__', [], ''),
                                                                     ('__len__', [], ''),
                                                                     ('choice', ['obj'], '')],
                                                         'properties': ['field', 'queryset']},
             'django.forms.models.ModelForm': {'bases': ['django.forms.models.BaseModelForm'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['__metaclass__']},
             'django.forms.models.ModelFormMetaclass': {'bases': ['type'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('__new__',
                                                                     ['name',
                                                                      'bases',
                                                                      'attrs'],
                                                                     '')],
                                                        'properties': []},
             'django.forms.models.ModelFormOptions': {'bases': ['object'],
                                                      'constructor': ['options=None'],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['model',
                                                                     'fields',
                                                                     'exclude',
                                                                     'widgets']},
             'django.forms.models.ModelMultipleChoiceField': {'bases': ['django.forms.models.ModelChoiceField'],
                                                              'constructor': ['queryset',
                                                                              'cache_choices=False',
                                                                              'required=True',
                                                                              'widget=None',
                                                                              'label=None',
                                                                              'initial=None',
                                                                              'help_text=None',
                                                                              '*args',
                                                                              '**kwargs'],
                                                              'docstring': 'A MultipleChoiceField whose choices are a model QuerySet.',
                                                              'methods': [('clean',
                                                                           ['value'],
                                                                           ''),
                                                                          ('prepare_value',
                                                                           ['value'],
                                                                           '')],
                                                              'properties': ['widget',
                                                                             'hidden_widget',
                                                                             'default_error_messages']},
             'django.forms.util.ErrorDict': {'bases': ['dict',
                                                       'django.utils.encoding.StrAndUnicode'],
                                             'constructor': [],
                                             'docstring': '\n    A collection of errors that knows how to display itself in various formats.\n\n    The dictionary keys are the field names, and the values are the errors.\n    ',
                                             'methods': [('__unicode__', [], ''),
                                                         ('as_ul', [], ''),
                                                         ('as_text', [], '')],
                                             'properties': []},
             'django.forms.util.ErrorList': {'bases': ['list',
                                                       'django.utils.encoding.StrAndUnicode'],
                                             'constructor': [],
                                             'docstring': '\n    A collection of errors that knows how to display itself in various formats.\n    ',
                                             'methods': [('__unicode__', [], ''),
                                                         ('as_ul', [], ''),
                                                         ('as_text', [], ''),
                                                         ('__repr__', [], '')],
                                             'properties': []},
             'django.forms.widgets.CheckboxInput': {'bases': ['django.forms.widgets.Widget'],
                                                    'constructor': ['attrs=None',
                                                                    'check_test=bool'],
                                                    'docstring': '',
                                                    'methods': [('render',
                                                                 ['name',
                                                                  'value',
                                                                  'attrs=None'],
                                                                 ''),
                                                                ('value_from_datadict',
                                                                 ['data', 'files', 'name'],
                                                                 ''),
                                                                ('_has_changed',
                                                                 ['initial', 'data'],
                                                                 '')],
                                                    'properties': ['check_test']},
             'django.forms.widgets.CheckboxSelectMultiple': {'bases': ['django.forms.widgets.SelectMultiple'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('render',
                                                                          ['name',
                                                                           'value',
                                                                           'attrs=None',
                                                                           'choices=()'],
                                                                          ''),
                                                                         ('id_for_label',
                                                                          ['id_'],
                                                                          '')],
                                                             'properties': ['id_for_label']},
             'django.forms.widgets.ClearableFileInput': {'bases': ['django.forms.widgets.FileInput'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('clear_checkbox_name',
                                                                      ['name'],
                                                                      '\n        Given the name of the file input, return the name of the clear checkbox\n        input.\n        '),
                                                                     ('clear_checkbox_id',
                                                                      ['name'],
                                                                      '\n        Given the name of the clear checkbox input, return the HTML id for it.\n        '),
                                                                     ('render',
                                                                      ['name',
                                                                       'value',
                                                                       'attrs=None'],
                                                                      ''),
                                                                     ('value_from_datadict',
                                                                      ['data',
                                                                       'files',
                                                                       'name'],
                                                                      '')],
                                                         'properties': ['initial_text',
                                                                        'input_text',
                                                                        'clear_checkbox_label',
                                                                        'template_with_initial',
                                                                        'template_with_clear']},
             'django.forms.widgets.DateInput': {'bases': ['django.forms.widgets.Input'],
                                                'constructor': ['attrs=None', 'format=None'],
                                                'docstring': '',
                                                'methods': [('_format_value', ['value'], ''),
                                                            ('_has_changed',
                                                             ['initial', 'data'],
                                                             '')],
                                                'properties': ['input_type',
                                                               'format',
                                                               'manual_format']},
             'django.forms.widgets.DateTimeInput': {'bases': ['django.forms.widgets.Input'],
                                                    'constructor': ['attrs=None', 'format=None'],
                                                    'docstring': '',
                                                    'methods': [('_format_value',
                                                                 ['value'],
                                                                 ''),
                                                                ('_has_changed',
                                                                 ['initial', 'data'],
                                                                 '')],
                                                    'properties': ['input_type',
                                                                   'format',
                                                                   'manual_format']},
             'django.forms.widgets.FileInput': {'bases': ['django.forms.widgets.Input'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('render',
                                                             ['name', 'value', 'attrs=None'],
                                                             ''),
                                                            ('value_from_datadict',
                                                             ['data', 'files', 'name'],
                                                             'File widgets take data from FILES, not POST'),
                                                            ('_has_changed',
                                                             ['initial', 'data'],
                                                             '')],
                                                'properties': ['input_type',
                                                               'needs_multipart_form']},
             'django.forms.widgets.HiddenInput': {'bases': ['django.forms.widgets.Input'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['input_type', 'is_hidden']},
             'django.forms.widgets.Input': {'bases': ['django.forms.widgets.Widget'],
                                            'constructor': [],
                                            'docstring': "\n    Base class for all <input> widgets (except type='checkbox' and\n    type='radio', which are special).\n    ",
                                            'methods': [('_format_value', ['value'], ''),
                                                        ('render',
                                                         ['name', 'value', 'attrs=None'],
                                                         '')],
                                            'properties': ['input_type']},
             'django.forms.widgets.Media': {'bases': ['django.utils.encoding.StrAndUnicode'],
                                            'constructor': ['media=None', '**kwargs'],
                                            'docstring': '',
                                            'methods': [('__unicode__', [], ''),
                                                        ('render', [], ''),
                                                        ('render_js', [], ''),
                                                        ('render_css', [], ''),
                                                        ('absolute_path',
                                                         ['path', 'prefix=None'],
                                                         ''),
                                                        ('__getitem__',
                                                         ['name'],
                                                         'Returns a Media object that only contains media of the given type'),
                                                        ('add_js', ['data'], ''),
                                                        ('add_css', ['data'], ''),
                                                        ('__add__', ['other'], '')],
                                            'properties': ['_css', '_js']},
             'django.forms.widgets.MediaDefiningClass': {'bases': ['type'],
                                                         'constructor': [],
                                                         'docstring': 'Metaclass for classes that can have media definitions',
                                                         'methods': [('__new__',
                                                                      ['name',
                                                                       'bases',
                                                                       'attrs'],
                                                                      '')],
                                                         'properties': []},
             'django.forms.widgets.MultiWidget': {'bases': ['django.forms.widgets.Widget'],
                                                  'constructor': ['widgets', 'attrs=None'],
                                                  'docstring': '\n    A widget that is composed of multiple widgets.\n\n    Its render() method is different than other widgets\', because it has to\n    figure out how to split a single value for display in multiple widgets.\n    The ``value`` argument can be one of two things:\n\n        * A list.\n        * A normal value (e.g., a string) that has been "compressed" from\n          a list of values.\n\n    In the second case -- i.e., if the value is NOT a list -- render() will\n    first "decompress" the value into a list before rendering it. It does so by\n    calling the decompress() method, which MultiWidget subclasses must\n    implement. This method takes a single "compressed" value and returns a\n    list.\n\n    When render() does its HTML rendering, each value in the list is rendered\n    with the corresponding widget -- the first value is rendered in the first\n    widget, the second value is rendered in the second widget, etc.\n\n    Subclasses may implement format_output(), which takes the list of rendered\n    widgets and returns a string of HTML that formats them any way you\'d like.\n\n    You\'ll probably want to use this class with MultiValueField.\n    ',
                                                  'methods': [('render',
                                                               ['name', 'value', 'attrs=None'],
                                                               ''),
                                                              ('id_for_label', ['id_'], ''),
                                                              ('value_from_datadict',
                                                               ['data', 'files', 'name'],
                                                               ''),
                                                              ('_has_changed',
                                                               ['initial', 'data'],
                                                               ''),
                                                              ('format_output',
                                                               ['rendered_widgets'],
                                                               '\n        Given a list of rendered widgets (as strings), returns a Unicode string\n        representing the HTML for the whole lot.\n\n        This hook allows you to format the HTML design of the widgets, if\n        needed.\n        '),
                                                              ('decompress',
                                                               ['value'],
                                                               '\n        Returns a list of decompressed values for the given compressed value.\n        The given value can be assumed to be valid, but not necessarily\n        non-empty.\n        '),
                                                              ('_get_media',
                                                               [],
                                                               'Media for a multiwidget is the combination of all media of the subwidgets'),
                                                              ('__deepcopy__', ['memo'], '')],
                                                  'properties': ['widgets',
                                                                 'id_for_label',
                                                                 'media']},
             'django.forms.widgets.MultipleHiddenInput': {'bases': ['django.forms.widgets.HiddenInput'],
                                                          'constructor': ['attrs=None',
                                                                          'choices=()'],
                                                          'docstring': '\n    A widget that handles <input type="hidden"> for fields that have a list\n    of values.\n    ',
                                                          'methods': [('render',
                                                                       ['name',
                                                                        'value',
                                                                        'attrs=None',
                                                                        'choices=()'],
                                                                       ''),
                                                                      ('value_from_datadict',
                                                                       ['data',
                                                                        'files',
                                                                        'name'],
                                                                       '')],
                                                          'properties': ['choices']},
             'django.forms.widgets.NullBooleanSelect': {'bases': ['django.forms.widgets.Select'],
                                                        'constructor': ['attrs=None'],
                                                        'docstring': '\n    A Select Widget intended to be used with NullBooleanField.\n    ',
                                                        'methods': [('render',
                                                                     ['name',
                                                                      'value',
                                                                      'attrs=None',
                                                                      'choices=()'],
                                                                     ''),
                                                                    ('value_from_datadict',
                                                                     ['data', 'files', 'name'],
                                                                     ''),
                                                                    ('_has_changed',
                                                                     ['initial', 'data'],
                                                                     '')],
                                                        'properties': []},
             'django.forms.widgets.PasswordInput': {'bases': ['django.forms.widgets.Input'],
                                                    'constructor': ['attrs=None',
                                                                    'render_value=False'],
                                                    'docstring': '',
                                                    'methods': [('render',
                                                                 ['name',
                                                                  'value',
                                                                  'attrs=None'],
                                                                 '')],
                                                    'properties': ['input_type', 'render_value']},
             'django.forms.widgets.RadioFieldRenderer': {'bases': ['django.utils.encoding.StrAndUnicode'],
                                                         'constructor': ['name',
                                                                         'value',
                                                                         'attrs',
                                                                         'choices'],
                                                         'docstring': '\n    An object used by RadioSelect to enable customization of radio widgets.\n    ',
                                                         'methods': [('__iter__', [], ''),
                                                                     ('__getitem__',
                                                                      ['idx'],
                                                                      ''),
                                                                     ('__unicode__', [], ''),
                                                                     ('render',
                                                                      [],
                                                                      'Outputs a <ul> for this set of radio fields.')],
                                                         'properties': ['name',
                                                                        'value',
                                                                        'attrs',
                                                                        'choices']},
             'django.forms.widgets.RadioInput': {'bases': ['django.utils.encoding.StrAndUnicode'],
                                                 'constructor': ['name',
                                                                 'value',
                                                                 'attrs',
                                                                 'choice',
                                                                 'index'],
                                                 'docstring': "\n    An object used by RadioFieldRenderer that represents a single\n    <input type='radio'>.\n    ",
                                                 'methods': [('__unicode__', [], ''),
                                                             ('is_checked', [], ''),
                                                             ('tag', [], '')],
                                                 'properties': ['name',
                                                                'value',
                                                                'attrs',
                                                                'choice_value',
                                                                'choice_label',
                                                                'index']},
             'django.forms.widgets.RadioSelect': {'bases': ['django.forms.widgets.Select'],
                                                  'constructor': ['*args', '**kwargs'],
                                                  'docstring': '',
                                                  'methods': [('get_renderer',
                                                               ['name',
                                                                'value',
                                                                'attrs=None',
                                                                'choices=()'],
                                                               'Returns an instance of the renderer.'),
                                                              ('render',
                                                               ['name',
                                                                'value',
                                                                'attrs=None',
                                                                'choices=()'],
                                                               ''),
                                                              ('id_for_label', ['id_'], '')],
                                                  'properties': ['renderer', 'id_for_label']},
             'django.forms.widgets.Select': {'bases': ['django.forms.widgets.Widget'],
                                             'constructor': ['attrs=None', 'choices=()'],
                                             'docstring': '',
                                             'methods': [('render',
                                                          ['name',
                                                           'value',
                                                           'attrs=None',
                                                           'choices=()'],
                                                          ''),
                                                         ('render_option',
                                                          ['selected_choices',
                                                           'option_value',
                                                           'option_label'],
                                                          ''),
                                                         ('render_options',
                                                          ['choices', 'selected_choices'],
                                                          '')],
                                             'properties': ['choices']},
             'django.forms.widgets.SelectMultiple': {'bases': ['django.forms.widgets.Select'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('render',
                                                                  ['name',
                                                                   'value',
                                                                   'attrs=None',
                                                                   'choices=()'],
                                                                  ''),
                                                                 ('value_from_datadict',
                                                                  ['data', 'files', 'name'],
                                                                  ''),
                                                                 ('_has_changed',
                                                                  ['initial', 'data'],
                                                                  '')],
                                                     'properties': []},
             'django.forms.widgets.SplitDateTimeWidget': {'bases': ['django.forms.widgets.MultiWidget'],
                                                          'constructor': ['attrs=None',
                                                                          'date_format=None',
                                                                          'time_format=None'],
                                                          'docstring': '\n    A Widget that splits datetime input into two <input type="text"> boxes.\n    ',
                                                          'methods': [('decompress',
                                                                       ['value'],
                                                                       '')],
                                                          'properties': ['date_format',
                                                                         'time_format']},
             'django.forms.widgets.SplitHiddenDateTimeWidget': {'bases': ['django.forms.widgets.SplitDateTimeWidget'],
                                                                'constructor': ['attrs=None',
                                                                                'date_format=None',
                                                                                'time_format=None'],
                                                                'docstring': '\n    A Widget that splits datetime input into two <input type="hidden"> inputs.\n    ',
                                                                'methods': [],
                                                                'properties': ['is_hidden']},
             'django.forms.widgets.TextInput': {'bases': ['django.forms.widgets.Input'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['input_type']},
             'django.forms.widgets.Textarea': {'bases': ['django.forms.widgets.Widget'],
                                               'constructor': ['attrs=None'],
                                               'docstring': '',
                                               'methods': [('render',
                                                            ['name', 'value', 'attrs=None'],
                                                            '')],
                                               'properties': []},
             'django.forms.widgets.TimeInput': {'bases': ['django.forms.widgets.Input'],
                                                'constructor': ['attrs=None', 'format=None'],
                                                'docstring': '',
                                                'methods': [('_format_value', ['value'], ''),
                                                            ('_has_changed',
                                                             ['initial', 'data'],
                                                             '')],
                                                'properties': ['input_type',
                                                               'format',
                                                               'manual_format']},
             'django.forms.widgets.Widget': {'bases': ['object'],
                                             'constructor': ['attrs=None'],
                                             'docstring': '',
                                             'methods': [('__deepcopy__', ['memo'], ''),
                                                         ('render',
                                                          ['name', 'value', 'attrs=None'],
                                                          "\n        Returns this Widget rendered as HTML, as a Unicode string.\n\n        The 'value' given is not guaranteed to be valid input, so subclass\n        implementations should program defensively.\n        "),
                                                         ('build_attrs',
                                                          ['extra_attrs=None', '**kwargs'],
                                                          'Helper function for building an attribute dictionary.'),
                                                         ('value_from_datadict',
                                                          ['data', 'files', 'name'],
                                                          "\n        Given a dictionary of data and this widget's name, returns the value\n        of this widget. Returns None if it's not provided.\n        "),
                                                         ('_has_changed',
                                                          ['initial', 'data'],
                                                          '\n        Return True if data differs from initial.\n        '),
                                                         ('id_for_label',
                                                          ['id_'],
                                                          "\n        Returns the HTML ID attribute of this Widget for use by a <label>,\n        given the ID of the field. Returns None if no ID is available.\n\n        This hook is necessary because some widgets have multiple HTML\n        elements and, thus, multiple IDs. In that case, this method should\n        return an ID value that corresponds to the first ID in the widget's\n        tags.\n        ")],
                                             'properties': ['__metaclass__',
                                                            'is_hidden',
                                                            'needs_multipart_form',
                                                            'is_localized',
                                                            'is_required',
                                                            'attrs',
                                                            'id_for_label']},
             'django.http.BadHeaderError': {'bases': ['ValueError'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': []},
             'django.http.CompatCookie': {'bases': ['django.http.SimpleCookie'],
                                          'constructor': ['*args', '**kwargs'],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': []},
             'django.http.Http404': {'bases': ['Exception'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'django.http.HttpRequest': {'bases': ['object'],
                                         'constructor': [],
                                         'docstring': 'A basic HTTP request.',
                                         'methods': [('__repr__', [], ''),
                                                     ('get_host',
                                                      [],
                                                      'Returns the HTTP host using the environment or request headers.'),
                                                     ('get_full_path', [], ''),
                                                     ('build_absolute_uri',
                                                      ['location=None'],
                                                      '\n        Builds an absolute URI from the location and the variables available in\n        this request. If no location is specified, the absolute URI is built on\n        ``request.get_full_path()``.\n        '),
                                                     ('is_secure', [], ''),
                                                     ('is_ajax', [], ''),
                                                     ('_set_encoding',
                                                      ['val'],
                                                      '\n        Sets the encoding used for GET/POST accesses. If the GET or POST\n        dictionary has already been created, it is removed and recreated on the\n        next access (so that it is decoded correctly).\n        '),
                                                     ('_get_encoding', [], ''),
                                                     ('_initialize_handlers', [], ''),
                                                     ('_set_upload_handlers',
                                                      ['upload_handlers'],
                                                      ''),
                                                     ('_get_upload_handlers', [], ''),
                                                     ('parse_file_upload',
                                                      ['META', 'post_data'],
                                                      'Returns a tuple of (POST QueryDict, FILES MultiValueDict).'),
                                                     ('_get_raw_post_data', [], ''),
                                                     ('_mark_post_parse_error', [], ''),
                                                     ('_load_post_and_files', [], ''),
                                                     ('read', ['*args', '**kwargs'], ''),
                                                     ('readline', ['*args', '**kwargs'], ''),
                                                     ('xreadlines', [], ''),
                                                     ('readlines', [], '')],
                                         'properties': ['_encoding',
                                                        '_upload_handlers',
                                                        'GET',
                                                        'POST',
                                                        'COOKIES',
                                                        'META',
                                                        'FILES',
                                                        'path',
                                                        'path_info',
                                                        'method',
                                                        '_get',
                                                        '_post',
                                                        'encoding',
                                                        'upload_handlers',
                                                        '_raw_post_data',
                                                        '_stream',
                                                        'raw_post_data',
                                                        '_files',
                                                        '_post_parse_error',
                                                        '_read_started',
                                                        '__iter__']},
             'django.http.HttpResponse': {'bases': ['object'],
                                          'constructor': ["content=''",
                                                          'mimetype=None',
                                                          'status=None',
                                                          'content_type=None'],
                                          'docstring': 'A basic HTTP response, with content and dictionary-accessed headers.',
                                          'methods': [('__str__',
                                                       [],
                                                       'Full HTTP message, including headers.'),
                                                      ('_convert_to_ascii',
                                                       ['*values'],
                                                       'Converts all values to ascii strings.'),
                                                      ('__setitem__', ['header', 'value'], ''),
                                                      ('__delitem__', ['header'], ''),
                                                      ('__getitem__', ['header'], ''),
                                                      ('has_header',
                                                       ['header'],
                                                       'Case-insensitive check for a header.'),
                                                      ('items', [], ''),
                                                      ('get', ['header', 'alternate'], ''),
                                                      ('set_cookie',
                                                       ['key',
                                                        "value=''",
                                                        'max_age=None',
                                                        'expires=None',
                                                        "path='/'",
                                                        'domain=None',
                                                        'secure=False',
                                                        'httponly=False'],
                                                       '\n        Sets a cookie.\n\n        ``expires`` can be a string in the correct format or a\n        ``datetime.datetime`` object in UTC. If ``expires`` is a datetime\n        object then ``max_age`` will be calculated.\n        '),
                                                      ('delete_cookie',
                                                       ['key', "path='/'", 'domain=None'],
                                                       ''),
                                                      ('_get_content', [], ''),
                                                      ('_set_content', ['value'], ''),
                                                      ('__iter__', [], ''),
                                                      ('next', [], ''),
                                                      ('close', [], ''),
                                                      ('write', ['content'], ''),
                                                      ('flush', [], ''),
                                                      ('tell', [], '')],
                                          'properties': ['status_code',
                                                         '_headers',
                                                         '_charset',
                                                         '_container',
                                                         '_is_string',
                                                         'cookies',
                                                         '__contains__',
                                                         'content',
                                                         '_iterator']},
             'django.http.HttpResponseBadRequest': {'bases': ['django.http.HttpResponse'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['status_code']},
             'django.http.HttpResponseForbidden': {'bases': ['django.http.HttpResponse'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['status_code']},
             'django.http.HttpResponseGone': {'bases': ['django.http.HttpResponse'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['status_code']},
             'django.http.HttpResponseNotAllowed': {'bases': ['django.http.HttpResponse'],
                                                    'constructor': ['permitted_methods'],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['status_code']},
             'django.http.HttpResponseNotFound': {'bases': ['django.http.HttpResponse'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['status_code']},
             'django.http.HttpResponseNotModified': {'bases': ['django.http.HttpResponse'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['status_code']},
             'django.http.HttpResponsePermanentRedirect': {'bases': ['django.http.HttpResponse'],
                                                           'constructor': ['redirect_to'],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['status_code']},
             'django.http.HttpResponseRedirect': {'bases': ['django.http.HttpResponse'],
                                                  'constructor': ['redirect_to'],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['status_code']},
             'django.http.HttpResponseServerError': {'bases': ['django.http.HttpResponse'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['status_code']},
             'django.http.Morsel': {'bases': ['Cookie.Morsel'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('__setitem__', ['K', 'V'], ''),
                                                ('OutputString', ['attrs=None'], '')],
                                    'properties': []},
             'django.http.QueryDict': {'bases': ['django.utils.datastructures.MultiValueDict'],
                                       'constructor': ['query_string',
                                                       'mutable=False',
                                                       'encoding=None'],
                                       'docstring': '\n    A specialized MultiValueDict that takes a query string when initialized.\n    This is immutable unless you create a copy of it.\n\n    Values retrieved from this class are converted from the given encoding\n    (DEFAULT_CHARSET by default) to unicode.\n    ',
                                       'methods': [('_get_encoding', [], ''),
                                                   ('_set_encoding', ['value'], ''),
                                                   ('_assert_mutable', [], ''),
                                                   ('__setitem__', ['key', 'value'], ''),
                                                   ('__delitem__', ['key'], ''),
                                                   ('__copy__', [], ''),
                                                   ('__deepcopy__', ['memo'], ''),
                                                   ('setlist', ['key', 'list_'], ''),
                                                   ('setlistdefault',
                                                    ['key', 'default_list=()'],
                                                    ''),
                                                   ('appendlist', ['key', 'value'], ''),
                                                   ('update', ['other_dict'], ''),
                                                   ('pop', ['key', '*args'], ''),
                                                   ('popitem', [], ''),
                                                   ('clear', [], ''),
                                                   ('setdefault', ['key', 'default=None'], ''),
                                                   ('copy',
                                                    [],
                                                    'Returns a mutable copy of this object.'),
                                                   ('urlencode',
                                                    ['safe=None'],
                                                    "\n        Returns an encoded string of all query string arguments.\n\n        :arg safe: Used to specify characters which do not require quoting, for\n            example::\n\n                >>> q = QueryDict('', mutable=True)\n                >>> q['next'] = '/a&b/'\n                >>> q.urlencode()\n                'next=%2Fa%26b%2F'\n                >>> q.urlencode(safe='/')\n                'next=/a%26b/'\n\n        ")],
                                       'properties': ['_mutable', '_encoding', 'encoding']},
             'django.http.SimpleCookie': {'bases': ['Cookie.SimpleCookie'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('__set',
                                                       ['key', 'real_value', 'coded_value'],
                                                       ''),
                                                      ('__setitem__', ['key', 'value'], ''),
                                                      ('value_encode', ['val'], ''),
                                                      ('load',
                                                       ['rawdata',
                                                        'ignore_parse_errors=False'],
                                                       ''),
                                                      ('_loose_set',
                                                       ['key', 'real_value', 'coded_value'],
                                                       '')],
                                          'properties': ['bad_cookies',
                                                         '_BaseCookie__set',
                                                         '_strict_set']},
             'django.http.multipartparser.BoundaryIter': {'bases': ['object'],
                                                          'constructor': ['stream', 'boundary'],
                                                          'docstring': '\n    A Producer that is sensitive to boundaries.\n\n    Will happily yield bytes until a boundary is found. Will yield the bytes\n    before the boundary, throw away the boundary bytes themselves, and push the\n    post-boundary bytes back on the stream.\n\n    The future calls to .next() after locating the boundary will raise a\n    StopIteration exception.\n    ',
                                                          'methods': [('__iter__', [], ''),
                                                                      ('next', [], ''),
                                                                      ('_find_boundary',
                                                                       ['data', 'eof=False'],
                                                                       '\n        Finds a multipart boundary in data.\n\n        Should no boundry exist in the data None is returned instead. Otherwise\n        a tuple containing the indices of the following are returned:\n\n         * the end of current encapsulation\n         * the start of the next encapsulation\n        ')],
                                                          'properties': ['_stream',
                                                                         '_boundary',
                                                                         '_done',
                                                                         '_rollback',
                                                                         '_fs']},
             'django.http.multipartparser.ChunkIter': {'bases': ['object'],
                                                       'constructor': ['flo',
                                                                       'chunk_size=64*1024'],
                                                       'docstring': '\n    An iterable that will yield chunks of data. Given a file-like object as the\n    constructor, this object will yield chunks of read operations from that\n    object.\n    ',
                                                       'methods': [('next', [], ''),
                                                                   ('__iter__', [], '')],
                                                       'properties': ['flo', 'chunk_size']},
             'django.http.multipartparser.InputStreamExhausted': {'bases': ['Exception'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    No more reads are allowed from this device.\n    ',
                                                                  'methods': [],
                                                                  'properties': []},
             'django.http.multipartparser.InterBoundaryIter': {'bases': ['object'],
                                                               'constructor': ['stream',
                                                                               'boundary'],
                                                               'docstring': '\n    A Producer that will iterate over boundaries.\n    ',
                                                               'methods': [('__iter__', [], ''),
                                                                           ('next', [], '')],
                                                               'properties': ['_stream',
                                                                              '_boundary']},
             'django.http.multipartparser.LazyStream': {'bases': ['object'],
                                                        'constructor': ['producer',
                                                                        'length=None'],
                                                        'docstring': '\n    The LazyStream wrapper allows one to get and "unget" bytes from a stream.\n\n    Given a producer object (an iterator that yields bytestrings), the\n    LazyStream object will support iteration, reading, and keeping a "look-back"\n    variable in case you need to "unget" some bytes.\n    ',
                                                        'methods': [('tell', [], ''),
                                                                    ('read', ['size=None'], ''),
                                                                    ('next',
                                                                     [],
                                                                     '\n        Used when the exact number of bytes to read is unimportant.\n\n        This procedure just returns whatever is chunk is conveniently returned\n        from the iterator instead. Useful to avoid unnecessary bookkeeping if\n        performance is an issue.\n        '),
                                                                    ('close',
                                                                     [],
                                                                     '\n        Used to invalidate/disable this lazy stream.\n\n        Replaces the producer with an empty list. Any leftover bytes that have\n        already been read will still be reported upon read() and/or next().\n        '),
                                                                    ('__iter__', [], ''),
                                                                    ('unget',
                                                                     ['bytes'],
                                                                     '\n        Places bytes back onto the front of the lazy stream.\n\n        Future calls to read() will return those bytes first. The\n        stream position and thus tell() will be rewound.\n        '),
                                                                    ('_update_unget_history',
                                                                     ['num_bytes'],
                                                                     "\n        Updates the unget history as a sanity check to see if we've pushed\n        back the same number of bytes in one chunk. If we keep ungetting the\n        same number of bytes many times (here, 50), we're mostly likely in an\n        infinite loop of some sort. This is usually caused by a\n        maliciously-malformed MIME request.\n        ")],
                                                        'properties': ['_producer',
                                                                       '_empty',
                                                                       '_leftover',
                                                                       'length',
                                                                       'position',
                                                                       '_remaining',
                                                                       '_unget_history']},
             'django.http.multipartparser.LimitBytes': {'bases': ['object'],
                                                        'constructor': ['fileobject', 'length'],
                                                        'docstring': ' Limit bytes for a file object. ',
                                                        'methods': [('read',
                                                                     ['num_bytes=None'],
                                                                     "\n        Read data from the underlying file.\n        If you ask for too much or there isn't anything left,\n        this will raise an InputStreamExhausted error.\n        ")],
                                                        'properties': ['_file', 'remaining']},
             'django.http.multipartparser.MultiPartParser': {'bases': ['object'],
                                                             'constructor': ['META',
                                                                             'input_data',
                                                                             'upload_handlers',
                                                                             'encoding=None'],
                                                             'docstring': '\n    A rfc2388 multipart/form-data parser.\n\n    ``MultiValueDict.parse()`` reads the input stream in ``chunk_size`` chunks\n    and returns a tuple of ``(MultiValueDict(POST), MultiValueDict(FILES))``. If\n    ',
                                                             'methods': [('parse',
                                                                          [],
                                                                          '\n        Parse the POST data and break it into a FILES MultiValueDict and a POST\n        MultiValueDict.\n\n        Returns a tuple containing the POST and FILES dictionary, respectively.\n        '),
                                                                         ('handle_file_complete',
                                                                          ['old_field_name',
                                                                           'counters'],
                                                                          '\n        Handle all the signalling that takes place when a file is complete.\n        '),
                                                                         ('IE_sanitize',
                                                                          ['filename'],
                                                                          'Cleanup filename from Internet Explorer full paths.')],
                                                             'properties': ['_boundary',
                                                                            '_input_data',
                                                                            '_chunk_size',
                                                                            '_meta',
                                                                            '_encoding',
                                                                            '_content_length',
                                                                            '_upload_handlers',
                                                                            '_post',
                                                                            '_files']},
             'django.http.multipartparser.MultiPartParserError': {'bases': ['Exception'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': []},
             'django.http.multipartparser.Parser': {'bases': ['object'],
                                                    'constructor': ['stream', 'boundary'],
                                                    'docstring': '',
                                                    'methods': [('__iter__', [], '')],
                                                    'properties': ['_stream', '_separator']},
             'django.middleware.cache.CacheMiddleware': {'bases': ['django.middleware.cache.UpdateCacheMiddleware',
                                                                   'django.middleware.cache.FetchFromCacheMiddleware'],
                                                         'constructor': ['cache_timeout=None',
                                                                         'cache_anonymous_only=None',
                                                                         '**kwargs'],
                                                         'docstring': '\n    Cache middleware that provides basic behavior for many simple sites.\n\n    Also used as the hook point for the cache decorator, which is generated\n    using the decorator-from-middleware utility.\n    ',
                                                         'methods': [],
                                                         'properties': ['key_prefix',
                                                                        'cache_alias',
                                                                        'cache_anonymous_only',
                                                                        'cache',
                                                                        'cache_timeout']},
             'django.middleware.cache.FetchFromCacheMiddleware': {'bases': ['object'],
                                                                  'constructor': [],
                                                                  'docstring': "\n    Request-phase cache middleware that fetches a page from the cache.\n\n    Must be used as part of the two-part update/fetch cache middleware.\n    FetchFromCacheMiddleware must be the last piece of middleware in\n    MIDDLEWARE_CLASSES so that it'll get called last during the request phase.\n    ",
                                                                  'methods': [('process_request',
                                                                               ['request'],
                                                                               '\n        Checks whether the page is already cached and returns the cached\n        version if available.\n        ')],
                                                                  'properties': ['cache_timeout',
                                                                                 'key_prefix',
                                                                                 'cache_anonymous_only',
                                                                                 'cache_alias',
                                                                                 'cache']},
             'django.middleware.cache.UpdateCacheMiddleware': {'bases': ['object'],
                                                               'constructor': [],
                                                               'docstring': "\n    Response-phase cache middleware that updates the cache if the response is\n    cacheable.\n\n    Must be used as part of the two-part update/fetch cache middleware.\n    UpdateCacheMiddleware must be the first piece of middleware in\n    MIDDLEWARE_CLASSES so that it'll get called last during the response phase.\n    ",
                                                               'methods': [('_session_accessed',
                                                                            ['request'],
                                                                            ''),
                                                                           ('_should_update_cache',
                                                                            ['request',
                                                                             'response'],
                                                                            ''),
                                                                           ('process_response',
                                                                            ['request',
                                                                             'response'],
                                                                            'Sets the cache, if needed.')],
                                                               'properties': ['cache_timeout',
                                                                              'key_prefix',
                                                                              'cache_anonymous_only',
                                                                              'cache_alias',
                                                                              'cache']},
             'django.middleware.common.CommonMiddleware': {'bases': ['object'],
                                                           'constructor': [],
                                                           'docstring': '\n    "Common" middleware for taking care of some basic operations:\n\n        - Forbids access to User-Agents in settings.DISALLOWED_USER_AGENTS\n\n        - URL rewriting: Based on the APPEND_SLASH and PREPEND_WWW settings,\n          this middleware appends missing slashes and/or prepends missing\n          "www."s.\n\n            - If APPEND_SLASH is set and the initial URL doesn\'t end with a\n              slash, and it is not found in urlpatterns, a new URL is formed by\n              appending a slash at the end. If this new URL is found in\n              urlpatterns, then an HTTP-redirect is returned to this new URL;\n              otherwise the initial URL is processed as usual.\n\n        - ETags: If the USE_ETAGS setting is set, ETags will be calculated from\n          the entire page content and Not Modified responses will be returned\n          appropriately.\n    ',
                                                           'methods': [('process_request',
                                                                        ['request'],
                                                                        '\n        Check for denied User-Agents and rewrite the URL based on\n        settings.APPEND_SLASH and settings.PREPEND_WWW\n        '),
                                                                       ('process_response',
                                                                        ['request',
                                                                         'response'],
                                                                        'Send broken link emails and calculate the Etag, if needed.')],
                                                           'properties': []},
             'django.middleware.csrf.CsrfMiddleware': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '\n    Django middleware that adds protection against Cross Site\n    Request Forgeries by adding hidden form fields to POST forms and\n    checking requests for the correct value.\n\n    CsrfMiddleware uses two middleware, CsrfViewMiddleware and\n    CsrfResponseMiddleware, which can be used independently.  It is recommended\n    to use only CsrfViewMiddleware and use the csrf_token template tag in\n    templates for inserting the token.\n    ',
                                                       'methods': [('process_response',
                                                                    ['request', 'resp'],
                                                                    ''),
                                                                   ('process_view',
                                                                    ['request',
                                                                     'callback',
                                                                     'callback_args',
                                                                     'callback_kwargs'],
                                                                    '')],
                                                       'properties': ['response_middleware',
                                                                      'view_middleware']},
             'django.middleware.csrf.CsrfResponseMiddleware': {'bases': ['object'],
                                                               'constructor': [],
                                                               'docstring': '\n    DEPRECATED\n    Middleware that post-processes a response to add a csrfmiddlewaretoken.\n\n    This exists for backwards compatibility and as an interim measure until\n    applications are converted to using use the csrf_token template tag\n    instead. It will be removed in Django 1.4.\n    ',
                                                               'methods': [('process_response',
                                                                            ['request',
                                                                             'response'],
                                                                            '')],
                                                               'properties': []},
             'django.middleware.csrf.CsrfViewMiddleware': {'bases': ['object'],
                                                           'constructor': [],
                                                           'docstring': '\n    Middleware that requires a present and correct csrfmiddlewaretoken\n    for POST requests that have a CSRF cookie, and sets an outgoing\n    CSRF cookie.\n\n    This middleware should be used in conjunction with the csrf_token template\n    tag.\n    ',
                                                           'methods': [('_accept',
                                                                        ['request'],
                                                                        ''),
                                                                       ('_reject',
                                                                        ['request', 'reason'],
                                                                        ''),
                                                                       ('process_view',
                                                                        ['request',
                                                                         'callback',
                                                                         'callback_args',
                                                                         'callback_kwargs'],
                                                                        ''),
                                                                       ('process_response',
                                                                        ['request',
                                                                         'response'],
                                                                        '')],
                                                           'properties': []},
             'django.middleware.doc.XViewMiddleware': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '\n    Adds an X-View header to internal HEAD requests -- used by the documentation system.\n    ',
                                                       'methods': [('process_view',
                                                                    ['request',
                                                                     'view_func',
                                                                     'view_args',
                                                                     'view_kwargs'],
                                                                    '\n        If the request method is HEAD and either the IP is internal or the\n        user is a logged-in staff member, quickly return with an x-header\n        indicating the view function.  This is used by the documentation module\n        to lookup the view function for an arbitrary page.\n        ')],
                                                       'properties': []},
             'django.middleware.gzip.GZipMiddleware': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '\n    This middleware compresses content if the browser allows gzip compression.\n    It sets the Vary header accordingly, so that caches will base their storage\n    on the Accept-Encoding header.\n    ',
                                                       'methods': [('process_response',
                                                                    ['request', 'response'],
                                                                    '')],
                                                       'properties': []},
             'django.middleware.http.ConditionalGetMiddleware': {'bases': ['object'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    Handles conditional GET operations. If the response has a ETag or\n    Last-Modified header, and the request has If-None-Match or\n    If-Modified-Since, the response is replaced by an HttpNotModified.\n\n    Also sets the Date and Content-Length response-headers.\n    ',
                                                                 'methods': [('process_response',
                                                                              ['request',
                                                                               'response'],
                                                                              '')],
                                                                 'properties': []},
             'django.middleware.locale.LocaleMiddleware': {'bases': ['object'],
                                                           'constructor': [],
                                                           'docstring': '\n    This is a very simple middleware that parses a request\n    and decides what translation object to install in the current\n    thread context. This allows pages to be dynamically\n    translated to the language the user desires (if the language\n    is available, of course).\n    ',
                                                           'methods': [('process_request',
                                                                        ['request'],
                                                                        ''),
                                                                       ('process_response',
                                                                        ['request',
                                                                         'response'],
                                                                        '')],
                                                           'properties': []},
             'django.middleware.transaction.TransactionMiddleware': {'bases': ['object'],
                                                                     'constructor': [],
                                                                     'docstring': "\n    Transaction middleware. If this is enabled, each view function will be run\n    with commit_on_response activated - that way a save() doesn't do a direct\n    commit, the commit is done when a successful response is created. If an\n    exception happens, the database is rolled back.\n    ",
                                                                     'methods': [('process_request',
                                                                                  ['request'],
                                                                                  'Enters transaction management'),
                                                                                 ('process_exception',
                                                                                  ['request',
                                                                                   'exception'],
                                                                                  'Rolls back the database and leaves transaction management'),
                                                                                 ('process_response',
                                                                                  ['request',
                                                                                   'response'],
                                                                                  'Commits and leaves transaction management.')],
                                                                     'properties': []},
             'django.template.base.FilterExpression': {'bases': ['object'],
                                                       'constructor': ['token', 'parser'],
                                                       'docstring': '\n    Parses a variable token and its optional filters (all as a single string),\n    and return a list of tuples of the filter name and arguments.\n    Sample:\n        >>> token = \'variable|default:"Default value"|date:"Y-m-d"\'\n        >>> p = Parser(\'\')\n        >>> fe = FilterExpression(token, p)\n        >>> len(fe.filters)\n        2\n        >>> fe.var\n        <Variable: \'variable\'>\n\n    This class should never be instantiated outside of the\n    get_filters_from_token helper function.\n    ',
                                                       'methods': [('resolve',
                                                                    ['context',
                                                                     'ignore_failures=False'],
                                                                    ''),
                                                                   ('args_check',
                                                                    ['func', 'provided'],
                                                                    ''),
                                                                   ('__str__', [], '')],
                                                       'properties': ['token',
                                                                      'filters',
                                                                      'var',
                                                                      'args_check']},
             'django.template.base.InvalidTemplateLibrary': {'bases': ['Exception'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': []},
             'django.template.base.Lexer': {'bases': ['object'],
                                            'constructor': ['template_string', 'origin'],
                                            'docstring': '',
                                            'methods': [('tokenize',
                                                         [],
                                                         'Return a list of tokens from a given template_string.'),
                                                        ('create_token',
                                                         ['token_string', 'in_tag'],
                                                         '\n        Convert the given token string into a new Token object and return it.\n        If in_tag is True, we are processing something that matched a tag,\n        otherwise it should be treated as a literal string.\n        ')],
                                            'properties': ['template_string',
                                                           'origin',
                                                           'lineno']},
             'django.template.base.Library': {'bases': ['object'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('tag',
                                                           ['name=None',
                                                            'compile_function=None'],
                                                           ''),
                                                          ('tag_function', ['func'], ''),
                                                          ('filter',
                                                           ['name=None', 'filter_func=None'],
                                                           ''),
                                                          ('filter_function', ['func'], ''),
                                                          ('simple_tag',
                                                           ['func=None', 'takes_context=None'],
                                                           ''),
                                                          ('inclusion_tag',
                                                           ['file_name',
                                                            'context_class=Context',
                                                            'takes_context=False'],
                                                           '')],
                                              'properties': ['filters', 'tags']},
             'django.template.base.Node': {'bases': ['object'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('render',
                                                        ['context'],
                                                        'Return the node rendered as a string'),
                                                       ('__iter__', [], ''),
                                                       ('get_nodes_by_type',
                                                        ['nodetype'],
                                                        'Return a list of all nodes (within this node and its nodelist) of the given type')],
                                           'properties': ['must_be_first', 'child_nodelists']},
             'django.template.base.NodeList': {'bases': ['list'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('render', ['context'], ''),
                                                           ('get_nodes_by_type',
                                                            ['nodetype'],
                                                            'Return a list of all nodes of the given type'),
                                                           ('render_node',
                                                            ['node', 'context'],
                                                            '')],
                                               'properties': ['contains_nontext']},
             'django.template.base.Origin': {'bases': ['object'],
                                             'constructor': ['name'],
                                             'docstring': '',
                                             'methods': [('reload', [], ''),
                                                         ('__str__', [], '')],
                                             'properties': ['name']},
             'django.template.base.Parser': {'bases': ['object'],
                                             'constructor': ['tokens'],
                                             'docstring': '',
                                             'methods': [('parse', ['parse_until=None'], ''),
                                                         ('skip_past', ['endtag'], ''),
                                                         ('create_variable_node',
                                                          ['filter_expression'],
                                                          ''),
                                                         ('create_nodelist', [], ''),
                                                         ('extend_nodelist',
                                                          ['nodelist', 'node', 'token'],
                                                          ''),
                                                         ('enter_command',
                                                          ['command', 'token'],
                                                          ''),
                                                         ('exit_command', [], ''),
                                                         ('error', ['token', 'msg'], ''),
                                                         ('empty_variable', ['token'], ''),
                                                         ('empty_block_tag', ['token'], ''),
                                                         ('invalid_block_tag',
                                                          ['token',
                                                           'command',
                                                           'parse_until=None'],
                                                          ''),
                                                         ('unclosed_block_tag',
                                                          ['parse_until'],
                                                          ''),
                                                         ('compile_function_error',
                                                          ['token', 'e'],
                                                          ''),
                                                         ('next_token', [], ''),
                                                         ('prepend_token', ['token'], ''),
                                                         ('delete_first_token', [], ''),
                                                         ('add_library', ['lib'], ''),
                                                         ('compile_filter',
                                                          ['token'],
                                                          'Convenient wrapper for FilterExpression'),
                                                         ('find_filter', ['filter_name'], '')],
                                             'properties': ['tokens', 'tags', 'filters']},
             'django.template.base.StringOrigin': {'bases': ['django.template.base.Origin'],
                                                   'constructor': ['source'],
                                                   'docstring': '',
                                                   'methods': [('reload', [], '')],
                                                   'properties': ['source']},
             'django.template.base.Template': {'bases': ['object'],
                                               'constructor': ['template_string',
                                                               'origin=None',
                                                               "name='<Unknown Template>'"],
                                               'docstring': '',
                                               'methods': [('__iter__', [], ''),
                                                           ('_render', ['context'], ''),
                                                           ('render',
                                                            ['context'],
                                                            'Display stage -- can be called many times')],
                                               'properties': ['nodelist', 'name']},
             'django.template.base.TemplateDoesNotExist': {'bases': ['Exception'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': []},
             'django.template.base.TemplateEncodingError': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': []},
             'django.template.base.TemplateSyntaxError': {'bases': ['Exception'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': []},
             'django.template.base.TextNode': {'bases': ['django.template.base.Node'],
                                               'constructor': ['s'],
                                               'docstring': '',
                                               'methods': [('__repr__', [], ''),
                                                           ('render', ['context'], '')],
                                               'properties': ['s']},
             'django.template.base.Token': {'bases': ['object'],
                                            'constructor': ['token_type', 'contents'],
                                            'docstring': '',
                                            'methods': [('__str__', [], ''),
                                                        ('split_contents', [], '')],
                                            'properties': ['token_type', 'contents', 'lineno']},
             'django.template.base.TokenParser': {'bases': ['object'],
                                                  'constructor': ['subject'],
                                                  'docstring': '\n    Subclass this and implement the top() method to parse a template line. When\n    instantiating the parser, pass in the line from the Django template parser.\n\n    The parser\'s "tagname" instance-variable stores the name of the tag that\n    the filter was called with.\n    ',
                                                  'methods': [('top',
                                                               [],
                                                               'Overload this method to do the actual parsing and return the result.'),
                                                              ('more',
                                                               [],
                                                               'Returns True if there is more stuff in the tag.'),
                                                              ('back',
                                                               [],
                                                               'Undoes the last microparser. Use this for lookahead and backtracking.'),
                                                              ('tag',
                                                               [],
                                                               'A microparser that just returns the next tag from the line.'),
                                                              ('value',
                                                               [],
                                                               'A microparser that parses for a value: some string constant or variable name.')],
                                                  'properties': ['subject',
                                                                 'pointer',
                                                                 'backout',
                                                                 'tagname']},
             'django.template.base.Variable': {'bases': ['object'],
                                               'constructor': ['var'],
                                               'docstring': "\n    A template variable, resolvable against a given context. The variable may be\n    a hard-coded string (if it begins and ends with single or double quote\n    marks)::\n\n        >>> c = {'article': {'section':u'News'}}\n        >>> Variable('article.section').resolve(c)\n        u'News'\n        >>> Variable('article').resolve(c)\n        {'section': u'News'}\n        >>> class AClass: pass\n        >>> c = AClass()\n        >>> c.article = AClass()\n        >>> c.article.section = u'News'\n\n    (The example assumes VARIABLE_ATTRIBUTE_SEPARATOR is '.')\n    ",
                                               'methods': [('resolve',
                                                            ['context'],
                                                            'Resolve this variable against a given context.'),
                                                           ('__repr__', [], ''),
                                                           ('__str__', [], ''),
                                                           ('_resolve_lookup',
                                                            ['context'],
                                                            "\n        Performs resolution of a real variable (i.e. not a literal) against the\n        given context.\n\n        As indicated by the method's name, this method is an implementation\n        detail and shouldn't be called by external code. Use Variable.resolve()\n        instead.\n        ")],
                                               'properties': ['var',
                                                              'literal',
                                                              'lookups',
                                                              'translate']},
             'django.template.base.VariableDoesNotExist': {'bases': ['Exception'],
                                                           'constructor': ['msg', 'params=()'],
                                                           'docstring': '',
                                                           'methods': [('__str__', [], ''),
                                                                       ('__unicode__', [], '')],
                                                           'properties': ['msg', 'params']},
             'django.template.base.VariableNode': {'bases': ['django.template.base.Node'],
                                                   'constructor': ['filter_expression'],
                                                   'docstring': '',
                                                   'methods': [('__repr__', [], ''),
                                                               ('render', ['context'], '')],
                                                   'properties': ['filter_expression']},
             'django.template.context.BaseContext': {'bases': ['object'],
                                                     'constructor': ['dict_=None'],
                                                     'docstring': '',
                                                     'methods': [('__copy__', [], ''),
                                                                 ('__repr__', [], ''),
                                                                 ('__iter__', [], ''),
                                                                 ('push', [], ''),
                                                                 ('pop', [], ''),
                                                                 ('__setitem__',
                                                                  ['key', 'value'],
                                                                  'Set a variable in the current context'),
                                                                 ('__getitem__',
                                                                  ['key'],
                                                                  "Get a variable's value, starting at the current context and going upward"),
                                                                 ('__delitem__',
                                                                  ['key'],
                                                                  'Delete a variable from the current context'),
                                                                 ('has_key', ['key'], ''),
                                                                 ('__contains__', ['key'], ''),
                                                                 ('get',
                                                                  ['key', 'otherwise=None'],
                                                                  '')],
                                                     'properties': ['dicts']},
             'django.template.context.Context': {'bases': ['django.template.context.BaseContext'],
                                                 'constructor': ['dict_=None',
                                                                 'autoescape=True',
                                                                 'current_app=None',
                                                                 'use_l10n=None'],
                                                 'docstring': 'A stack container for variable context',
                                                 'methods': [('__copy__', [], ''),
                                                             ('update',
                                                              ['other_dict'],
                                                              'Pushes other_dict to the stack of dictionaries in the Context'),
                                                             ('new',
                                                              ['values=None'],
                                                              "\n        Returns a new Context with the same 'autoescape' value etc, but with\n        only the values given in 'values' stored.\n        ")],
                                                 'properties': ['autoescape',
                                                                'use_l10n',
                                                                'current_app',
                                                                'render_context']},
             'django.template.context.ContextPopException': {'bases': ['Exception'],
                                                             'constructor': [],
                                                             'docstring': 'pop() has been called more times than push()',
                                                             'methods': [],
                                                             'properties': []},
             'django.template.context.EmptyClass': {'bases': ['object'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'django.template.context.RenderContext': {'bases': ['django.template.context.BaseContext'],
                                                       'constructor': [],
                                                       'docstring': "\n    A stack container for storing Template state.\n\n    RenderContext simplifies the implementation of template Nodes by providing a\n    safe place to store state between invocations of a node's `render` method.\n\n    The RenderContext also provides scoping rules that are more sensible for\n    'template local' variables. The render context stack is pushed before each\n    template is rendered, creating a fresh scope with nothing in it. Name\n    resolution fails if a variable is not found at the top of the RequestContext\n    stack. Thus, variables are local to a specific template and don't affect the\n    rendering of other templates as they would if they were stored in the normal\n    template context.\n    ",
                                                       'methods': [('__iter__', [], ''),
                                                                   ('has_key', ['key'], ''),
                                                                   ('get',
                                                                    ['key', 'otherwise=None'],
                                                                    '')],
                                                       'properties': []},
             'django.template.context.RequestContext': {'bases': ['django.template.context.Context'],
                                                        'constructor': ['request',
                                                                        'dict=None',
                                                                        'processors=None',
                                                                        'current_app=None',
                                                                        'use_l10n=None'],
                                                        'docstring': '\n    This subclass of template.Context automatically populates itself using\n    the processors defined in TEMPLATE_CONTEXT_PROCESSORS.\n    Additional processors can be specified as a list of callables\n    using the "processors" keyword argument.\n    ',
                                                        'methods': [],
                                                        'properties': []},
             'django.template.debug.DebugLexer': {'bases': ['django.template.base.Lexer'],
                                                  'constructor': ['template_string', 'origin'],
                                                  'docstring': '',
                                                  'methods': [('tokenize',
                                                               [],
                                                               'Return a list of tokens from a given template_string'),
                                                              ('create_token',
                                                               ['token_string',
                                                                'source',
                                                                'in_tag'],
                                                               '')],
                                                  'properties': []},
             'django.template.debug.DebugNodeList': {'bases': ['django.template.base.NodeList'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('render_node',
                                                                  ['node', 'context'],
                                                                  '')],
                                                     'properties': []},
             'django.template.debug.DebugParser': {'bases': ['django.template.base.Parser'],
                                                   'constructor': ['lexer'],
                                                   'docstring': '',
                                                   'methods': [('enter_command',
                                                                ['command', 'token'],
                                                                ''),
                                                               ('exit_command', [], ''),
                                                               ('error', ['token', 'msg'], ''),
                                                               ('source_error',
                                                                ['source', 'msg'],
                                                                ''),
                                                               ('create_nodelist', [], ''),
                                                               ('create_variable_node',
                                                                ['contents'],
                                                                ''),
                                                               ('extend_nodelist',
                                                                ['nodelist', 'node', 'token'],
                                                                ''),
                                                               ('unclosed_block_tag',
                                                                ['parse_until'],
                                                                ''),
                                                               ('compile_function_error',
                                                                ['token', 'e'],
                                                                '')],
                                                   'properties': ['command_stack']},
             'django.template.debug.DebugVariableNode': {'bases': ['django.template.base.VariableNode'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('render',
                                                                      ['context'],
                                                                      '')],
                                                         'properties': []},
             'django.template.defaulttags.AutoEscapeControlNode': {'bases': ['django.template.base.Node'],
                                                                   'constructor': ['setting',
                                                                                   'nodelist'],
                                                                   'docstring': 'Implements the actions of the autoescape tag.',
                                                                   'methods': [('render',
                                                                                ['context'],
                                                                                '')],
                                                                   'properties': ['setting',
                                                                                  'nodelist']},
             'django.template.defaulttags.CommentNode': {'bases': ['django.template.base.Node'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('render',
                                                                      ['context'],
                                                                      '')],
                                                         'properties': []},
             'django.template.defaulttags.CsrfTokenNode': {'bases': ['django.template.base.Node'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('render',
                                                                        ['context'],
                                                                        '')],
                                                           'properties': []},
             'django.template.defaulttags.CycleNode': {'bases': ['django.template.base.Node'],
                                                       'constructor': ['cyclevars',
                                                                       'variable_name=None',
                                                                       'silent=False'],
                                                       'docstring': '',
                                                       'methods': [('render', ['context'], '')],
                                                       'properties': ['cyclevars',
                                                                      'variable_name',
                                                                      'silent']},
             'django.template.defaulttags.DebugNode': {'bases': ['django.template.base.Node'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('render', ['context'], '')],
                                                       'properties': []},
             'django.template.defaulttags.FilterNode': {'bases': ['django.template.base.Node'],
                                                        'constructor': ['filter_expr',
                                                                        'nodelist'],
                                                        'docstring': '',
                                                        'methods': [('render', ['context'], '')],
                                                        'properties': ['filter_expr',
                                                                       'nodelist']},
             'django.template.defaulttags.FirstOfNode': {'bases': ['django.template.base.Node'],
                                                         'constructor': ['vars'],
                                                         'docstring': '',
                                                         'methods': [('render',
                                                                      ['context'],
                                                                      '')],
                                                         'properties': ['vars']},
             'django.template.defaulttags.ForNode': {'bases': ['django.template.base.Node'],
                                                     'constructor': ['loopvars',
                                                                     'sequence',
                                                                     'is_reversed',
                                                                     'nodelist_loop',
                                                                     'nodelist_empty=None'],
                                                     'docstring': '',
                                                     'methods': [('__repr__', [], ''),
                                                                 ('__iter__', [], ''),
                                                                 ('render', ['context'], '')],
                                                     'properties': ['child_nodelists',
                                                                    'loopvars',
                                                                    'sequence',
                                                                    'is_reversed',
                                                                    'nodelist_loop',
                                                                    'nodelist_empty']},
             'django.template.defaulttags.IfChangedNode': {'bases': ['django.template.base.Node'],
                                                           'constructor': ['nodelist_true',
                                                                           'nodelist_false',
                                                                           '*varlist'],
                                                           'docstring': '',
                                                           'methods': [('render',
                                                                        ['context'],
                                                                        '')],
                                                           'properties': ['child_nodelists',
                                                                          'nodelist_true',
                                                                          'nodelist_false',
                                                                          '_last_seen',
                                                                          '_varlist',
                                                                          '_id']},
             'django.template.defaulttags.IfEqualNode': {'bases': ['django.template.base.Node'],
                                                         'constructor': ['var1',
                                                                         'var2',
                                                                         'nodelist_true',
                                                                         'nodelist_false',
                                                                         'negate'],
                                                         'docstring': '',
                                                         'methods': [('__repr__', [], ''),
                                                                     ('render',
                                                                      ['context'],
                                                                      '')],
                                                         'properties': ['child_nodelists',
                                                                        'var1',
                                                                        'var2',
                                                                        'nodelist_true',
                                                                        'nodelist_false',
                                                                        'negate']},
             'django.template.defaulttags.IfNode': {'bases': ['django.template.base.Node'],
                                                    'constructor': ['var',
                                                                    'nodelist_true',
                                                                    'nodelist_false=None'],
                                                    'docstring': '',
                                                    'methods': [('__repr__', [], ''),
                                                                ('__iter__', [], ''),
                                                                ('render', ['context'], '')],
                                                    'properties': ['child_nodelists',
                                                                   'nodelist_true',
                                                                   'nodelist_false',
                                                                   'var']},
             'django.template.defaulttags.LoadNode': {'bases': ['django.template.base.Node'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('render', ['context'], '')],
                                                      'properties': []},
             'django.template.defaulttags.NowNode': {'bases': ['django.template.base.Node'],
                                                     'constructor': ['format_string'],
                                                     'docstring': '',
                                                     'methods': [('render', ['context'], '')],
                                                     'properties': ['format_string']},
             'django.template.defaulttags.RegroupNode': {'bases': ['django.template.base.Node'],
                                                         'constructor': ['target',
                                                                         'expression',
                                                                         'var_name'],
                                                         'docstring': '',
                                                         'methods': [('render',
                                                                      ['context'],
                                                                      '')],
                                                         'properties': ['target',
                                                                        'expression',
                                                                        'var_name']},
             'django.template.defaulttags.SpacelessNode': {'bases': ['django.template.base.Node'],
                                                           'constructor': ['nodelist'],
                                                           'docstring': '',
                                                           'methods': [('render',
                                                                        ['context'],
                                                                        '')],
                                                           'properties': ['nodelist']},
             'django.template.defaulttags.SsiNode': {'bases': ['django.template.base.Node'],
                                                     'constructor': ['filepath',
                                                                     'parsed',
                                                                     'legacy_filepath=True'],
                                                     'docstring': '',
                                                     'methods': [('render', ['context'], '')],
                                                     'properties': ['filepath',
                                                                    'parsed',
                                                                    'legacy_filepath']},
             'django.template.defaulttags.TemplateIfParser': {'bases': ['django.template.smartif.IfParser'],
                                                              'constructor': ['parser',
                                                                              '*args',
                                                                              '**kwargs'],
                                                              'docstring': '',
                                                              'methods': [('create_var',
                                                                           ['value'],
                                                                           '')],
                                                              'properties': ['error_class',
                                                                             'template_parser']},
             'django.template.defaulttags.TemplateLiteral': {'bases': ['django.template.smartif.Literal'],
                                                             'constructor': ['value', 'text'],
                                                             'docstring': '',
                                                             'methods': [('display', [], ''),
                                                                         ('eval',
                                                                          ['context'],
                                                                          '')],
                                                             'properties': ['value', 'text']},
             'django.template.defaulttags.TemplateTagNode': {'bases': ['django.template.base.Node'],
                                                             'constructor': ['tagtype'],
                                                             'docstring': '',
                                                             'methods': [('render',
                                                                          ['context'],
                                                                          '')],
                                                             'properties': ['mapping',
                                                                            'tagtype']},
             'django.template.defaulttags.URLNode': {'bases': ['django.template.base.Node'],
                                                     'constructor': ['view_name',
                                                                     'args',
                                                                     'kwargs',
                                                                     'asvar',
                                                                     'legacy_view_name=True'],
                                                     'docstring': '',
                                                     'methods': [('render', ['context'], '')],
                                                     'properties': ['view_name',
                                                                    'legacy_view_name',
                                                                    'args',
                                                                    'kwargs',
                                                                    'asvar']},
             'django.template.defaulttags.WidthRatioNode': {'bases': ['django.template.base.Node'],
                                                            'constructor': ['val_expr',
                                                                            'max_expr',
                                                                            'max_width'],
                                                            'docstring': '',
                                                            'methods': [('render',
                                                                         ['context'],
                                                                         '')],
                                                            'properties': ['val_expr',
                                                                           'max_expr',
                                                                           'max_width']},
             'django.template.defaulttags.WithNode': {'bases': ['django.template.base.Node'],
                                                      'constructor': ['var',
                                                                      'name',
                                                                      'nodelist',
                                                                      'extra_context=None'],
                                                      'docstring': '',
                                                      'methods': [('__repr__', [], ''),
                                                                  ('render', ['context'], '')],
                                                      'properties': ['nodelist',
                                                                     'extra_context']},
             'django.template.loader.BaseLoader': {'bases': ['object'],
                                                   'constructor': ['*args', '**kwargs'],
                                                   'docstring': '',
                                                   'methods': [('__call__',
                                                                ['template_name',
                                                                 'template_dirs=None'],
                                                                ''),
                                                               ('load_template',
                                                                ['template_name',
                                                                 'template_dirs=None'],
                                                                ''),
                                                               ('load_template_source',
                                                                ['template_name',
                                                                 'template_dirs=None'],
                                                                '\n        Returns a tuple containing the source and origin for the given template\n        name.\n\n        '),
                                                               ('reset',
                                                                [],
                                                                '\n        Resets any state maintained by the loader instance (e.g., cached\n        templates or cached loader modules).\n\n        ')],
                                                   'properties': ['is_usable']},
             'django.template.loader.LoaderOrigin': {'bases': ['django.template.base.Origin'],
                                                     'constructor': ['display_name',
                                                                     'loader',
                                                                     'name',
                                                                     'dirs'],
                                                     'docstring': '',
                                                     'methods': [('reload', [], '')],
                                                     'properties': ['loader',
                                                                    'loadname',
                                                                    'dirs']},
             'django.template.loader_tags.BaseIncludeNode': {'bases': ['django.template.base.Node'],
                                                             'constructor': ['*args',
                                                                             '**kwargs'],
                                                             'docstring': '',
                                                             'methods': [('render_template',
                                                                          ['template',
                                                                           'context'],
                                                                          '')],
                                                             'properties': ['extra_context',
                                                                            'isolated_context']},
             'django.template.loader_tags.BlockContext': {'bases': ['object'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('add_blocks',
                                                                       ['blocks'],
                                                                       ''),
                                                                      ('pop', ['name'], ''),
                                                                      ('push',
                                                                       ['name', 'block'],
                                                                       ''),
                                                                      ('get_block',
                                                                       ['name'],
                                                                       '')],
                                                          'properties': ['blocks']},
             'django.template.loader_tags.BlockNode': {'bases': ['django.template.base.Node'],
                                                       'constructor': ['name',
                                                                       'nodelist',
                                                                       'parent=None'],
                                                       'docstring': '',
                                                       'methods': [('__repr__', [], ''),
                                                                   ('render', ['context'], ''),
                                                                   ('super', [], '')],
                                                       'properties': ['name',
                                                                      'nodelist',
                                                                      'parent']},
             'django.template.loader_tags.ConstantIncludeNode': {'bases': ['django.template.loader_tags.BaseIncludeNode'],
                                                                 'constructor': ['template_path',
                                                                                 '*args',
                                                                                 '**kwargs'],
                                                                 'docstring': '',
                                                                 'methods': [('render',
                                                                              ['context'],
                                                                              '')],
                                                                 'properties': ['template']},
             'django.template.loader_tags.ExtendsError': {'bases': ['Exception'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': []},
             'django.template.loader_tags.ExtendsNode': {'bases': ['django.template.base.Node'],
                                                         'constructor': ['nodelist',
                                                                         'parent_name',
                                                                         'parent_name_expr',
                                                                         'template_dirs=None'],
                                                         'docstring': '',
                                                         'methods': [('__repr__', [], ''),
                                                                     ('get_parent',
                                                                      ['context'],
                                                                      ''),
                                                                     ('render',
                                                                      ['context'],
                                                                      '')],
                                                         'properties': ['must_be_first',
                                                                        'nodelist',
                                                                        'parent_name',
                                                                        'parent_name_expr',
                                                                        'template_dirs',
                                                                        'blocks']},
             'django.template.loader_tags.IncludeNode': {'bases': ['django.template.loader_tags.BaseIncludeNode'],
                                                         'constructor': ['template_name',
                                                                         '*args',
                                                                         '**kwargs'],
                                                         'docstring': '',
                                                         'methods': [('render',
                                                                      ['context'],
                                                                      '')],
                                                         'properties': ['template_name']},
             'django.template.loaders.app_directories.Loader': {'bases': ['django.template.loader.BaseLoader'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('get_template_sources',
                                                                             ['template_name',
                                                                              'template_dirs=None'],
                                                                             '\n        Returns the absolute paths to "template_name", when appended to each\n        directory in "template_dirs". Any paths that don\'t lie inside one of the\n        template dirs are excluded from the result set, for security reasons.\n        '),
                                                                            ('load_template_source',
                                                                             ['template_name',
                                                                              'template_dirs=None'],
                                                                             '')],
                                                                'properties': ['is_usable']},
             'django.template.loaders.cached.Loader': {'bases': ['django.template.loader.BaseLoader'],
                                                       'constructor': ['loaders'],
                                                       'docstring': '',
                                                       'methods': [('find_template',
                                                                    ['name', 'dirs=None'],
                                                                    ''),
                                                                   ('load_template',
                                                                    ['template_name',
                                                                     'template_dirs=None'],
                                                                    ''),
                                                                   ('reset',
                                                                    [],
                                                                    'Empty the template cache.')],
                                                       'properties': ['is_usable',
                                                                      'template_cache',
                                                                      '_loaders',
                                                                      '_cached_loaders',
                                                                      'loaders']},
             'django.template.loaders.eggs.Loader': {'bases': ['django.template.loader.BaseLoader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('load_template_source',
                                                                  ['template_name',
                                                                   'template_dirs=None'],
                                                                  '\n        Loads templates from Python eggs via pkg_resource.resource_string.\n\n        For every installed app, it tries to get the resource (app, template_name).\n        ')],
                                                     'properties': ['is_usable']},
             'django.template.loaders.filesystem.Loader': {'bases': ['django.template.loader.BaseLoader'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('get_template_sources',
                                                                        ['template_name',
                                                                         'template_dirs=None'],
                                                                        '\n        Returns the absolute paths to "template_name", when appended to each\n        directory in "template_dirs". Any paths that don\'t lie inside one of the\n        template dirs are excluded from the result set, for security reasons.\n        '),
                                                                       ('load_template_source',
                                                                        ['template_name',
                                                                         'template_dirs=None'],
                                                                        '')],
                                                           'properties': ['is_usable']},
             'django.template.response.ContentNotRenderedError': {'bases': ['Exception'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': []},
             'django.template.response.SimpleTemplateResponse': {'bases': ['django.http.HttpResponse'],
                                                                 'constructor': ['template',
                                                                                 'context=None',
                                                                                 'mimetype=None',
                                                                                 'status=None',
                                                                                 'content_type=None'],
                                                                 'docstring': '',
                                                                 'methods': [('__getstate__',
                                                                              [],
                                                                              "Pickling support function.\n\n        Ensures that the object can't be pickled before it has been\n        rendered, and that the pickled state only includes rendered\n        data, not the data used to construct the response.\n        "),
                                                                             ('resolve_template',
                                                                              ['template'],
                                                                              'Accepts a template object, path-to-template or list of paths'),
                                                                             ('resolve_context',
                                                                              ['context'],
                                                                              "Convert context data into a full Context object\n        (assuming it isn't already a Context object).\n        "),
                                                                             ('add_post_render_callback',
                                                                              ['callback'],
                                                                              'Add a new post-rendering callback.\n\n        If the response has already been rendered, invoke the callback immediately.\n        '),
                                                                             ('render',
                                                                              [],
                                                                              'Render (thereby finalizing) the content of the response.\n\n        If the content has already been rendered, this is a no-op.\n\n        Returns the baked response instance.\n        '),
                                                                             ('__iter__',
                                                                              [],
                                                                              ''),
                                                                             ('_get_content',
                                                                              [],
                                                                              ''),
                                                                             ('_set_content',
                                                                              ['value'],
                                                                              'Sets the content for the response')],
                                                                 'properties': ['template_name',
                                                                                'context_data',
                                                                                '_is_rendered',
                                                                                '_post_render_callbacks',
                                                                                'rendered_content',
                                                                                'is_rendered',
                                                                                'content']},
             'django.template.response.TemplateResponse': {'bases': ['django.template.response.SimpleTemplateResponse'],
                                                           'constructor': ['request',
                                                                           'template',
                                                                           'context=None',
                                                                           'mimetype=None',
                                                                           'status=None',
                                                                           'content_type=None',
                                                                           'current_app=None'],
                                                           'docstring': '',
                                                           'methods': [('__getstate__',
                                                                        [],
                                                                        "Pickling support function.\n\n        Ensures that the object can't be pickled before it has been\n        rendered, and that the pickled state only includes rendered\n        data, not the data used to construct the response.\n        "),
                                                                       ('resolve_context',
                                                                        ['context'],
                                                                        "Convert context data into a full RequestContext object\n        (assuming it isn't already a Context object).\n        ")],
                                                           'properties': ['_request',
                                                                          '_current_app']},
             'django.template.smartif.EndToken': {'bases': ['django.template.smartif.TokenBase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('nud', ['parser'], '')],
                                                  'properties': ['lbp']},
             'django.template.smartif.IfParser': {'bases': ['object'],
                                                  'constructor': ['tokens'],
                                                  'docstring': '',
                                                  'methods': [('translate_token',
                                                               ['token'],
                                                               ''),
                                                              ('next', [], ''),
                                                              ('parse', [], ''),
                                                              ('expression', ['rbp=0'], ''),
                                                              ('create_var', ['value'], '')],
                                                  'properties': ['error_class',
                                                                 'tokens',
                                                                 'pos',
                                                                 'current_token']},
             'django.template.smartif.Literal': {'bases': ['django.template.smartif.TokenBase'],
                                                 'constructor': ['value'],
                                                 'docstring': '\n    A basic self-resolvable object similar to a Django template variable.\n    ',
                                                 'methods': [('display', [], ''),
                                                             ('nud', ['parser'], ''),
                                                             ('eval', ['context'], ''),
                                                             ('__repr__', [], '')],
                                                 'properties': ['id', 'lbp', 'value']},
             'django.template.smartif.TokenBase': {'bases': ['object'],
                                                   'constructor': [],
                                                   'docstring': '\n    Base class for operators and literals, mainly for debugging and for throwing\n    syntax errors.\n    ',
                                                   'methods': [('nud', ['parser'], ''),
                                                               ('led', ['left', 'parser'], ''),
                                                               ('display',
                                                                [],
                                                                '\n        Returns what to display in error messages for this node\n        '),
                                                               ('__repr__', [], '')],
                                                   'properties': ['id',
                                                                  'value',
                                                                  'first',
                                                                  'second']},
             'django.templatetags.cache.CacheNode': {'bases': ['django.template.Node'],
                                                     'constructor': ['nodelist',
                                                                     'expire_time_var',
                                                                     'fragment_name',
                                                                     'vary_on'],
                                                     'docstring': '',
                                                     'methods': [('render', ['context'], '')],
                                                     'properties': ['nodelist',
                                                                    'expire_time_var',
                                                                    'fragment_name',
                                                                    'vary_on']},
             'django.templatetags.i18n.BlockTranslateNode': {'bases': ['django.template.Node'],
                                                             'constructor': ['extra_context',
                                                                             'singular',
                                                                             'plural=None',
                                                                             'countervar=None',
                                                                             'counter=None'],
                                                             'docstring': '',
                                                             'methods': [('render_token_list',
                                                                          ['tokens'],
                                                                          ''),
                                                                         ('render',
                                                                          ['context'],
                                                                          '')],
                                                             'properties': ['extra_context',
                                                                            'singular',
                                                                            'plural',
                                                                            'countervar',
                                                                            'counter']},
             'django.templatetags.i18n.GetAvailableLanguagesNode': {'bases': ['django.template.Node'],
                                                                    'constructor': ['variable'],
                                                                    'docstring': '',
                                                                    'methods': [('render',
                                                                                 ['context'],
                                                                                 '')],
                                                                    'properties': ['variable']},
             'django.templatetags.i18n.GetCurrentLanguageBidiNode': {'bases': ['django.template.Node'],
                                                                     'constructor': ['variable'],
                                                                     'docstring': '',
                                                                     'methods': [('render',
                                                                                  ['context'],
                                                                                  '')],
                                                                     'properties': ['variable']},
             'django.templatetags.i18n.GetCurrentLanguageNode': {'bases': ['django.template.Node'],
                                                                 'constructor': ['variable'],
                                                                 'docstring': '',
                                                                 'methods': [('render',
                                                                              ['context'],
                                                                              '')],
                                                                 'properties': ['variable']},
             'django.templatetags.i18n.GetLanguageInfoListNode': {'bases': ['django.template.Node'],
                                                                  'constructor': ['languages',
                                                                                  'variable'],
                                                                  'docstring': '',
                                                                  'methods': [('get_language_info',
                                                                               ['language'],
                                                                               ''),
                                                                              ('render',
                                                                               ['context'],
                                                                               '')],
                                                                  'properties': ['languages',
                                                                                 'variable']},
             'django.templatetags.i18n.GetLanguageInfoNode': {'bases': ['django.template.Node'],
                                                              'constructor': ['lang_code',
                                                                              'variable'],
                                                              'docstring': '',
                                                              'methods': [('render',
                                                                           ['context'],
                                                                           '')],
                                                              'properties': ['lang_code',
                                                                             'variable']},
             'django.templatetags.i18n.TranslateNode': {'bases': ['django.template.Node'],
                                                        'constructor': ['filter_expression',
                                                                        'noop'],
                                                        'docstring': '',
                                                        'methods': [('render', ['context'], '')],
                                                        'properties': ['noop',
                                                                       'filter_expression']},
             'django.templatetags.l10n.LocalizeNode': {'bases': ['django.template.Node'],
                                                       'constructor': ['nodelist', 'use_l10n'],
                                                       'docstring': '',
                                                       'methods': [('__repr__', [], ''),
                                                                   ('render', ['context'], '')],
                                                       'properties': ['nodelist', 'use_l10n']},
             'django.templatetags.static.PrefixNode': {'bases': ['django.template.Node'],
                                                       'constructor': ['varname=None',
                                                                       'name=None'],
                                                       'docstring': '',
                                                       'methods': [('__repr__', [], ''),
                                                                   ('handle_token',
                                                                    ['parser',
                                                                     'token',
                                                                     'name'],
                                                                    '\n        Class method to parse prefix node and return a Node.\n        '),
                                                                   ('handle_simple',
                                                                    ['name'],
                                                                    ''),
                                                                   ('render', ['context'], '')],
                                                       'properties': ['varname', 'name']},
             'django.test._doctest.DebugRunner': {'bases': ['django.test._doctest.DocTestRunner'],
                                                  'constructor': [],
                                                  'docstring': "Run doc tests but raise an exception as soon as there is a failure.\n\n       If an unexpected exception occurs, an UnexpectedException is raised.\n       It contains the test, the example, and the original exception:\n\n         >>> runner = DebugRunner(verbose=False)\n         >>> test = DocTestParser().get_doctest('>>> raise KeyError\\n42',\n         ...                                    {}, 'foo', 'foo.py', 0)\n         >>> try:\n         ...     runner.run(test)\n         ... except UnexpectedException, failure:\n         ...     pass\n\n         >>> failure.test is test\n         True\n\n         >>> failure.example.want\n         '42\\n'\n\n         >>> exc_info = failure.exc_info\n         >>> raise exc_info[0], exc_info[1], exc_info[2]\n         Traceback (most recent call last):\n         ...\n         KeyError\n\n       We wrap the original exception to give the calling application\n       access to the test and example information.\n\n       If the output doesn't match, then a DocTestFailure is raised:\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 1\n         ...      >>> x\n         ...      2\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> try:\n         ...    runner.run(test)\n         ... except DocTestFailure, failure:\n         ...    pass\n\n       DocTestFailure objects provide access to the test:\n\n         >>> failure.test is test\n         True\n\n       As well as to the example:\n\n         >>> failure.example.want\n         '2\\n'\n\n       and the actual output:\n\n         >>> failure.got\n         '1\\n'\n\n       If a failure or error occurs, the globals are left intact:\n\n         >>> del test.globs['__builtins__']\n         >>> test.globs\n         {'x': 1}\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 2\n         ...      >>> raise KeyError\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> runner.run(test)\n         Traceback (most recent call last):\n         ...\n         UnexpectedException: <DocTest foo from foo.py:0 (2 examples)>\n\n         >>> del test.globs['__builtins__']\n         >>> test.globs\n         {'x': 2}\n\n       But the globals are cleared if there is no error:\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 2\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> runner.run(test)\n         (0, 1)\n\n         >>> test.globs\n         {}\n\n       ",
                                                  'methods': [('run',
                                                               ['test',
                                                                'compileflags=None',
                                                                'out=None',
                                                                'clear_globs=True'],
                                                               ''),
                                                              ('report_unexpected_exception',
                                                               ['out',
                                                                'test',
                                                                'example',
                                                                'exc_info'],
                                                               ''),
                                                              ('report_failure',
                                                               ['out',
                                                                'test',
                                                                'example',
                                                                'got'],
                                                               '')],
                                                  'properties': []},
             'django.test._doctest.DocFileCase': {'bases': ['django.test._doctest.DocTestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('id', [], ''),
                                                              ('__repr__', [], ''),
                                                              ('format_failure', ['err'], '')],
                                                  'properties': ['__str__']},
             'django.test._doctest.DocTest': {'bases': [],
                                              'constructor': ['examples',
                                                              'globs',
                                                              'name',
                                                              'filename',
                                                              'lineno',
                                                              'docstring'],
                                              'docstring': '\n    A collection of doctest examples that should be run in a single\n    namespace.  Each `DocTest` defines the following attributes:\n\n      - examples: the list of examples.\n\n      - globs: The namespace (aka globals) that the examples should\n        be run in.\n\n      - name: A name identifying the DocTest (typically, the name of\n        the object whose docstring this DocTest was extracted from).\n\n      - filename: The name of the file that this DocTest was extracted\n        from, or `None` if the filename is unknown.\n\n      - lineno: The line number within filename where this DocTest\n        begins, or `None` if the line number is unavailable.  This\n        line number is zero-based, with respect to the beginning of\n        the file.\n\n      - docstring: The string that the examples were extracted from,\n        or `None` if the string is unavailable.\n    ',
                                              'methods': [('__repr__', [], ''),
                                                          ('__cmp__', ['other'], '')],
                                              'properties': ['examples',
                                                             'docstring',
                                                             'globs',
                                                             'name',
                                                             'filename',
                                                             'lineno']},
             'django.test._doctest.DocTestCase': {'bases': ['unittest.TestCase'],
                                                  'constructor': ['test',
                                                                  'optionflags=0',
                                                                  'setUp=None',
                                                                  'tearDown=None',
                                                                  'checker=None',
                                                                  'runner=DocTestRunner'],
                                                  'docstring': '',
                                                  'methods': [('setUp', [], ''),
                                                              ('tearDown', [], ''),
                                                              ('runTest', [], ''),
                                                              ('format_failure', ['err'], ''),
                                                              ('debug',
                                                               [],
                                                               "Run the test case without results and without catching exceptions\n\n           The unit test framework includes a debug method on test cases\n           and test suites to support post-mortem debugging.  The test code\n           is run in such a way that errors are not caught.  This way a\n           caller can catch the errors and initiate post-mortem debugging.\n\n           The DocTestCase provides a debug method that raises\n           UnexpectedException errors if there is an unexepcted\n           exception:\n\n             >>> test = DocTestParser().get_doctest('>>> raise KeyError\\n42',\n             ...                {}, 'foo', 'foo.py', 0)\n             >>> case = DocTestCase(test)\n             >>> try:\n             ...     case.debug()\n             ... except UnexpectedException, failure:\n             ...     pass\n\n           The UnexpectedException contains the test, the example, and\n           the original exception:\n\n             >>> failure.test is test\n             True\n\n             >>> failure.example.want\n             '42\\n'\n\n             >>> exc_info = failure.exc_info\n             >>> raise exc_info[0], exc_info[1], exc_info[2]\n             Traceback (most recent call last):\n             ...\n             KeyError\n\n           If the output doesn't match, then a DocTestFailure is raised:\n\n             >>> test = DocTestParser().get_doctest('''\n             ...      >>> x = 1\n             ...      >>> x\n             ...      2\n             ...      ''', {}, 'foo', 'foo.py', 0)\n             >>> case = DocTestCase(test)\n\n             >>> try:\n             ...    case.debug()\n             ... except DocTestFailure, failure:\n             ...    pass\n\n           DocTestFailure objects provide access to the test:\n\n             >>> failure.test is test\n             True\n\n           As well as to the example:\n\n             >>> failure.example.want\n             '2\\n'\n\n           and the actual output:\n\n             >>> failure.got\n             '1\\n'\n\n           "),
                                                              ('id', [], ''),
                                                              ('__repr__', [], ''),
                                                              ('shortDescription', [], '')],
                                                  'properties': ['_dt_optionflags',
                                                                 '_dt_checker',
                                                                 '_dt_test',
                                                                 '_dt_setUp',
                                                                 '_dt_tearDown',
                                                                 '_dt_runner',
                                                                 '__str__']},
             'django.test._doctest.DocTestFailure': {'bases': ['Exception'],
                                                     'constructor': ['test', 'example', 'got'],
                                                     'docstring': 'A DocTest example has failed in debugging mode.\n\n    The exception instance has variables:\n\n    - test: the DocTest object being run\n\n    - excample: the Example object that failed\n\n    - got: the actual output\n    ',
                                                     'methods': [('__str__', [], '')],
                                                     'properties': ['test', 'example', 'got']},
             'django.test._doctest.DocTestFinder': {'bases': [],
                                                    'constructor': ['verbose=False',
                                                                    'parser=DocTestParser()',
                                                                    'recurse=True',
                                                                    '_namefilter=None',
                                                                    'exclude_empty=True'],
                                                    'docstring': '\n    A class used to extract the DocTests that are relevant to a given\n    object, from its docstring and the docstrings of its contained\n    objects.  Doctests can currently be extracted from the following\n    object types: modules, functions, classes, methods, staticmethods,\n    classmethods, and properties.\n    ',
                                                    'methods': [('find',
                                                                 ['obj',
                                                                  'name=None',
                                                                  'module=None',
                                                                  'globs=None',
                                                                  'extraglobs=None'],
                                                                 "\n        Return a list of the DocTests that are defined by the given\n        object's docstring, or by any of its contained objects'\n        docstrings.\n\n        The optional parameter `module` is the module that contains\n        the given object.  If the module is not specified or is None, then\n        the test finder will attempt to automatically determine the\n        correct module.  The object's module is used:\n\n            - As a default namespace, if `globs` is not specified.\n            - To prevent the DocTestFinder from extracting DocTests\n              from objects that are imported from other modules.\n            - To find the name of the file containing the object.\n            - To help find the line number of the object within its\n              file.\n\n        Contained objects whose module does not match `module` are ignored.\n\n        If `module` is False, no attempt to find the module will be made.\n        This is obscure, of use mostly in tests:  if `module` is False, or\n        is None but cannot be found automatically, then all objects are\n        considered to belong to the (non-existent) module, so all contained\n        objects will (recursively) be searched for doctests.\n\n        The globals for each DocTest is formed by combining `globs`\n        and `extraglobs` (bindings in `extraglobs` override bindings\n        in `globs`).  A new copy of the globals dictionary is created\n        for each DocTest.  If `globs` is not specified, then it\n        defaults to the module's `__dict__`, if specified, or {}\n        otherwise.  If `extraglobs` is not specified, then it defaults\n        to {}.\n\n        "),
                                                                ('_filter',
                                                                 ['obj', 'prefix', 'base'],
                                                                 '\n        Return true if the given object should not be examined.\n        '),
                                                                ('_from_module',
                                                                 ['module', 'object'],
                                                                 '\n        Return true if the given object is defined in the given\n        module.\n        '),
                                                                ('_find',
                                                                 ['tests',
                                                                  'obj',
                                                                  'name',
                                                                  'module',
                                                                  'source_lines',
                                                                  'globs',
                                                                  'seen'],
                                                                 '\n        Find tests for the given object and any contained objects, and\n        add them to `tests`.\n        '),
                                                                ('_get_test',
                                                                 ['obj',
                                                                  'name',
                                                                  'module',
                                                                  'globs',
                                                                  'source_lines'],
                                                                 '\n        Return a DocTest for the given object, if it defines a docstring;\n        otherwise, return None.\n        '),
                                                                ('_find_lineno',
                                                                 ['obj', 'source_lines'],
                                                                 "\n        Return a line number of the given object's docstring.  Note:\n        this method assumes that the object has a docstring.\n        ")],
                                                    'properties': ['_parser',
                                                                   '_verbose',
                                                                   '_recurse',
                                                                   '_exclude_empty',
                                                                   '_namefilter']},
             'django.test._doctest.DocTestParser': {'bases': [],
                                                    'constructor': [],
                                                    'docstring': '\n    A class used to parse strings containing doctest examples.\n    ',
                                                    'methods': [('parse',
                                                                 ['string', "name='<string>'"],
                                                                 '\n        Divide the given string into examples and intervening text,\n        and return them as a list of alternating Examples and strings.\n        Line numbers for the Examples are 0-based.  The optional\n        argument `name` is a name identifying this string, and is only\n        used for error messages.\n        '),
                                                                ('get_doctest',
                                                                 ['string',
                                                                  'globs',
                                                                  'name',
                                                                  'filename',
                                                                  'lineno'],
                                                                 '\n        Extract all doctest examples from the given string, and\n        collect them into a `DocTest` object.\n\n        `globs`, `name`, `filename`, and `lineno` are attributes for\n        the new `DocTest` object.  See the documentation for `DocTest`\n        for more information.\n        '),
                                                                ('get_examples',
                                                                 ['string', "name='<string>'"],
                                                                 '\n        Extract all doctest examples from the given string, and return\n        them as a list of `Example` objects.  Line numbers are\n        0-based, because it\'s most common in doctests that nothing\n        interesting appears on the same line as opening triple-quote,\n        and so the first interesting line is called "line 1" then.\n\n        The optional argument `name` is a name identifying this\n        string, and is only used for error messages.\n        '),
                                                                ('_parse_example',
                                                                 ['m', 'name', 'lineno'],
                                                                 "\n        Given a regular expression match from `_EXAMPLE_RE` (`m`),\n        return a pair `(source, want)`, where `source` is the matched\n        example's source code (with prompts and indentation stripped);\n        and `want` is the example's expected output (with indentation\n        stripped).\n\n        `name` is the string's name, and `lineno` is the line number\n        where the example starts; both are used for error messages.\n        "),
                                                                ('_find_options',
                                                                 ['source', 'name', 'lineno'],
                                                                 "\n        Return a dictionary containing option overrides extracted from\n        option directives in the given source string.\n\n        `name` is the string's name, and `lineno` is the line number\n        where the example starts; both are used for error messages.\n        "),
                                                                ('_min_indent',
                                                                 ['s'],
                                                                 'Return the minimum indentation of any non-blank line in `s`'),
                                                                ('_check_prompt_blank',
                                                                 ['lines',
                                                                  'indent',
                                                                  'name',
                                                                  'lineno'],
                                                                 '\n        Given the lines of a source string (including prompts and\n        leading indentation), check to make sure that every prompt is\n        followed by a space character.  If any line is not followed by\n        a space character, then raise ValueError.\n        '),
                                                                ('_check_prefix',
                                                                 ['lines',
                                                                  'prefix',
                                                                  'name',
                                                                  'lineno'],
                                                                 '\n        Check that every line in the given list starts with the given\n        prefix; if any line does not, then raise a ValueError.\n        ')],
                                                    'properties': ['_EXAMPLE_RE',
                                                                   '_EXCEPTION_RE',
                                                                   '_IS_BLANK_OR_COMMENT',
                                                                   '_OPTION_DIRECTIVE_RE',
                                                                   '_INDENT_RE']},
             'django.test._doctest.DocTestRunner': {'bases': [],
                                                    'constructor': ['checker=None',
                                                                    'verbose=None',
                                                                    'optionflags=0'],
                                                    'docstring': "\n    A class used to run DocTest test cases, and accumulate statistics.\n    The `run` method is used to process a single DocTest case.  It\n    returns a tuple `(f, t)`, where `t` is the number of test cases\n    tried, and `f` is the number of test cases that failed.\n\n        >>> tests = DocTestFinder().find(_TestClass)\n        >>> runner = DocTestRunner(verbose=False)\n        >>> for test in tests:\n        ...     print runner.run(test)\n        (0, 2)\n        (0, 1)\n        (0, 2)\n        (0, 2)\n\n    The `summarize` method prints a summary of all the test cases that\n    have been run by the runner, and returns an aggregated `(f, t)`\n    tuple:\n\n        >>> runner.summarize(verbose=1)\n        4 items passed all tests:\n           2 tests in _TestClass\n           2 tests in _TestClass.__init__\n           2 tests in _TestClass.get\n           1 tests in _TestClass.square\n        7 tests in 4 items.\n        7 passed and 0 failed.\n        Test passed.\n        (0, 7)\n\n    The aggregated number of tried examples and failed examples is\n    also available via the `tries` and `failures` attributes:\n\n        >>> runner.tries\n        7\n        >>> runner.failures\n        0\n\n    The comparison between expected outputs and actual outputs is done\n    by an `OutputChecker`.  This comparison may be customized with a\n    number of option flags; see the documentation for `testmod` for\n    more information.  If the option flags are insufficient, then the\n    comparison may also be customized by passing a subclass of\n    `OutputChecker` to the constructor.\n\n    The test runner's display output can be controlled in two ways.\n    First, an output function (`out) can be passed to\n    `TestRunner.run`; this function will be called with strings that\n    should be displayed.  It defaults to `sys.stdout.write`.  If\n    capturing the output is not sufficient, then the display output\n    can be also customized by subclassing DocTestRunner, and\n    overriding the methods `report_start`, `report_success`,\n    `report_unexpected_exception`, and `report_failure`.\n    ",
                                                    'methods': [('report_start',
                                                                 ['out', 'test', 'example'],
                                                                 '\n        Report that the test runner is about to process the given\n        example.  (Only displays a message if verbose=True)\n        '),
                                                                ('report_success',
                                                                 ['out',
                                                                  'test',
                                                                  'example',
                                                                  'got'],
                                                                 '\n        Report that the given example ran successfully.  (Only\n        displays a message if verbose=True)\n        '),
                                                                ('report_failure',
                                                                 ['out',
                                                                  'test',
                                                                  'example',
                                                                  'got'],
                                                                 '\n        Report that the given example failed.\n        '),
                                                                ('report_unexpected_exception',
                                                                 ['out',
                                                                  'test',
                                                                  'example',
                                                                  'exc_info'],
                                                                 '\n        Report that the given example raised an unexpected exception.\n        '),
                                                                ('_failure_header',
                                                                 ['test', 'example'],
                                                                 ''),
                                                                ('__run',
                                                                 ['test',
                                                                  'compileflags',
                                                                  'out'],
                                                                 '\n        Run the examples in `test`.  Write the outcome of each example\n        with one of the `DocTestRunner.report_*` methods, using the\n        writer function `out`.  `compileflags` is the set of compiler\n        flags that should be used to execute examples.  Return a tuple\n        `(f, t)`, where `t` is the number of examples tried, and `f`\n        is the number of examples that failed.  The examples are run\n        in the namespace `test.globs`.\n        '),
                                                                ('__record_outcome',
                                                                 ['test', 'f', 't'],
                                                                 '\n        Record the fact that the given DocTest (`test`) generated `f`\n        failures out of `t` tried examples.\n        '),
                                                                ('__patched_linecache_getlines',
                                                                 ['filename',
                                                                  'module_globals=None'],
                                                                 ''),
                                                                ('run',
                                                                 ['test',
                                                                  'compileflags=None',
                                                                  'out=None',
                                                                  'clear_globs=True'],
                                                                 '\n        Run the examples in `test`, and display the results using the\n        writer function `out`.\n\n        The examples are run in the namespace `test.globs`.  If\n        `clear_globs` is true (the default), then this namespace will\n        be cleared after the test runs, to help with garbage\n        collection.  If you would like to examine the namespace after\n        the test completes, then use `clear_globs=False`.\n\n        `compileflags` gives the set of flags that should be used by\n        the Python compiler when running the examples.  If not\n        specified, then it will default to the set of future-import\n        flags that apply to `globs`.\n\n        The output of each example is checked using\n        `DocTestRunner.check_output`, and the results are formatted by\n        the `DocTestRunner.report_*` methods.\n        '),
                                                                ('summarize',
                                                                 ['verbose=None'],
                                                                 "\n        Print a summary of all the test cases that have been run by\n        this DocTestRunner, and return a tuple `(f, t)`, where `f` is\n        the total number of failed examples, and `t` is the total\n        number of tried examples.\n\n        The optional `verbose` argument controls how detailed the\n        summary is.  If the verbosity is not specified, then the\n        DocTestRunner's verbosity is used.\n        "),
                                                                ('merge', ['other'], '')],
                                                    'properties': ['DIVIDER',
                                                                   '_checker',
                                                                   '_verbose',
                                                                   'optionflags',
                                                                   'original_optionflags',
                                                                   'tries',
                                                                   'failures',
                                                                   '_name2ft',
                                                                   '_fakeout',
                                                                   '__LINECACHE_FILENAME_RE',
                                                                   'test',
                                                                   'debugger',
                                                                   'save_linecache_getlines']},
             'django.test._doctest.Example': {'bases': [],
                                              'constructor': ['source',
                                                              'want',
                                                              'exc_msg=None',
                                                              'lineno=0',
                                                              'indent=0',
                                                              'options=None'],
                                              'docstring': "\n    A single doctest example, consisting of source code and expected\n    output.  `Example` defines the following attributes:\n\n      - source: A single Python statement, always ending with a newline.\n        The constructor adds a newline if needed.\n\n      - want: The expected output from running the source code (either\n        from stdout, or a traceback in case of exception).  `want` ends\n        with a newline unless it's empty, in which case it's an empty\n        string.  The constructor adds a newline if needed.\n\n      - exc_msg: The exception message generated by the example, if\n        the example is expected to generate an exception; or `None` if\n        it is not expected to generate an exception.  This exception\n        message is compared against the return value of\n        `traceback.format_exception_only()`.  `exc_msg` ends with a\n        newline unless it's `None`.  The constructor adds a newline\n        if needed.\n\n      - lineno: The line number within the DocTest string containing\n        this Example where the Example begins.  This line number is\n        zero-based, with respect to the beginning of the DocTest.\n\n      - indent: The example's indentation in the DocTest string.\n        I.e., the number of space characters that preceed the\n        example's first prompt.\n\n      - options: A dictionary mapping from option flags to True or\n        False, which is used to override default options for this\n        example.  Any option flags not contained in this dictionary\n        are left at their default value (as specified by the\n        DocTestRunner's optionflags).  By default, no options are set.\n    ",
                                              'methods': [],
                                              'properties': ['source',
                                                             'want',
                                                             'lineno',
                                                             'indent',
                                                             'options',
                                                             'exc_msg']},
             'django.test._doctest.OutputChecker': {'bases': [],
                                                    'constructor': [],
                                                    'docstring': '\n    A class used to check the whether the actual output from a doctest\n    example matches the expected output.  `OutputChecker` defines two\n    methods: `check_output`, which compares a given pair of outputs,\n    and returns true if they match; and `output_difference`, which\n    returns a string describing the differences between two outputs.\n    ',
                                                    'methods': [('check_output',
                                                                 ['want',
                                                                  'got',
                                                                  'optionflags'],
                                                                 '\n        Return True iff the actual output from an example (`got`)\n        matches the expected output (`want`).  These strings are\n        always considered to match if they are identical; but\n        depending on what option flags the test runner is using,\n        several non-exact match types are also possible.  See the\n        documentation for `TestRunner` for more information about\n        option flags.\n        '),
                                                                ('_do_a_fancy_diff',
                                                                 ['want',
                                                                  'got',
                                                                  'optionflags'],
                                                                 ''),
                                                                ('output_difference',
                                                                 ['example',
                                                                  'got',
                                                                  'optionflags'],
                                                                 '\n        Return a string describing the differences between the\n        expected output for a given example (`example`) and the actual\n        output (`got`).  `optionflags` is the set of option flags used\n        to compare `want` and `got`.\n        ')],
                                                    'properties': []},
             'django.test._doctest.Tester': {'bases': [],
                                             'constructor': ['mod=None',
                                                             'globs=None',
                                                             'verbose=None',
                                                             'isprivate=None',
                                                             'optionflags=0'],
                                             'docstring': '',
                                             'methods': [('runstring', ['s', 'name'], ''),
                                                         ('rundoc',
                                                          ['object',
                                                           'name=None',
                                                           'module=None'],
                                                          ''),
                                                         ('rundict',
                                                          ['d', 'name', 'module=None'],
                                                          ''),
                                                         ('run__test__', ['d', 'name'], ''),
                                                         ('summarize', ['verbose=None'], ''),
                                                         ('merge', ['other'], '')],
                                             'properties': ['globs',
                                                            'verbose',
                                                            'isprivate',
                                                            'optionflags',
                                                            'testfinder',
                                                            'testrunner']},
             'django.test._doctest.UnexpectedException': {'bases': ['Exception'],
                                                          'constructor': ['test',
                                                                          'example',
                                                                          'exc_info'],
                                                          'docstring': 'A DocTest example has encountered an unexpected exception\n\n    The exception instance has variables:\n\n    - test: the DocTest object being run\n\n    - excample: the Example object that failed\n\n    - exc_info: the exception info\n    ',
                                                          'methods': [('__str__', [], '')],
                                                          'properties': ['test',
                                                                         'example',
                                                                         'exc_info']},
             'django.test._doctest._OutputRedirectingPdb': {'bases': ['pdb.Pdb'],
                                                            'constructor': ['out'],
                                                            'docstring': '\n    A specialized version of the python debugger that redirects stdout\n    to a given stream when interacting with the user.  Stdout is *not*\n    redirected when traced code is executed.\n    ',
                                                            'methods': [('set_trace', [], ''),
                                                                        ('set_continue',
                                                                         [],
                                                                         ''),
                                                                        ('trace_dispatch',
                                                                         ['*args'],
                                                                         '')],
                                                            'properties': ['__out',
                                                                           '__debugger_used']},
             'django.test._doctest._SpoofOut': {'bases': ['StringIO.StringIO'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('getvalue', [], ''),
                                                            ('truncate', ['size=None'], '')],
                                                'properties': ['softspace']},
             'django.test._doctest._TestClass': {'bases': [],
                                                 'constructor': ['val'],
                                                 'docstring': "\n    A pointless class, for sanity-checking of docstring testing.\n\n    Methods:\n        square()\n        get()\n\n    >>> _TestClass(13).get() + _TestClass(-12).get()\n    1\n    >>> hex(_TestClass(13).square().get())\n    '0xa9'\n    ",
                                                 'methods': [('square',
                                                              [],
                                                              "square() -> square TestClass's associated value\n\n        >>> _TestClass(13).square().get()\n        169\n        "),
                                                             ('get',
                                                              [],
                                                              "get() -> return TestClass's associated value.\n\n        >>> x = _TestClass(-42)\n        >>> print x.get()\n        -42\n        ")],
                                                 'properties': ['val']},
             'django.test.client.Client': {'bases': ['django.test.client.RequestFactory'],
                                           'constructor': ['enforce_csrf_checks=False',
                                                           '**defaults'],
                                           'docstring': '\n    A class that can act as a client for testing purposes.\n\n    It allows the user to compose GET and POST requests, and\n    obtain the response that the server gave to those requests.\n    The server Response objects are annotated with the details\n    of the contexts and templates that were rendered during the\n    process of serving the request.\n\n    Client objects are stateful - they will retain cookie (and\n    thus session) details for the lifetime of the Client instance.\n\n    This is not intended as a replacement for Twill/Selenium or\n    the like - it is here to allow testing against the\n    contexts and templates produced by a view, rather than the\n    HTML rendered to the end-user.\n    ',
                                           'methods': [('store_exc_info',
                                                        ['**kwargs'],
                                                        '\n        Stores exceptions when they are generated by a view.\n        '),
                                                       ('_session',
                                                        [],
                                                        '\n        Obtains the current session variables.\n        '),
                                                       ('request',
                                                        ['**request'],
                                                        '\n        The master request method. Composes the environment dictionary\n        and passes to the handler, returning the result of the handler.\n        Assumes defaults for the query environment, which can be overridden\n        using the arguments to the request.\n        '),
                                                       ('get',
                                                        ['path',
                                                         'data={}',
                                                         'follow=False',
                                                         '**extra'],
                                                        '\n        Requests a response from the server using GET.\n        '),
                                                       ('post',
                                                        ['path',
                                                         'data={}',
                                                         'content_type=MULTIPART_CONTENT',
                                                         'follow=False',
                                                         '**extra'],
                                                        '\n        Requests a response from the server using POST.\n        '),
                                                       ('head',
                                                        ['path',
                                                         'data={}',
                                                         'follow=False',
                                                         '**extra'],
                                                        '\n        Request a response from the server using HEAD.\n        '),
                                                       ('options',
                                                        ['path',
                                                         'data={}',
                                                         'follow=False',
                                                         '**extra'],
                                                        '\n        Request a response from the server using OPTIONS.\n        '),
                                                       ('put',
                                                        ['path',
                                                         'data={}',
                                                         'content_type=MULTIPART_CONTENT',
                                                         'follow=False',
                                                         '**extra'],
                                                        '\n        Send a resource to the server using PUT.\n        '),
                                                       ('delete',
                                                        ['path',
                                                         'data={}',
                                                         'follow=False',
                                                         '**extra'],
                                                        '\n        Send a DELETE request to the server.\n        '),
                                                       ('login',
                                                        ['**credentials'],
                                                        '\n        Sets the Factory to appear as if it has successfully logged into a site.\n\n        Returns True if login is possible; False if the provided credentials\n        are incorrect, or the user is inactive, or if the sessions framework is\n        not available.\n        '),
                                                       ('logout',
                                                        [],
                                                        "\n        Removes the authenticated user's cookies and session object.\n\n        Causes the authenticated user to be logged out.\n        "),
                                                       ('_handle_redirects',
                                                        ['response', '**extra'],
                                                        'Follows any redirects by requesting responses from the server using GET.')],
                                           'properties': ['handler',
                                                          'exc_info',
                                                          'session',
                                                          'cookies']},
             'django.test.client.ClientHandler': {'bases': ['django.core.handlers.base.BaseHandler'],
                                                  'constructor': ['enforce_csrf_checks=True',
                                                                  '*args',
                                                                  '**kwargs'],
                                                  'docstring': '\n    A HTTP Handler that can be used for testing purposes.\n    Uses the WSGI interface to compose requests, but returns\n    the raw HttpResponse object\n    ',
                                                  'methods': [('__call__', ['environ'], '')],
                                                  'properties': ['enforce_csrf_checks']},
             'django.test.client.FakePayload': {'bases': ['object'],
                                                'constructor': ['content'],
                                                'docstring': "\n    A wrapper around StringIO that restricts what can be read since data from\n    the network can't be seeked and cannot be read outside of its content\n    length. This makes sure that views can't do anything under the test client\n    that wouldn't work in Real Life.\n    ",
                                                'methods': [('read', ['num_bytes=None'], '')],
                                                'properties': ['__content', '__len']},
             'django.test.client.RequestFactory': {'bases': ['object'],
                                                   'constructor': ['**defaults'],
                                                   'docstring': "\n    Class that lets you create mock Request objects for use in testing.\n\n    Usage:\n\n    rf = RequestFactory()\n    get_request = rf.get('/hello/')\n    post_request = rf.post('/submit/', {'foo': 'bar'})\n\n    Once you have a request object you can pass it to any view function,\n    just as if that view had been hooked up using a URLconf.\n    ",
                                                   'methods': [('_base_environ',
                                                                ['**request'],
                                                                '\n        The base environment for a request.\n        '),
                                                               ('request',
                                                                ['**request'],
                                                                'Construct a generic request object.'),
                                                               ('_get_path', ['parsed'], ''),
                                                               ('get',
                                                                ['path', 'data={}', '**extra'],
                                                                'Construct a GET request'),
                                                               ('post',
                                                                ['path',
                                                                 'data={}',
                                                                 'content_type=MULTIPART_CONTENT',
                                                                 '**extra'],
                                                                'Construct a POST request.'),
                                                               ('head',
                                                                ['path', 'data={}', '**extra'],
                                                                'Construct a HEAD request.'),
                                                               ('options',
                                                                ['path', 'data={}', '**extra'],
                                                                'Constrict an OPTIONS request'),
                                                               ('put',
                                                                ['path',
                                                                 'data={}',
                                                                 'content_type=MULTIPART_CONTENT',
                                                                 '**extra'],
                                                                'Construct a PUT request.'),
                                                               ('delete',
                                                                ['path', 'data={}', '**extra'],
                                                                'Construct a DELETE request.')],
                                                   'properties': ['defaults',
                                                                  'cookies',
                                                                  'errors']},
             'django.test.simple.DjangoTestRunner': {'bases': ['django.utils.unittest.TextTestRunner'],
                                                     'constructor': ['*args', '**kwargs'],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'django.test.simple.DjangoTestSuiteRunner': {'bases': ['object'],
                                                          'constructor': ['verbosity=1',
                                                                          'interactive=True',
                                                                          'failfast=True',
                                                                          '**kwargs'],
                                                          'docstring': '',
                                                          'methods': [('setup_test_environment',
                                                                       ['**kwargs'],
                                                                       ''),
                                                                      ('build_suite',
                                                                       ['test_labels',
                                                                        'extra_tests=None',
                                                                        '**kwargs'],
                                                                       ''),
                                                                      ('setup_databases',
                                                                       ['**kwargs'],
                                                                       ''),
                                                                      ('run_suite',
                                                                       ['suite', '**kwargs'],
                                                                       ''),
                                                                      ('teardown_databases',
                                                                       ['old_config',
                                                                        '**kwargs'],
                                                                       ''),
                                                                      ('teardown_test_environment',
                                                                       ['**kwargs'],
                                                                       ''),
                                                                      ('suite_result',
                                                                       ['suite',
                                                                        'result',
                                                                        '**kwargs'],
                                                                       ''),
                                                                      ('run_tests',
                                                                       ['test_labels',
                                                                        'extra_tests=None',
                                                                        '**kwargs'],
                                                                       "\n        Run the unit tests for all the test labels in the provided list.\n        Labels must be of the form:\n         - app.TestClass.test_method\n            Run a single specific test method\n         - app.TestClass\n            Run all the test methods in a given class\n         - app\n            Search for doctests and unittests in the named application.\n\n        When looking for tests, the test runner will look in the models and\n        tests modules for the application.\n\n        A list of 'extra' tests may also be provided; these tests\n        will be added to the test suite.\n\n        Returns the number of tests that failed.\n        ")],
                                                          'properties': ['verbosity',
                                                                         'interactive',
                                                                         'failfast']},
             'django.test.testcases.DocTestRunner': {'bases': ['django.test._doctest.DocTestRunner'],
                                                     'constructor': ['*args', '**kwargs'],
                                                     'docstring': '',
                                                     'methods': [('report_unexpected_exception',
                                                                  ['out',
                                                                   'test',
                                                                   'example',
                                                                   'exc_info'],
                                                                  '')],
                                                     'properties': ['optionflags']},
             'django.test.testcases.OutputChecker': {'bases': ['django.test._doctest.OutputChecker'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('check_output',
                                                                  ['want',
                                                                   'got',
                                                                   'optionflags'],
                                                                  'The entry method for doctest output checking. Defers to a sequence of child checkers'),
                                                                 ('check_output_default',
                                                                  ['want',
                                                                   'got',
                                                                   'optionflags'],
                                                                  'The default comparator provided by doctest - not perfect, but good for most purposes'),
                                                                 ('check_output_numeric',
                                                                  ['want',
                                                                   'got',
                                                                   'optionflags'],
                                                                  "Doctest does an exact string comparison of output, which means that\n        some numerically equivalent values aren't equal. This check normalizes\n         * long integers (22L) so that they equal normal integers. (22)\n         * Decimals so that they are comparable, regardless of the change\n           made to __repr__ in Python 2.6.\n        "),
                                                                 ('check_output_xml',
                                                                  ['want',
                                                                   'got',
                                                                   'optionsflags'],
                                                                  "Tries to do a 'xml-comparision' of want and got.  Plain string\n        comparision doesn't always work because, for example, attribute\n        ordering should not be important.\n\n        Based on http://codespeak.net/svn/lxml/trunk/src/lxml/doctestcompare.py\n        "),
                                                                 ('check_output_json',
                                                                  ['want',
                                                                   'got',
                                                                   'optionsflags'],
                                                                  'Tries to compare want and got as if they were JSON-encoded data'),
                                                                 ('_strip_quotes',
                                                                  ['want', 'got'],
                                                                  '\n        Strip quotes of doctests output values:\n\n        >>> o = OutputChecker()\n        >>> o._strip_quotes("\'foo\'")\n        "foo"\n        >>> o._strip_quotes(\'"foo"\')\n        "foo"\n        >>> o._strip_quotes("u\'foo\'")\n        "foo"\n        >>> o._strip_quotes(\'u"foo"\')\n        "foo"\n        ')],
                                                     'properties': []},
             'django.test.testcases.TestCase': {'bases': ['django.test.testcases.TransactionTestCase'],
                                                'constructor': [],
                                                'docstring': '\n    Does basically the same as TransactionTestCase, but surrounds every test\n    with a transaction, monkey-patches the real transaction management routines to\n    do nothing, and rollsback the test transaction at the end of the test. You have\n    to use TransactionTestCase, if you need transaction management inside a test.\n    ',
                                                'methods': [('_fixture_setup', [], ''),
                                                            ('_fixture_teardown', [], '')],
                                                'properties': []},
             'django.test.testcases.TransactionTestCase': {'bases': ['django.utils.unittest.TestCase'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('_pre_setup',
                                                                        [],
                                                                        "Performs any pre-test setup. This includes:\n\n            * Flushing the database.\n            * If the Test Case class has a 'fixtures' member, installing the\n              named fixtures.\n            * If the Test Case class has a 'urls' member, replace the\n              ROOT_URLCONF with it.\n            * Clearing the mail test outbox.\n        "),
                                                                       ('_fixture_setup',
                                                                        [],
                                                                        ''),
                                                                       ('_urlconf_setup',
                                                                        [],
                                                                        ''),
                                                                       ('__call__',
                                                                        ['result=None'],
                                                                        "\n        Wrapper around default __call__ method to perform common Django test\n        set up. This means that user-defined Test Cases aren't required to\n        include a call to super().setUp().\n        "),
                                                                       ('_post_teardown',
                                                                        [],
                                                                        ' Performs any post-test things. This includes:\n\n            * Putting back the original ROOT_URLCONF if it was changed.\n            * Force closing the connection, so that the next test gets\n              a clean cursor.\n        '),
                                                                       ('_fixture_teardown',
                                                                        [],
                                                                        ''),
                                                                       ('_urlconf_teardown',
                                                                        [],
                                                                        ''),
                                                                       ('save_warnings_state',
                                                                        [],
                                                                        '\n        Saves the state of the warnings module\n        '),
                                                                       ('restore_warnings_state',
                                                                        [],
                                                                        '\n        Restores the sate of the warnings module to the state\n        saved by save_warnings_state()\n        '),
                                                                       ('assertRedirects',
                                                                        ['response',
                                                                         'expected_url',
                                                                         'status_code=302',
                                                                         'target_status_code=200',
                                                                         'host=None',
                                                                         "msg_prefix=''"],
                                                                        "Asserts that a response redirected to a specific URL, and that the\n        redirect URL can be loaded.\n\n        Note that assertRedirects won't work for external links since it uses\n        TestClient to do a request.\n        "),
                                                                       ('assertContains',
                                                                        ['response',
                                                                         'text',
                                                                         'count=None',
                                                                         'status_code=200',
                                                                         "msg_prefix=''"],
                                                                        "\n        Asserts that a response indicates that some content was retrieved\n        successfully, (i.e., the HTTP status code was as expected), and that\n        ``text`` occurs ``count`` times in the content of the response.\n        If ``count`` is None, the count doesn't matter - the assertion is true\n        if the text occurs at least once in the response.\n        "),
                                                                       ('assertNotContains',
                                                                        ['response',
                                                                         'text',
                                                                         'status_code=200',
                                                                         "msg_prefix=''"],
                                                                        "\n        Asserts that a response indicates that some content was retrieved\n        successfully, (i.e., the HTTP status code was as expected), and that\n        ``text`` doesn't occurs in the content of the response.\n        "),
                                                                       ('assertFormError',
                                                                        ['response',
                                                                         'form',
                                                                         'field',
                                                                         'errors',
                                                                         "msg_prefix=''"],
                                                                        '\n        Asserts that a form used to render the response has a specific field\n        error.\n        '),
                                                                       ('assertTemplateUsed',
                                                                        ['response',
                                                                         'template_name',
                                                                         "msg_prefix=''"],
                                                                        '\n        Asserts that the template with the provided name was used in rendering\n        the response.\n        '),
                                                                       ('assertTemplateNotUsed',
                                                                        ['response',
                                                                         'template_name',
                                                                         "msg_prefix=''"],
                                                                        '\n        Asserts that the template with the provided name was NOT used in\n        rendering the response.\n        '),
                                                                       ('assertQuerysetEqual',
                                                                        ['qs',
                                                                         'values',
                                                                         'transform=repr'],
                                                                        ''),
                                                                       ('assertNumQueries',
                                                                        ['num',
                                                                         'func=None',
                                                                         '*args',
                                                                         '**kwargs'],
                                                                        '')],
                                                           'properties': ['client_class',
                                                                          '_old_root_urlconf',
                                                                          'client',
                                                                          '_warnings_state']},
             'django.test.testcases._AssertNumQueriesContext': {'bases': ['object'],
                                                                'constructor': ['test_case',
                                                                                'num',
                                                                                'connection'],
                                                                'docstring': '',
                                                                'methods': [('__enter__',
                                                                             [],
                                                                             ''),
                                                                            ('__exit__',
                                                                             ['exc_type',
                                                                              'exc_value',
                                                                              'traceback'],
                                                                             '')],
                                                                'properties': ['test_case',
                                                                               'num',
                                                                               'connection',
                                                                               'old_debug_cursor',
                                                                               'starting_queries']},
             'django.test.utils.Approximate': {'bases': ['object'],
                                               'constructor': ['val', 'places=7'],
                                               'docstring': '',
                                               'methods': [('__repr__', [], ''),
                                                           ('__eq__', ['other'], '')],
                                               'properties': ['val', 'places']},
             'django.test.utils.ContextList': {'bases': ['list'],
                                               'constructor': [],
                                               'docstring': 'A wrapper that provides direct key access to context items contained\n    in a list of context objects.\n    ',
                                               'methods': [('__getitem__', ['key'], ''),
                                                           ('__contains__', ['key'], '')],
                                               'properties': []},
             'django.utils._threading_local._localbase': {'bases': ['object'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('__new__',
                                                                       ['*args', '**kw'],
                                                                       '')],
                                                          'properties': ['__slots__']},
             'django.utils._threading_local.local': {'bases': ['django.utils._threading_local._localbase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('__getattribute__',
                                                                  ['name'],
                                                                  ''),
                                                                 ('__setattr__',
                                                                  ['name', 'value'],
                                                                  ''),
                                                                 ('__delattr__', ['name'], ''),
                                                                 ('__del__', [], '')],
                                                     'properties': ['__del__']},
             'django.utils.daemonize.NullDevice': {'bases': [],
                                                   'constructor': [],
                                                   'docstring': 'A writeable object that writes to nowhere -- like /dev/null.',
                                                   'methods': [('write', ['s'], '')],
                                                   'properties': []},
             'django.utils.datastructures.DictWrapper': {'bases': ['dict'],
                                                         'constructor': ['data',
                                                                         'func',
                                                                         'prefix'],
                                                         'docstring': '\n    Wraps accesses to a dictionary so that certain values (those starting with\n    the specified prefix) are passed through a function before being returned.\n    The prefix is removed before looking up the real value.\n\n    Used by the SQL construction code to ensure that values are correctly\n    quoted before being used.\n    ',
                                                         'methods': [('__getitem__',
                                                                      ['key'],
                                                                      '\n        Retrieves the real value after stripping the prefix string (if\n        present). If the prefix is present, pass the value through self.func\n        before returning, otherwise return the raw value.\n        ')],
                                                         'properties': ['func', 'prefix']},
             'django.utils.datastructures.DotExpandedDict': {'bases': ['dict'],
                                                             'constructor': ['key_to_list_mapping'],
                                                             'docstring': '\n    A special dictionary constructor that takes a dictionary in which the keys\n    may contain dots to specify inner dictionaries. It\'s confusing, but this\n    example should make sense.\n\n    >>> d = DotExpandedDict({\'person.1.firstname\': [\'Simon\'],             \'person.1.lastname\': [\'Willison\'],             \'person.2.firstname\': [\'Adrian\'],             \'person.2.lastname\': [\'Holovaty\']})\n    >>> d\n    {\'person\': {\'1\': {\'lastname\': [\'Willison\'], \'firstname\': [\'Simon\']}, \'2\': {\'lastname\': [\'Holovaty\'], \'firstname\': [\'Adrian\']}}}\n    >>> d[\'person\']\n    {\'1\': {\'lastname\': [\'Willison\'], \'firstname\': [\'Simon\']}, \'2\': {\'lastname\': [\'Holovaty\'], \'firstname\': [\'Adrian\']}}\n    >>> d[\'person\'][\'1\']\n    {\'lastname\': [\'Willison\'], \'firstname\': [\'Simon\']}\n\n    # Gotcha: Results are unpredictable if the dots are "uneven":\n    >>> DotExpandedDict({\'c.1\': 2, \'c.2\': 3, \'c\': 1})\n    {\'c\': 1}\n    ',
                                                             'methods': [],
                                                             'properties': []},
             'django.utils.datastructures.ImmutableList': {'bases': ['tuple'],
                                                           'constructor': [],
                                                           'docstring': '\n    A tuple-like object that raises useful errors when it is asked to mutate.\n\n    Example::\n\n        >>> a = ImmutableList(range(5), warning="You cannot mutate this.")\n        >>> a[3] = \'4\'\n        Traceback (most recent call last):\n            ...\n        AttributeError: You cannot mutate this.\n    ',
                                                           'methods': [('__new__',
                                                                        ['*args', '**kwargs'],
                                                                        ''),
                                                                       ('complain',
                                                                        ['*wargs', '**kwargs'],
                                                                        '')],
                                                           'properties': ['warning',
                                                                          '__delitem__',
                                                                          '__delslice__',
                                                                          '__iadd__',
                                                                          '__imul__',
                                                                          '__setitem__',
                                                                          '__setslice__',
                                                                          'append',
                                                                          'extend',
                                                                          'insert',
                                                                          'pop',
                                                                          'remove',
                                                                          'sort',
                                                                          'reverse']},
             'django.utils.datastructures.MergeDict': {'bases': ['object'],
                                                       'constructor': ['*dicts'],
                                                       'docstring': '\n    A simple class for creating new "virtual" dictionaries that actually look\n    up values in more than one dictionary, passed in the constructor.\n\n    If a key appears in more than one of the given dictionaries, only the\n    first occurrence will be used.\n    ',
                                                       'methods': [('__getitem__', ['key'], ''),
                                                                   ('__copy__', [], ''),
                                                                   ('get',
                                                                    ['key', 'default=None'],
                                                                    ''),
                                                                   ('getlist', ['key'], ''),
                                                                   ('iteritems', [], ''),
                                                                   ('iterkeys', [], ''),
                                                                   ('itervalues', [], ''),
                                                                   ('items', [], ''),
                                                                   ('keys', [], ''),
                                                                   ('values', [], ''),
                                                                   ('has_key', ['key'], ''),
                                                                   ('copy',
                                                                    [],
                                                                    'Returns a copy of this object.'),
                                                                   ('__str__',
                                                                    [],
                                                                    '\n        Returns something like\n\n            "{\'key1\': \'val1\', \'key2\': \'val2\', \'key3\': \'val3\'}"\n\n        instead of the generic "<object meta-data>" inherited from object.\n        '),
                                                                   ('__repr__',
                                                                    [],
                                                                    '\n        Returns something like\n\n            MergeDict({\'key1\': \'val1\', \'key2\': \'val2\'}, {\'key3\': \'val3\'})\n\n        instead of generic "<object meta-data>" inherited from object.\n        ')],
                                                       'properties': ['dicts',
                                                                      '__contains__',
                                                                      '__iter__']},
             'django.utils.datastructures.MultiValueDict': {'bases': ['dict'],
                                                            'constructor': ['key_to_list_mapping=()'],
                                                            'docstring': "\n    A subclass of dictionary customized to handle multiple values for the\n    same key.\n\n    >>> d = MultiValueDict({'name': ['Adrian', 'Simon'], 'position': ['Developer']})\n    >>> d['name']\n    'Simon'\n    >>> d.getlist('name')\n    ['Adrian', 'Simon']\n    >>> d.get('lastname', 'nonexistent')\n    'nonexistent'\n    >>> d.setlist('lastname', ['Holovaty', 'Willison'])\n\n    This class exists to solve the irritating problem raised by cgi.parse_qs,\n    which returns a list for every key, even though most Web forms submit\n    single name-value pairs.\n    ",
                                                            'methods': [('__repr__', [], ''),
                                                                        ('__getitem__',
                                                                         ['key'],
                                                                         "\n        Returns the last data value for this key, or [] if it's an empty list;\n        raises KeyError if not found.\n        "),
                                                                        ('__setitem__',
                                                                         ['key', 'value'],
                                                                         ''),
                                                                        ('__copy__', [], ''),
                                                                        ('__deepcopy__',
                                                                         ['memo=None'],
                                                                         ''),
                                                                        ('__getstate__',
                                                                         [],
                                                                         ''),
                                                                        ('__setstate__',
                                                                         ['obj_dict'],
                                                                         ''),
                                                                        ('get',
                                                                         ['key',
                                                                          'default=None'],
                                                                         "\n        Returns the last data value for the passed key. If key doesn't exist\n        or value is an empty list, then default is returned.\n        "),
                                                                        ('getlist',
                                                                         ['key'],
                                                                         "\n        Returns the list of values for the passed key. If key doesn't exist,\n        then an empty list is returned.\n        "),
                                                                        ('setlist',
                                                                         ['key', 'list_'],
                                                                         ''),
                                                                        ('setdefault',
                                                                         ['key',
                                                                          'default=None'],
                                                                         ''),
                                                                        ('setlistdefault',
                                                                         ['key',
                                                                          'default_list=()'],
                                                                         ''),
                                                                        ('appendlist',
                                                                         ['key', 'value'],
                                                                         'Appends an item to the internal list associated with key.'),
                                                                        ('items',
                                                                         [],
                                                                         '\n        Returns a list of (key, value) pairs, where value is the last item in\n        the list associated with the key.\n        '),
                                                                        ('iteritems',
                                                                         [],
                                                                         '\n        Yields (key, value) pairs, where value is the last item in the list\n        associated with the key.\n        '),
                                                                        ('lists',
                                                                         [],
                                                                         'Returns a list of (key, list) pairs.'),
                                                                        ('iterlists',
                                                                         [],
                                                                         'Yields (key, list) pairs.'),
                                                                        ('values',
                                                                         [],
                                                                         'Returns a list of the last value on every key list.'),
                                                                        ('itervalues',
                                                                         [],
                                                                         'Yield the last value on every key list.'),
                                                                        ('copy',
                                                                         [],
                                                                         'Returns a shallow copy of this object.'),
                                                                        ('update',
                                                                         ['*args', '**kwargs'],
                                                                         '\n        update() extends rather than replaces existing key lists.\n        Also accepts keyword args.\n        ')],
                                                            'properties': []},
             'django.utils.datastructures.MultiValueDictKeyError': {'bases': ['KeyError'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'django.utils.datastructures.SortedDict': {'bases': ['dict'],
                                                        'constructor': ['data=None'],
                                                        'docstring': "\n    A dictionary that keeps its keys in the order in which they're inserted.\n    ",
                                                        'methods': [('__new__',
                                                                     ['*args', '**kwargs'],
                                                                     ''),
                                                                    ('__deepcopy__',
                                                                     ['memo'],
                                                                     ''),
                                                                    ('__setitem__',
                                                                     ['key', 'value'],
                                                                     ''),
                                                                    ('__delitem__',
                                                                     ['key'],
                                                                     ''),
                                                                    ('__iter__', [], ''),
                                                                    ('pop', ['k', '*args'], ''),
                                                                    ('popitem', [], ''),
                                                                    ('items', [], ''),
                                                                    ('iteritems', [], ''),
                                                                    ('keys', [], ''),
                                                                    ('iterkeys', [], ''),
                                                                    ('values', [], ''),
                                                                    ('itervalues', [], ''),
                                                                    ('update', ['dict_'], ''),
                                                                    ('setdefault',
                                                                     ['key', 'default'],
                                                                     ''),
                                                                    ('value_for_index',
                                                                     ['index'],
                                                                     'Returns the value of the item at the given zero-based index.'),
                                                                    ('insert',
                                                                     ['index', 'key', 'value'],
                                                                     'Inserts the key, value pair before the item with the given index.'),
                                                                    ('copy',
                                                                     [],
                                                                     'Returns a copy of this object.'),
                                                                    ('__repr__',
                                                                     [],
                                                                     '\n        Replaces the normal dict.__repr__ with a version that returns the keys\n        in their sorted order.\n        '),
                                                                    ('clear', [], '')],
                                                        'properties': ['keyOrder']},
             'django.utils.dateformat.DateFormat': {'bases': ['django.utils.dateformat.TimeFormat'],
                                                    'constructor': ['dt'],
                                                    'docstring': '',
                                                    'methods': [('b',
                                                                 [],
                                                                 "Month, textual, 3 letters, lowercase; e.g. 'jan'"),
                                                                ('c',
                                                                 [],
                                                                 "\n        ISO 8601 Format\n        Example : '2008-01-02T10:30:00.000123'\n        "),
                                                                ('d',
                                                                 [],
                                                                 "Day of the month, 2 digits with leading zeros; i.e. '01' to '31'"),
                                                                ('D',
                                                                 [],
                                                                 "Day of the week, textual, 3 letters; e.g. 'Fri'"),
                                                                ('E',
                                                                 [],
                                                                 'Alternative month names as required by some locales. Proprietary extension.'),
                                                                ('F',
                                                                 [],
                                                                 "Month, textual, long; e.g. 'January'"),
                                                                ('I',
                                                                 [],
                                                                 "'1' if Daylight Savings Time, '0' otherwise."),
                                                                ('j',
                                                                 [],
                                                                 "Day of the month without leading zeros; i.e. '1' to '31'"),
                                                                ('l',
                                                                 [],
                                                                 "Day of the week, textual, long; e.g. 'Friday'"),
                                                                ('L',
                                                                 [],
                                                                 'Boolean for whether it is a leap year; i.e. True or False'),
                                                                ('m',
                                                                 [],
                                                                 "Month; i.e. '01' to '12'"),
                                                                ('M',
                                                                 [],
                                                                 "Month, textual, 3 letters; e.g. 'Jan'"),
                                                                ('n',
                                                                 [],
                                                                 "Month without leading zeros; i.e. '1' to '12'"),
                                                                ('N',
                                                                 [],
                                                                 'Month abbreviation in Associated Press style. Proprietary extension.'),
                                                                ('O',
                                                                 [],
                                                                 "Difference to Greenwich time in hours; e.g. '+0200'"),
                                                                ('r',
                                                                 [],
                                                                 "RFC 2822 formatted date; e.g. 'Thu, 21 Dec 2000 16:01:07 +0200'"),
                                                                ('S',
                                                                 [],
                                                                 "English ordinal suffix for the day of the month, 2 characters; i.e. 'st', 'nd', 'rd' or 'th'"),
                                                                ('t',
                                                                 [],
                                                                 "Number of days in the given month; i.e. '28' to '31'"),
                                                                ('T',
                                                                 [],
                                                                 "Time zone of this machine; e.g. 'EST' or 'MDT'"),
                                                                ('U',
                                                                 [],
                                                                 'Seconds since the Unix epoch (January 1 1970 00:00:00 GMT)'),
                                                                ('w',
                                                                 [],
                                                                 "Day of the week, numeric, i.e. '0' (Sunday) to '6' (Saturday)"),
                                                                ('W',
                                                                 [],
                                                                 'ISO-8601 week number of year, weeks starting on Monday'),
                                                                ('y',
                                                                 [],
                                                                 "Year, 2 digits; e.g. '99'"),
                                                                ('Y',
                                                                 [],
                                                                 "Year, 4 digits; e.g. '1999'"),
                                                                ('z',
                                                                 [],
                                                                 "Day of the year; i.e. '0' to '365'"),
                                                                ('Z',
                                                                 [],
                                                                 "\n        Time zone offset in seconds (i.e. '-43200' to '43200'). The offset for\n        timezones west of UTC is always negative, and for those east of UTC is\n        always positive.\n        ")],
                                                    'properties': ['year_days',
                                                                   'data',
                                                                   'timezone']},
             'django.utils.dateformat.Formatter': {'bases': ['object'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('format', ['formatstr'], '')],
                                                   'properties': []},
             'django.utils.dateformat.TimeFormat': {'bases': ['django.utils.dateformat.Formatter'],
                                                    'constructor': ['t'],
                                                    'docstring': '',
                                                    'methods': [('a', [], "'a.m.' or 'p.m.'"),
                                                                ('A', [], "'AM' or 'PM'"),
                                                                ('B',
                                                                 [],
                                                                 'Swatch Internet time'),
                                                                ('f',
                                                                 [],
                                                                 "\n        Time, in 12-hour hours and minutes, with minutes left off if they're\n        zero.\n        Examples: '1', '1:30', '2:05', '2'\n        Proprietary extension.\n        "),
                                                                ('g',
                                                                 [],
                                                                 "Hour, 12-hour format without leading zeros; i.e. '1' to '12'"),
                                                                ('G',
                                                                 [],
                                                                 "Hour, 24-hour format without leading zeros; i.e. '0' to '23'"),
                                                                ('h',
                                                                 [],
                                                                 "Hour, 12-hour format; i.e. '01' to '12'"),
                                                                ('H',
                                                                 [],
                                                                 "Hour, 24-hour format; i.e. '00' to '23'"),
                                                                ('i',
                                                                 [],
                                                                 "Minutes; i.e. '00' to '59'"),
                                                                ('P',
                                                                 [],
                                                                 "\n        Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off\n        if they're zero and the strings 'midnight' and 'noon' if appropriate.\n        Examples: '1 a.m.', '1:30 p.m.', 'midnight', 'noon', '12:30 p.m.'\n        Proprietary extension.\n        "),
                                                                ('s',
                                                                 [],
                                                                 "Seconds; i.e. '00' to '59'"),
                                                                ('u', [], 'Microseconds')],
                                                    'properties': ['data']},
             'django.utils.datetime_safe.date': {'bases': ['datetime.date'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('strftime', ['fmt'], '')],
                                                 'properties': []},
             'django.utils.datetime_safe.datetime': {'bases': ['datetime.datetime'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('strftime', ['fmt'], ''),
                                                                 ('combine',
                                                                  ['date', 'time'],
                                                                  ''),
                                                                 ('date', [], '')],
                                                     'properties': []},
             'django.utils.decorators.classonlymethod': {'bases': ['classmethod'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('__get__',
                                                                      ['instance', 'owner'],
                                                                      '')],
                                                         'properties': []},
             'django.utils.dictconfig.BaseConfigurator': {'bases': ['object'],
                                                          'constructor': ['config'],
                                                          'docstring': '\n    The configurator base class which defines some useful defaults.\n    ',
                                                          'methods': [('resolve',
                                                                       ['s'],
                                                                       '\n        Resolve strings to objects using standard import and attribute\n        syntax.\n        '),
                                                                      ('ext_convert',
                                                                       ['value'],
                                                                       'Default converter for the ext:// protocol.'),
                                                                      ('cfg_convert',
                                                                       ['value'],
                                                                       'Default converter for the cfg:// protocol.'),
                                                                      ('convert',
                                                                       ['value'],
                                                                       '\n        Convert values to an appropriate type. dicts, lists and tuples are\n        replaced by their converting alternatives. Strings are checked to\n        see if they have a conversion format and are converted if they do.\n        '),
                                                                      ('configure_custom',
                                                                       ['config'],
                                                                       'Configure an object with a user-supplied factory.'),
                                                                      ('as_tuple',
                                                                       ['value'],
                                                                       'Utility function which converts lists to tuples.')],
                                                          'properties': ['CONVERT_PATTERN',
                                                                         'WORD_PATTERN',
                                                                         'DOT_PATTERN',
                                                                         'INDEX_PATTERN',
                                                                         'DIGIT_PATTERN',
                                                                         'value_converters',
                                                                         'importer',
                                                                         'config']},
             'django.utils.dictconfig.ConvertingDict': {'bases': ['dict'],
                                                        'constructor': [],
                                                        'docstring': 'A converting dictionary wrapper.',
                                                        'methods': [('__getitem__',
                                                                     ['key'],
                                                                     ''),
                                                                    ('get',
                                                                     ['key', 'default=None'],
                                                                     ''),
                                                                    ('pop',
                                                                     ['key', 'default=None'],
                                                                     '')],
                                                        'properties': []},
             'django.utils.dictconfig.ConvertingList': {'bases': ['list'],
                                                        'constructor': [],
                                                        'docstring': 'A converting list wrapper.',
                                                        'methods': [('__getitem__',
                                                                     ['key'],
                                                                     ''),
                                                                    ('pop', ['idx=-1'], '')],
                                                        'properties': []},
             'django.utils.dictconfig.ConvertingTuple': {'bases': ['tuple'],
                                                         'constructor': [],
                                                         'docstring': 'A converting tuple wrapper.',
                                                         'methods': [('__getitem__',
                                                                      ['key'],
                                                                      '')],
                                                         'properties': []},
             'django.utils.dictconfig.DictConfigurator': {'bases': ['django.utils.dictconfig.BaseConfigurator'],
                                                          'constructor': [],
                                                          'docstring': '\n    Configure logging using a dictionary-like object to describe the\n    configuration.\n    ',
                                                          'methods': [('configure',
                                                                       [],
                                                                       'Do the configuration.'),
                                                                      ('configure_formatter',
                                                                       ['config'],
                                                                       'Configure a formatter from a dictionary.'),
                                                                      ('configure_filter',
                                                                       ['config'],
                                                                       'Configure a filter from a dictionary.'),
                                                                      ('add_filters',
                                                                       ['filterer', 'filters'],
                                                                       'Add filters to a filterer from a list of names.'),
                                                                      ('configure_handler',
                                                                       ['config'],
                                                                       'Configure a handler from a dictionary.'),
                                                                      ('add_handlers',
                                                                       ['logger', 'handlers'],
                                                                       'Add handlers to a logger from a list of names.'),
                                                                      ('common_logger_config',
                                                                       ['logger',
                                                                        'config',
                                                                        'incremental=False'],
                                                                       '\n        Perform configuration which is common to root and non-root loggers.\n        '),
                                                                      ('configure_logger',
                                                                       ['name',
                                                                        'config',
                                                                        'incremental=False'],
                                                                       'Configure a non-root logger from a dictionary.'),
                                                                      ('configure_root',
                                                                       ['config',
                                                                        'incremental=False'],
                                                                       'Configure a root logger from a dictionary.')],
                                                          'properties': []},
             'django.utils.encoding.DjangoUnicodeDecodeError': {'bases': ['UnicodeDecodeError'],
                                                                'constructor': ['obj', '*args'],
                                                                'docstring': '',
                                                                'methods': [('__str__', [], '')],
                                                                'properties': ['obj']},
             'django.utils.encoding.StrAndUnicode': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': '\n    A class whose __str__ returns its __unicode__ as a UTF-8 bytestring.\n\n    Useful as a mix-in.\n    ',
                                                     'methods': [('__str__', [], '')],
                                                     'properties': []},
             'django.utils.feedgenerator.Atom1Feed': {'bases': ['django.utils.feedgenerator.SyndicationFeed'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('write',
                                                                   ['outfile', 'encoding'],
                                                                   ''),
                                                                  ('root_attributes', [], ''),
                                                                  ('add_root_elements',
                                                                   ['handler'],
                                                                   ''),
                                                                  ('write_items',
                                                                   ['handler'],
                                                                   ''),
                                                                  ('add_item_elements',
                                                                   ['handler', 'item'],
                                                                   '')],
                                                      'properties': ['mime_type', 'ns']},
             'django.utils.feedgenerator.Enclosure': {'bases': ['object'],
                                                      'constructor': ['url',
                                                                      'length',
                                                                      'mime_type'],
                                                      'docstring': 'Represents an RSS enclosure',
                                                      'methods': [],
                                                      'properties': ['length',
                                                                     'mime_type',
                                                                     'url']},
             'django.utils.feedgenerator.Rss201rev2Feed': {'bases': ['django.utils.feedgenerator.RssFeed'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('add_item_elements',
                                                                        ['handler', 'item'],
                                                                        '')],
                                                           'properties': ['_version']},
             'django.utils.feedgenerator.RssFeed': {'bases': ['django.utils.feedgenerator.SyndicationFeed'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('write',
                                                                 ['outfile', 'encoding'],
                                                                 ''),
                                                                ('rss_attributes', [], ''),
                                                                ('write_items',
                                                                 ['handler'],
                                                                 ''),
                                                                ('add_root_elements',
                                                                 ['handler'],
                                                                 ''),
                                                                ('endChannelElement',
                                                                 ['handler'],
                                                                 '')],
                                                    'properties': ['mime_type']},
             'django.utils.feedgenerator.RssUserland091Feed': {'bases': ['django.utils.feedgenerator.RssFeed'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('add_item_elements',
                                                                            ['handler',
                                                                             'item'],
                                                                            '')],
                                                               'properties': ['_version']},
             'django.utils.feedgenerator.SyndicationFeed': {'bases': ['object'],
                                                            'constructor': ['title',
                                                                            'link',
                                                                            'description',
                                                                            'language=None',
                                                                            'author_email=None',
                                                                            'author_name=None',
                                                                            'author_link=None',
                                                                            'subtitle=None',
                                                                            'categories=None',
                                                                            'feed_url=None',
                                                                            'feed_copyright=None',
                                                                            'feed_guid=None',
                                                                            'ttl=None',
                                                                            '**kwargs'],
                                                            'docstring': 'Base class for all syndication feeds. Subclasses should provide write()',
                                                            'methods': [('add_item',
                                                                         ['title',
                                                                          'link',
                                                                          'description',
                                                                          'author_email=None',
                                                                          'author_name=None',
                                                                          'author_link=None',
                                                                          'pubdate=None',
                                                                          'comments=None',
                                                                          'unique_id=None',
                                                                          'enclosure=None',
                                                                          'categories=()',
                                                                          'item_copyright=None',
                                                                          'ttl=None',
                                                                          '**kwargs'],
                                                                         '\n        Adds an item to the feed. All args are expected to be Python Unicode\n        objects except pubdate, which is a datetime.datetime object, and\n        enclosure, which is an instance of the Enclosure class.\n        '),
                                                                        ('num_items', [], ''),
                                                                        ('root_attributes',
                                                                         [],
                                                                         '\n        Return extra attributes to place on the root (i.e. feed/channel) element.\n        Called from write().\n        '),
                                                                        ('add_root_elements',
                                                                         ['handler'],
                                                                         '\n        Add elements in the root (i.e. feed/channel) element. Called\n        from write().\n        '),
                                                                        ('item_attributes',
                                                                         ['item'],
                                                                         '\n        Return extra attributes to place on each item (i.e. item/entry) element.\n        '),
                                                                        ('add_item_elements',
                                                                         ['handler', 'item'],
                                                                         '\n        Add elements on each item (i.e. item/entry) element.\n        '),
                                                                        ('write',
                                                                         ['outfile',
                                                                          'encoding'],
                                                                         '\n        Outputs the feed in the given encoding to outfile, which is a file-like\n        object. Subclasses should override this.\n        '),
                                                                        ('writeString',
                                                                         ['encoding'],
                                                                         '\n        Returns the feed in the given encoding as a string.\n        '),
                                                                        ('latest_post_date',
                                                                         [],
                                                                         "\n        Returns the latest item's pubdate. If none of them have a pubdate,\n        this returns the current date/time.\n        ")],
                                                            'properties': ['feed', 'items']},
             'django.utils.functional.LazyObject': {'bases': ['object'],
                                                    'constructor': [],
                                                    'docstring': "\n    A wrapper for another class that can be used to delay instantiation of the\n    wrapped class.\n\n    By subclassing, you have the opportunity to intercept and alter the\n    instantiation. If you don't need to do that, use SimpleLazyObject.\n    ",
                                                    'methods': [('__getattr__', ['name'], ''),
                                                                ('__setattr__',
                                                                 ['name', 'value'],
                                                                 ''),
                                                                ('__delattr__', ['name'], ''),
                                                                ('_setup',
                                                                 [],
                                                                 '\n        Must be implemented by subclasses to initialise the wrapped object.\n        '),
                                                                ('__dir__', [], '')],
                                                    'properties': ['_wrapped', '__members__']},
             'django.utils.functional.Promise': {'bases': ['object'],
                                                 'constructor': [],
                                                 'docstring': '\n    This is just a base class for the proxy class created in\n    the closure of the lazy function. It can be used to recognize\n    promises in code.\n    ',
                                                 'methods': [],
                                                 'properties': []},
             'django.utils.functional.SimpleLazyObject': {'bases': ['django.utils.functional.LazyObject'],
                                                          'constructor': ['func'],
                                                          'docstring': '\n    A lazy object initialised from any function.\n\n    Designed for compound objects of unknown type. For builtins or objects of\n    known type, use django.utils.functional.lazy.\n    ',
                                                          'methods': [('__str__', [], ''),
                                                                      ('__unicode__', [], ''),
                                                                      ('__deepcopy__',
                                                                       ['memo'],
                                                                       ''),
                                                                      ('__get_class', [], ''),
                                                                      ('__eq__', ['other'], ''),
                                                                      ('__hash__', [], ''),
                                                                      ('_setup', [], '')],
                                                          'properties': ['_wrapped',
                                                                         '__class__']},
             'django.utils.log.AdminEmailHandler': {'bases': ['logging.Handler'],
                                                    'constructor': ['include_html=False'],
                                                    'docstring': '',
                                                    'methods': [('emit', ['record'], '')],
                                                    'properties': ['include_html']},
             'django.utils.log.LoggerCompat': {'bases': ['object'],
                                               'constructor': ['logger'],
                                               'docstring': '',
                                               'methods': [('__getattr__', ['name'], '')],
                                               'properties': ['_logger']},
             'django.utils.log.NullHandler': {'bases': ['logging.Handler'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('emit', ['record'], '')],
                                              'properties': []},
             'django.utils.regex_helper.Choice': {'bases': ['list'],
                                                  'constructor': [],
                                                  'docstring': '\n    Used to represent multiple possibilities at this point in a pattern string.\n    We use a distinguished type, rather than a list, so that the usage in the\n    code is clear.\n    ',
                                                  'methods': [],
                                                  'properties': []},
             'django.utils.regex_helper.Group': {'bases': ['list'],
                                                 'constructor': [],
                                                 'docstring': '\n    Used to represent a capturing group in the pattern string.\n    ',
                                                 'methods': [],
                                                 'properties': []},
             'django.utils.regex_helper.NonCapture': {'bases': ['list'],
                                                      'constructor': [],
                                                      'docstring': '\n    Used to represent a non-capturing group in the pattern string.\n    ',
                                                      'methods': [],
                                                      'properties': []},
             'django.utils.safestring.EscapeData': {'bases': ['object'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'django.utils.safestring.EscapeString': {'bases': ['str',
                                                                'django.utils.safestring.EscapeData'],
                                                      'constructor': [],
                                                      'docstring': '\n    A string that should be HTML-escaped when output.\n    ',
                                                      'methods': [],
                                                      'properties': []},
             'django.utils.safestring.EscapeUnicode': {'bases': ['unicode',
                                                                 'django.utils.safestring.EscapeData'],
                                                       'constructor': [],
                                                       'docstring': '\n    A unicode object that should be HTML-escaped when output.\n    ',
                                                       'methods': [],
                                                       'properties': []},
             'django.utils.safestring.SafeData': {'bases': ['object'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'django.utils.safestring.SafeString': {'bases': ['str',
                                                              'django.utils.safestring.SafeData'],
                                                    'constructor': [],
                                                    'docstring': '\n    A string subclass that has been specifically marked as "safe" (requires no\n    further escaping) for HTML output purposes.\n    ',
                                                    'methods': [('__add__',
                                                                 ['rhs'],
                                                                 '\n        Concatenating a safe string with another safe string or safe unicode\n        object is safe. Otherwise, the result is no longer safe.\n        '),
                                                                ('_proxy_method',
                                                                 ['*args', '**kwargs'],
                                                                 "\n        Wrap a call to a normal unicode method up so that we return safe\n        results. The method that is being wrapped is passed in the 'method'\n        argument.\n        ")],
                                                    'properties': ['decode']},
             'django.utils.safestring.SafeUnicode': {'bases': ['unicode',
                                                               'django.utils.safestring.SafeData'],
                                                     'constructor': [],
                                                     'docstring': '\n    A unicode subclass that has been specifically marked as "safe" for HTML\n    output purposes.\n    ',
                                                     'methods': [('__add__',
                                                                  ['rhs'],
                                                                  '\n        Concatenating a safe unicode object with another safe string or safe\n        unicode object is safe. Otherwise, the result is no longer safe.\n        '),
                                                                 ('_proxy_method',
                                                                  ['*args', '**kwargs'],
                                                                  "\n        Wrap a call to a normal unicode method up so that we return safe\n        results. The method that is being wrapped is passed in the 'method'\n        argument.\n        ")],
                                                     'properties': ['encode']},
             'django.utils.simplejson.decoder.JSONDecoder': {'bases': ['object'],
                                                             'constructor': ['encoding=None',
                                                                             'object_hook=None',
                                                                             'parse_float=None',
                                                                             'parse_int=None',
                                                                             'parse_constant=None',
                                                                             'strict=True'],
                                                             'docstring': 'Simple JSON <http://json.org> decoder\n\n    Performs the following translations in decoding by default:\n\n    +---------------+-------------------+\n    | JSON          | Python            |\n    +===============+===================+\n    | object        | dict              |\n    +---------------+-------------------+\n    | array         | list              |\n    +---------------+-------------------+\n    | string        | unicode           |\n    +---------------+-------------------+\n    | number (int)  | int, long         |\n    +---------------+-------------------+\n    | number (real) | float             |\n    +---------------+-------------------+\n    | true          | True              |\n    +---------------+-------------------+\n    | false         | False             |\n    +---------------+-------------------+\n    | null          | None              |\n    +---------------+-------------------+\n\n    It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as\n    their corresponding ``float`` values, which is outside the JSON spec.\n\n    ',
                                                             'methods': [('decode',
                                                                          ['s',
                                                                           '_w=WHITESPACE.match'],
                                                                          'Return the Python representation of ``s`` (a ``str`` or ``unicode``\n        instance containing a JSON document)\n\n        '),
                                                                         ('raw_decode',
                                                                          ['s', 'idx=0'],
                                                                          'Decode a JSON document from ``s`` (a ``str`` or ``unicode`` beginning\n        with a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n\n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n\n        ')],
                                                             'properties': ['encoding',
                                                                            'object_hook',
                                                                            'parse_float',
                                                                            'parse_int',
                                                                            'parse_constant',
                                                                            'strict',
                                                                            'parse_object',
                                                                            'parse_array',
                                                                            'parse_string',
                                                                            'scan_once']},
             'django.utils.simplejson.encoder.JSONEncoder': {'bases': ['object'],
                                                             'constructor': ['skipkeys=False',
                                                                             'ensure_ascii=True',
                                                                             'check_circular=True',
                                                                             'allow_nan=True',
                                                                             'sort_keys=False',
                                                                             'indent=None',
                                                                             'separators=None',
                                                                             "encoding='utf-8'",
                                                                             'default=None'],
                                                             'docstring': 'Extensible JSON <http://json.org> encoder for Python data structures.\n\n    Supports the following objects and types by default:\n\n    +-------------------+---------------+\n    | Python            | JSON          |\n    +===================+===============+\n    | dict              | object        |\n    +-------------------+---------------+\n    | list, tuple       | array         |\n    +-------------------+---------------+\n    | str, unicode      | string        |\n    +-------------------+---------------+\n    | int, long, float  | number        |\n    +-------------------+---------------+\n    | True              | true          |\n    +-------------------+---------------+\n    | False             | false         |\n    +-------------------+---------------+\n    | None              | null          |\n    +-------------------+---------------+\n\n    To extend this to recognize other objects, subclass and implement a\n    ``.default()`` method with another method that returns a serializable\n    object for ``o`` if possible, otherwise it should call the superclass\n    implementation (to raise ``TypeError``).\n\n    ',
                                                             'methods': [('default',
                                                                          ['o'],
                                                                          'Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n\n        For example, to support arbitrary iterators, you could\n        implement default like this::\n\n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                return JSONEncoder.default(self, o)\n\n        '),
                                                                         ('encode',
                                                                          ['o'],
                                                                          'Return a JSON string representation of a Python data structure.\n\n        >>> JSONEncoder().encode({"foo": ["bar", "baz"]})\n        \'{"foo": ["bar", "baz"]}\'\n\n        '),
                                                                         ('iterencode',
                                                                          ['o',
                                                                           '_one_shot=False'],
                                                                          'Encode the given object and yield each string\n        representation as available.\n\n        For example::\n\n            for chunk in JSONEncoder().iterencode(bigobject):\n                mysocket.write(chunk)\n\n        ')],
                                                             'properties': ['item_separator',
                                                                            'key_separator',
                                                                            'skipkeys',
                                                                            'ensure_ascii',
                                                                            'check_circular',
                                                                            'allow_nan',
                                                                            'sort_keys',
                                                                            'indent',
                                                                            'default',
                                                                            'encoding']},
             'django.utils.synch.RWLock': {'bases': [],
                                           'constructor': [],
                                           'docstring': '\n    Classic implementation of reader-writer lock with preference to writers.\n\n    Readers can access a resource simultaneously.\n    Writers get an exclusive access.\n\n    API is self-descriptive:\n        reader_enters()\n        reader_leaves()\n        writer_enters()\n        writer_leaves()\n    ',
                                           'methods': [('reader_enters', [], ''),
                                                       ('reader_leaves', [], ''),
                                                       ('writer_enters', [], ''),
                                                       ('writer_leaves', [], '')],
                                           'properties': ['mutex',
                                                          'can_read',
                                                          'can_write',
                                                          'active_readers',
                                                          'active_writers',
                                                          'waiting_readers',
                                                          'waiting_writers']},
             'django.utils.translation.Trans': {'bases': ['object'],
                                                'constructor': [],
                                                'docstring': '\n    The purpose of this class is to store the actual translation function upon\n    receiving the first call to that function. After this is done, changes to\n    USE_I18N will have no effect to which function is served upon request. If\n    your tests rely on changing USE_I18N, you can delete all the functions\n    from _trans.__dict__.\n\n    Note that storing the function with setattr will have a noticeable\n    performance effect, as access to the function goes the normal path,\n    instead of using __getattr__.\n    ',
                                                'methods': [('__getattr__', ['real_name'], '')],
                                                'properties': []},
             'django.utils.translation.trans_real.DjangoTranslation': {'bases': ['gettext.GNUTranslations'],
                                                                       'constructor': ['*args',
                                                                                       '**kw'],
                                                                       'docstring': '\n    This class sets up the GNUTranslations context with regard to output\n    charset. Django uses a defined DEFAULT_CHARSET as the output charset on\n    Python 2.4.\n    ',
                                                                       'methods': [('merge',
                                                                                    ['other'],
                                                                                    ''),
                                                                                   ('set_language',
                                                                                    ['language'],
                                                                                    ''),
                                                                                   ('language',
                                                                                    [],
                                                                                    ''),
                                                                                   ('to_language',
                                                                                    [],
                                                                                    ''),
                                                                                   ('__repr__',
                                                                                    [],
                                                                                    '')],
                                                                       'properties': ['django_output_charset',
                                                                                      '__language',
                                                                                      '__to_language']},
             'django.utils.tree.Node': {'bases': ['object'],
                                        'constructor': ['children=None',
                                                        'connector=None',
                                                        'negated=False'],
                                        'docstring': '\n    A single internal node in the tree graph. A Node should be viewed as a\n    connection (the root) with the children being either leaf nodes or other\n    Node instances.\n    ',
                                        'methods': [('_new_instance',
                                                     ['children=None',
                                                      'connector=None',
                                                      'negated=False'],
                                                     '\n        This is called to create a new instance of this class when we need new\n        Nodes (or subclasses) in the internal code in this class. Normally, it\n        just shadows __init__(). However, subclasses with an __init__ signature\n        that is not an extension of Node.__init__ might need to implement this\n        method to allow a Node to create a new instance of them (if they have\n        any extra setting up to do).\n        '),
                                                    ('__str__', [], ''),
                                                    ('__deepcopy__',
                                                     ['memodict'],
                                                     '\n        Utility method used by copy.deepcopy().\n        '),
                                                    ('__len__',
                                                     [],
                                                     '\n        The size of a node if the number of children it has.\n        '),
                                                    ('__nonzero__',
                                                     [],
                                                     '\n        For truth value testing.\n        '),
                                                    ('__contains__',
                                                     ['other'],
                                                     "\n        Returns True is 'other' is a direct child of this instance.\n        "),
                                                    ('add',
                                                     ['node', 'conn_type'],
                                                     "\n        Adds a new node to the tree. If the conn_type is the same as the root's\n        current connector type, the node is added to the first level.\n        Otherwise, the whole tree is pushed down one level and a new root\n        connector is created, connecting the existing tree and the new node.\n        "),
                                                    ('negate',
                                                     [],
                                                     '\n        Negate the sense of the root connector. This reorganises the children\n        so that the current node has a single child: a negated node containing\n        all the previous children. This slightly odd construction makes adding\n        new children behave more intuitively.\n\n        Interpreting the meaning of this negate is up to client code. This\n        method is useful for implementing "not" arrangements.\n        '),
                                                    ('start_subtree',
                                                     ['conn_type'],
                                                     '\n        Sets up internal state so that new nodes are added to a subtree of the\n        current node. The conn_type specifies how the sub-tree is joined to the\n        existing children.\n        '),
                                                    ('end_subtree',
                                                     [],
                                                     '\n        Closes off the most recently unmatched start_subtree() call.\n\n        This puts the current state into a node of the parent tree and returns\n        the current instances state to be the parent.\n        ')],
                                        'properties': ['default',
                                                       'children',
                                                       'connector',
                                                       'subtree_parents',
                                                       'negated',
                                                       '_new_instance']},
             'django.utils.tzinfo.FixedOffset': {'bases': ['datetime.tzinfo'],
                                                 'constructor': ['offset'],
                                                 'docstring': 'Fixed offset in minutes east from UTC.',
                                                 'methods': [('__repr__', [], ''),
                                                             ('utcoffset', ['dt'], ''),
                                                             ('tzname', ['dt'], ''),
                                                             ('dst', ['dt'], '')],
                                                 'properties': ['__offset', '__name']},
             'django.utils.tzinfo.LocalTimezone': {'bases': ['datetime.tzinfo'],
                                                   'constructor': ['dt'],
                                                   'docstring': 'Proxy timezone information from time module.',
                                                   'methods': [('__repr__', [], ''),
                                                               ('utcoffset', ['dt'], ''),
                                                               ('dst', ['dt'], ''),
                                                               ('tzname', ['dt'], ''),
                                                               ('_isdst', ['dt'], '')],
                                                   'properties': ['_tzname']},
             'django.utils.unittest.case.FunctionTestCase': {'bases': ['django.utils.unittest.case.TestCase'],
                                                             'constructor': ['testFunc',
                                                                             'setUp=None',
                                                                             'tearDown=None',
                                                                             'description=None'],
                                                             'docstring': "A test case that wraps a test function.\n\n    This is useful for slipping pre-existing test functions into the\n    unittest framework. Optionally, set-up and tidy-up functions can be\n    supplied. As with TestCase, the tidy-up ('tearDown') function will\n    always be called if the set-up ('setUp') function ran successfully.\n    ",
                                                             'methods': [('setUp', [], ''),
                                                                         ('tearDown', [], ''),
                                                                         ('runTest', [], ''),
                                                                         ('id', [], ''),
                                                                         ('__eq__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__ne__',
                                                                          ['other'],
                                                                          ''),
                                                                         ('__hash__', [], ''),
                                                                         ('__str__', [], ''),
                                                                         ('__repr__', [], ''),
                                                                         ('shortDescription',
                                                                          [],
                                                                          '')],
                                                             'properties': ['_setUpFunc',
                                                                            '_tearDownFunc',
                                                                            '_testFunc',
                                                                            '_description']},
             'django.utils.unittest.case.SkipTest': {'bases': ['Exception'],
                                                     'constructor': [],
                                                     'docstring': '\n    Raise this exception in a test to skip it.\n\n    Usually you can use TestResult.skip() or one of the skipping decorators\n    instead of raising this directly.\n    ',
                                                     'methods': [],
                                                     'properties': []},
             'django.utils.unittest.case.TestCase': {'bases': ['unittest.TestCase'],
                                                     'constructor': ["methodName='runTest'"],
                                                     'docstring': "A class whose instances are single test cases.\n\n    By default, the test code itself should be placed in a method named\n    'runTest'.\n\n    If the fixture may be used for many test cases, create as\n    many test methods as are needed. When instantiating such a TestCase\n    subclass, specify in the constructor arguments the name of the test method\n    that the instance is to execute.\n\n    Test authors should subclass TestCase for their own tests. Construction\n    and deconstruction of the test's environment ('fixture') can be\n    implemented by overriding the 'setUp' and 'tearDown' methods respectively.\n\n    If it is necessary to override the __init__ method, the base class\n    __init__ method must always be called. It is important that subclasses\n    should not change the signature of their __init__ method, since instances\n    of the classes are instantiated automatically by parts of the framework\n    in order to be run.\n    ",
                                                     'methods': [('addTypeEqualityFunc',
                                                                  ['typeobj', 'function'],
                                                                  'Add a type specific assertEqual style function to compare a type.\n\n        This method is for use by TestCase subclasses that need to register\n        their own type equality functions to provide nicer error messages.\n\n        Args:\n            typeobj: The data type to call this function on when both values\n                    are of the same type in assertEqual().\n            function: The callable taking two arguments and an optional\n                    msg= argument that raises self.failureException with a\n                    useful error message when the two arguments are not equal.\n        '),
                                                                 ('addCleanup',
                                                                  ['function',
                                                                   '*args',
                                                                   '**kwargs'],
                                                                  'Add a function, with arguments, to be called when the test is\n        completed. Functions added are called on a LIFO basis and are\n        called after tearDown on test failure or success.\n\n        Cleanup items are called even if setUp fails (unlike tearDown).'),
                                                                 ('setUp',
                                                                  [],
                                                                  'Hook method for setting up the test fixture before exercising it.'),
                                                                 ('setUpClass',
                                                                  [],
                                                                  'Hook method for setting up class fixture before running tests in the class.'),
                                                                 ('tearDownClass',
                                                                  [],
                                                                  'Hook method for deconstructing the class fixture after running all tests in the class.'),
                                                                 ('tearDown',
                                                                  [],
                                                                  'Hook method for deconstructing the test fixture after testing it.'),
                                                                 ('countTestCases', [], ''),
                                                                 ('defaultTestResult', [], ''),
                                                                 ('shortDescription',
                                                                  [],
                                                                  "Returns a one-line description of the test, or None if no\n        description has been provided.\n\n        The default implementation of this method returns the first line of\n        the specified test method's docstring.\n        "),
                                                                 ('id', [], ''),
                                                                 ('__eq__', ['other'], ''),
                                                                 ('__ne__', ['other'], ''),
                                                                 ('__hash__', [], ''),
                                                                 ('__str__', [], ''),
                                                                 ('__repr__', [], ''),
                                                                 ('_addSkip',
                                                                  ['result', 'reason'],
                                                                  ''),
                                                                 ('run', ['result=None'], ''),
                                                                 ('doCleanups',
                                                                  [],
                                                                  'Execute all cleanup functions. Normally called for you after\n        tearDown.'),
                                                                 ('__call__',
                                                                  ['*args', '**kwds'],
                                                                  ''),
                                                                 ('debug',
                                                                  [],
                                                                  'Run the test without collecting errors in a TestResult'),
                                                                 ('skipTest',
                                                                  ['reason'],
                                                                  'Skip this test.'),
                                                                 ('fail',
                                                                  ['msg=None'],
                                                                  'Fail immediately, with the given message.'),
                                                                 ('assertFalse',
                                                                  ['expr', 'msg=None'],
                                                                  'Fail the test if the expression is true.'),
                                                                 ('assertTrue',
                                                                  ['expr', 'msg=None'],
                                                                  'Fail the test unless the expression is true.'),
                                                                 ('_formatMessage',
                                                                  ['msg', 'standardMsg'],
                                                                  "Honour the longMessage attribute when generating failure messages.\n        If longMessage is False this means:\n        * Use only an explicit message if it is provided\n        * Otherwise use the standard message for the assert\n\n        If longMessage is True:\n        * Use the standard message\n        * If an explicit message is provided, plus ' : ' and the explicit message\n        "),
                                                                 ('assertRaises',
                                                                  ['excClass',
                                                                   'callableObj=None',
                                                                   '*args',
                                                                   '**kwargs'],
                                                                  "Fail unless an exception of class excClass is thrown\n           by callableObj when invoked with arguments args and keyword\n           arguments kwargs. If a different type of exception is\n           thrown, it will not be caught, and the test case will be\n           deemed to have suffered an error, exactly as for an\n           unexpected exception.\n\n           If called with callableObj omitted or None, will return a\n           context object used like this::\n\n                with self.assertRaises(SomeException):\n                    do_something()\n\n           The context manager keeps a reference to the exception as\n           the 'exception' attribute. This allows you to inspect the\n           exception after the assertion::\n\n               with self.assertRaises(SomeException) as cm:\n                   do_something()\n               the_exception = cm.exception\n               self.assertEqual(the_exception.error_code, 3)\n        "),
                                                                 ('_getAssertEqualityFunc',
                                                                  ['first', 'second'],
                                                                  'Get a detailed comparison function for the types of the two args.\n\n        Returns: A callable accepting (first, second, msg=None) that will\n        raise a failure exception if first != second with a useful human\n        readable error message for those types.\n        '),
                                                                 ('_baseAssertEqual',
                                                                  ['first',
                                                                   'second',
                                                                   'msg=None'],
                                                                  'The default assertEqual implementation, not type specific.'),
                                                                 ('assertEqual',
                                                                  ['first',
                                                                   'second',
                                                                   'msg=None'],
                                                                  "Fail if the two objects are unequal as determined by the '=='\n           operator.\n        "),
                                                                 ('assertNotEqual',
                                                                  ['first',
                                                                   'second',
                                                                   'msg=None'],
                                                                  "Fail if the two objects are equal as determined by the '=='\n           operator.\n        "),
                                                                 ('assertAlmostEqual',
                                                                  ['first',
                                                                   'second',
                                                                   'places=None',
                                                                   'msg=None',
                                                                   'delta=None'],
                                                                  'Fail if the two objects are unequal as determined by their\n           difference rounded to the given number of decimal places\n           (default 7) and comparing to zero, or by comparing that the\n           between the two objects is more than the given delta.\n\n           Note that decimal places (from zero) are usually not the same\n           as significant digits (measured from the most signficant digit).\n\n           If the two objects compare equal then they will automatically\n           compare almost equal.\n        '),
                                                                 ('assertNotAlmostEqual',
                                                                  ['first',
                                                                   'second',
                                                                   'places=None',
                                                                   'msg=None',
                                                                   'delta=None'],
                                                                  'Fail if the two objects are equal as determined by their\n           difference rounded to the given number of decimal places\n           (default 7) and comparing to zero, or by comparing that the\n           between the two objects is less than the given delta.\n\n           Note that decimal places (from zero) are usually not the same\n           as significant digits (measured from the most signficant digit).\n\n           Objects that are equal automatically fail.\n        '),
                                                                 ('_deprecate', [], ''),
                                                                 ('assertSequenceEqual',
                                                                  ['seq1',
                                                                   'seq2',
                                                                   'msg=None',
                                                                   'seq_type=None',
                                                                   'max_diff=80*8'],
                                                                  'An equality assertion for ordered sequences (like lists and tuples).\n\n        For the purposes of this function, a valid ordered sequence type is one\n        which can be indexed, has a length, and has an equality operator.\n\n        Args:\n            seq1: The first sequence to compare.\n            seq2: The second sequence to compare.\n            seq_type: The expected datatype of the sequences, or None if no\n                    datatype should be enforced.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n            max_diff: Maximum size off the diff, larger diffs are not shown\n        '),
                                                                 ('_truncateMessage',
                                                                  ['message', 'diff'],
                                                                  ''),
                                                                 ('assertListEqual',
                                                                  ['list1',
                                                                   'list2',
                                                                   'msg=None'],
                                                                  'A list-specific equality assertion.\n\n        Args:\n            list1: The first list to compare.\n            list2: The second list to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n\n        '),
                                                                 ('assertTupleEqual',
                                                                  ['tuple1',
                                                                   'tuple2',
                                                                   'msg=None'],
                                                                  'A tuple-specific equality assertion.\n\n        Args:\n            tuple1: The first tuple to compare.\n            tuple2: The second tuple to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n        '),
                                                                 ('assertSetEqual',
                                                                  ['set1', 'set2', 'msg=None'],
                                                                  'A set-specific equality assertion.\n\n        Args:\n            set1: The first set to compare.\n            set2: The second set to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n\n        assertSetEqual uses ducktyping to support\n        different types of sets, and is optimized for sets specifically\n        (parameters must support a difference method).\n        '),
                                                                 ('assertIn',
                                                                  ['member',
                                                                   'container',
                                                                   'msg=None'],
                                                                  'Just like self.assertTrue(a in b), but with a nicer default message.'),
                                                                 ('assertNotIn',
                                                                  ['member',
                                                                   'container',
                                                                   'msg=None'],
                                                                  'Just like self.assertTrue(a not in b), but with a nicer default message.'),
                                                                 ('assertIs',
                                                                  ['expr1',
                                                                   'expr2',
                                                                   'msg=None'],
                                                                  'Just like self.assertTrue(a is b), but with a nicer default message.'),
                                                                 ('assertIsNot',
                                                                  ['expr1',
                                                                   'expr2',
                                                                   'msg=None'],
                                                                  'Just like self.assertTrue(a is not b), but with a nicer default message.'),
                                                                 ('assertDictEqual',
                                                                  ['d1', 'd2', 'msg=None'],
                                                                  ''),
                                                                 ('assertDictContainsSubset',
                                                                  ['expected',
                                                                   'actual',
                                                                   'msg=None'],
                                                                  'Checks whether actual is a superset of expected.'),
                                                                 ('assertItemsEqual',
                                                                  ['expected_seq',
                                                                   'actual_seq',
                                                                   'msg=None'],
                                                                  'An unordered sequence specific comparison. It asserts that\n        expected_seq and actual_seq contain the same elements. It is\n        the equivalent of::\n\n            self.assertEqual(sorted(expected_seq), sorted(actual_seq))\n\n        Raises with an error message listing which elements of expected_seq\n        are missing from actual_seq and vice versa if any.\n\n        Asserts that each element has the same count in both sequences.\n        Example:\n            - [0, 1, 1] and [1, 0, 1] compare equal.\n            - [0, 0, 1] and [0, 1] compare unequal.\n        '),
                                                                 ('assertMultiLineEqual',
                                                                  ['first',
                                                                   'second',
                                                                   'msg=None'],
                                                                  'Assert that two multi-line strings are equal.'),
                                                                 ('assertLess',
                                                                  ['a', 'b', 'msg=None'],
                                                                  'Just like self.assertTrue(a < b), but with a nicer default message.'),
                                                                 ('assertLessEqual',
                                                                  ['a', 'b', 'msg=None'],
                                                                  'Just like self.assertTrue(a <= b), but with a nicer default message.'),
                                                                 ('assertGreater',
                                                                  ['a', 'b', 'msg=None'],
                                                                  'Just like self.assertTrue(a > b), but with a nicer default message.'),
                                                                 ('assertGreaterEqual',
                                                                  ['a', 'b', 'msg=None'],
                                                                  'Just like self.assertTrue(a >= b), but with a nicer default message.'),
                                                                 ('assertIsNone',
                                                                  ['obj', 'msg=None'],
                                                                  'Same as self.assertTrue(obj is None), with a nicer default message.'),
                                                                 ('assertIsNotNone',
                                                                  ['obj', 'msg=None'],
                                                                  'Included for symmetry with assertIsNone.'),
                                                                 ('assertIsInstance',
                                                                  ['obj', 'cls', 'msg=None'],
                                                                  'Same as self.assertTrue(isinstance(obj, cls)), with a nicer\n        default message.'),
                                                                 ('assertNotIsInstance',
                                                                  ['obj', 'cls', 'msg=None'],
                                                                  'Included for symmetry with assertIsInstance.'),
                                                                 ('assertRaisesRegexp',
                                                                  ['expected_exception',
                                                                   'expected_regexp',
                                                                   'callable_obj=None',
                                                                   '*args',
                                                                   '**kwargs'],
                                                                  'Asserts that the message in a raised exception matches a regexp.\n\n        Args:\n            expected_exception: Exception class expected to be raised.\n            expected_regexp: Regexp (re pattern object or string) expected\n                    to be found in error message.\n            callable_obj: Function to be called.\n            args: Extra args.\n            kwargs: Extra kwargs.\n        '),
                                                                 ('assertRegexpMatches',
                                                                  ['text',
                                                                   'expected_regexp',
                                                                   'msg=None'],
                                                                  'Fail the test unless the text matches the regular expression.'),
                                                                 ('assertNotRegexpMatches',
                                                                  ['text',
                                                                   'unexpected_regexp',
                                                                   'msg=None'],
                                                                  'Fail the test if the text matches the regular expression.')],
                                                     'properties': ['failureException',
                                                                    'maxDiff',
                                                                    'longMessage',
                                                                    '_classSetupFailed',
                                                                    '_testMethodName',
                                                                    '_resultForDoCleanups',
                                                                    '_testMethodDoc',
                                                                    '_cleanups',
                                                                    '_type_equality_funcs',
                                                                    'assertEquals',
                                                                    'assertNotEquals',
                                                                    'assertAlmostEquals',
                                                                    'assertNotAlmostEquals',
                                                                    'assert_',
                                                                    'failUnlessEqual',
                                                                    'failIfEqual',
                                                                    'failUnlessAlmostEqual',
                                                                    'failIfAlmostEqual',
                                                                    'failUnless',
                                                                    'failUnlessRaises',
                                                                    'failIf']},
             'django.utils.unittest.case._AssertRaisesContext': {'bases': ['object'],
                                                                 'constructor': ['expected',
                                                                                 'test_case',
                                                                                 'expected_regexp=None'],
                                                                 'docstring': 'A context manager used to implement TestCase.assertRaises* methods.',
                                                                 'methods': [('__enter__',
                                                                              [],
                                                                              ''),
                                                                             ('__exit__',
                                                                              ['exc_type',
                                                                               'exc_value',
                                                                               'tb'],
                                                                              '')],
                                                                 'properties': ['expected',
                                                                                'failureException',
                                                                                'expected_regexp',
                                                                                'exception']},
             'django.utils.unittest.case._ExpectedFailure': {'bases': ['Exception'],
                                                             'constructor': ['exc_info'],
                                                             'docstring': '\n    Raise this when a test is expected to fail.\n\n    This is an implementation detail.\n    ',
                                                             'methods': [],
                                                             'properties': ['exc_info']},
             'django.utils.unittest.case._TypeEqualityDict': {'bases': ['object'],
                                                              'constructor': ['testcase'],
                                                              'docstring': '',
                                                              'methods': [('__setitem__',
                                                                           ['key', 'value'],
                                                                           ''),
                                                                          ('__getitem__',
                                                                           ['key'],
                                                                           ''),
                                                                          ('get',
                                                                           ['key',
                                                                            'default=None'],
                                                                           '')],
                                                              'properties': ['testcase',
                                                                             '_store']},
             'django.utils.unittest.case._UnexpectedSuccess': {'bases': ['Exception'],
                                                               'constructor': [],
                                                               'docstring': "\n    The test was supposed to fail, but it didn't!\n    ",
                                                               'methods': [],
                                                               'properties': []},
             'django.utils.unittest.loader.TestLoader': {'bases': ['unittest.TestLoader'],
                                                         'constructor': [],
                                                         'docstring': '\n    This class is responsible for loading tests according to various criteria\n    and returning them wrapped in a TestSuite\n    ',
                                                         'methods': [('loadTestsFromTestCase',
                                                                      ['testCaseClass'],
                                                                      'Return a suite of all tests cases contained in testCaseClass'),
                                                                     ('loadTestsFromModule',
                                                                      ['module',
                                                                       'use_load_tests=True'],
                                                                      'Return a suite of all tests cases contained in the given module'),
                                                                     ('loadTestsFromName',
                                                                      ['name', 'module=None'],
                                                                      'Return a suite of all tests cases given a string specifier.\n\n        The name may resolve either to a module, a test case class, a\n        test method within a test case class, or a callable object which\n        returns a TestCase or TestSuite instance.\n\n        The method optionally resolves the names relative to a given module.\n        '),
                                                                     ('loadTestsFromNames',
                                                                      ['names', 'module=None'],
                                                                      "Return a suite of all tests cases found using the given sequence\n        of string specifiers. See 'loadTestsFromName()'.\n        "),
                                                                     ('getTestCaseNames',
                                                                      ['testCaseClass'],
                                                                      'Return a sorted sequence of method names found within testCaseClass\n        '),
                                                                     ('discover',
                                                                      ['start_dir',
                                                                       "pattern='test*.py'",
                                                                       'top_level_dir=None'],
                                                                      "Find and return all test modules from the specified start\n        directory, recursing into subdirectories to find them. Only test files\n        that match the pattern will be loaded. (Using shell style pattern\n        matching.)\n\n        All test modules must be importable from the top level of the project.\n        If the start directory is not the top level directory then the top\n        level directory must be specified separately.\n\n        If a test package name (directory with '__init__.py') matches the\n        pattern then the package will be checked for a 'load_tests' function. If\n        this exists then it will be called with loader, tests, pattern.\n\n        If load_tests exists then discovery does  *not* recurse into the package,\n        load_tests is responsible for loading all tests in the package.\n\n        The pattern is deliberately not stored as a loader attribute so that\n        packages can continue discovery themselves. top_level_dir is stored so\n        load_tests does not need to pass this argument in to loader.discover().\n        "),
                                                                     ('_get_name_from_path',
                                                                      ['path'],
                                                                      ''),
                                                                     ('_get_module_from_name',
                                                                      ['name'],
                                                                      ''),
                                                                     ('_match_path',
                                                                      ['path',
                                                                       'full_path',
                                                                       'pattern'],
                                                                      ''),
                                                                     ('_find_tests',
                                                                      ['start_dir', 'pattern'],
                                                                      'Used by discovery. Yields test suites it loads.')],
                                                         'properties': ['testMethodPrefix',
                                                                        'sortTestMethodsUsing',
                                                                        'suiteClass',
                                                                        '_top_level_dir']},
             'django.utils.unittest.main.TestProgram': {'bases': ['object'],
                                                        'constructor': ["module='__main__'",
                                                                        'defaultTest=None',
                                                                        'argv=None',
                                                                        'testRunner=None',
                                                                        'testLoader=loader.defaultTestLoader',
                                                                        'exit=True',
                                                                        'verbosity=1',
                                                                        'failfast=None',
                                                                        'catchbreak=None',
                                                                        'buffer=None'],
                                                        'docstring': 'A command-line program that runs a set of tests; this is primarily\n       for making test modules conveniently executable.\n    ',
                                                        'methods': [('usageExit',
                                                                     ['msg=None'],
                                                                     ''),
                                                                    ('parseArgs', ['argv'], ''),
                                                                    ('createTests', [], ''),
                                                                    ('_do_discovery',
                                                                     ['argv',
                                                                      'Loader=loader.TestLoader'],
                                                                     ''),
                                                                    ('runTests', [], '')],
                                                        'properties': ['USAGE',
                                                                       'failfast',
                                                                       'catchbreak',
                                                                       'buffer',
                                                                       'progName',
                                                                       'module',
                                                                       'exit',
                                                                       'verbosity',
                                                                       'defaultTest',
                                                                       'testRunner',
                                                                       'testLoader',
                                                                       'testNames',
                                                                       'test',
                                                                       'result']},
             'django.utils.unittest.result.TestResult': {'bases': ['unittest.TestResult'],
                                                         'constructor': [],
                                                         'docstring': 'Holder for test result information.\n\n    Test results are automatically managed by the TestCase and TestSuite\n    classes, and do not need to be explicitly manipulated by writers of tests.\n\n    Each instance holds the total number of tests run, and collections of\n    failures and errors that occurred among those test runs. The collections\n    contain tuples of (testcase, exceptioninfo), where exceptioninfo is the\n    formatted traceback of the error that occurred.\n    ',
                                                         'methods': [('startTest',
                                                                      ['test'],
                                                                      'Called when the given test is about to be run'),
                                                                     ('startTestRun',
                                                                      [],
                                                                      'Called once before any tests are executed.\n\n        See startTest for a method called before each test.\n        '),
                                                                     ('stopTest',
                                                                      ['test'],
                                                                      'Called when the given test has been run'),
                                                                     ('stopTestRun',
                                                                      [],
                                                                      'Called once after all tests are executed.\n\n        See stopTest for a method called after each test.\n        '),
                                                                     ('addError',
                                                                      ['test', 'err'],
                                                                      "Called when an error has occurred. 'err' is a tuple of values as\n        returned by sys.exc_info().\n        "),
                                                                     ('addFailure',
                                                                      ['test', 'err'],
                                                                      "Called when an error has occurred. 'err' is a tuple of values as\n        returned by sys.exc_info()."),
                                                                     ('addSuccess',
                                                                      ['test'],
                                                                      'Called when a test has completed successfully'),
                                                                     ('addSkip',
                                                                      ['test', 'reason'],
                                                                      'Called when a test is skipped.'),
                                                                     ('addExpectedFailure',
                                                                      ['test', 'err'],
                                                                      'Called when an expected failure/error occured.'),
                                                                     ('addUnexpectedSuccess',
                                                                      ['test'],
                                                                      'Called when a test was expected to fail, but succeed.'),
                                                                     ('wasSuccessful',
                                                                      [],
                                                                      'Tells whether or not this result was a success'),
                                                                     ('stop',
                                                                      [],
                                                                      'Indicates that the tests should be aborted'),
                                                                     ('_exc_info_to_string',
                                                                      ['err', 'test'],
                                                                      'Converts a sys.exc_info()-style tuple of values into a string.'),
                                                                     ('_is_relevant_tb_level',
                                                                      ['tb'],
                                                                      ''),
                                                                     ('_count_relevant_tb_levels',
                                                                      ['tb'],
                                                                      ''),
                                                                     ('__repr__', [], '')],
                                                         'properties': ['_previousTestClass',
                                                                        '_moduleSetUpFailed',
                                                                        'failfast',
                                                                        'failures',
                                                                        'errors',
                                                                        'testsRun',
                                                                        'skipped',
                                                                        'expectedFailures',
                                                                        'unexpectedSuccesses',
                                                                        'shouldStop',
                                                                        'buffer',
                                                                        '_stdout_buffer',
                                                                        '_stderr_buffer',
                                                                        '_original_stdout',
                                                                        '_original_stderr',
                                                                        '_mirrorOutput']},
             'django.utils.unittest.runner.TextTestResult': {'bases': ['django.utils.unittest.result.TestResult'],
                                                             'constructor': ['stream',
                                                                             'descriptions',
                                                                             'verbosity'],
                                                             'docstring': 'A test result class that can print formatted text results to a stream.\n\n    Used by TextTestRunner.\n    ',
                                                             'methods': [('getDescription',
                                                                          ['test'],
                                                                          ''),
                                                                         ('startTest',
                                                                          ['test'],
                                                                          ''),
                                                                         ('addSuccess',
                                                                          ['test'],
                                                                          ''),
                                                                         ('addError',
                                                                          ['test', 'err'],
                                                                          ''),
                                                                         ('addFailure',
                                                                          ['test', 'err'],
                                                                          ''),
                                                                         ('addSkip',
                                                                          ['test', 'reason'],
                                                                          ''),
                                                                         ('addExpectedFailure',
                                                                          ['test', 'err'],
                                                                          ''),
                                                                         ('addUnexpectedSuccess',
                                                                          ['test'],
                                                                          ''),
                                                                         ('printErrors',
                                                                          [],
                                                                          ''),
                                                                         ('printErrorList',
                                                                          ['flavour',
                                                                           'errors'],
                                                                          ''),
                                                                         ('stopTestRun',
                                                                          [],
                                                                          '')],
                                                             'properties': ['separator1',
                                                                            'separator2',
                                                                            'stream',
                                                                            'showAll',
                                                                            'dots',
                                                                            'descriptions']},
             'django.utils.unittest.runner.TextTestRunner': {'bases': ['unittest.TextTestRunner'],
                                                             'constructor': ['stream=sys.stderr',
                                                                             'descriptions=True',
                                                                             'verbosity=1',
                                                                             'failfast=False',
                                                                             'buffer=False',
                                                                             'resultclass=None'],
                                                             'docstring': 'A test runner class that displays results in textual form.\n\n    It prints out the names of tests as they are run, errors as they\n    occur, and a summary of the results at the end of the test run.\n    ',
                                                             'methods': [('_makeResult',
                                                                          [],
                                                                          ''),
                                                                         ('run',
                                                                          ['test'],
                                                                          'Run the given test case or test suite.')],
                                                             'properties': ['resultclass',
                                                                            'stream',
                                                                            'descriptions',
                                                                            'verbosity',
                                                                            'failfast',
                                                                            'buffer']},
             'django.utils.unittest.runner._WritelnDecorator': {'bases': ['object'],
                                                                'constructor': ['stream'],
                                                                'docstring': "Used to decorate file-like objects with a handy 'writeln' method",
                                                                'methods': [('__getattr__',
                                                                             ['attr'],
                                                                             ''),
                                                                            ('writeln',
                                                                             ['arg=None'],
                                                                             '')],
                                                                'properties': ['stream']},
             'django.utils.unittest.signals._InterruptHandler': {'bases': ['object'],
                                                                 'constructor': ['default_handler'],
                                                                 'docstring': '',
                                                                 'methods': [('__call__',
                                                                              ['signum',
                                                                               'frame'],
                                                                              '')],
                                                                 'properties': ['called',
                                                                                'default_handler']},
             'django.utils.unittest.suite.BaseTestSuite': {'bases': ['unittest.TestSuite'],
                                                           'constructor': ['tests=()'],
                                                           'docstring': "A simple test suite that doesn't provide class or module shared fixtures.\n    ",
                                                           'methods': [('__repr__', [], ''),
                                                                       ('__eq__',
                                                                        ['other'],
                                                                        ''),
                                                                       ('__ne__',
                                                                        ['other'],
                                                                        ''),
                                                                       ('__iter__', [], ''),
                                                                       ('countTestCases',
                                                                        [],
                                                                        ''),
                                                                       ('addTest',
                                                                        ['test'],
                                                                        ''),
                                                                       ('addTests',
                                                                        ['tests'],
                                                                        ''),
                                                                       ('run', ['result'], ''),
                                                                       ('__call__',
                                                                        ['*args', '**kwds'],
                                                                        ''),
                                                                       ('debug',
                                                                        [],
                                                                        'Run the tests without collecting errors in a TestResult')],
                                                           'properties': ['_tests', '__hash__']},
             'django.utils.unittest.suite.TestSuite': {'bases': ['django.utils.unittest.suite.BaseTestSuite'],
                                                       'constructor': [],
                                                       'docstring': 'A test suite is a composite test consisting of a number of TestCases.\n\n    For use, create an instance of TestSuite, then add test case instances.\n    When all tests have been added, the suite can be passed to a test\n    runner, such as TextTestRunner. It will run the individual test cases\n    in the order in which they were added, aggregating the results. When\n    subclassing, do not forget to call the base class constructor.\n    ',
                                                       'methods': [('run', ['result'], ''),
                                                                   ('debug',
                                                                    [],
                                                                    'Run the tests without collecting errors in a TestResult'),
                                                                   ('_wrapped_run',
                                                                    ['result', 'debug=False'],
                                                                    ''),
                                                                   ('_handleClassSetUp',
                                                                    ['test', 'result'],
                                                                    ''),
                                                                   ('_get_previous_module',
                                                                    ['result'],
                                                                    ''),
                                                                   ('_handleModuleFixture',
                                                                    ['test', 'result'],
                                                                    ''),
                                                                   ('_addClassOrModuleLevelException',
                                                                    ['result',
                                                                     'exception',
                                                                     'errorName'],
                                                                    ''),
                                                                   ('_handleModuleTearDown',
                                                                    ['result'],
                                                                    ''),
                                                                   ('_tearDownPreviousClass',
                                                                    ['test', 'result'],
                                                                    '')],
                                                       'properties': []},
             'django.utils.unittest.suite._DebugResult': {'bases': ['object'],
                                                          'constructor': [],
                                                          'docstring': 'Used by the TestSuite to hold previous class when running in debug.',
                                                          'methods': [],
                                                          'properties': ['_previousTestClass',
                                                                         '_moduleSetUpFailed',
                                                                         'shouldStop']},
             'django.utils.unittest.suite._ErrorHolder': {'bases': ['object'],
                                                          'constructor': ['description'],
                                                          'docstring': '\n    Placeholder for a TestCase inside a result. As far as a TestResult\n    is concerned, this looks exactly like a unit test. Used to insert\n    arbitrary errors into a test suite run.\n    ',
                                                          'methods': [('id', [], ''),
                                                                      ('shortDescription',
                                                                       [],
                                                                       ''),
                                                                      ('__repr__', [], ''),
                                                                      ('__str__', [], ''),
                                                                      ('run', ['result'], ''),
                                                                      ('__call__',
                                                                       ['result'],
                                                                       ''),
                                                                      ('countTestCases',
                                                                       [],
                                                                       '')],
                                                          'properties': ['failureException',
                                                                         'description']},
             'django.utils.xmlutils.SimplerXMLGenerator': {'bases': ['xml.sax.saxutils.XMLGenerator'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('addQuickElement',
                                                                        ['name',
                                                                         'contents=None',
                                                                         'attrs=None'],
                                                                        'Convenience method for adding an element with no children')],
                                                           'properties': []},
             'django.views.debug.ExceptionReporter': {'bases': ['object'],
                                                      'constructor': ['request',
                                                                      'exc_type',
                                                                      'exc_value',
                                                                      'tb',
                                                                      'is_email=False'],
                                                      'docstring': '\n    A class to organize and coordinate reporting on exceptions.\n    ',
                                                      'methods': [('get_traceback_html',
                                                                   [],
                                                                   'Return HTML code for traceback.'),
                                                                  ('get_template_exception_info',
                                                                   [],
                                                                   ''),
                                                                  ('_get_lines_from_file',
                                                                   ['filename',
                                                                    'lineno',
                                                                    'context_lines',
                                                                    'loader=None',
                                                                    'module_name=None'],
                                                                   '\n        Returns context_lines before and after lineno from file.\n        Returns (pre_context_lineno, pre_context, context_line, post_context).\n        '),
                                                                  ('get_traceback_frames',
                                                                   [],
                                                                   ''),
                                                                  ('format_exception',
                                                                   [],
                                                                   '\n        Return the same data as from traceback.format_exception.\n        ')],
                                                      'properties': ['request',
                                                                     'exc_type',
                                                                     'exc_value',
                                                                     'tb',
                                                                     'is_email',
                                                                     'template_info',
                                                                     'template_does_not_exist',
                                                                     'loader_debug_info']},
             'django.views.decorators.csrf._EnsureCsrfToken': {'bases': ['django.middleware.csrf.CsrfViewMiddleware'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('_reject',
                                                                            ['request',
                                                                             'reason'],
                                                                            '')],
                                                               'properties': []},
             'django.views.generic.GenericViewError': {'bases': ['Exception'],
                                                       'constructor': [],
                                                       'docstring': 'A problem in a generic view.',
                                                       'methods': [],
                                                       'properties': []},
             'django.views.generic.base.RedirectView': {'bases': ['django.views.generic.base.View'],
                                                        'constructor': [],
                                                        'docstring': '\n    A view that provides a redirect on any GET request.\n    ',
                                                        'methods': [('get_redirect_url',
                                                                     ['**kwargs'],
                                                                     '\n        Return the URL redirect to. Keyword arguments from the\n        URL pattern match generating the redirect request\n        are provided as kwargs to this method.\n        '),
                                                                    ('get',
                                                                     ['request',
                                                                      '*args',
                                                                      '**kwargs'],
                                                                     '')],
                                                        'properties': ['permanent',
                                                                       'url',
                                                                       'query_string']},
             'django.views.generic.base.TemplateResponseMixin': {'bases': ['object'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    A mixin that can be used to render a template.\n    ',
                                                                 'methods': [('render_to_response',
                                                                              ['context',
                                                                               '**response_kwargs'],
                                                                              '\n        Returns a response with a template rendered with the given context.\n        '),
                                                                             ('get_template_names',
                                                                              [],
                                                                              '\n        Returns a list of template names to be used for the request. Must return\n        a list. May not be called if render_to_response is overridden.\n        ')],
                                                                 'properties': ['template_name',
                                                                                'response_class']},
             'django.views.generic.base.TemplateView': {'bases': ['django.template.response.TemplateResponseMixin',
                                                                  'django.views.generic.base.View'],
                                                        'constructor': [],
                                                        'docstring': '\n    A view that renders a template.\n    ',
                                                        'methods': [('get_context_data',
                                                                     ['**kwargs'],
                                                                     ''),
                                                                    ('get',
                                                                     ['request',
                                                                      '*args',
                                                                      '**kwargs'],
                                                                     '')],
                                                        'properties': []},
             'django.views.generic.base.View': {'bases': ['object'],
                                                'constructor': ['**kwargs'],
                                                'docstring': '\n    Intentionally simple parent class for all views. Only implements\n    dispatch-by-method and simple sanity checking.\n    ',
                                                'methods': [('as_view',
                                                             ['**initkwargs'],
                                                             '\n        Main entry point for a request-response process.\n        '),
                                                            ('dispatch',
                                                             ['request', '*args', '**kwargs'],
                                                             ''),
                                                            ('http_method_not_allowed',
                                                             ['request', '*args', '**kwargs'],
                                                             '')],
                                                'properties': ['http_method_names',
                                                               'request',
                                                               'args',
                                                               'kwargs']},
             'django.views.generic.dates.ArchiveIndexView': {'bases': ['django.views.generic.list.MultipleObjectTemplateResponseMixin',
                                                                       'django.views.generic.dates.BaseArchiveIndexView'],
                                                             'constructor': [],
                                                             'docstring': '\n    Top-level archive of date-based items.\n    ',
                                                             'methods': [],
                                                             'properties': ['template_name_suffix']},
             'django.views.generic.dates.BaseArchiveIndexView': {'bases': ['django.views.generic.dates.BaseDateListView'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    Base class for archives of date-based items.\n\n    Requires a response mixin.\n    ',
                                                                 'methods': [('get_dated_items',
                                                                              [],
                                                                              '\n        Return (date_list, items, extra_context) for this request.\n        ')],
                                                                 'properties': ['context_object_name']},
             'django.views.generic.dates.BaseDateDetailView': {'bases': ['django.views.generic.dates.YearMixin',
                                                                         'django.views.generic.dates.MonthMixin',
                                                                         'django.views.generic.dates.DayMixin',
                                                                         'django.views.generic.dates.DateMixin',
                                                                         'django.views.generic.detail.BaseDetailView'],
                                                               'constructor': [],
                                                               'docstring': '\n    Detail view of a single object on a single date; this differs from the\n    standard DetailView by accepting a year/month/day in the URL.\n    ',
                                                               'methods': [('get_object',
                                                                            ['queryset=None'],
                                                                            '\n        Get the object this request displays.\n        ')],
                                                               'properties': []},
             'django.views.generic.dates.BaseDateListView': {'bases': ['django.views.generic.list.MultipleObjectMixin',
                                                                       'django.views.generic.dates.DateMixin',
                                                                       'django.views.generic.base.View'],
                                                             'constructor': [],
                                                             'docstring': '\n    Abstract base class for date-based views display a list of objects.\n    ',
                                                             'methods': [('get',
                                                                          ['request',
                                                                           '*args',
                                                                           '**kwargs'],
                                                                          ''),
                                                                         ('get_dated_items',
                                                                          [],
                                                                          '\n        Obtain the list of dates and itesm\n        '),
                                                                         ('get_dated_queryset',
                                                                          ['**lookup'],
                                                                          '\n        Get a queryset properly filtered according to `allow_future` and any\n        extra lookup kwargs.\n        '),
                                                                         ('get_date_list',
                                                                          ['queryset',
                                                                           'date_type'],
                                                                          "\n        Get a date list by calling `queryset.dates()`, checking along the way\n        for empty lists that aren't allowed.\n        "),
                                                                         ('get_context_data',
                                                                          ['**kwargs'],
                                                                          '\n        Get the context. Must return a Context (or subclass) instance.\n        ')],
                                                             'properties': ['allow_empty',
                                                                            'date_list',
                                                                            'object_list']},
             'django.views.generic.dates.BaseDayArchiveView': {'bases': ['django.views.generic.dates.YearMixin',
                                                                         'django.views.generic.dates.MonthMixin',
                                                                         'django.views.generic.dates.DayMixin',
                                                                         'django.views.generic.dates.BaseDateListView'],
                                                               'constructor': [],
                                                               'docstring': '\n    List of objects published on a given day.\n    ',
                                                               'methods': [('get_dated_items',
                                                                            [],
                                                                            '\n        Return (date_list, items, extra_context) for this request.\n        '),
                                                                           ('_get_dated_items',
                                                                            ['date'],
                                                                            '\n        Do the actual heavy lifting of getting the dated items; this accepts a\n        date object so that TodayArchiveView can be trivial.\n        ')],
                                                               'properties': []},
             'django.views.generic.dates.BaseMonthArchiveView': {'bases': ['django.views.generic.dates.YearMixin',
                                                                           'django.views.generic.dates.MonthMixin',
                                                                           'django.views.generic.dates.BaseDateListView'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    List of objects published in a given year.\n    ',
                                                                 'methods': [('get_dated_items',
                                                                              [],
                                                                              '\n        Return (date_list, items, extra_context) for this request.\n        ')],
                                                                 'properties': []},
             'django.views.generic.dates.BaseTodayArchiveView': {'bases': ['django.views.generic.dates.BaseDayArchiveView'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    List of objects published today.\n    ',
                                                                 'methods': [('get_dated_items',
                                                                              [],
                                                                              '\n        Return (date_list, items, extra_context) for this request.\n        ')],
                                                                 'properties': []},
             'django.views.generic.dates.BaseWeekArchiveView': {'bases': ['django.views.generic.dates.YearMixin',
                                                                          'django.views.generic.dates.WeekMixin',
                                                                          'django.views.generic.dates.BaseDateListView'],
                                                                'constructor': [],
                                                                'docstring': '\n    List of objects published in a given week.\n    ',
                                                                'methods': [('get_dated_items',
                                                                             [],
                                                                             '\n        Return (date_list, items, extra_context) for this request.\n        ')],
                                                                'properties': []},
             'django.views.generic.dates.BaseYearArchiveView': {'bases': ['django.views.generic.dates.YearMixin',
                                                                          'django.views.generic.dates.BaseDateListView'],
                                                                'constructor': [],
                                                                'docstring': '\n    List of objects published in a given year.\n    ',
                                                                'methods': [('get_dated_items',
                                                                             [],
                                                                             '\n        Return (date_list, items, extra_context) for this request.\n        '),
                                                                            ('get_make_object_list',
                                                                             [],
                                                                             '\n        Return `True` if this view should contain the full list of objects in\n        the given year.\n        ')],
                                                                'properties': ['make_object_list']},
             'django.views.generic.dates.DateDetailView': {'bases': ['django.views.generic.detail.SingleObjectTemplateResponseMixin',
                                                                     'django.views.generic.dates.BaseDateDetailView'],
                                                           'constructor': [],
                                                           'docstring': '\n    Detail view of a single object on a single date; this differs from the\n    standard DetailView by accepting a year/month/day in the URL.\n    ',
                                                           'methods': [],
                                                           'properties': ['template_name_suffix']},
             'django.views.generic.dates.DateMixin': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': '\n    Mixin class for views manipulating date-based data.\n    ',
                                                      'methods': [('get_date_field',
                                                                   [],
                                                                   '\n        Get the name of the date field to be used to filter by.\n        '),
                                                                  ('get_allow_future',
                                                                   [],
                                                                   '\n        Returns `True` if the view should be allowed to display objects from\n        the future.\n        ')],
                                                      'properties': ['date_field',
                                                                     'allow_future']},
             'django.views.generic.dates.DayArchiveView': {'bases': ['django.views.generic.list.MultipleObjectTemplateResponseMixin',
                                                                     'django.views.generic.dates.BaseDayArchiveView'],
                                                           'constructor': [],
                                                           'docstring': '\n    List of objects published on a given day.\n    ',
                                                           'methods': [],
                                                           'properties': ['template_name_suffix']},
             'django.views.generic.dates.DayMixin': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('get_day_format',
                                                                  [],
                                                                  '\n        Get a day format string in strptime syntax to be used to parse the day\n        from url variables.\n        '),
                                                                 ('get_day',
                                                                  [],
                                                                  'Return the day for which this view should display data'),
                                                                 ('get_next_day',
                                                                  ['date'],
                                                                  '\n        Get the next valid day.\n        '),
                                                                 ('get_previous_day',
                                                                  ['date'],
                                                                  '\n        Get the previous valid day.\n        ')],
                                                     'properties': ['day_format', 'day']},
             'django.views.generic.dates.MonthArchiveView': {'bases': ['django.views.generic.list.MultipleObjectTemplateResponseMixin',
                                                                       'django.views.generic.dates.BaseMonthArchiveView'],
                                                             'constructor': [],
                                                             'docstring': '\n    List of objects published in a given year.\n    ',
                                                             'methods': [],
                                                             'properties': ['template_name_suffix']},
             'django.views.generic.dates.MonthMixin': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('get_month_format',
                                                                    [],
                                                                    '\n        Get a month format string in strptime syntax to be used to parse the\n        month from url variables.\n        '),
                                                                   ('get_month',
                                                                    [],
                                                                    'Return the month for which this view should display data'),
                                                                   ('get_next_month',
                                                                    ['date'],
                                                                    '\n        Get the next valid month.\n        '),
                                                                   ('get_previous_month',
                                                                    ['date'],
                                                                    '\n        Get the previous valid month.\n        ')],
                                                       'properties': ['month_format', 'month']},
             'django.views.generic.dates.TodayArchiveView': {'bases': ['django.views.generic.list.MultipleObjectTemplateResponseMixin',
                                                                       'django.views.generic.dates.BaseTodayArchiveView'],
                                                             'constructor': [],
                                                             'docstring': '\n    List of objects published today.\n    ',
                                                             'methods': [],
                                                             'properties': ['template_name_suffix']},
             'django.views.generic.dates.WeekArchiveView': {'bases': ['django.views.generic.list.MultipleObjectTemplateResponseMixin',
                                                                      'django.views.generic.dates.BaseWeekArchiveView'],
                                                            'constructor': [],
                                                            'docstring': '\n    List of objects published in a given week.\n    ',
                                                            'methods': [],
                                                            'properties': ['template_name_suffix']},
             'django.views.generic.dates.WeekMixin': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('get_week_format',
                                                                   [],
                                                                   '\n        Get a week format string in strptime syntax to be used to parse the\n        week from url variables.\n        '),
                                                                  ('get_week',
                                                                   [],
                                                                   'Return the week for which this view should display data')],
                                                      'properties': ['week_format', 'week']},
             'django.views.generic.dates.YearArchiveView': {'bases': ['django.views.generic.list.MultipleObjectTemplateResponseMixin',
                                                                      'django.views.generic.dates.BaseYearArchiveView'],
                                                            'constructor': [],
                                                            'docstring': '\n    List of objects published in a given year.\n    ',
                                                            'methods': [],
                                                            'properties': ['template_name_suffix']},
             'django.views.generic.dates.YearMixin': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('get_year_format',
                                                                   [],
                                                                   '\n        Get a year format string in strptime syntax to be used to parse the\n        year from url variables.\n        '),
                                                                  ('get_year',
                                                                   [],
                                                                   'Return the year for which this view should display data')],
                                                      'properties': ['year_format', 'year']},
             'django.views.generic.detail.BaseDetailView': {'bases': ['django.views.generic.detail.SingleObjectMixin',
                                                                      'django.views.generic.base.View'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('get',
                                                                         ['request',
                                                                          '**kwargs'],
                                                                         '')],
                                                            'properties': ['object']},
             'django.views.generic.detail.DetailView': {'bases': ['django.views.generic.detail.SingleObjectTemplateResponseMixin',
                                                                  'django.views.generic.detail.BaseDetailView'],
                                                        'constructor': [],
                                                        'docstring': '\n    Render a "detail" view of an object.\n\n    By default this is a model instance looked up from `self.queryset`, but the\n    view will support display of *any* object by overriding `self.get_object()`.\n    ',
                                                        'methods': [],
                                                        'properties': []},
             'django.views.generic.detail.SingleObjectMixin': {'bases': ['object'],
                                                               'constructor': [],
                                                               'docstring': '\n    Provides the ability to retrieve a single object for further manipulation.\n    ',
                                                               'methods': [('get_object',
                                                                            ['queryset=None'],
                                                                            '\n        Returns the object the view is displaying.\n\n        By default this requires `self.queryset` and a `pk` or `slug` argument\n        in the URLconf, but subclasses can override this to return any object.\n        '),
                                                                           ('get_queryset',
                                                                            [],
                                                                            '\n        Get the queryset to look an object up against. May not be called if\n        `get_object` is overridden.\n        '),
                                                                           ('get_slug_field',
                                                                            [],
                                                                            '\n        Get the name of a slug field to be used to look up by slug.\n        '),
                                                                           ('get_context_object_name',
                                                                            ['obj'],
                                                                            '\n        Get the name to use for the object.\n        '),
                                                                           ('get_context_data',
                                                                            ['**kwargs'],
                                                                            '')],
                                                               'properties': ['model',
                                                                              'queryset',
                                                                              'slug_field',
                                                                              'context_object_name']},
             'django.views.generic.detail.SingleObjectTemplateResponseMixin': {'bases': ['django.views.generic.base.TemplateResponseMixin'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('get_template_names',
                                                                                            [],
                                                                                            '\n        Return a list of template names to be used for the request. Must return\n        a list. May not be called if get_template is overridden.\n        ')],
                                                                               'properties': ['template_name_field',
                                                                                              'template_name_suffix']},
             'django.views.generic.edit.BaseCreateView': {'bases': ['django.views.generic.edit.ModelFormMixin',
                                                                    'django.views.generic.edit.ProcessFormView'],
                                                          'constructor': [],
                                                          'docstring': '\n    Base view for creating an new object instance.\n\n    Using this base class requires subclassing to provide a response mixin.\n    ',
                                                          'methods': [('get',
                                                                       ['request',
                                                                        '*args',
                                                                        '**kwargs'],
                                                                       ''),
                                                                      ('post',
                                                                       ['request',
                                                                        '*args',
                                                                        '**kwargs'],
                                                                       '')],
                                                          'properties': ['object']},
             'django.views.generic.edit.BaseDeleteView': {'bases': ['django.views.generic.edit.DeletionMixin',
                                                                    'django.views.generic.detail.BaseDetailView'],
                                                          'constructor': [],
                                                          'docstring': '\n    Base view for deleting an object.\n\n    Using this base class requires subclassing to provide a response mixin.\n    ',
                                                          'methods': [],
                                                          'properties': []},
             'django.views.generic.edit.BaseFormView': {'bases': ['django.views.generic.edit.FormMixin',
                                                                  'django.views.generic.edit.ProcessFormView'],
                                                        'constructor': [],
                                                        'docstring': '\n    A base view for displaying a form\n    ',
                                                        'methods': [],
                                                        'properties': []},
             'django.views.generic.edit.BaseUpdateView': {'bases': ['django.views.generic.edit.ModelFormMixin',
                                                                    'django.views.generic.edit.ProcessFormView'],
                                                          'constructor': [],
                                                          'docstring': '\n    Base view for updating an existing object.\n\n    Using this base class requires subclassing to provide a response mixin.\n    ',
                                                          'methods': [('get',
                                                                       ['request',
                                                                        '*args',
                                                                        '**kwargs'],
                                                                       ''),
                                                                      ('post',
                                                                       ['request',
                                                                        '*args',
                                                                        '**kwargs'],
                                                                       '')],
                                                          'properties': ['object']},
             'django.views.generic.edit.CreateView': {'bases': ['django.views.generic.detail.SingleObjectTemplateResponseMixin',
                                                                'django.views.generic.edit.BaseCreateView'],
                                                      'constructor': [],
                                                      'docstring': '\n    View for creating an new object instance,\n    with a response rendered by template.\n    ',
                                                      'methods': [],
                                                      'properties': ['template_name_suffix']},
             'django.views.generic.edit.DeleteView': {'bases': ['django.views.generic.detail.SingleObjectTemplateResponseMixin',
                                                                'django.views.generic.edit.BaseDeleteView'],
                                                      'constructor': [],
                                                      'docstring': '\n    View for deleting an object retrieved with `self.get_object()`,\n    with a response rendered by template.\n    ',
                                                      'methods': [],
                                                      'properties': ['template_name_suffix']},
             'django.views.generic.edit.DeletionMixin': {'bases': ['object'],
                                                         'constructor': [],
                                                         'docstring': '\n    A mixin providing the ability to delete objects\n    ',
                                                         'methods': [('delete',
                                                                      ['request',
                                                                       '*args',
                                                                       '**kwargs'],
                                                                      ''),
                                                                     ('post',
                                                                      ['*args', '**kwargs'],
                                                                      ''),
                                                                     ('get_success_url',
                                                                      [],
                                                                      '')],
                                                         'properties': ['success_url', 'object']},
             'django.views.generic.edit.FormMixin': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': '\n    A mixin that provides a way to show and handle a form in a request.\n    ',
                                                     'methods': [('get_initial',
                                                                  [],
                                                                  '\n        Returns the initial data to use for forms on this view.\n        '),
                                                                 ('get_form_class',
                                                                  [],
                                                                  '\n        Returns the form class to use in this view\n        '),
                                                                 ('get_form',
                                                                  ['form_class'],
                                                                  '\n        Returns an instance of the form to be used in this view.\n        '),
                                                                 ('get_form_kwargs',
                                                                  [],
                                                                  '\n        Returns the keyword arguments for instanciating the form.\n        '),
                                                                 ('get_context_data',
                                                                  ['**kwargs'],
                                                                  ''),
                                                                 ('get_success_url', [], ''),
                                                                 ('form_valid', ['form'], ''),
                                                                 ('form_invalid', ['form'], '')],
                                                     'properties': ['initial',
                                                                    'form_class',
                                                                    'success_url']},
             'django.views.generic.edit.FormView': {'bases': ['django.views.generic.base.TemplateResponseMixin',
                                                              'django.views.generic.edit.BaseFormView'],
                                                    'constructor': [],
                                                    'docstring': '\n    A view for displaying a form, and rendering a template response.\n    ',
                                                    'methods': [],
                                                    'properties': []},
             'django.views.generic.edit.ModelFormMixin': {'bases': ['django.views.generic.edit.FormMixin',
                                                                    'django.views.generic.detail.SingleObjectMixin'],
                                                          'constructor': [],
                                                          'docstring': '\n    A mixin that provides a way to show and handle a modelform in a request.\n    ',
                                                          'methods': [('get_form_class',
                                                                       [],
                                                                       '\n        Returns the form class to use in this view\n        '),
                                                                      ('get_form_kwargs',
                                                                       [],
                                                                       '\n        Returns the keyword arguments for instanciating the form.\n        '),
                                                                      ('get_success_url',
                                                                       [],
                                                                       ''),
                                                                      ('form_valid',
                                                                       ['form'],
                                                                       ''),
                                                                      ('get_context_data',
                                                                       ['**kwargs'],
                                                                       '')],
                                                          'properties': ['object']},
             'django.views.generic.edit.ProcessFormView': {'bases': ['django.views.generic.base.View'],
                                                           'constructor': [],
                                                           'docstring': '\n    A mixin that processes a form on POST.\n    ',
                                                           'methods': [('get',
                                                                        ['request',
                                                                         '*args',
                                                                         '**kwargs'],
                                                                        ''),
                                                                       ('post',
                                                                        ['request',
                                                                         '*args',
                                                                         '**kwargs'],
                                                                        ''),
                                                                       ('put',
                                                                        ['*args', '**kwargs'],
                                                                        '')],
                                                           'properties': []},
             'django.views.generic.edit.UpdateView': {'bases': ['django.views.generic.detail.SingleObjectTemplateResponseMixin',
                                                                'django.views.generic.edit.BaseUpdateView'],
                                                      'constructor': [],
                                                      'docstring': '\n    View for updating an object,\n    with a response rendered by template..\n    ',
                                                      'methods': [],
                                                      'properties': ['template_name_suffix']},
             'django.views.generic.list.BaseListView': {'bases': ['django.views.generic.list.MultipleObjectMixin',
                                                                  'django.views.generic.base.View'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('get',
                                                                     ['request',
                                                                      '*args',
                                                                      '**kwargs'],
                                                                     '')],
                                                        'properties': ['object_list']},
             'django.views.generic.list.ListView': {'bases': ['django.views.generic.list.MultipleObjectTemplateResponseMixin',
                                                              'django.views.generic.list.BaseListView'],
                                                    'constructor': [],
                                                    'docstring': '\n    Render some list of objects, set by `self.model` or `self.queryset`.\n    `self.queryset` can actually be any iterable of items, not just a queryset.\n    ',
                                                    'methods': [],
                                                    'properties': []},
             'django.views.generic.list.MultipleObjectMixin': {'bases': ['object'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('get_queryset',
                                                                            [],
                                                                            '\n        Get the list of items for this view. This must be an interable, and may\n        be a queryset (in which qs-specific behavior will be enabled).\n        '),
                                                                           ('paginate_queryset',
                                                                            ['queryset',
                                                                             'page_size'],
                                                                            '\n        Paginate the queryset, if needed.\n        '),
                                                                           ('get_paginate_by',
                                                                            ['queryset'],
                                                                            '\n        Get the number of items to paginate by, or ``None`` for no pagination.\n        '),
                                                                           ('get_paginator',
                                                                            ['queryset',
                                                                             'per_page',
                                                                             'orphans=0',
                                                                             'allow_empty_first_page=True'],
                                                                            '\n        Return an instance of the paginator for this view.\n        '),
                                                                           ('get_allow_empty',
                                                                            [],
                                                                            '\n        Returns ``True`` if the view should display empty lists, and ``False``\n        if a 404 should be raised instead.\n        '),
                                                                           ('get_context_object_name',
                                                                            ['object_list'],
                                                                            '\n        Get the name of the item to be used in the context.\n        '),
                                                                           ('get_context_data',
                                                                            ['**kwargs'],
                                                                            '\n        Get the context for this view.\n        ')],
                                                               'properties': ['allow_empty',
                                                                              'queryset',
                                                                              'model',
                                                                              'paginate_by',
                                                                              'context_object_name',
                                                                              'paginator_class']},
             'django.views.generic.list.MultipleObjectTemplateResponseMixin': {'bases': ['django.views.generic.base.TemplateResponseMixin'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('get_template_names',
                                                                                            [],
                                                                                            '\n        Return a list of template names to be used for the request. Must return\n        a list. May not be called if get_template is overridden.\n        ')],
                                                                               'properties': ['template_name_suffix']}},
 'CONSTANTS': ['django.VERSION',
               'django.core.paginator.QuerySetPaginator',
               'django.core.exceptions.NON_FIELD_ERRORS',
               'django.core.urlresolvers._resolver_cache',
               'django.core.urlresolvers._callable_cache',
               'django.core.urlresolvers._prefixes',
               'django.core.urlresolvers._urlconfs',
               'django.core.urlresolvers.get_callable',
               'django.core.urlresolvers.get_resolver',
               'django.core.signals.request_started',
               'django.core.signals.request_finished',
               'django.core.signals.got_request_exception',
               'django.core.validators.EMPTY_VALUES',
               'django.core.validators.URL_VALIDATOR_USER_AGENT',
               'django.core.validators.URL_VALIDATOR_USER_AGENT',
               'django.core.validators.email_re',
               'django.core.validators.validate_email',
               'django.core.validators.slug_re',
               'django.core.validators.validate_slug',
               'django.core.validators.ipv4_re',
               'django.core.validators.validate_ipv4_address',
               'django.core.validators.comma_separated_int_list_re',
               'django.core.validators.validate_comma_separated_integer_list',
               'django.core.files.uploadedfile.__all__',
               'django.core.files.locks.__all__',
               'django.core.files.locks.system_type',
               'django.core.files.locks.LOCK_EX',
               'django.core.files.locks.LOCK_SH',
               'django.core.files.locks.LOCK_NB',
               'django.core.files.locks.__overlapped',
               'django.core.files.locks.system_type',
               'django.core.files.locks.LOCK_EX',
               'django.core.files.locks.LOCK_SH',
               'django.core.files.locks.LOCK_NB',
               'django.core.files.locks.system_type',
               'django.core.files.locks.LOCK_EX',
               'django.core.files.locks.LOCK_SH',
               'django.core.files.locks.LOCK_NB',
               'django.core.files.temp.__all__',
               'django.core.files.temp.NamedTemporaryFile',
               'django.core.files.temp.NamedTemporaryFile',
               'django.core.files.temp.gettempdir',
               'django.core.files.storage.__all__',
               'django.core.files.storage.default_storage',
               'django.core.files.uploadhandler.__all__',
               'django.core.files.move.__all__',
               'django.core.servers.fastcgi.__version__',
               'django.core.servers.fastcgi.__all__',
               'django.core.servers.fastcgi.FASTCGI_HELP',
               'django.core.servers.fastcgi.FASTCGI_OPTIONS',
               'django.core.servers.basehttp.__version__',
               'django.core.servers.basehttp.__all__',
               'django.core.servers.basehttp.server_version',
               'django.core.servers.basehttp.sys_version',
               'django.core.servers.basehttp.software_version',
               'django.core.servers.basehttp.tspecials',
               'django.core.servers.basehttp._hop_headers',
               'django.core.mail.utils.DNS_NAME',
               'django.core.mail.message.DEFAULT_ATTACHMENT_MIME_TYPE',
               'django.core.mail.message.ADDRESS_HEADERS',
               'django.core.cache.__all__',
               'django.core.cache.BACKENDS',
               'django.core.cache.DEFAULT_CACHE_ALIAS',
               'django.core.cache.legacy_backend',
               'django.core.cache.backend_classes',
               'django.core.cache.engine',
               'django.core.cache.host',
               'django.core.cache.params',
               'django.core.cache.engine',
               'django.core.cache.engine',
               'django.core.cache.defaults',
               'django.core.cache.cache',
               'django.core.cache.backends.locmem._caches',
               'django.core.cache.backends.locmem._expire_info',
               'django.core.cache.backends.locmem._locks',
               'django.core.cache.backends.base.MEMCACHE_MAX_KEY_LENGTH',
               'django.core.serializers.json.DateTimeAwareJSONEncoder',
               'django.core.serializers.BUILTIN_SERIALIZERS',
               'django.core.serializers._serializers',
               'django.core.management.get_version',
               'django.core.management._commands',
               'django.core.management.commands.makemessages.pythonize_re',
               'django.core.management.commands.makemessages.plural_forms_re',
               'django.core.management.commands.runserver.naiveip_re',
               'django.core.management.commands.runserver.DEFAULT_PORT',
               'django.core.management.commands.loaddata.has_bz2',
               'django.core.management.commands.loaddata.has_bz2',
               'django.core.handlers.wsgi.logger',
               'django.core.handlers.wsgi.STATUS_CODE_TEXT',
               'django.core.handlers.modpython.logger',
               'django.core.handlers.profiler-hotshot.PROFILE_DATA_DIR',
               'django.core.handlers.base.logger',
               'django.templatetags.static.register',
               'django.templatetags.future.register',
               'django.templatetags.cache.register',
               'django.templatetags.l10n.register',
               'django.templatetags.i18n.register',
               'django.http._morsel_supports_httponly',
               'django.http._cookie_encodes_correctly',
               'django.http._tc',
               'django.http._cookie_allows_colon_in_names',
               'django.http.SimpleCookie',
               'django.http.RESERVED_CHARS',
               'django.http.absolute_http_url_re',
               'django.http.multipartparser.__all__',
               'django.http.multipartparser.RAW',
               'django.http.multipartparser.FILE',
               'django.http.multipartparser.FIELD',
               'django.dispatch.dispatcher.WEAKREF_TYPES',
               'django.contrib.sessions.backends.base.randrange',
               'django.contrib.sessions.backends.base.randrange',
               'django.contrib.sessions.backends.base.MAX_SESSION_KEY',
               'django.contrib.admin.models.ADDITION',
               'django.contrib.admin.models.CHANGE',
               'django.contrib.admin.models.DELETION',
               'django.contrib.admin.options.HORIZONTAL',
               'django.contrib.admin.options.VERTICAL',
               'django.contrib.admin.options.get_ul_class',
               'django.contrib.admin.options.FORMFIELD_FOR_DBFIELD_DEFAULTS',
               'django.contrib.admin.options.csrf_protect_m',
               'django.contrib.admin.validation.__all__',
               'django.contrib.admin.forms.ERROR_MESSAGE',
               'django.contrib.admin.sites.LOGIN_FORM_KEY',
               'django.contrib.admin.sites.site',
               'django.contrib.admin.helpers.ACTION_CHECKBOX_NAME',
               'django.contrib.admin.helpers.checkbox',
               'django.contrib.admin.templatetags.admin_modify.register',
               'django.contrib.admin.templatetags.admin_modify.prepopulated_fields_js',
               'django.contrib.admin.templatetags.admin_modify.submit_row',
               'django.contrib.admin.templatetags.admin_modify.cell_count',
               'django.contrib.admin.templatetags.admin_list.register',
               'django.contrib.admin.templatetags.admin_list.DOT',
               'django.contrib.admin.templatetags.admin_list.paginator_number',
               'django.contrib.admin.templatetags.admin_list.pagination',
               'django.contrib.admin.templatetags.admin_list.result_list',
               'django.contrib.admin.templatetags.admin_list.date_hierarchy',
               'django.contrib.admin.templatetags.admin_list.search_form',
               'django.contrib.admin.templatetags.admin_list.admin_list_filter',
               'django.contrib.admin.templatetags.admin_list.admin_actions',
               'django.contrib.admin.templatetags.adminmedia.register',
               'django.contrib.admin.templatetags.log.register',
               'compress.here',
               'django.contrib.admin.views.main.MAX_SHOW_ALL_ALLOWED',
               'django.contrib.admin.views.main.ALL_VAR',
               'django.contrib.admin.views.main.ORDER_VAR',
               'django.contrib.admin.views.main.ORDER_TYPE_VAR',
               'django.contrib.admin.views.main.PAGE_VAR',
               'django.contrib.admin.views.main.SEARCH_VAR',
               'django.contrib.admin.views.main.TO_FIELD_VAR',
               'django.contrib.admin.views.main.IS_POPUP_VAR',
               'django.contrib.admin.views.main.ERROR_FLAG',
               'django.contrib.admin.views.main.EMPTY_CHANGELIST_VALUE',
               'django.contrib.formtools.preview.AUTO_ID',
               'django.contrib.formtools.tests.success_string',
               'django.contrib.formtools.tests.urls.urlpatterns',
               'django.contrib.localflavor.be.be_provinces.PROVINCE_CHOICES',
               'django.contrib.localflavor.be.be_regions.REGION_CHOICES',
               'django.contrib.localflavor.ca.forms.phone_digits_re',
               'django.contrib.localflavor.ca.forms.sin_re',
               'django.contrib.localflavor.ca.ca_provinces.PROVINCE_CHOICES',
               'django.contrib.localflavor.ca.ca_provinces.PROVINCES_NORMALIZED',
               'django.contrib.localflavor.us.forms.phone_digits_re',
               'django.contrib.localflavor.us.forms.ssn_re',
               'django.contrib.localflavor.us.us_states.CONTIGUOUS_STATES',
               'django.contrib.localflavor.us.us_states.US_STATES',
               'django.contrib.localflavor.us.us_states.US_TERRITORIES',
               'django.contrib.localflavor.us.us_states.ARMED_FORCES_STATES',
               'django.contrib.localflavor.us.us_states.COFA_STATES',
               'django.contrib.localflavor.us.us_states.OBSOLETE_STATES',
               'django.contrib.localflavor.us.us_states.STATE_CHOICES',
               'django.contrib.localflavor.us.us_states.USPS_CHOICES',
               'django.contrib.localflavor.us.us_states.STATES_NORMALIZED',
               'django.contrib.localflavor.br.forms.phone_digits_re',
               'django.contrib.localflavor.br.br_states.STATE_CHOICES',
               'django.contrib.localflavor.tr.forms.phone_digits_re',
               'django.contrib.localflavor.tr.tr_provinces.PROVINCE_CHOICES',
               'django.contrib.localflavor.fi.fi_municipalities.MUNICIPALITY_CHOICES',
               'django.contrib.localflavor.es.es_provinces.PROVINCE_CHOICES',
               'django.contrib.localflavor.es.es_regions.REGION_CHOICES',
               'django.contrib.localflavor.jp.jp_prefectures.JP_PREFECTURES',
               'django.contrib.localflavor.nl.nl_provinces.PROVINCE_CHOICES',
               'django.contrib.localflavor.nl.forms.pc_re',
               'django.contrib.localflavor.nl.forms.sofi_re',
               'django.contrib.localflavor.nl.forms.numeric_re',
               'django.contrib.localflavor.de.de_states.STATE_CHOICES',
               'django.contrib.localflavor.de.forms.id_re',
               'django.contrib.localflavor.in_.in_states.STATE_CHOICES',
               'django.contrib.localflavor.in_.in_states.STATES_NORMALIZED',
               'django.contrib.localflavor.se.forms.__all__',
               'django.contrib.localflavor.se.forms.SWEDISH_ID_NUMBER',
               'django.contrib.localflavor.se.forms.SE_POSTAL_CODE',
               'django.contrib.localflavor.se.se_counties.COUNTY_CHOICES',
               'django.contrib.localflavor.no.no_municipalities.MUNICIPALITY_CHOICES',
               'django.contrib.localflavor.uk.uk_regions.ENGLAND_REGION_CHOICES',
               'django.contrib.localflavor.uk.uk_regions.NORTHERN_IRELAND_REGION_CHOICES',
               'django.contrib.localflavor.uk.uk_regions.WALES_REGION_CHOICES',
               'django.contrib.localflavor.uk.uk_regions.SCOTTISH_REGION_CHOICES',
               'django.contrib.localflavor.uk.uk_regions.UK_NATIONS_CHOICES',
               'django.contrib.localflavor.uk.uk_regions.UK_REGION_CHOICES',
               'django.contrib.localflavor.pt.forms.phone_digits_re',
               'django.contrib.localflavor.is_.is_postalcodes.IS_POSTALCODES',
               'django.contrib.localflavor.it.it_province.PROVINCE_CHOICES',
               'django.contrib.localflavor.it.it_region.REGION_CHOICES',
               'django.contrib.localflavor.mx.mx_states.STATE_CHOICES',
               'django.contrib.localflavor.ch.ch_states.STATE_CHOICES',
               'django.contrib.localflavor.ch.forms.id_re',
               'django.contrib.localflavor.ch.forms.phone_digits_re',
               'django.contrib.localflavor.id.forms.postcode_re',
               'django.contrib.localflavor.id.forms.phone_re',
               'django.contrib.localflavor.id.forms.plate_re',
               'django.contrib.localflavor.id.forms.nik_re',
               'django.contrib.localflavor.id.id_choices.PROVINCE_CHOICES',
               'django.contrib.localflavor.id.id_choices.LICENSE_PLATE_PREFIX_CHOICES',
               'django.contrib.localflavor.au.forms.PHONE_DIGITS_RE',
               'django.contrib.localflavor.au.au_states.STATE_CHOICES',
               'django.contrib.localflavor.ar.ar_provinces.PROVINCE_CHOICES',
               'django.contrib.localflavor.pe.pe_region.REGION_CHOICES',
               'django.contrib.localflavor.cz.cz_regions.REGION_CHOICES',
               'django.contrib.localflavor.cz.forms.birth_number',
               'django.contrib.localflavor.cz.forms.ic_number',
               'django.contrib.localflavor.sk.sk_regions.REGION_CHOICES',
               'django.contrib.localflavor.sk.sk_districts.DISTRICT_CHOICES',
               'django.contrib.localflavor.il.forms.id_number_re',
               'django.contrib.localflavor.ie.ie_counties.IE_COUNTY_CHOICES',
               'django.contrib.localflavor.uy.uy_departaments.DEPARTAMENT_CHOICES',
               'django.contrib.localflavor.kw.forms.id_re',
               'django.contrib.localflavor.pl.pl_administrativeunits.ADMINISTRATIVE_UNIT_CHOICES',
               'django.contrib.localflavor.pl.pl_voivodeships.VOIVODESHIP_CHOICES',
               'django.contrib.localflavor.at.at_states.STATE_CHOICES',
               'django.contrib.localflavor.at.forms.re_ssn',
               'django.contrib.localflavor.generic.forms.DEFAULT_DATE_INPUT_FORMATS',
               'django.contrib.localflavor.generic.forms.DEFAULT_DATETIME_INPUT_FORMATS',
               'django.contrib.localflavor.ro.ro_counties.COUNTIES_CHOICES',
               'django.contrib.localflavor.za.za_provinces.PROVINCE_CHOICES',
               'django.contrib.localflavor.za.forms.id_re',
               'django.contrib.localflavor.cl.cl_regions.REGION_CHOICES',
               'django.contrib.localflavor.fr.forms.phone_digits_re',
               'django.contrib.localflavor.fr.fr_department.DEPARTMENT_ASCII_CHOICES',
               'django.contrib.gis.models.SpatialRefSys',
               'django.contrib.gis.models.GeometryColumns',
               'django.contrib.gis.measure.__all__',
               'django.contrib.gis.measure.D',
               'django.contrib.gis.measure.A',
               'django.contrib.gis.admin.options.spherical_mercator_srid',
               'django.contrib.gis.admin.options.spherical_mercator_srid',
               'django.contrib.gis.admin.HAS_OSM',
               'django.contrib.gis.admin.HAS_OSM',
               'django.contrib.gis.admin.widgets.geo_context',
               'django.contrib.gis.geos.geometry.GEOS_CLASSES',
               'django.contrib.gis.geos.libgeos.lib_path',
               'django.contrib.gis.geos.libgeos.lib_path',
               'django.contrib.gis.geos.libgeos.lib_names',
               'django.contrib.gis.geos.libgeos.lib_names',
               'django.contrib.gis.geos.libgeos.lib_names',
               'django.contrib.gis.geos.libgeos.lib_name',
               'django.contrib.gis.geos.libgeos.lib_path',
               'django.contrib.gis.geos.libgeos.lgeos',
               'django.contrib.gis.geos.libgeos.NOTICEFUNC',
               'django.contrib.gis.geos.libgeos.notice_h',
               'django.contrib.gis.geos.libgeos.ERRORFUNC',
               'django.contrib.gis.geos.libgeos.error_h',
               'django.contrib.gis.geos.libgeos.GEOM_PTR',
               'django.contrib.gis.geos.libgeos.PREPGEOM_PTR',
               'django.contrib.gis.geos.libgeos.CS_PTR',
               'django.contrib.gis.geos.libgeos.CONTEXT_PTR',
               'django.contrib.gis.geos.libgeos.geos_version',
               'django.contrib.gis.geos.libgeos.version_regex',
               'django.contrib.gis.geos.libgeos._verinfo',
               'django.contrib.gis.geos.libgeos.GEOS_MAJOR_VERSION',
               'django.contrib.gis.geos.libgeos.GEOS_MINOR_VERSION',
               'django.contrib.gis.geos.libgeos.GEOS_SUBMINOR_VERSION',
               'django.contrib.gis.geos.libgeos._verinfo',
               'django.contrib.gis.geos.libgeos.GEOS_VERSION',
               'django.contrib.gis.geos.libgeos.GEOS_PREPARE',
               'django.contrib.gis.geos.base.gdal',
               'django.contrib.gis.geos.base.numpy',
               'django.contrib.gis.geos.prototypes.coordseq.cs_clone',
               'django.contrib.gis.geos.prototypes.coordseq.create_cs',
               'django.contrib.gis.geos.prototypes.coordseq.get_cs',
               'django.contrib.gis.geos.prototypes.coordseq.cs_getordinate',
               'django.contrib.gis.geos.prototypes.coordseq.cs_setordinate',
               'django.contrib.gis.geos.prototypes.coordseq.cs_getx',
               'django.contrib.gis.geos.prototypes.coordseq.cs_gety',
               'django.contrib.gis.geos.prototypes.coordseq.cs_getz',
               'django.contrib.gis.geos.prototypes.coordseq.cs_setx',
               'django.contrib.gis.geos.prototypes.coordseq.cs_sety',
               'django.contrib.gis.geos.prototypes.coordseq.cs_setz',
               'django.contrib.gis.geos.prototypes.coordseq.cs_getsize',
               'django.contrib.gis.geos.prototypes.coordseq.cs_getdims',
               'django.contrib.gis.geos.prototypes.geom.c_uchar_p',
               'django.contrib.gis.geos.prototypes.geom.from_hex',
               'django.contrib.gis.geos.prototypes.geom.from_wkb',
               'django.contrib.gis.geos.prototypes.geom.from_wkt',
               'django.contrib.gis.geos.prototypes.geom.to_hex',
               'django.contrib.gis.geos.prototypes.geom.to_wkb',
               'django.contrib.gis.geos.prototypes.geom.to_wkt',
               'django.contrib.gis.geos.prototypes.geom.geos_normalize',
               'django.contrib.gis.geos.prototypes.geom.geos_type',
               'django.contrib.gis.geos.prototypes.geom.geos_typeid',
               'django.contrib.gis.geos.prototypes.geom.get_dims',
               'django.contrib.gis.geos.prototypes.geom.get_num_coords',
               'django.contrib.gis.geos.prototypes.geom.get_num_geoms',
               'django.contrib.gis.geos.prototypes.geom.create_point',
               'django.contrib.gis.geos.prototypes.geom.create_linestring',
               'django.contrib.gis.geos.prototypes.geom.create_linearring',
               'django.contrib.gis.geos.prototypes.geom.create_polygon',
               'django.contrib.gis.geos.prototypes.geom.create_collection',
               'django.contrib.gis.geos.prototypes.geom.get_extring',
               'django.contrib.gis.geos.prototypes.geom.get_intring',
               'django.contrib.gis.geos.prototypes.geom.get_nrings',
               'django.contrib.gis.geos.prototypes.geom.get_geomn',
               'django.contrib.gis.geos.prototypes.geom.geom_clone',
               'django.contrib.gis.geos.prototypes.geom.destroy_geom',
               'django.contrib.gis.geos.prototypes.geom.geos_get_srid',
               'django.contrib.gis.geos.prototypes.geom.geos_set_srid',
               'django.contrib.gis.geos.prototypes.io.WKT_READ_PTR',
               'django.contrib.gis.geos.prototypes.io.WKT_WRITE_PTR',
               'django.contrib.gis.geos.prototypes.io.WKB_READ_PTR',
               'django.contrib.gis.geos.prototypes.io.WKB_WRITE_PTR',
               'django.contrib.gis.geos.prototypes.io.wkt_reader_create',
               'django.contrib.gis.geos.prototypes.io.wkt_reader_destroy',
               'django.contrib.gis.geos.prototypes.io.wkt_reader_read',
               'django.contrib.gis.geos.prototypes.io.wkt_writer_create',
               'django.contrib.gis.geos.prototypes.io.wkt_writer_destroy',
               'django.contrib.gis.geos.prototypes.io.wkt_writer_write',
               'django.contrib.gis.geos.prototypes.io.wkb_reader_create',
               'django.contrib.gis.geos.prototypes.io.wkb_reader_destroy',
               'django.contrib.gis.geos.prototypes.io.wkb_reader_read',
               'django.contrib.gis.geos.prototypes.io.wkb_reader_read_hex',
               'django.contrib.gis.geos.prototypes.io.wkb_writer_create',
               'django.contrib.gis.geos.prototypes.io.wkb_writer_destroy',
               'django.contrib.gis.geos.prototypes.io.wkb_writer_write',
               'django.contrib.gis.geos.prototypes.io.wkb_writer_write_hex',
               'django.contrib.gis.geos.prototypes.io.wkb_writer_get_byteorder',
               'django.contrib.gis.geos.prototypes.io.wkb_writer_set_byteorder',
               'django.contrib.gis.geos.prototypes.io.wkb_writer_get_outdim',
               'django.contrib.gis.geos.prototypes.io.wkb_writer_set_outdim',
               'django.contrib.gis.geos.prototypes.io.wkb_writer_get_include_srid',
               'django.contrib.gis.geos.prototypes.io.wkb_writer_set_include_srid',
               'django.contrib.gis.geos.prototypes.io.thread_context',
               'django.contrib.gis.geos.prototypes.misc.__all__',
               'django.contrib.gis.geos.prototypes.misc.geos_area',
               'django.contrib.gis.geos.prototypes.misc.geos_distance',
               'django.contrib.gis.geos.prototypes.misc.geos_length',
               'django.contrib.gis.geos.prototypes.misc.geos_isvalidreason',
               'django.contrib.gis.geos.prototypes.threadsafe.thread_context',
               'django.contrib.gis.geos.prototypes.topology.__all__',
               'django.contrib.gis.geos.prototypes.topology.geos_boundary',
               'django.contrib.gis.geos.prototypes.topology.geos_buffer',
               'django.contrib.gis.geos.prototypes.topology.geos_centroid',
               'django.contrib.gis.geos.prototypes.topology.geos_convexhull',
               'django.contrib.gis.geos.prototypes.topology.geos_difference',
               'django.contrib.gis.geos.prototypes.topology.geos_envelope',
               'django.contrib.gis.geos.prototypes.topology.geos_intersection',
               'django.contrib.gis.geos.prototypes.topology.geos_linemerge',
               'django.contrib.gis.geos.prototypes.topology.geos_pointonsurface',
               'django.contrib.gis.geos.prototypes.topology.geos_preservesimplify',
               'django.contrib.gis.geos.prototypes.topology.geos_simplify',
               'django.contrib.gis.geos.prototypes.topology.geos_symdifference',
               'django.contrib.gis.geos.prototypes.topology.geos_union',
               'django.contrib.gis.geos.prototypes.topology.geos_relate',
               'django.contrib.gis.geos.prototypes.topology.geos_cascaded_union',
               'django.contrib.gis.geos.prototypes.predicates.geos_hasz',
               'django.contrib.gis.geos.prototypes.predicates.geos_isempty',
               'django.contrib.gis.geos.prototypes.predicates.geos_isring',
               'django.contrib.gis.geos.prototypes.predicates.geos_issimple',
               'django.contrib.gis.geos.prototypes.predicates.geos_isvalid',
               'django.contrib.gis.geos.prototypes.predicates.geos_contains',
               'django.contrib.gis.geos.prototypes.predicates.geos_crosses',
               'django.contrib.gis.geos.prototypes.predicates.geos_disjoint',
               'django.contrib.gis.geos.prototypes.predicates.geos_equals',
               'django.contrib.gis.geos.prototypes.predicates.geos_equalsexact',
               'django.contrib.gis.geos.prototypes.predicates.geos_intersects',
               'django.contrib.gis.geos.prototypes.predicates.geos_overlaps',
               'django.contrib.gis.geos.prototypes.predicates.geos_relatepattern',
               'django.contrib.gis.geos.prototypes.predicates.geos_touches',
               'django.contrib.gis.geos.prototypes.predicates.geos_within',
               'django.contrib.gis.geos.prototypes.errcheck.free',
               'django.contrib.gis.geos.prototypes.errcheck.libc',
               'django.contrib.gis.geos.prototypes.errcheck.libc',
               'django.contrib.gis.geos.prototypes.errcheck.free',
               'django.contrib.gis.geos.prototypes.prepared.geos_prepare',
               'django.contrib.gis.geos.prototypes.prepared.prepared_destroy',
               'django.contrib.gis.geos.prototypes.prepared.prepared_contains',
               'django.contrib.gis.geos.prototypes.prepared.prepared_contains_properly',
               'django.contrib.gis.geos.prototypes.prepared.prepared_covers',
               'django.contrib.gis.geos.prototypes.prepared.prepared_intersects',
               'django.contrib.gis.geos.tests.test_geos_mutation.geos_function_tests',
               'django.contrib.gis.geos.tests.test_geos_mutation.name',
               'django.contrib.gis.geos.tests.test_geos_mutation.val',
               'django.contrib.gis.geos.tests.test_suites',
               'django.contrib.gis.gdal.HAS_GDAL',
               'django.contrib.gis.gdal.HAS_GDAL',
               'django.contrib.gis.gdal.GEOJSON',
               'django.contrib.gis.gdal.geometries.GEO_CLASSES',
               'django.contrib.gis.gdal.field.OGRFieldTypes',
               'django.contrib.gis.gdal.field.ROGRFieldTypes',
               'django.contrib.gis.gdal.field.num',
               'django.contrib.gis.gdal.field.cls',
               'django.contrib.gis.gdal.error.OGRERR_DICT',
               'django.contrib.gis.gdal.error.OGRERR_NONE',
               'django.contrib.gis.gdal.libgdal.lib_path',
               'django.contrib.gis.gdal.libgdal.lib_path',
               'django.contrib.gis.gdal.libgdal.lib_names',
               'django.contrib.gis.gdal.libgdal.lib_names',
               'django.contrib.gis.gdal.libgdal.lib_names',
               'django.contrib.gis.gdal.libgdal.lib_name',
               'django.contrib.gis.gdal.libgdal.lib_path',
               'django.contrib.gis.gdal.libgdal.lgdal',
               'django.contrib.gis.gdal.libgdal.lwingdal',
               'django.contrib.gis.gdal.libgdal._version_info',
               'django.contrib.gis.gdal.libgdal.version_regex',
               'django.contrib.gis.gdal.libgdal._verinfo',
               'django.contrib.gis.gdal.libgdal.GDAL_MAJOR_VERSION',
               'django.contrib.gis.gdal.libgdal.GDAL_MINOR_VERSION',
               'django.contrib.gis.gdal.libgdal.GDAL_SUBMINOR_VERSION',
               'django.contrib.gis.gdal.libgdal.GDAL_VERSION',
               'django.contrib.gis.gdal.libgdal._verinfo',
               'django.contrib.gis.gdal.libgdal.GEOJSON',
               'django.contrib.gis.gdal.libgdal.GEOJSON',
               'django.contrib.gis.gdal.prototypes.geom.from_json',
               'django.contrib.gis.gdal.prototypes.geom.to_json',
               'django.contrib.gis.gdal.prototypes.geom.to_kml',
               'django.contrib.gis.gdal.prototypes.geom.from_json',
               'django.contrib.gis.gdal.prototypes.geom.to_json',
               'django.contrib.gis.gdal.prototypes.geom.to_kml',
               'django.contrib.gis.gdal.prototypes.geom.getx',
               'django.contrib.gis.gdal.prototypes.geom.gety',
               'django.contrib.gis.gdal.prototypes.geom.getz',
               'django.contrib.gis.gdal.prototypes.geom.from_wkb',
               'django.contrib.gis.gdal.prototypes.geom.from_wkt',
               'django.contrib.gis.gdal.prototypes.geom.create_geom',
               'django.contrib.gis.gdal.prototypes.geom.clone_geom',
               'django.contrib.gis.gdal.prototypes.geom.get_geom_ref',
               'django.contrib.gis.gdal.prototypes.geom.get_boundary',
               'django.contrib.gis.gdal.prototypes.geom.geom_convex_hull',
               'django.contrib.gis.gdal.prototypes.geom.geom_diff',
               'django.contrib.gis.gdal.prototypes.geom.geom_intersection',
               'django.contrib.gis.gdal.prototypes.geom.geom_sym_diff',
               'django.contrib.gis.gdal.prototypes.geom.geom_union',
               'django.contrib.gis.gdal.prototypes.geom.add_geom',
               'django.contrib.gis.gdal.prototypes.geom.import_wkt',
               'django.contrib.gis.gdal.prototypes.geom.destroy_geom',
               'django.contrib.gis.gdal.prototypes.geom.to_wkb',
               'django.contrib.gis.gdal.prototypes.geom.to_wkt',
               'django.contrib.gis.gdal.prototypes.geom.to_gml',
               'django.contrib.gis.gdal.prototypes.geom.get_wkbsize',
               'django.contrib.gis.gdal.prototypes.geom.assign_srs',
               'django.contrib.gis.gdal.prototypes.geom.get_geom_srs',
               'django.contrib.gis.gdal.prototypes.geom.get_area',
               'django.contrib.gis.gdal.prototypes.geom.get_centroid',
               'django.contrib.gis.gdal.prototypes.geom.get_dims',
               'django.contrib.gis.gdal.prototypes.geom.get_coord_dim',
               'django.contrib.gis.gdal.prototypes.geom.set_coord_dim',
               'django.contrib.gis.gdal.prototypes.geom.get_geom_count',
               'django.contrib.gis.gdal.prototypes.geom.get_geom_name',
               'django.contrib.gis.gdal.prototypes.geom.get_geom_type',
               'django.contrib.gis.gdal.prototypes.geom.get_point_count',
               'django.contrib.gis.gdal.prototypes.geom.get_point',
               'django.contrib.gis.gdal.prototypes.geom.geom_close_rings',
               'django.contrib.gis.gdal.prototypes.geom.ogr_contains',
               'django.contrib.gis.gdal.prototypes.geom.ogr_crosses',
               'django.contrib.gis.gdal.prototypes.geom.ogr_disjoint',
               'django.contrib.gis.gdal.prototypes.geom.ogr_equals',
               'django.contrib.gis.gdal.prototypes.geom.ogr_intersects',
               'django.contrib.gis.gdal.prototypes.geom.ogr_overlaps',
               'django.contrib.gis.gdal.prototypes.geom.ogr_touches',
               'django.contrib.gis.gdal.prototypes.geom.ogr_within',
               'django.contrib.gis.gdal.prototypes.geom.geom_transform',
               'django.contrib.gis.gdal.prototypes.geom.geom_transform_to',
               'django.contrib.gis.gdal.prototypes.geom.get_envelope',
               'django.contrib.gis.gdal.prototypes.srs.clone_srs',
               'django.contrib.gis.gdal.prototypes.srs.new_srs',
               'django.contrib.gis.gdal.prototypes.srs.release_srs',
               'django.contrib.gis.gdal.prototypes.srs.destroy_srs',
               'django.contrib.gis.gdal.prototypes.srs.srs_validate',
               'django.contrib.gis.gdal.prototypes.srs.semi_major',
               'django.contrib.gis.gdal.prototypes.srs.semi_minor',
               'django.contrib.gis.gdal.prototypes.srs.invflattening',
               'django.contrib.gis.gdal.prototypes.srs.from_wkt',
               'django.contrib.gis.gdal.prototypes.srs.from_proj',
               'django.contrib.gis.gdal.prototypes.srs.from_epsg',
               'django.contrib.gis.gdal.prototypes.srs.from_xml',
               'django.contrib.gis.gdal.prototypes.srs.from_user_input',
               'django.contrib.gis.gdal.prototypes.srs.morph_to_esri',
               'django.contrib.gis.gdal.prototypes.srs.morph_from_esri',
               'django.contrib.gis.gdal.prototypes.srs.identify_epsg',
               'django.contrib.gis.gdal.prototypes.srs.linear_units',
               'django.contrib.gis.gdal.prototypes.srs.angular_units',
               'django.contrib.gis.gdal.prototypes.srs.to_wkt',
               'django.contrib.gis.gdal.prototypes.srs.to_proj',
               'django.contrib.gis.gdal.prototypes.srs.to_pretty_wkt',
               'django.contrib.gis.gdal.prototypes.srs.to_xml',
               'django.contrib.gis.gdal.prototypes.srs.get_attr_value',
               'django.contrib.gis.gdal.prototypes.srs.get_auth_name',
               'django.contrib.gis.gdal.prototypes.srs.get_auth_code',
               'django.contrib.gis.gdal.prototypes.srs.isgeographic',
               'django.contrib.gis.gdal.prototypes.srs.islocal',
               'django.contrib.gis.gdal.prototypes.srs.isprojected',
               'django.contrib.gis.gdal.prototypes.srs.new_ct',
               'django.contrib.gis.gdal.prototypes.srs.destroy_ct',
               'django.contrib.gis.gdal.prototypes.ds.c_int_p',
               'django.contrib.gis.gdal.prototypes.ds.register_all',
               'django.contrib.gis.gdal.prototypes.ds.cleanup_all',
               'django.contrib.gis.gdal.prototypes.ds.get_driver',
               'django.contrib.gis.gdal.prototypes.ds.get_driver_by_name',
               'django.contrib.gis.gdal.prototypes.ds.get_driver_count',
               'django.contrib.gis.gdal.prototypes.ds.get_driver_name',
               'django.contrib.gis.gdal.prototypes.ds.open_ds',
               'django.contrib.gis.gdal.prototypes.ds.destroy_ds',
               'django.contrib.gis.gdal.prototypes.ds.release_ds',
               'django.contrib.gis.gdal.prototypes.ds.get_ds_name',
               'django.contrib.gis.gdal.prototypes.ds.get_layer',
               'django.contrib.gis.gdal.prototypes.ds.get_layer_by_name',
               'django.contrib.gis.gdal.prototypes.ds.get_layer_count',
               'django.contrib.gis.gdal.prototypes.ds.get_extent',
               'django.contrib.gis.gdal.prototypes.ds.get_feature',
               'django.contrib.gis.gdal.prototypes.ds.get_feature_count',
               'django.contrib.gis.gdal.prototypes.ds.get_layer_defn',
               'django.contrib.gis.gdal.prototypes.ds.get_layer_srs',
               'django.contrib.gis.gdal.prototypes.ds.get_next_feature',
               'django.contrib.gis.gdal.prototypes.ds.reset_reading',
               'django.contrib.gis.gdal.prototypes.ds.test_capability',
               'django.contrib.gis.gdal.prototypes.ds.get_spatial_filter',
               'django.contrib.gis.gdal.prototypes.ds.set_spatial_filter',
               'django.contrib.gis.gdal.prototypes.ds.set_spatial_filter_rect',
               'django.contrib.gis.gdal.prototypes.ds.get_fd_geom_type',
               'django.contrib.gis.gdal.prototypes.ds.get_fd_name',
               'django.contrib.gis.gdal.prototypes.ds.get_feat_name',
               'django.contrib.gis.gdal.prototypes.ds.get_field_count',
               'django.contrib.gis.gdal.prototypes.ds.get_field_defn',
               'django.contrib.gis.gdal.prototypes.ds.clone_feature',
               'django.contrib.gis.gdal.prototypes.ds.destroy_feature',
               'django.contrib.gis.gdal.prototypes.ds.feature_equal',
               'django.contrib.gis.gdal.prototypes.ds.get_feat_geom_ref',
               'django.contrib.gis.gdal.prototypes.ds.get_feat_field_count',
               'django.contrib.gis.gdal.prototypes.ds.get_feat_field_defn',
               'django.contrib.gis.gdal.prototypes.ds.get_fid',
               'django.contrib.gis.gdal.prototypes.ds.get_field_as_datetime',
               'django.contrib.gis.gdal.prototypes.ds.get_field_as_double',
               'django.contrib.gis.gdal.prototypes.ds.get_field_as_integer',
               'django.contrib.gis.gdal.prototypes.ds.get_field_as_string',
               'django.contrib.gis.gdal.prototypes.ds.get_field_index',
               'django.contrib.gis.gdal.prototypes.ds.get_field_name',
               'django.contrib.gis.gdal.prototypes.ds.get_field_precision',
               'django.contrib.gis.gdal.prototypes.ds.get_field_type',
               'django.contrib.gis.gdal.prototypes.ds.get_field_type_name',
               'django.contrib.gis.gdal.prototypes.ds.get_field_width',
               'django.contrib.gis.gdal.tests.test_suites',
               'django.contrib.gis.gdal.tests.test_ds.ds_list',
               'django.contrib.gis.gdal.tests.test_ds.i',
               'django.contrib.gis.gdal.tests.test_ds.i',
               'django.contrib.gis.gdal.tests.test_ds.bad_ds',
               'django.contrib.gis.gdal.tests.test_driver.valid_drivers',
               'django.contrib.gis.gdal.tests.test_driver.invalid_drivers',
               'django.contrib.gis.gdal.tests.test_driver.aliases',
               'django.contrib.gis.gdal.tests.test_srs.srlist',
               'django.contrib.gis.gdal.tests.test_srs.well_known',
               'django.contrib.gis.gdal.tests.test_srs.bad_srlist',
               'django.contrib.gis.maps.google.zoom.DTOR',
               'django.contrib.gis.maps.google.zoom.RTOD',
               'django.contrib.gis.maps.google.gmap.GOOGLE_MAPS_URL',
               'django.contrib.gis.tests.utils._default_db',
               'django.contrib.gis.tests.utils.oracle',
               'django.contrib.gis.tests.utils.postgis',
               'django.contrib.gis.tests.utils.mysql',
               'django.contrib.gis.tests.utils.spatialite',
               'django.contrib.gis.tests.test_spatialrefsys.test_srs',
               'django.contrib.gis.tests.geoapp.models.null_flag',
               'django.contrib.gis.tests.geoapp.sitemaps.sitemaps',
               'django.contrib.gis.tests.geoapp.feeds.feed_dict',
               'django.contrib.gis.tests.geoapp.urls.urlpatterns',
               'django.contrib.gis.tests.layermap.models.co_mapping',
               'django.contrib.gis.tests.layermap.models.cofeat_mapping',
               'django.contrib.gis.tests.layermap.models.city_mapping',
               'django.contrib.gis.tests.layermap.models.inter_mapping',
               'django.contrib.gis.tests.layermap.tests.shp_path',
               'django.contrib.gis.tests.layermap.tests.city_shp',
               'django.contrib.gis.tests.layermap.tests.co_shp',
               'django.contrib.gis.tests.layermap.tests.inter_shp',
               'django.contrib.gis.tests.layermap.tests.invalid_shp',
               'django.contrib.gis.tests.layermap.tests.NAMES',
               'django.contrib.gis.tests.layermap.tests.NUMS',
               'django.contrib.gis.tests.layermap.tests.STATES',
               'django.contrib.gis.tests.geo3d.tests.data_path',
               'django.contrib.gis.tests.geo3d.tests.city_file',
               'django.contrib.gis.tests.geo3d.tests.vrt_file',
               'django.contrib.gis.tests.geo3d.tests.city_data',
               'django.contrib.gis.tests.geo3d.tests.city_dict',
               'django.contrib.gis.tests.geo3d.tests.name',
               'django.contrib.gis.tests.geo3d.tests.coords',
               'django.contrib.gis.tests.geo3d.tests.interstate_data',
               'django.contrib.gis.tests.geo3d.tests.bbox_wkt',
               'django.contrib.gis.tests.geo3d.tests.bbox_z',
               'django.contrib.gis.geometry.test_data.GEOMETRIES',
               'django.contrib.gis.geometry.test_data.TEST_DATA',
               'django.contrib.gis.geometry.regex.hex_regex',
               'django.contrib.gis.geometry.regex.wkt_regex',
               'django.contrib.gis.geometry.regex.json_regex',
               'django.contrib.gis.geometry.backend.geom_backend',
               'django.contrib.gis.geometry.backend.module',
               'django.contrib.gis.geometry.backend.e',
               'django.contrib.gis.geometry.backend.module',
               'django.contrib.gis.geometry.backend.e_user',
               'django.contrib.gis.geometry.backend.Geometry',
               'django.contrib.gis.geometry.backend.GeometryException',
               'django.contrib.gis.db.backends.oracle.compiler.SQLCompiler',
               'django.contrib.gis.db.backends.oracle.operations.dtypes',
               'django.contrib.gis.db.backends.spatialite.operations.dtypes',
               'django.contrib.gis.db.models.fields._srid_cache',
               'django.contrib.gis.db.models.sql.query.ALL_TERMS',
               'django.contrib.gis.db.models.sql.query.x',
               'django.contrib.gis.db.models.sql.compiler.SQLCompiler',
               'django.contrib.gis.db.backend.SpatialBackend',
               'django.contrib.gis.utils.HAS_GEOIP',
               'django.contrib.gis.utils.HAS_GEOIP',
               'django.contrib.gis.utils.ogrinfo.sample',
               'django.contrib.gis.utils.geoip.GEOIP_SETTINGS',
               'django.contrib.gis.utils.geoip.key',
               'django.contrib.gis.utils.geoip.lib_path',
               'django.contrib.gis.utils.geoip.lib_name',
               'django.contrib.gis.utils.geoip.lib_name',
               'django.contrib.gis.utils.geoip.lib_path',
               'django.contrib.gis.utils.geoip.lgeoip',
               'django.contrib.gis.utils.geoip.ipregex',
               'django.contrib.gis.utils.geoip.free_regex',
               'django.contrib.gis.utils.geoip.lite_regex',
               'django.contrib.gis.utils.geoip.RECTYPE',
               'django.contrib.gis.utils.geoip.DBTYPE',
               'django.contrib.gis.utils.geoip.rec_by_addr',
               'django.contrib.gis.utils.geoip.rec_by_name',
               'django.contrib.gis.utils.geoip.geoip_open',
               'django.contrib.gis.utils.geoip.geoip_close',
               'django.contrib.gis.utils.geoip.geoip_dbinfo',
               'django.contrib.gis.utils.geoip.cntry_code_by_addr',
               'django.contrib.gis.utils.geoip.cntry_code_by_name',
               'django.contrib.gis.utils.geoip.cntry_name_by_addr',
               'django.contrib.gis.utils.geoip.cntry_name_by_name',
               'django.contrib.gis.utils.srs.add_postgis_srs',
               'django.contrib.auth.models.UNUSABLE_PASSWORD',
               'django.contrib.auth.SESSION_KEY',
               'django.contrib.auth.BACKEND_SESSION_KEY',
               'django.contrib.auth.REDIRECT_FIELD_NAME',
               'django.contrib.auth.urls.urlpatterns',
               'django.contrib.auth.admin.csrf_protect_m',
               'django.contrib.auth.tokens.default_token_generator',
               'django.contrib.auth.signals.user_logged_in',
               'django.contrib.auth.signals.user_logged_out',
               'django.contrib.auth.tests.urls.urlpatterns',
               'django.contrib.auth.management.commands.createsuperuser.RE_VALID_USERNAME',
               'django.contrib.auth.management.commands.createsuperuser.EMAIL_RE',
               'django.contrib.comments.models.COMMENT_MAX_LENGTH',
               'django.contrib.comments.DEFAULT_COMMENTS_APP',
               'django.contrib.comments.moderation.moderator',
               'django.contrib.comments.forms.COMMENT_MAX_LENGTH',
               'django.contrib.comments.urls.urlpatterns',
               'django.contrib.comments.signals.comment_will_be_posted',
               'django.contrib.comments.signals.comment_was_posted',
               'django.contrib.comments.signals.comment_was_flagged',
               'django.contrib.comments.templatetags.comments.register',
               'django.contrib.comments.views.moderation.flag_done',
               'django.contrib.comments.views.moderation.delete_done',
               'django.contrib.comments.views.moderation.approve_done',
               'django.contrib.comments.views.comments.comment_done',
               'django.contrib.markup.tests.textile',
               'django.contrib.markup.tests.markdown',
               'django.contrib.markup.tests.docutils',
               'django.contrib.markup.templatetags.markup.register',
               'django.contrib.webdesign.lorem_ipsum.COMMON_P',
               'django.contrib.webdesign.lorem_ipsum.WORDS',
               'django.contrib.webdesign.lorem_ipsum.COMMON_WORDS',
               'django.contrib.webdesign.templatetags.webdesign.register',
               'django.contrib.webdesign.templatetags.webdesign.lorem',
               'django.contrib.flatpages.views.DEFAULT_TEMPLATE',
               'django.contrib.flatpages.urls.urlpatterns',
               'django.contrib.flatpages.templatetags.flatpages.register',
               'django.contrib.flatpages.tests.urls.urlpatterns',
               'django.contrib.databrowse.datastructures.EMPTY_VALUE',
               'django.contrib.databrowse.datastructures.DISPLAY_SIZE',
               'django.contrib.databrowse.sites.site',
               'django.contrib.databrowse.urls.urlpatterns',
               'django.contrib.staticfiles.urls.urlpatterns',
               'django.contrib.staticfiles.finders._finders',
               'django.contrib.staticfiles.finders.get_finder',
               'django.contrib.sitemaps.PING_URL',
               'django.contrib.sitemaps.tests.urls.simple_sitemaps',
               'django.contrib.sitemaps.tests.urls.generic_sitemaps',
               'django.contrib.sitemaps.tests.urls.flatpage_sitemaps',
               'django.contrib.sitemaps.tests.urls.urlpatterns',
               'django.contrib.sites.models.SITE_CACHE',
               'django.contrib.humanize.templatetags.humanize.register',
               'django.contrib.messages.constants.DEBUG',
               'django.contrib.messages.constants.INFO',
               'django.contrib.messages.constants.SUCCESS',
               'django.contrib.messages.constants.WARNING',
               'django.contrib.messages.constants.ERROR',
               'django.contrib.messages.constants.DEFAULT_TAGS',
               'django.contrib.messages.api.__all__',
               'django.contrib.messages.storage.default_storage',
               'django.contrib.messages.storage.base.LEVEL_TAGS',
               'django.contrib.messages.tests.user_messages.UserMessagesTest',
               'django.contrib.messages.tests.user_messages.LegacyFallbackTest',
               'django.contrib.messages.tests.urls.TEMPLATE',
               'django.contrib.messages.tests.urls.urlpatterns',
               'django.contrib.admindocs.views.MODEL_METHODS_EXCLUDE',
               'django.contrib.admindocs.views.doc_index',
               'django.contrib.admindocs.views.bookmarklets',
               'django.contrib.admindocs.views.template_tag_index',
               'django.contrib.admindocs.views.template_filter_index',
               'django.contrib.admindocs.views.view_index',
               'django.contrib.admindocs.views.view_detail',
               'django.contrib.admindocs.views.model_index',
               'django.contrib.admindocs.views.model_detail',
               'django.contrib.admindocs.views.template_detail',
               'django.contrib.admindocs.views.named_group_matcher',
               'django.contrib.admindocs.views.non_named_group_matcher',
               'django.contrib.admindocs.utils.docutils_is_available',
               'django.contrib.admindocs.utils.docutils_is_available',
               'django.contrib.admindocs.utils.ROLES',
               'django.contrib.admindocs.utils.name',
               'django.contrib.admindocs.utils.urlbase',
               'django.contrib.admindocs.urls.urlpatterns',
               'django.test.simple.__all__',
               'django.test.simple.TEST_MODULE',
               'django.test.simple.doctestOutputChecker',
               'django.test.utils.__all__',
               'django.test.client.__all__',
               'django.test.client.BOUNDARY',
               'django.test.client.MULTIPART_CONTENT',
               'django.test.client.CONTENT_TYPE_RE',
               'django.test._doctest.__docformat__',
               'django.test._doctest.__all__',
               'django.test._doctest.OPTIONFLAGS_BY_NAME',
               'django.test._doctest.DONT_ACCEPT_TRUE_FOR_1',
               'django.test._doctest.DONT_ACCEPT_BLANKLINE',
               'django.test._doctest.NORMALIZE_WHITESPACE',
               'django.test._doctest.ELLIPSIS',
               'django.test._doctest.IGNORE_EXCEPTION_DETAIL',
               'django.test._doctest.COMPARISON_FLAGS',
               'django.test._doctest.REPORT_UDIFF',
               'django.test._doctest.REPORT_CDIFF',
               'django.test._doctest.REPORT_NDIFF',
               'django.test._doctest.REPORT_ONLY_FIRST_FAILURE',
               'django.test._doctest.REPORTING_FLAGS',
               'django.test._doctest.BLANKLINE_MARKER',
               'django.test._doctest.ELLIPSIS_MARKER',
               'django.test._doctest.master',
               'django.test._doctest._unittest_reportflags',
               'django.test._doctest.__test__',
               'django.test.signals.template_rendered',
               'django.test.testcases.__all__',
               'django.test.testcases.normalize_long_ints',
               'django.test.testcases.normalize_decimals',
               'django.test.testcases.real_commit',
               'django.test.testcases.real_rollback',
               'django.test.testcases.real_enter_transaction_management',
               'django.test.testcases.real_leave_transaction_management',
               'django.test.testcases.real_managed',
               'django.forms.models.__all__',
               'django.forms.forms.__all__',
               'django.forms.forms.NON_FIELD_ERRORS',
               'django.forms.fields.__all__',
               'django.forms.fields.DEFAULT_DATE_INPUT_FORMATS',
               'django.forms.fields.DEFAULT_TIME_INPUT_FORMATS',
               'django.forms.fields.DEFAULT_DATETIME_INPUT_FORMATS',
               'django.forms.widgets.__all__',
               'django.forms.widgets.MEDIA_TYPES',
               'django.forms.widgets.FILE_INPUT_CONTRADICTION',
               'django.forms.formsets.__all__',
               'django.forms.formsets.TOTAL_FORM_COUNT',
               'django.forms.formsets.INITIAL_FORM_COUNT',
               'django.forms.formsets.MAX_NUM_FORM_COUNT',
               'django.forms.formsets.ORDERING_FIELD_NAME',
               'django.forms.formsets.DELETION_FIELD_NAME',
               'django.forms.extras.widgets.__all__',
               'django.forms.extras.widgets.RE_DATE',
               'django.conf.global_settings.gettext_noop',
               'django.conf.global_settings.DEBUG',
               'django.conf.global_settings.TEMPLATE_DEBUG',
               'django.conf.global_settings.DEBUG_PROPAGATE_EXCEPTIONS',
               'django.conf.global_settings.USE_ETAGS',
               'django.conf.global_settings.ADMINS',
               'django.conf.global_settings.INTERNAL_IPS',
               'django.conf.global_settings.TIME_ZONE',
               'django.conf.global_settings.LANGUAGE_CODE',
               'django.conf.global_settings.LANGUAGES',
               'django.conf.global_settings.LANGUAGES_BIDI',
               'django.conf.global_settings.USE_I18N',
               'django.conf.global_settings.LOCALE_PATHS',
               'django.conf.global_settings.LANGUAGE_COOKIE_NAME',
               'django.conf.global_settings.USE_L10N',
               'django.conf.global_settings.MANAGERS',
               'django.conf.global_settings.DEFAULT_CONTENT_TYPE',
               'django.conf.global_settings.DEFAULT_CHARSET',
               'django.conf.global_settings.FILE_CHARSET',
               'django.conf.global_settings.SERVER_EMAIL',
               'django.conf.global_settings.SEND_BROKEN_LINK_EMAILS',
               'django.conf.global_settings.DATABASE_ENGINE',
               'django.conf.global_settings.DATABASE_NAME',
               'django.conf.global_settings.DATABASE_USER',
               'django.conf.global_settings.DATABASE_PASSWORD',
               'django.conf.global_settings.DATABASE_HOST',
               'django.conf.global_settings.DATABASE_PORT',
               'django.conf.global_settings.DATABASE_OPTIONS',
               'django.conf.global_settings.DATABASES',
               'django.conf.global_settings.DATABASE_ROUTERS',
               'django.conf.global_settings.EMAIL_BACKEND',
               'django.conf.global_settings.EMAIL_HOST',
               'django.conf.global_settings.EMAIL_PORT',
               'django.conf.global_settings.EMAIL_HOST_USER',
               'django.conf.global_settings.EMAIL_HOST_PASSWORD',
               'django.conf.global_settings.EMAIL_USE_TLS',
               'django.conf.global_settings.INSTALLED_APPS',
               'django.conf.global_settings.TEMPLATE_DIRS',
               'django.conf.global_settings.TEMPLATE_LOADERS',
               'django.conf.global_settings.TEMPLATE_CONTEXT_PROCESSORS',
               'django.conf.global_settings.TEMPLATE_STRING_IF_INVALID',
               'django.conf.global_settings.DEFAULT_FROM_EMAIL',
               'django.conf.global_settings.EMAIL_SUBJECT_PREFIX',
               'django.conf.global_settings.APPEND_SLASH',
               'django.conf.global_settings.PREPEND_WWW',
               'django.conf.global_settings.FORCE_SCRIPT_NAME',
               'django.conf.global_settings.DISALLOWED_USER_AGENTS',
               'django.conf.global_settings.ABSOLUTE_URL_OVERRIDES',
               'django.conf.global_settings.ALLOWED_INCLUDE_ROOTS',
               'django.conf.global_settings.ADMIN_FOR',
               'django.conf.global_settings.IGNORABLE_404_STARTS',
               'django.conf.global_settings.IGNORABLE_404_ENDS',
               'django.conf.global_settings.SECRET_KEY',
               'django.conf.global_settings.DEFAULT_FILE_STORAGE',
               'django.conf.global_settings.MEDIA_ROOT',
               'django.conf.global_settings.MEDIA_URL',
               'django.conf.global_settings.STATIC_ROOT',
               'django.conf.global_settings.STATIC_URL',
               'django.conf.global_settings.FILE_UPLOAD_HANDLERS',
               'django.conf.global_settings.FILE_UPLOAD_MAX_MEMORY_SIZE',
               'django.conf.global_settings.FILE_UPLOAD_TEMP_DIR',
               'django.conf.global_settings.FILE_UPLOAD_PERMISSIONS',
               'django.conf.global_settings.FORMAT_MODULE_PATH',
               'django.conf.global_settings.DATE_FORMAT',
               'django.conf.global_settings.DATETIME_FORMAT',
               'django.conf.global_settings.TIME_FORMAT',
               'django.conf.global_settings.YEAR_MONTH_FORMAT',
               'django.conf.global_settings.MONTH_DAY_FORMAT',
               'django.conf.global_settings.SHORT_DATE_FORMAT',
               'django.conf.global_settings.SHORT_DATETIME_FORMAT',
               'django.conf.global_settings.DATE_INPUT_FORMATS',
               'django.conf.global_settings.TIME_INPUT_FORMATS',
               'django.conf.global_settings.DATETIME_INPUT_FORMATS',
               'django.conf.global_settings.FIRST_DAY_OF_WEEK',
               'django.conf.global_settings.DECIMAL_SEPARATOR',
               'django.conf.global_settings.USE_THOUSAND_SEPARATOR',
               'django.conf.global_settings.NUMBER_GROUPING',
               'django.conf.global_settings.THOUSAND_SEPARATOR',
               'django.conf.global_settings.TRANSACTIONS_MANAGED',
               'django.conf.global_settings.URL_VALIDATOR_USER_AGENT',
               'django.conf.global_settings.DEFAULT_TABLESPACE',
               'django.conf.global_settings.DEFAULT_INDEX_TABLESPACE',
               'django.conf.global_settings.MIDDLEWARE_CLASSES',
               'django.conf.global_settings.SESSION_COOKIE_NAME',
               'django.conf.global_settings.SESSION_COOKIE_AGE',
               'django.conf.global_settings.SESSION_COOKIE_DOMAIN',
               'django.conf.global_settings.SESSION_COOKIE_SECURE',
               'django.conf.global_settings.SESSION_COOKIE_PATH',
               'django.conf.global_settings.SESSION_COOKIE_HTTPONLY',
               'django.conf.global_settings.SESSION_SAVE_EVERY_REQUEST',
               'django.conf.global_settings.SESSION_EXPIRE_AT_BROWSER_CLOSE',
               'django.conf.global_settings.SESSION_ENGINE',
               'django.conf.global_settings.SESSION_FILE_PATH',
               'django.conf.global_settings.CACHES',
               'django.conf.global_settings.CACHE_MIDDLEWARE_KEY_PREFIX',
               'django.conf.global_settings.CACHE_MIDDLEWARE_SECONDS',
               'django.conf.global_settings.CACHE_MIDDLEWARE_ALIAS',
               'django.conf.global_settings.COMMENTS_ALLOW_PROFANITIES',
               'django.conf.global_settings.PROFANITIES_LIST',
               'django.conf.global_settings.COMMENTS_BANNED_USERS_GROUP',
               'django.conf.global_settings.COMMENTS_MODERATORS_GROUP',
               'django.conf.global_settings.COMMENTS_SKETCHY_USERS_GROUP',
               'django.conf.global_settings.COMMENTS_FIRST_FEW',
               'django.conf.global_settings.BANNED_IPS',
               'django.conf.global_settings.AUTHENTICATION_BACKENDS',
               'django.conf.global_settings.LOGIN_URL',
               'django.conf.global_settings.LOGOUT_URL',
               'django.conf.global_settings.LOGIN_REDIRECT_URL',
               'django.conf.global_settings.PASSWORD_RESET_TIMEOUT_DAYS',
               'django.conf.global_settings.CSRF_FAILURE_VIEW',
               'django.conf.global_settings.CSRF_COOKIE_NAME',
               'django.conf.global_settings.CSRF_COOKIE_DOMAIN',
               'django.conf.global_settings.MESSAGE_STORAGE',
               'django.conf.global_settings.LOGGING_CONFIG',
               'django.conf.global_settings.LOGGING',
               'django.conf.global_settings.TEST_RUNNER',
               'django.conf.global_settings.TEST_DATABASE_NAME',
               'django.conf.global_settings.TEST_DATABASE_CHARSET',
               'django.conf.global_settings.TEST_DATABASE_COLLATION',
               'django.conf.global_settings.FIXTURE_DIRS',
               'django.conf.global_settings.STATICFILES_DIRS',
               'django.conf.global_settings.STATICFILES_STORAGE',
               'django.conf.global_settings.STATICFILES_FINDERS',
               'django.conf.global_settings.ADMIN_MEDIA_PREFIX',
               'django.conf.ENVIRONMENT_VARIABLE',
               'django.conf.settings',
               'django.conf.locale.LANG_INFO',
               'django.conf.locale.es_NI.formats.DATE_FORMAT',
               'django.conf.locale.es_NI.formats.TIME_FORMAT',
               'django.conf.locale.es_NI.formats.DATETIME_FORMAT',
               'django.conf.locale.es_NI.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.es_NI.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.es_NI.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.es_NI.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.es_NI.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.es_NI.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.es_NI.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.es_NI.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.es_NI.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.es_NI.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.es_NI.formats.NUMBER_GROUPING',
               'django.conf.locale.sq.formats.DATE_FORMAT',
               'django.conf.locale.sq.formats.TIME_FORMAT',
               'django.conf.locale.sq.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.sq.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.sq.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.sq.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.sq.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.en.formats.DATE_FORMAT',
               'django.conf.locale.en.formats.TIME_FORMAT',
               'django.conf.locale.en.formats.DATETIME_FORMAT',
               'django.conf.locale.en.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.en.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.en.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.en.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.en.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.en.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.en.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.en.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.en.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.en.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.en.formats.NUMBER_GROUPING',
               'django.conf.locale.ca.formats.DATE_FORMAT',
               'django.conf.locale.ca.formats.TIME_FORMAT',
               'django.conf.locale.ca.formats.DATETIME_FORMAT',
               'django.conf.locale.ca.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.ca.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.ca.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.ca.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.ca.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.ca.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.ca.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.ca.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.ca.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.ca.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.ca.formats.NUMBER_GROUPING',
               'django.conf.locale.sv.formats.DATE_FORMAT',
               'django.conf.locale.sv.formats.TIME_FORMAT',
               'django.conf.locale.sv.formats.DATETIME_FORMAT',
               'django.conf.locale.sv.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.sv.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.sv.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.sv.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.sv.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.sv.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.sv.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.sv.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.sv.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.sv.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.sv.formats.NUMBER_GROUPING',
               'django.conf.locale.eu.formats.DATE_FORMAT',
               'django.conf.locale.eu.formats.TIME_FORMAT',
               'django.conf.locale.eu.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.eu.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.eu.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.et.formats.DATE_FORMAT',
               'django.conf.locale.et.formats.TIME_FORMAT',
               'django.conf.locale.et.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.et.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.et.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.et.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.tr.formats.DATE_FORMAT',
               'django.conf.locale.tr.formats.TIME_FORMAT',
               'django.conf.locale.tr.formats.DATETIME_FORMAT',
               'django.conf.locale.tr.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.tr.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.tr.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.tr.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.tr.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.tr.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.tr.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.tr.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.tr.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.tr.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.tr.formats.NUMBER_GROUPING',
               'django.conf.locale.bg.formats.DATE_FORMAT',
               'django.conf.locale.bg.formats.TIME_FORMAT',
               'django.conf.locale.bg.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.bg.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.bg.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.bg.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.fi.formats.DATE_FORMAT',
               'django.conf.locale.fi.formats.TIME_FORMAT',
               'django.conf.locale.fi.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.fi.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.fi.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.fi.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.fi.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.el.formats.DATE_FORMAT',
               'django.conf.locale.el.formats.TIME_FORMAT',
               'django.conf.locale.el.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.el.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.el.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.el.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.el.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.es.formats.DATE_FORMAT',
               'django.conf.locale.es.formats.TIME_FORMAT',
               'django.conf.locale.es.formats.DATETIME_FORMAT',
               'django.conf.locale.es.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.es.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.es.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.es.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.es.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.es.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.es.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.es.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.es.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.es.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.es.formats.NUMBER_GROUPING',
               'django.conf.locale.nb.formats.DATE_FORMAT',
               'django.conf.locale.nb.formats.TIME_FORMAT',
               'django.conf.locale.nb.formats.DATETIME_FORMAT',
               'django.conf.locale.nb.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.nb.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.nb.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.nb.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.nb.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.nb.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.nb.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.nb.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.nb.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.nb.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.nb.formats.NUMBER_GROUPING',
               'django.conf.locale.kn.formats.DATE_FORMAT',
               'django.conf.locale.kn.formats.TIME_FORMAT',
               'django.conf.locale.kn.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.kn.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.da.formats.DATE_FORMAT',
               'django.conf.locale.da.formats.TIME_FORMAT',
               'django.conf.locale.da.formats.DATETIME_FORMAT',
               'django.conf.locale.da.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.da.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.da.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.da.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.da.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.da.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.da.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.da.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.da.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.da.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.da.formats.NUMBER_GROUPING',
               'django.conf.locale.nl.formats.DATE_FORMAT',
               'django.conf.locale.nl.formats.TIME_FORMAT',
               'django.conf.locale.nl.formats.DATETIME_FORMAT',
               'django.conf.locale.nl.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.nl.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.nl.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.nl.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.nl.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.nl.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.nl.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.nl.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.nl.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.nl.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.nl.formats.NUMBER_GROUPING',
               'django.conf.locale.hr.formats.DATE_FORMAT',
               'django.conf.locale.hr.formats.TIME_FORMAT',
               'django.conf.locale.hr.formats.DATETIME_FORMAT',
               'django.conf.locale.hr.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.hr.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.hr.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.hr.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.hr.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.hr.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.hr.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.hr.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.hr.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.hr.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.hr.formats.NUMBER_GROUPING',
               'django.conf.locale.sr_Latn.formats.DATE_FORMAT',
               'django.conf.locale.sr_Latn.formats.TIME_FORMAT',
               'django.conf.locale.sr_Latn.formats.DATETIME_FORMAT',
               'django.conf.locale.sr_Latn.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.sr_Latn.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.sr_Latn.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.sr_Latn.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.sr_Latn.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.sr_Latn.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.sr_Latn.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.sr_Latn.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.sr_Latn.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.sr_Latn.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.sr_Latn.formats.NUMBER_GROUPING',
               'formats.DATE_FORMAT',
               'formats.TIME_FORMAT',
               'formats.DATETIME_FORMAT',
               'formats.YEAR_MONTH_FORMAT',
               'formats.MONTH_DAY_FORMAT',
               'formats.SHORT_DATE_FORMAT',
               'formats.SHORT_DATETIME_FORMAT',
               'formats.FIRST_DAY_OF_WEEK',
               'formats.DATE_INPUT_FORMATS',
               'formats.TIME_INPUT_FORMATS',
               'formats.DATETIME_INPUT_FORMATS',
               'formats.DECIMAL_SEPARATOR',
               'formats.THOUSAND_SEPARATOR',
               'formats.NUMBER_GROUPING',
               'django.conf.locale.de.formats.DATE_FORMAT',
               'django.conf.locale.de.formats.TIME_FORMAT',
               'django.conf.locale.de.formats.DATETIME_FORMAT',
               'django.conf.locale.de.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.de.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.de.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.de.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.de.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.de.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.de.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.de.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.de.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.de.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.de.formats.NUMBER_GROUPING',
               'django.conf.locale.cs.formats.DATE_FORMAT',
               'django.conf.locale.cs.formats.TIME_FORMAT',
               'django.conf.locale.cs.formats.DATETIME_FORMAT',
               'django.conf.locale.cs.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.cs.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.cs.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.cs.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.cs.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.cs.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.cs.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.cs.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.cs.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.cs.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.cs.formats.NUMBER_GROUPING',
               'django.conf.locale.te.formats.DATE_FORMAT',
               'django.conf.locale.te.formats.TIME_FORMAT',
               'django.conf.locale.te.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.te.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.lt.formats.DATE_FORMAT',
               'django.conf.locale.lt.formats.TIME_FORMAT',
               'django.conf.locale.lt.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.lt.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.lt.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.no.formats.DATE_FORMAT',
               'django.conf.locale.no.formats.TIME_FORMAT',
               'django.conf.locale.no.formats.DATETIME_FORMAT',
               'django.conf.locale.no.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.no.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.no.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.no.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.no.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.no.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.no.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.no.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.no.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.no.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.no.formats.NUMBER_GROUPING',
               'django.conf.locale.ml.formats.DATE_FORMAT',
               'django.conf.locale.ml.formats.TIME_FORMAT',
               'django.conf.locale.ml.formats.DATETIME_FORMAT',
               'django.conf.locale.ml.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.ml.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.ml.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.ml.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.ml.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.ml.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.ml.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.ml.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.ml.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.ml.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.ml.formats.NUMBER_GROUPING',
               'django.conf.locale.mk.formats.DATE_FORMAT',
               'django.conf.locale.mk.formats.TIME_FORMAT',
               'django.conf.locale.mk.formats.DATETIME_FORMAT',
               'django.conf.locale.mk.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.mk.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.mk.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.mk.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.mk.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.mk.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.mk.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.mk.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.mk.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.mk.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.mk.formats.NUMBER_GROUPING',
               'django.conf.locale.uk.formats.DATE_FORMAT',
               'django.conf.locale.uk.formats.TIME_FORMAT',
               'django.conf.locale.uk.formats.DATETIME_FORMAT',
               'django.conf.locale.uk.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.uk.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.uk.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.uk.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.uk.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.pt.formats.DATE_FORMAT',
               'django.conf.locale.pt.formats.TIME_FORMAT',
               'django.conf.locale.pt.formats.DATETIME_FORMAT',
               'django.conf.locale.pt.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.pt.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.pt.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.pt.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.pt.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.pt.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.pt.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.pt.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.pt.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.pt.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.pt.formats.NUMBER_GROUPING',
               'django.conf.locale.it.formats.DATE_FORMAT',
               'django.conf.locale.it.formats.TIME_FORMAT',
               'django.conf.locale.it.formats.DATETIME_FORMAT',
               'django.conf.locale.it.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.it.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.it.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.it.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.it.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.it.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.it.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.it.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.it.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.it.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.it.formats.NUMBER_GROUPING',
               'django.conf.locale.vi.formats.DATE_FORMAT',
               'django.conf.locale.vi.formats.TIME_FORMAT',
               'django.conf.locale.vi.formats.DATETIME_FORMAT',
               'django.conf.locale.vi.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.vi.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.vi.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.vi.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.vi.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.vi.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.pt_BR.formats.DATE_FORMAT',
               'django.conf.locale.pt_BR.formats.TIME_FORMAT',
               'django.conf.locale.pt_BR.formats.DATETIME_FORMAT',
               'django.conf.locale.pt_BR.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.pt_BR.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.pt_BR.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.pt_BR.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.pt_BR.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.pt_BR.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.pt_BR.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.pt_BR.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.pt_BR.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.pt_BR.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.pt_BR.formats.NUMBER_GROUPING',
               'django.conf.locale.ta.formats.DATE_FORMAT',
               'django.conf.locale.ta.formats.TIME_FORMAT',
               'django.conf.locale.ta.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.ta.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.id.formats.DATE_FORMAT',
               'django.conf.locale.id.formats.DATETIME_FORMAT',
               'django.conf.locale.id.formats.TIME_FORMAT',
               'django.conf.locale.id.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.id.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.id.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.id.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.id.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.id.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.id.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.id.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.id.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.id.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.id.formats.NUMBER_GROUPING',
               'django.conf.locale.is.formats.DATE_FORMAT',
               'django.conf.locale.is.formats.TIME_FORMAT',
               'django.conf.locale.is.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.is.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.is.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.is.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.is.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.ar.formats.DATE_FORMAT',
               'django.conf.locale.ar.formats.TIME_FORMAT',
               'django.conf.locale.ar.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.ar.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.ar.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.ar.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.ar.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.ko.formats.DATE_FORMAT',
               'django.conf.locale.ko.formats.TIME_FORMAT',
               'django.conf.locale.ko.formats.DATETIME_FORMAT',
               'django.conf.locale.ko.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.ko.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.ko.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.ko.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.ko.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.ko.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.ko.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.ko.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.ko.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.ko.formats.NUMBER_GROUPING',
               'django.conf.locale.fa.formats.DATE_FORMAT',
               'django.conf.locale.fa.formats.TIME_FORMAT',
               'django.conf.locale.fa.formats.DATETIME_FORMAT',
               'django.conf.locale.fa.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.fa.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.fa.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.fa.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.fa.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.fa.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.ka.formats.DATE_FORMAT',
               'django.conf.locale.ka.formats.TIME_FORMAT',
               'django.conf.locale.ka.formats.DATETIME_FORMAT',
               'django.conf.locale.ka.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.ka.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.ka.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.ka.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.ka.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.ka.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.ka.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.ka.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.ka.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.ka.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.ka.formats.NUMBER_GROUPING',
               'django.conf.locale.ja.formats.DATE_FORMAT',
               'django.conf.locale.ja.formats.TIME_FORMAT',
               'django.conf.locale.ja.formats.DATETIME_FORMAT',
               'django.conf.locale.ja.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.ja.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.ja.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.ja.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.ja.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.ja.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.ru.formats.DATE_FORMAT',
               'django.conf.locale.ru.formats.TIME_FORMAT',
               'django.conf.locale.ru.formats.DATETIME_FORMAT',
               'django.conf.locale.ru.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.ru.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.ru.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.ru.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.ru.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.ru.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.ru.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.ru.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.ru.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.ru.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.ru.formats.NUMBER_GROUPING',
               'django.conf.locale.lv.formats.DATE_FORMAT',
               'django.conf.locale.lv.formats.TIME_FORMAT',
               'django.conf.locale.lv.formats.DATETIME_FORMAT',
               'django.conf.locale.lv.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.lv.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.lv.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.lv.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.lv.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.lv.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.lv.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.lv.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.lv.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.lv.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.lv.formats.NUMBER_GROUPING',
               'django.conf.locale.sl.formats.DATE_FORMAT',
               'django.conf.locale.sl.formats.TIME_FORMAT',
               'django.conf.locale.sl.formats.DATETIME_FORMAT',
               'django.conf.locale.sl.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.sl.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.sl.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.sl.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.sl.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.sl.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.sl.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.sl.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.sl.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.sl.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.sl.formats.NUMBER_GROUPING',
               'django.conf.locale.bn.formats.DATE_FORMAT',
               'django.conf.locale.bn.formats.TIME_FORMAT',
               'django.conf.locale.bn.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.bn.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.bn.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.bn.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.bn.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.nn.formats.DATE_FORMAT',
               'django.conf.locale.nn.formats.TIME_FORMAT',
               'django.conf.locale.nn.formats.DATETIME_FORMAT',
               'django.conf.locale.nn.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.nn.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.nn.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.nn.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.nn.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.nn.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.nn.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.nn.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.nn.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.nn.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.nn.formats.NUMBER_GROUPING',
               'django.conf.locale.sk.formats.DATE_FORMAT',
               'django.conf.locale.sk.formats.TIME_FORMAT',
               'django.conf.locale.sk.formats.DATETIME_FORMAT',
               'django.conf.locale.sk.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.sk.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.sk.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.sk.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.sk.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.sk.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.sk.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.sk.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.sk.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.sk.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.sk.formats.NUMBER_GROUPING',
               'django.conf.locale.ga.formats.DATE_FORMAT',
               'django.conf.locale.ga.formats.TIME_FORMAT',
               'django.conf.locale.ga.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.ga.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.ga.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.ga.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.he.formats.DATE_FORMAT',
               'django.conf.locale.he.formats.TIME_FORMAT',
               'django.conf.locale.he.formats.DATETIME_FORMAT',
               'django.conf.locale.he.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.he.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.he.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.he.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.he.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.he.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.hu.formats.DATE_FORMAT',
               'django.conf.locale.hu.formats.TIME_FORMAT',
               'django.conf.locale.hu.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.hu.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.hu.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.hu.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.es_AR.formats.DATE_FORMAT',
               'django.conf.locale.es_AR.formats.TIME_FORMAT',
               'django.conf.locale.es_AR.formats.DATETIME_FORMAT',
               'django.conf.locale.es_AR.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.es_AR.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.es_AR.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.es_AR.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.es_AR.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.es_AR.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.es_AR.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.es_AR.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.es_AR.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.es_AR.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.es_AR.formats.NUMBER_GROUPING',
               'django.conf.locale.bs.formats.DATE_FORMAT',
               'django.conf.locale.bs.formats.TIME_FORMAT',
               'django.conf.locale.bs.formats.DATETIME_FORMAT',
               'django.conf.locale.bs.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.bs.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.bs.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.bs.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.bs.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.th.formats.DATE_FORMAT',
               'django.conf.locale.th.formats.TIME_FORMAT',
               'django.conf.locale.th.formats.DATETIME_FORMAT',
               'django.conf.locale.th.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.th.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.th.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.th.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.th.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.th.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.cy.formats.DATE_FORMAT',
               'django.conf.locale.cy.formats.TIME_FORMAT',
               'django.conf.locale.cy.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.hi.formats.DATE_FORMAT',
               'django.conf.locale.hi.formats.TIME_FORMAT',
               'django.conf.locale.hi.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.hi.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.hi.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.hi.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.pl.formats.DATE_FORMAT',
               'django.conf.locale.pl.formats.TIME_FORMAT',
               'django.conf.locale.pl.formats.DATETIME_FORMAT',
               'django.conf.locale.pl.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.pl.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.pl.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.pl.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.pl.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.pl.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.pl.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.pl.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.pl.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.pl.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.pl.formats.NUMBER_GROUPING',
               'django.conf.locale.ro.formats.DATE_FORMAT',
               'django.conf.locale.ro.formats.TIME_FORMAT',
               'django.conf.locale.ro.formats.DATETIME_FORMAT',
               'django.conf.locale.ro.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.ro.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.ro.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.ro.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.ro.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.ro.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.km.formats.DATE_FORMAT',
               'django.conf.locale.km.formats.TIME_FORMAT',
               'django.conf.locale.km.formats.DATETIME_FORMAT',
               'django.conf.locale.km.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.km.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.km.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.km.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.km.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.mn.formats.DATE_FORMAT',
               'django.conf.locale.mn.formats.TIME_FORMAT',
               'django.conf.locale.mn.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.en_GB.formats.DATE_FORMAT',
               'django.conf.locale.en_GB.formats.TIME_FORMAT',
               'django.conf.locale.en_GB.formats.DATETIME_FORMAT',
               'django.conf.locale.en_GB.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.en_GB.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.en_GB.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.en_GB.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.en_GB.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.en_GB.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.en_GB.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.en_GB.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.en_GB.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.en_GB.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.en_GB.formats.NUMBER_GROUPING',
               'django.conf.locale.gl.formats.DATE_FORMAT',
               'django.conf.locale.gl.formats.TIME_FORMAT',
               'django.conf.locale.gl.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.gl.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.gl.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.gl.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.gl.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.fr.formats.DATE_FORMAT',
               'django.conf.locale.fr.formats.TIME_FORMAT',
               'django.conf.locale.fr.formats.DATETIME_FORMAT',
               'django.conf.locale.fr.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.fr.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.fr.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.fr.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.fr.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.fr.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.fr.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.fr.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.fr.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.fr.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.fr.formats.NUMBER_GROUPING',
               'django.conf.locale.sr.formats.DATE_FORMAT',
               'django.conf.locale.sr.formats.TIME_FORMAT',
               'django.conf.locale.sr.formats.DATETIME_FORMAT',
               'django.conf.locale.sr.formats.YEAR_MONTH_FORMAT',
               'django.conf.locale.sr.formats.MONTH_DAY_FORMAT',
               'django.conf.locale.sr.formats.SHORT_DATE_FORMAT',
               'django.conf.locale.sr.formats.SHORT_DATETIME_FORMAT',
               'django.conf.locale.sr.formats.FIRST_DAY_OF_WEEK',
               'django.conf.locale.sr.formats.DATE_INPUT_FORMATS',
               'django.conf.locale.sr.formats.TIME_INPUT_FORMATS',
               'django.conf.locale.sr.formats.DATETIME_INPUT_FORMATS',
               'django.conf.locale.sr.formats.DECIMAL_SEPARATOR',
               'django.conf.locale.sr.formats.THOUSAND_SEPARATOR',
               'django.conf.locale.sr.formats.NUMBER_GROUPING',
               'django.conf.urls.shortcut.urlpatterns',
               'django.conf.urls.defaults.__all__',
               'django.conf.urls.defaults.handler404',
               'django.conf.urls.defaults.handler500',
               'django.conf.urls.i18n.urlpatterns',
               'django.conf.project_template.urls.urlpatterns',
               'django.conf.project_template.settings.DEBUG',
               'django.conf.project_template.settings.TEMPLATE_DEBUG',
               'django.conf.project_template.settings.ADMINS',
               'django.conf.project_template.settings.MANAGERS',
               'django.conf.project_template.settings.DATABASES',
               'django.conf.project_template.settings.TIME_ZONE',
               'django.conf.project_template.settings.LANGUAGE_CODE',
               'django.conf.project_template.settings.SITE_ID',
               'django.conf.project_template.settings.USE_I18N',
               'django.conf.project_template.settings.USE_L10N',
               'django.conf.project_template.settings.MEDIA_ROOT',
               'django.conf.project_template.settings.MEDIA_URL',
               'django.conf.project_template.settings.STATIC_ROOT',
               'django.conf.project_template.settings.STATIC_URL',
               'django.conf.project_template.settings.ADMIN_MEDIA_PREFIX',
               'django.conf.project_template.settings.STATICFILES_DIRS',
               'django.conf.project_template.settings.STATICFILES_FINDERS',
               'django.conf.project_template.settings.SECRET_KEY',
               'django.conf.project_template.settings.TEMPLATE_LOADERS',
               'django.conf.project_template.settings.MIDDLEWARE_CLASSES',
               'django.conf.project_template.settings.ROOT_URLCONF',
               'django.conf.project_template.settings.TEMPLATE_DIRS',
               'django.conf.project_template.settings.INSTALLED_APPS',
               'django.conf.project_template.settings.LOGGING',
               'django.template.__all__',
               'django.template.context._standard_context_processors',
               'django.template.context._builtin_context_processors',
               'django.template.smartif.OPERATORS',
               'django.template.smartif.key',
               'django.template.smartif.op',
               'django.template.smartif.EndToken',
               'django.template.base.TOKEN_TEXT',
               'django.template.base.TOKEN_VAR',
               'django.template.base.TOKEN_BLOCK',
               'django.template.base.TOKEN_COMMENT',
               'django.template.base.FILTER_SEPARATOR',
               'django.template.base.FILTER_ARGUMENT_SEPARATOR',
               'django.template.base.VARIABLE_ATTRIBUTE_SEPARATOR',
               'django.template.base.BLOCK_TAG_START',
               'django.template.base.BLOCK_TAG_END',
               'django.template.base.VARIABLE_TAG_START',
               'django.template.base.VARIABLE_TAG_END',
               'django.template.base.COMMENT_TAG_START',
               'django.template.base.COMMENT_TAG_END',
               'django.template.base.TRANSLATOR_COMMENT_MARK',
               'django.template.base.SINGLE_BRACE_START',
               'django.template.base.SINGLE_BRACE_END',
               'django.template.base.ALLOWED_VARIABLE_CHARS',
               'django.template.base.UNKNOWN_SOURCE',
               'django.template.base.tag_re',
               'django.template.base.libraries',
               'django.template.base.builtins',
               'django.template.base.invalid_var_format_string',
               'django.template.base.constant_string',
               'django.template.base.constant_string',
               'django.template.base.filter_raw_string',
               'django.template.base.filter_re',
               'django.template.base.templatetags_modules',
               'django.template.defaultfilters.register',
               'django.template.defaultfilters.addslashes',
               'django.template.defaultfilters.capfirst',
               'django.template.defaultfilters.escapejs',
               'django.template.defaultfilters.fix_ampersands',
               'django.template.defaultfilters.pos_inf',
               'django.template.defaultfilters.neg_inf',
               'django.template.defaultfilters.nan',
               'django.template.defaultfilters.special_floats',
               'django.template.defaultfilters.iriencode',
               'django.template.defaultfilters.linenumbers',
               'django.template.defaultfilters.lower',
               'django.template.defaultfilters.make_list',
               'django.template.defaultfilters.slugify',
               'django.template.defaultfilters.title',
               'django.template.defaultfilters.truncatewords',
               'django.template.defaultfilters.truncatewords_html',
               'django.template.defaultfilters.upper',
               'django.template.defaultfilters.urlencode',
               'django.template.defaultfilters.urlize',
               'django.template.defaultfilters.urlizetrunc',
               'django.template.defaultfilters.wordcount',
               'django.template.defaultfilters.wordwrap',
               'django.template.defaultfilters.ljust',
               'django.template.defaultfilters.rjust',
               'django.template.defaultfilters.center',
               'django.template.defaultfilters.cut',
               'django.template.defaultfilters.escape',
               'django.template.defaultfilters.force_escape',
               'django.template.defaultfilters.linebreaks',
               'django.template.defaultfilters.linebreaksbr',
               'django.template.defaultfilters.safe',
               'django.template.defaultfilters.removetags',
               'django.template.defaultfilters.striptags',
               'django.template.defaulttags.register',
               'django.template.defaulttags.kwarg_re',
               'django.template.defaulttags.autoescape',
               'django.template.defaulttags.comment',
               'django.template.defaulttags.cycle',
               'django.template.defaulttags.debug',
               'django.template.defaulttags.do_filter',
               'django.template.defaulttags.firstof',
               'django.template.defaulttags.do_for',
               'django.template.defaulttags.ifequal',
               'django.template.defaulttags.ifnotequal',
               'django.template.defaulttags.do_if',
               'django.template.defaulttags.ifchanged',
               'django.template.defaulttags.ssi',
               'django.template.defaulttags.load',
               'django.template.defaulttags.now',
               'django.template.defaulttags.regroup',
               'django.template.defaulttags.spaceless',
               'django.template.defaulttags.templatetag',
               'django.template.defaulttags.url',
               'django.template.defaulttags.widthratio',
               'django.template.defaulttags.do_with',
               'django.template.loader.template_source_loaders',
               'django.template.loader_tags.register',
               'django.template.loader_tags.BLOCK_CONTEXT_KEY',
               'django.template.loaders.filesystem._loader',
               'django.template.loaders.eggs.resource_string',
               'django.template.loaders.eggs._loader',
               'django.template.loaders.app_directories.fs_encoding',
               'django.template.loaders.app_directories.app_template_dirs',
               'django.template.loaders.app_directories.app',
               'django.template.loaders.app_directories.mod',
               'django.template.loaders.app_directories.e',
               'django.template.loaders.app_directories.template_dir',
               'django.template.loaders.app_directories.app_template_dirs',
               'django.template.loaders.app_directories._loader',
               'django.middleware.csrf._POST_FORM_RE',
               'django.middleware.csrf._HTML_TYPES',
               'django.middleware.csrf.logger',
               'django.middleware.csrf.randrange',
               'django.middleware.csrf.randrange',
               'django.middleware.csrf._MAX_CSRF_KEY',
               'django.middleware.csrf.REASON_NO_REFERER',
               'django.middleware.csrf.REASON_BAD_REFERER',
               'django.middleware.csrf.REASON_NO_COOKIE',
               'django.middleware.csrf.REASON_NO_CSRF_COOKIE',
               'django.middleware.csrf.REASON_BAD_TOKEN',
               'django.middleware.common.logger',
               'django.middleware.gzip.re_accepts_gzip',
               'django.db.__all__',
               'django.db.alias',
               'django.db.database',
               'django.db.full_engine',
               'django.db.full_engine',
               'django.db.full_engine',
               'django.db.full_engine',
               'django.db.connections',
               'django.db.router',
               'django.db.connection',
               'django.db.backend',
               'django.db.utils.DEFAULT_DB_ALIAS',
               'django.db.backends.creation.TEST_DATABASE_PREFIX',
               'django.db.backends.signals.connection_created',
               'django.db.backends.util.logger',
               'django.db.backends.postgresql.base.e',
               'django.db.backends.postgresql.base.DatabaseError',
               'django.db.backends.postgresql.base.IntegrityError',
               'django.db.backends.postgresql.version.VERSION_RE',
               'django.db.backends.sqlite3.base.e1',
               'django.db.backends.sqlite3.base.exc',
               'django.db.backends.sqlite3.base.module',
               'django.db.backends.sqlite3.base.exc',
               'django.db.backends.sqlite3.base.module',
               'django.db.backends.sqlite3.base.DatabaseError',
               'django.db.backends.sqlite3.base.IntegrityError',
               'django.db.backends.sqlite3.base.FORMAT_QMARK_REGEX',
               'django.db.backends.oracle.introspection.foreign_key_re',
               'django.db.backends.oracle.base.e',
               'django.db.backends.oracle.base.DatabaseError',
               'django.db.backends.oracle.base.IntegrityError',
               'django.db.backends.oracle.base.convert_unicode',
               'django.db.backends.oracle.base.convert_unicode',
               'django.db.backends.oracle.creation.TEST_DATABASE_PREFIX',
               'django.db.backends.oracle.creation.PASSWORD',
               'django.db.backends.mysql.introspection.foreign_key_re',
               'django.db.backends.mysql.base.e',
               'django.db.backends.mysql.base.version',
               'django.db.backends.mysql.base.DatabaseError',
               'django.db.backends.mysql.base.IntegrityError',
               'django.db.backends.mysql.base.django_conversions',
               'django.db.backends.mysql.base.server_version_re',
               'django.db.backends.postgresql_psycopg2.base.e',
               'django.db.backends.postgresql_psycopg2.base.DatabaseError',
               'django.db.backends.postgresql_psycopg2.base.IntegrityError',
               'django.db.models.deletion.SET_NULL',
               'django.db.models.options.get_verbose_name',
               'django.db.models.options.DEFAULT_NAMES',
               'django.db.models.ADD',
               'django.db.models.CHANGE',
               'django.db.models.BOTH',
               'django.db.models.query.CHUNK_SIZE',
               'django.db.models.query.ITER_CHUNK_SIZE',
               'django.db.models.query.REPR_OUTPUT_SIZE',
               'django.db.models.query.EmptyResultSet',
               'django.db.models.loading.__all__',
               'django.db.models.loading.cache',
               'django.db.models.loading.get_apps',
               'django.db.models.loading.get_app',
               'django.db.models.loading.get_app_errors',
               'django.db.models.loading.get_models',
               'django.db.models.loading.get_model',
               'django.db.models.loading.register_models',
               'django.db.models.loading.load_app',
               'django.db.models.loading.app_cache_ready',
               'django.db.models.signals.class_prepared',
               'django.db.models.signals.pre_init',
               'django.db.models.signals.post_init',
               'django.db.models.signals.pre_save',
               'django.db.models.signals.post_save',
               'django.db.models.signals.pre_delete',
               'django.db.models.signals.post_delete',
               'django.db.models.signals.post_syncdb',
               'django.db.models.signals.m2m_changed',
               'django.db.models.sql.subqueries.__all__',
               'django.db.models.sql.__all__',
               'django.db.models.sql.query.__all__',
               'django.db.models.sql.aggregates.ordinal_aggregate_field',
               'django.db.models.sql.aggregates.computed_aggregate_field',
               'django.db.models.sql.where.AND',
               'django.db.models.sql.where.OR',
               'django.db.models.sql.constants.QUERY_TERMS',
               'django.db.models.sql.constants.x',
               'django.db.models.sql.constants.GET_ITERATOR_CHUNK_SIZE',
               'django.db.models.sql.constants.LOOKUP_SEP',
               'django.db.models.sql.constants.TABLE_NAME',
               'django.db.models.sql.constants.RHS_ALIAS',
               'django.db.models.sql.constants.JOIN_TYPE',
               'django.db.models.sql.constants.LHS_ALIAS',
               'django.db.models.sql.constants.LHS_JOIN_COL',
               'django.db.models.sql.constants.RHS_JOIN_COL',
               'django.db.models.sql.constants.NULLABLE',
               'django.db.models.sql.constants.MULTI',
               'django.db.models.sql.constants.SINGLE',
               'django.db.models.sql.constants.ORDER_PATTERN',
               'django.db.models.sql.constants.ORDER_DIR',
               'django.db.models.fields.related.RECURSIVE_RELATIONSHIP_CONSTANT',
               'django.db.models.fields.related.pending_lookups',
               'django.db.models.fields.BLANK_CHOICE_DASH',
               'django.db.models.fields.BLANK_CHOICE_NONE',
               'django.db.models.fields.ansi_date_re',
               'django.utils.text.capfirst',
               'django.utils.text.capfirst',
               'django.utils.text.wrap',
               'django.utils.text.truncate_words',
               'django.utils.text.truncate_html_words',
               'django.utils.text.get_valid_filename',
               'django.utils.text.get_text_list',
               'django.utils.text.normalize_newlines',
               'django.utils.text.recapitalize',
               'django.utils.text.phone2numeric',
               'django.utils.text.ustring_re',
               'django.utils.text.javascript_quote',
               'django.utils.text.smart_split_re',
               'django.utils.text.smart_split',
               'django.utils.text._entity_re',
               'django.utils.text.unescape_entities',
               'django.utils.text.unescape_string_literal',
               'django.utils.autoreload.termios',
               'django.utils.autoreload.RUN_RELOADER',
               'django.utils.autoreload._mtimes',
               'django.utils.autoreload._win',
               'django.utils.http.ETAG_MATCH',
               'django.utils.http.MONTHS',
               'django.utils.http.__D',
               'django.utils.http.__D2',
               'django.utils.http.__M',
               'django.utils.http.__Y',
               'django.utils.http.__Y2',
               'django.utils.http.__T',
               'django.utils.http.RFC1123_DATE',
               'django.utils.http.RFC850_DATE',
               'django.utils.http.ASCTIME_DATE',
               'django.utils.http.urlquote',
               'django.utils.http.urlquote_plus',
               'django.utils.formats._format_cache',
               'django.utils.formats._format_modules_cache',
               'django.utils.itercompat.product',
               'django.utils.dates.WEEKDAYS',
               'django.utils.dates.WEEKDAYS_ABBR',
               'django.utils.dates.WEEKDAYS_REV',
               'django.utils.dates.MONTHS',
               'django.utils.dates.MONTHS_3',
               'django.utils.dates.MONTHS_3_REV',
               'django.utils.dates.MONTHS_AP',
               'django.utils.dates.MONTHS_ALT',
               'django.utils.stopwords.stopwords',
               'django.utils.functional.WRAPPER_ASSIGNMENTS',
               'django.utils.functional.WRAPPER_UPDATES',
               'django.utils.copycompat.copy',
               'django.utils.copycompat.types',
               'django.utils.regex_helper.ESCAPE_MAPPINGS',
               'django.utils.feedgenerator.DefaultFeed',
               'django.utils.datetime_safe._illegal_formatting',
               'django.utils.checksums.__all__',
               'django.utils.checksums.LUHN_ODD_LOOKUP',
               'django.utils.hashcompat.md5_constructor',
               'django.utils.hashcompat.md5_hmac',
               'django.utils.hashcompat.sha_constructor',
               'django.utils.hashcompat.sha_hmac',
               'django.utils.hashcompat.md5_constructor',
               'django.utils.hashcompat.md5_hmac',
               'django.utils.hashcompat.sha_constructor',
               'django.utils.hashcompat.sha_hmac',
               'django.utils.dictconfig.IDENTIFIER',
               'django.utils.dictconfig.dictConfigClass',
               'django.utils._os.abspathu',
               'django.utils.html.LEADING_PUNCTUATION',
               'django.utils.html.TRAILING_PUNCTUATION',
               'django.utils.html.DOTS',
               'django.utils.html.unencoded_ampersands_re',
               'django.utils.html.word_split_re',
               'django.utils.html.punctuation_re',
               'django.utils.html.x',
               'django.utils.html.x',
               'django.utils.html.simple_email_re',
               'django.utils.html.link_target_attribute_re',
               'django.utils.html.html_gunk_re',
               'django.utils.html.hard_coded_bullets_re',
               'django.utils.html.x',
               'django.utils.html.trailing_empty_content_re',
               'django.utils.html.x',
               'django.utils.html.escape',
               'django.utils.html._base_js_escapes',
               'django.utils.html._js_escapes',
               'django.utils.html.z',
               'django.utils.html.escapejs',
               'django.utils.html.linebreaks',
               'django.utils.html.strip_tags',
               'django.utils.html.strip_spaces_between_tags',
               'django.utils.html.strip_entities',
               'django.utils.html.fix_ampersands',
               'django.utils.html.urlize',
               'django.utils.html.clean_html',
               'django.utils.termcolors.color_names',
               'django.utils.termcolors.foreground',
               'django.utils.termcolors.x',
               'django.utils.termcolors.background',
               'django.utils.termcolors.x',
               'django.utils.termcolors.RESET',
               'django.utils.termcolors.opt_dict',
               'django.utils.termcolors.NOCOLOR_PALETTE',
               'django.utils.termcolors.DARK_PALETTE',
               'django.utils.termcolors.LIGHT_PALETTE',
               'django.utils.termcolors.PALETTES',
               'django.utils.termcolors.DEFAULT_PALETTE',
               'django.utils.dateformat.re_formatchars',
               'django.utils.dateformat.re_escaped',
               'django.utils.cache.cc_delim_re',
               'django.utils.encoding.DEFAULT_LOCALE_ENCODING',
               'django.utils.encoding.DEFAULT_LOCALE_ENCODING',
               'django.utils.log.getLogger',
               'django.utils.log.logger',
               'django.utils.translation.__all__',
               'django.utils.translation._trans',
               'django.utils.translation.Trans',
               'django.utils.translation.ugettext_noop',
               'django.utils.translation.ngettext_lazy',
               'django.utils.translation.gettext_lazy',
               'django.utils.translation.ungettext_lazy',
               'django.utils.translation.ugettext_lazy',
               'django.utils.translation.pgettext_lazy',
               'django.utils.translation.npgettext_lazy',
               'django.utils.translation.string_concat',
               'django.utils.translation.trans_real._translations',
               'django.utils.translation.trans_real._active',
               'django.utils.translation.trans_real._default',
               'django.utils.translation.trans_real._accepted',
               'django.utils.translation.trans_real.CONTEXT_SEPARATOR',
               'django.utils.translation.trans_real.accept_language_re',
               'django.utils.translation.trans_real.dot_re',
               'django.utils.translation.trans_real.inline_re',
               'django.utils.translation.trans_real.block_re',
               'django.utils.translation.trans_real.endblock_re',
               'django.utils.translation.trans_real.plural_re',
               'django.utils.translation.trans_real.constant_re',
               'django.utils.translation.trans_null.ngettext_lazy',
               'django.utils.translation.trans_null.activate',
               'django.utils.translation.trans_null.deactivate',
               'django.utils.translation.trans_null.deactivate_all',
               'django.utils.translation.trans_null.get_language',
               'django.utils.translation.trans_null.get_language_bidi',
               'django.utils.translation.trans_null.check_for_language',
               'django.utils.translation.trans_null.TECHNICAL_ID_MAP',
               'django.utils.translation.trans_null.gettext_noop',
               'django.utils.translation.trans_null.gettext_lazy',
               'django.utils.translation.trans_null._',
               'django.utils.simplejson.decoder.c_scanstring',
               'django.utils.simplejson.decoder.__all__',
               'django.utils.simplejson.decoder.FLAGS',
               'django.utils.simplejson.decoder.NaN',
               'django.utils.simplejson.decoder.PosInf',
               'django.utils.simplejson.decoder.NegInf',
               'django.utils.simplejson.decoder._CONSTANTS',
               'django.utils.simplejson.decoder.STRINGCHUNK',
               'django.utils.simplejson.decoder.BACKSLASH',
               'django.utils.simplejson.decoder.DEFAULT_ENCODING',
               'django.utils.simplejson.decoder.scanstring',
               'django.utils.simplejson.decoder.WHITESPACE',
               'django.utils.simplejson.decoder.WHITESPACE_STR',
               'django.utils.simplejson.__version__',
               'django.utils.simplejson.use_system_version',
               'django.utils.simplejson.use_system_version',
               'django.utils.simplejson.use_system_version',
               'django.utils.simplejson.__all__',
               'django.utils.simplejson._default_encoder',
               'django.utils.simplejson._default_decoder',
               'django.utils.simplejson.encoder.c_encode_basestring_ascii',
               'django.utils.simplejson.encoder.c_make_encoder',
               'django.utils.simplejson.encoder.ESCAPE',
               'django.utils.simplejson.encoder.ESCAPE_ASCII',
               'django.utils.simplejson.encoder.HAS_UTF8',
               'django.utils.simplejson.encoder.ESCAPE_DCT',
               'django.utils.simplejson.encoder.i',
               'django.utils.simplejson.encoder.INFINITY',
               'django.utils.simplejson.encoder.FLOAT_REPR',
               'django.utils.simplejson.encoder.encode_basestring_ascii',
               'django.utils.simplejson.scanner.c_make_scanner',
               'django.utils.simplejson.scanner.__all__',
               'django.utils.simplejson.scanner.NUMBER_RE',
               'django.utils.simplejson.scanner.make_scanner',
               'django.utils.unittest.result.__unittest',
               'django.utils.unittest.result.STDOUT_LINE',
               'django.utils.unittest.result.STDERR_LINE',
               'django.utils.unittest.__all__',
               'django.utils.unittest.__version__',
               'django.utils.unittest._TextTestResult',
               'django.utils.unittest.__unittest',
               'django.utils.unittest.main.installHandler',
               'django.utils.unittest.main.__unittest',
               'django.utils.unittest.main.FAILFAST',
               'django.utils.unittest.main.CATCHBREAK',
               'django.utils.unittest.main.BUFFEROUTPUT',
               'django.utils.unittest.main.USAGE_AS_MAIN',
               'django.utils.unittest.main.USAGE_FROM_MODULE',
               'django.utils.unittest.main.main',
               'django.utils.unittest.case.__unittest',
               'django.utils.unittest.case.DIFF_OMITTED',
               'django.utils.unittest.compatibility.__unittest',
               'django.utils.unittest.compatibility.relpath',
               'django.utils.unittest.compatibility.relpath',
               'django.utils.unittest.__main__.__unittest',
               'django.utils.unittest.loader.__unittest',
               'django.utils.unittest.loader.VALID_MODULE_NAME',
               'django.utils.unittest.loader.defaultTestLoader',
               'django.utils.unittest.suite.__unittest',
               'django.utils.unittest.signals.__unittest',
               'django.utils.unittest.signals._results',
               'django.utils.unittest.signals._interrupt_handler',
               'django.utils.unittest.util.__unittest',
               'django.utils.unittest.util._MAX_LENGTH',
               'django.utils.unittest.runner.__unittest',
               'django.views.csrf.CSRF_FAILRE_TEMPLATE',
               'django.views.debug.HIDDEN_SETTINGS',
               'django.views.debug.TECHNICAL_500_TEMPLATE',
               'django.views.debug.TECHNICAL_404_TEMPLATE',
               'django.views.debug.EMPTY_URLCONF_TEMPLATE',
               'django.views.static.DEFAULT_DIRECTORY_INDEX_TEMPLATE',
               'django.views.i18n.NullSource',
               'django.views.i18n.LibHead',
               'django.views.i18n.LibFoot',
               'django.views.i18n.LibFormatHead',
               'django.views.i18n.LibFormatFoot',
               'django.views.i18n.SimplePlural',
               'django.views.i18n.InterPolate',
               'django.views.i18n.PluralIdx',
               'django.views.decorators.csrf.csrf_protect',
               'django.views.decorators.csrf.requires_csrf_token',
               'django.views.decorators.http.conditional_page',
               'django.views.decorators.http.logger',
               'django.views.decorators.http.require_GET',
               'django.views.decorators.http.require_POST',
               'django.views.decorators.gzip.gzip_page',
               'django.views.generic.simple.logger',
               'django.views.generic.base.logger'],
 'FUNCTIONS': [('django.get_version', [], ''),
               ('django.core.xheaders.populate_xheaders',
                ['request', 'response', 'model', 'object_id'],
                '\n    Adds the "X-Object-Type" and "X-Object-Id" headers to the given\n    HttpResponse according to the given model and object_id -- but only if the\n    given HttpRequest object has an IP address within the INTERNAL_IPS setting\n    or if the request is from a logged in staff member.\n    '),
               ('django.core.urlresolvers.get_callable',
                ['lookup_view', 'can_fail=False'],
                '\n    Convert a string version of a function name to the callable object.\n\n    If the lookup_view is not an import path, it is assumed to be a URL pattern\n    label and the original string is returned.\n\n    If can_fail is True, lookup_view might be a URL pattern label, so errors\n    during the import fail and the string is returned.\n    '),
               ('django.core.urlresolvers.get_resolver', ['urlconf'], ''),
               ('django.core.urlresolvers.get_mod_func', ['callback'], ''),
               ('django.core.urlresolvers.resolve', ['path', 'urlconf=None'], ''),
               ('django.core.urlresolvers.reverse',
                ['viewname',
                 'urlconf=None',
                 'args=None',
                 'kwargs=None',
                 'prefix=None',
                 'current_app=None'],
                ''),
               ('django.core.urlresolvers.clear_url_caches', [], ''),
               ('django.core.urlresolvers.set_script_prefix',
                ['prefix'],
                '\n    Sets the script prefix for the current thread.\n    '),
               ('django.core.urlresolvers.get_script_prefix',
                [],
                '\n    Returns the currently active script prefix. Useful for client code that\n    wishes to construct their own URLs manually (although accessing the request\n    instance is normally going to be a lot cleaner).\n    '),
               ('django.core.urlresolvers.set_urlconf',
                ['urlconf_name'],
                '\n    Sets the URLconf for the current thread (overriding the default one in\n    settings). Set to None to revert back to the default.\n    '),
               ('django.core.urlresolvers.get_urlconf',
                ['default=None'],
                '\n    Returns the root URLconf to use for the current thread if it has been\n    changed from the default one.\n    '),
               ('django.core.context_processors.auth',
                ['request'],
                '\n    DEPRECATED. This context processor is the old location, and has been moved\n    to `django.contrib.auth.context_processors`.\n\n    This function still exists for backwards-compatibility; it will be removed\n    in Django 1.4.\n    '),
               ('django.core.context_processors.csrf',
                ['request'],
                "\n    Context processor that provides a CSRF token, or the string 'NOTPROVIDED' if\n    it has not been provided by either a view decorator or the middleware\n    "),
               ('django.core.context_processors.debug',
                ['request'],
                'Returns context variables helpful for debugging.'),
               ('django.core.context_processors.i18n', ['request'], ''),
               ('django.core.context_processors.static',
                ['request'],
                '\n    Adds static-related context variables to the context.\n\n    '),
               ('django.core.context_processors.media',
                ['request'],
                '\n    Adds media-related context variables to the context.\n\n    '),
               ('django.core.context_processors.request', ['request'], ''),
               ('django.core.validators.validate_integer', ['value'], ''),
               ('django.core.files.locks.fd',
                ['f'],
                'Get a filedescriptor from something which could be a file or an fd.'),
               ('django.core.files.locks.lock', ['file', 'flags'], ''),
               ('django.core.files.locks.unlock', ['file'], ''),
               ('django.core.files.locks.lock', ['file', 'flags'], ''),
               ('django.core.files.locks.unlock', ['file'], ''),
               ('django.core.files.locks.lock', ['file', 'flags'], ''),
               ('django.core.files.locks.unlock', ['file'], ''),
               ('django.core.files.storage.get_storage_class', ['import_path=None'], ''),
               ('django.core.files.uploadhandler.load_handler',
                ['path', '*args', '**kwargs'],
                "\n    Given a path to a handler, return an instance of that handler.\n\n    E.g.::\n        >>> load_handler('django.core.files.uploadhandler.TemporaryFileUploadHandler', request)\n        <TemporaryFileUploadHandler object at 0x...>\n\n    "),
               ('django.core.files.images.get_image_dimensions',
                ['file_or_path', 'close=False'],
                "\n    Returns the (width, height) of an image, given an open file or a path.  Set\n    'close' to True to close the file at the end if it is initially in an open\n    state.\n    "),
               ('django.core.files.move.copystat',
                ['src', 'dst'],
                'Copy all stat info (mode bits, atime and mtime) from src to dst'),
               ('django.core.files.move._samefile', ['src', 'dst'], ''),
               ('django.core.files.move.file_move_safe',
                ['old_file_name',
                 'new_file_name',
                 'chunk_size=1024*64',
                 'allow_overwrite=False'],
                '\n    Moves a file from one location to another in the safest way possible.\n\n    First, tries ``os.rename``, which is simple but will break across filesystems.\n    If that fails, streams manually from one file to another in pure Python.\n\n    If the destination file exists and ``allow_overwrite`` is ``False``, this\n    function will throw an ``IOError``.\n    '),
               ('django.core.servers.fastcgi.fastcgi_help', ['message=None'], ''),
               ('django.core.servers.fastcgi.runfastcgi', ['argset=[]', '**kwargs'], ''),
               ('django.core.servers.basehttp._formatparam',
                ['param', 'value=None', 'quote=1'],
                'Convenience function to format and return a key=value pair.\n\n    This will quote the value if needed or if quote is true.\n    '),
               ('django.core.servers.basehttp.guess_scheme',
                ['environ'],
                "Return a guess for whether 'wsgi.url_scheme' should be 'http' or 'https'\n    "),
               ('django.core.servers.basehttp.is_hop_by_hop',
                ['header_name'],
                'Return true if \'header_name\' is an HTTP/1.1 "Hop-by-Hop" header'),
               ('django.core.servers.basehttp.run',
                ['addr', 'port', 'wsgi_handler', 'ipv6=False'],
                ''),
               ('django.core.mail.get_connection',
                ['backend=None', 'fail_silently=False', '**kwds'],
                'Load an e-mail backend and return an instance of it.\n\n    If backend is None (default) settings.EMAIL_BACKEND is used.\n\n    Both fail_silently and other keyword arguments are used in the\n    constructor of the backend.\n    '),
               ('django.core.mail.send_mail',
                ['subject',
                 'message',
                 'from_email',
                 'recipient_list',
                 'fail_silently=False',
                 'auth_user=None',
                 'auth_password=None',
                 'connection=None'],
                "\n    Easy wrapper for sending a single message to a recipient list. All members\n    of the recipient list will see the other recipients in the 'To' field.\n\n    If auth_user is None, the EMAIL_HOST_USER setting is used.\n    If auth_password is None, the EMAIL_HOST_PASSWORD setting is used.\n\n    Note: The API for this method is frozen. New code wanting to extend the\n    functionality should use the EmailMessage class directly.\n    "),
               ('django.core.mail.send_mass_mail',
                ['datatuple',
                 'fail_silently=False',
                 'auth_user=None',
                 'auth_password=None',
                 'connection=None'],
                "\n    Given a datatuple of (subject, message, from_email, recipient_list), sends\n    each message to each recipient list. Returns the number of e-mails sent.\n\n    If from_email is None, the DEFAULT_FROM_EMAIL setting is used.\n    If auth_user and auth_password are set, they're used to log in.\n    If auth_user is None, the EMAIL_HOST_USER setting is used.\n    If auth_password is None, the EMAIL_HOST_PASSWORD setting is used.\n\n    Note: The API for this method is frozen. New code wanting to extend the\n    functionality should use the EmailMessage class directly.\n    "),
               ('django.core.mail.mail_admins',
                ['subject',
                 'message',
                 'fail_silently=False',
                 'connection=None',
                 'html_message=None'],
                'Sends a message to the admins, as defined by the ADMINS setting.'),
               ('django.core.mail.mail_managers',
                ['subject',
                 'message',
                 'fail_silently=False',
                 'connection=None',
                 'html_message=None'],
                'Sends a message to the managers, as defined by the MANAGERS setting.'),
               ('django.core.mail.message.make_msgid',
                ['idstring=None'],
                'Returns a string suitable for RFC 2822 compliant Message-ID, e.g:\n\n    <20020201195627.33539.96671@nightshade.la.mastaler.com>\n\n    Optional idstring if given is a string used to strengthen the\n    uniqueness of the message id.\n    '),
               ('django.core.mail.message.forbid_multi_line_headers',
                ['name', 'val', 'encoding'],
                'Forbids multi-line headers, to prevent header injection.'),
               ('django.core.mail.message.sanitize_address', ['addr', 'encoding'], ''),
               ('django.core.cache.parse_backend_uri',
                ['backend_uri'],
                '\n    Converts the "backend_uri" into a cache scheme (\'db\', \'memcached\', etc), a\n    host and any extra params that are required for the backend. Returns a\n    (scheme, host, params) tuple.\n    '),
               ('django.core.cache.parse_backend_conf',
                ['backend', '**kwargs'],
                "\n    Helper function to parse the backend configuration\n    that doesn't use the URI notation.\n    "),
               ('django.core.cache.get_cache',
                ['backend', '**kwargs'],
                "\n    Function to load a cache backend dynamically. This is flexible by design\n    to allow different use cases:\n\n    To load a backend with the old URI-based notation::\n\n        cache = get_cache('locmem://')\n\n    To load a backend that is pre-defined in the settings::\n\n        cache = get_cache('default')\n\n    To load a backend with its dotted import path,\n    including arbitrary options::\n\n        cache = get_cache('django.core.cache.backends.memcached.MemcachedCache', **{\n            'LOCATION': '127.0.0.1:11211', 'TIMEOUT': 30,\n        })\n\n    "),
               ('django.core.cache.backends.base.default_key_func',
                ['key', 'key_prefix', 'version'],
                "\n    Default function to generate keys.\n\n    Constructs the key used by all other methods. By default it prepends\n    the `key_prefix'. KEY_FUNCTION can be used to specify an alternate\n    function with custom key making behavior.\n    "),
               ('django.core.cache.backends.base.get_key_func',
                ['key_func'],
                '\n    Function to decide which key function to use.\n\n    Defaults to ``default_key_func``.\n    '),
               ('django.core.serializers.json.Deserializer',
                ['stream_or_string', '**options'],
                '\n    Deserialize a stream or string of JSON data.\n    '),
               ('django.core.serializers.register_serializer',
                ['format', 'serializer_module', 'serializers=None'],
                'Register a new serializer.\n\n    ``serializer_module`` should be the fully qualified module name\n    for the serializer.\n\n    If ``serializers`` is provided, the registration will be added\n    to the provided dictionary.\n\n    If ``serializers`` is not provided, the registration will be made\n    directly into the global register of serializers. Adding serializers\n    directly is not a thread-safe operation.\n    '),
               ('django.core.serializers.unregister_serializer',
                ['format'],
                'Unregister a given serializer. This is not a thread-safe operation.'),
               ('django.core.serializers.get_serializer', ['format'], ''),
               ('django.core.serializers.get_serializer_formats', [], ''),
               ('django.core.serializers.get_public_serializer_formats', [], ''),
               ('django.core.serializers.get_deserializer', ['format'], ''),
               ('django.core.serializers.serialize',
                ['format', 'queryset', '**options'],
                '\n    Serialize a queryset (or any iterator that returns database objects) using\n    a certain serializer.\n    '),
               ('django.core.serializers.deserialize',
                ['format', 'stream_or_string', '**options'],
                '\n    Deserialize a stream or a string. Returns an iterator that yields ``(obj,\n    m2m_relation_dict)``, where ``obj`` is a instantiated -- but *unsaved* --\n    object, and ``m2m_relation_dict`` is a dictionary of ``{m2m_field_name :\n    list_of_related_objects}``.\n    '),
               ('django.core.serializers._load_serializers',
                [],
                '\n    Register built-in and settings-defined serializers. This is done lazily so\n    that user code has a chance to (e.g.) set up custom settings without\n    needing to be careful of import order.\n    '),
               ('django.core.serializers.pyyaml.Deserializer',
                ['stream_or_string', '**options'],
                '\n    Deserialize a stream or string of YAML data.\n    '),
               ('django.core.serializers.python.Deserializer',
                ['object_list', '**options'],
                "\n    Deserialize simple Python objects back into Django ORM instances.\n\n    It's expected that you pass the Python objects themselves (instead of a\n    stream or a string) to the constructor\n    "),
               ('django.core.serializers.python._get_model',
                ['model_identifier'],
                '\n    Helper to look up a model from an "app_label.module_name" string.\n    '),
               ('django.core.serializers.xml_serializer.getInnerText',
                ['node'],
                '\n    Get all the inner text of a DOM node (recursively).\n    '),
               ('django.core.management.sql.sql_create',
                ['app', 'style', 'connection'],
                'Returns a list of the CREATE TABLE SQL statements for the given app.'),
               ('django.core.management.sql.sql_delete',
                ['app', 'style', 'connection'],
                'Returns a list of the DROP TABLE SQL statements for the given app.'),
               ('django.core.management.sql.sql_reset',
                ['app', 'style', 'connection'],
                'Returns a list of the DROP TABLE SQL, then the CREATE TABLE SQL, for the given module.'),
               ('django.core.management.sql.sql_flush',
                ['style', 'connection', 'only_django=False'],
                '\n    Returns a list of the SQL statements used to flush the database.\n\n    If only_django is True, then only table names that have associated Django\n    models and are in INSTALLED_APPS will be included.\n    '),
               ('django.core.management.sql.sql_custom',
                ['app', 'style', 'connection'],
                'Returns a list of the custom table modifying SQL statements for the given app.'),
               ('django.core.management.sql.sql_indexes',
                ['app', 'style', 'connection'],
                'Returns a list of the CREATE INDEX SQL statements for all models in the given app.'),
               ('django.core.management.sql.sql_all',
                ['app', 'style', 'connection'],
                'Returns a list of CREATE TABLE SQL, initial-data inserts, and CREATE INDEX SQL for the given module.'),
               ('django.core.management.sql.custom_sql_for_model',
                ['model', 'style', 'connection'],
                ''),
               ('django.core.management.sql.emit_post_sync_signal',
                ['created_models', 'verbosity', 'interactive', 'db'],
                ''),
               ('django.core.management.color.supports_color',
                [],
                "\n    Returns True if the running system's terminal supports color, and False\n    otherwise.\n    "),
               ('django.core.management.color.color_style',
                [],
                'Returns a Style object with the Django color scheme.'),
               ('django.core.management.color.no_style',
                [],
                'Returns a Style object that has no colors.'),
               ('django.core.management.find_commands',
                ['management_dir'],
                '\n    Given a path to a management directory, returns a list of all the command\n    names that are available.\n\n    Returns an empty list if no commands are defined.\n    '),
               ('django.core.management.find_management_module',
                ['app_name'],
                '\n    Determines the path to the management module for the given app_name,\n    without actually importing the application or the management module.\n\n    Raises ImportError if the management module cannot be found for any reason.\n    '),
               ('django.core.management.load_command_class',
                ['app_name', 'name'],
                '\n    Given a command name and an application name, returns the Command\n    class instance. All errors raised by the import process\n    (ImportError, AttributeError) are allowed to propagate.\n    '),
               ('django.core.management.get_commands',
                [],
                '\n    Returns a dictionary mapping command names to their callback applications.\n\n    This works by looking for a management.commands package in django.core, and\n    in each installed application -- if a commands package exists, all commands\n    in that package are registered.\n\n    Core commands are always included. If a settings module has been\n    specified, user-defined commands will also be included, the\n    startproject command will be disabled, and the startapp command\n    will be modified to use the directory in which the settings module appears.\n\n    The dictionary is in the format {command_name: app_name}. Key-value\n    pairs from this dictionary can then be used in calls to\n    load_command_class(app_name, command_name)\n\n    If a specific version of a command must be loaded (e.g., with the\n    startapp command), the instantiated module can be placed in the\n    dictionary in place of the application name.\n\n    The dictionary is cached on the first call and reused on subsequent\n    calls.\n    '),
               ('django.core.management.call_command',
                ['name', '*args', '**options'],
                "\n    Calls the given command, with the given options and args/kwargs.\n\n    This is the primary API you should use for calling specific commands.\n\n    Some examples:\n        call_command('syncdb')\n        call_command('shell', plain=True)\n        call_command('sqlall', 'myapp')\n    "),
               ('django.core.management.setup_environ',
                ['settings_mod', 'original_settings_path=None'],
                '\n    Configures the runtime environment. This can also be used by external\n    scripts wanting to set up a similar environment to manage.py.\n    Returns the project directory (assuming the passed settings module is\n    directly in the project directory).\n\n    The "original_settings_path" parameter is optional, but recommended, since\n    trying to work out the original path from the module can be problematic.\n    '),
               ('django.core.management.execute_from_command_line',
                ['argv=None'],
                '\n    A simple method that runs a ManagementUtility.\n    '),
               ('django.core.management.execute_manager',
                ['settings_mod', 'argv=None'],
                '\n    Like execute_from_command_line(), but for use by manage.py, a\n    project-specific django-admin.py utility.\n    '),
               ('django.core.management.validation.get_validation_errors',
                ['outfile', 'app=None'],
                '\n    Validates all models that are part of the specified app. If no app name is provided,\n    validates all models of all installed apps. Writes errors, if any, to outfile.\n    Returns number of errors.\n    '),
               ('django.core.management.base.handle_default_options',
                ['options'],
                '\n    Include any default options that all commands should accept here\n    so that ManagementUtility can handle them before searching for\n    user commands.\n\n    '),
               ('django.core.management.base.copy_helper',
                ['style', 'app_or_project', 'name', 'directory', "other_name=''"],
                '\n    Copies either a Django application layout template or a Django project\n    layout template into the specified directory.\n\n    '),
               ('django.core.management.base._make_writeable',
                ['filename'],
                '\n    Make sure that the file is writeable. Useful if our source is\n    read-only.\n\n    '),
               ('django.core.management.commands.makemessages.handle_extensions',
                ["extensions=('html')"],
                "\n    organizes multiple extensions that are separated with commas or passed by\n    using --extension/-e multiple times.\n\n    for example: running 'django-admin makemessages -e js,txt -e xhtml -a'\n    would result in a extension list: ['.js', '.txt', '.xhtml']\n\n    >>> handle_extensions(['.html', 'html,js,py,py,py,.py', 'py,.py'])\n    ['.html', '.js']\n    >>> handle_extensions(['.html, txt,.tpl'])\n    ['.html', '.tpl', '.txt']\n    "),
               ('django.core.management.commands.makemessages._popen',
                ['cmd'],
                '\n    Friendly wrapper around Popen for Windows\n    '),
               ('django.core.management.commands.makemessages.walk',
                ['root', 'topdown=True', 'onerror=None', 'followlinks=False'],
                '\n    A version of os.walk that can follow symlinks for Python < 2.6\n    '),
               ('django.core.management.commands.makemessages.is_ignored',
                ['path', 'ignore_patterns'],
                '\n    Helper function to check if the given path should be ignored or not.\n    '),
               ('django.core.management.commands.makemessages.find_files',
                ['root', 'ignore_patterns', 'verbosity', 'symlinks=False'],
                '\n    Helper function to get all files in the given root.\n    '),
               ('django.core.management.commands.makemessages.copy_plural_forms',
                ['msgs', 'locale', 'domain', 'verbosity'],
                '\n    Copies plural forms header contents from a Django catalog of locale to\n    the msgs string, inserting it at the right place. msgs should be the\n    contents of a newly created .po file.\n    '),
               ('django.core.management.commands.makemessages.make_messages',
                ['locale=None',
                 "domain='django'",
                 "verbosity='1'",
                 'all=False',
                 'extensions=None',
                 'symlinks=False',
                 'ignore_patterns=[]',
                 'no_wrap=False',
                 'no_obsolete=False'],
                '\n    Uses the locale directory from the Django SVN tree or an application/\n    project to process all\n    '),
               ('django.core.management.commands.diffsettings.module_to_dict',
                ['module', "omittable=lambda k: k.startswith('_')"],
                'Converts a module namespace to a Python dictionary. Used by get_settings_diff.'),
               ('django.core.management.commands.compilemessages.has_bom', ['fn'], ''),
               ('django.core.management.commands.compilemessages.compile_messages',
                ['stderr', 'locale=None'],
                ''),
               ('django.core.management.commands.dumpdata.sort_dependencies',
                ['app_list'],
                "Sort a list of app,modellist pairs into a single list of models.\n\n    The single list of models is sorted so that any model with a natural key\n    is serialized before a normal model, and any model with a natural key\n    dependency has it's dependencies serialized first.\n    "),
               ('django.core.handlers.modpython.handler', ['req'], ''),
               ('django.core.handlers.profiler-hotshot.handler',
                ['req'],
                '\n    Handler that uses hotshot to store profile data.\n\n    Stores profile data in PROFILE_DATA_DIR.  Since hotshot has no way (that I\n    know of) to append profile data to a single file, each request gets its own\n    profile.  The file names are in the format <url>.<n>.prof where <url> is\n    the request path with "/" replaced by ".", and <n> is a timestamp with\n    microseconds to prevent overwriting files.\n\n    Use the gather_profile_stats.py script to gather these individual request\n    profiles into aggregated profiles by request path.\n    '),
               ('django.core.handlers.base.get_script_name',
                ['environ'],
                "\n    Returns the equivalent of the HTTP request's SCRIPT_NAME environment\n    variable. If Apache mod_rewrite has been used, returns what would have been\n    the script name prior to any rewriting (so it's the script name as seen\n    from the client's perspective), unless DJANGO_USE_POST_REWRITE is set (to\n    anything).\n    "),
               ('django.templatetags.static.get_static_prefix',
                ['parser', 'token'],
                '\n    Populates a template variable with the static prefix,\n    ``settings.STATIC_URL``.\n\n    Usage::\n\n        {% get_static_prefix [as varname] %}\n\n    Examples::\n\n        {% get_static_prefix %}\n        {% get_static_prefix as static_prefix %}\n\n    '),
               ('django.templatetags.static.get_media_prefix',
                ['parser', 'token'],
                '\n    Populates a template variable with the static prefix,\n    ``settings.MEDIA_URL``.\n\n    Usage::\n\n        {% get_media_prefix [as varname] %}\n\n    Examples::\n\n        {% get_media_prefix %}\n        {% get_media_prefix as media_prefix %}\n\n    '),
               ('django.templatetags.future.ssi',
                ['parser', 'token'],
                '\n    Outputs the contents of a given file into the page.\n\n    Like a simple "include" tag, the ``ssi`` tag includes the contents\n    of another file -- which must be specified using an absolute path --\n    in the current page::\n\n        {% ssi "/home/html/ljworld.com/includes/right_generic.html" %}\n\n    If the optional "parsed" parameter is given, the contents of the included\n    file are evaluated as template code, with the current context::\n\n        {% ssi "/home/html/ljworld.com/includes/right_generic.html" parsed %}\n    '),
               ('django.templatetags.future.url',
                ['parser', 'token'],
                '\n    Returns an absolute URL matching given view with its parameters.\n\n    This is a way to define links that aren\'t tied to a particular URL\n    configuration::\n\n        {% url "path.to.some_view" arg1 arg2 %}\n\n        or\n\n        {% url "path.to.some_view" name1=value1 name2=value2 %}\n\n    The first argument is a path to a view. It can be an absolute python path\n    or just ``app_name.view_name`` without the project name if the view is\n    located inside the project.  Other arguments are comma-separated values\n    that will be filled in place of positional and keyword arguments in the\n    URL. All arguments for the URL should be present.\n\n    For example if you have a view ``app_name.client`` taking client\'s id and\n    the corresponding line in a URLconf looks like this::\n\n        (\'^client/(\\d+)/$\', \'app_name.client\')\n\n    and this app\'s URLconf is included into the project\'s URLconf under some\n    path::\n\n        (\'^clients/\', include(\'project_name.app_name.urls\'))\n\n    then in a template you can create a link for a certain client like this::\n\n        {% url "app_name.client" client.id %}\n\n    The URL will look like ``/clients/client/123/``.\n    '),
               ('django.templatetags.cache.do_cache',
                ['parser', 'token'],
                '\n    This will cache the contents of a template fragment for a given amount\n    of time.\n\n    Usage::\n\n        {% load cache %}\n        {% cache [expire_time] [fragment_name] %}\n            .. some expensive processing ..\n        {% endcache %}\n\n    This tag also supports varying by a list of arguments::\n\n        {% load cache %}\n        {% cache [expire_time] [fragment_name] [var1] [var2] .. %}\n            .. some expensive processing ..\n        {% endcache %}\n\n    Each unique set of arguments will result in a unique cache entry.\n    '),
               ('django.templatetags.l10n.localize',
                ['value'],
                '\n    Forces a value to be rendered as a localized value,\n    regardless of the value of ``settings.USE_L10N``.\n    '),
               ('django.templatetags.l10n.unlocalize',
                ['value'],
                '\n    Forces a value to be rendered as a non-localized value,\n    regardless of the value of ``settings.USE_L10N``.\n    '),
               ('django.templatetags.l10n.localize_tag',
                ['parser', 'token'],
                '\n    Forces or prevents localization of values, regardless of the value of\n    `settings.USE_L10N`.\n\n    Sample usage::\n\n        {% localize off %}\n            var pi = {{ 3.1415 }};\n        {% endlocalize %}\n\n    '),
               ('django.templatetags.i18n.do_get_available_languages',
                ['parser', 'token'],
                '\n    This will store a list of available languages\n    in the context.\n\n    Usage::\n\n        {% get_available_languages as languages %}\n        {% for language in languages %}\n        ...\n        {% endfor %}\n\n    This will just pull the LANGUAGES setting from\n    your setting file (or the default settings) and\n    put it into the named variable.\n    '),
               ('django.templatetags.i18n.do_get_language_info',
                ['parser', 'token'],
                '\n    This will store the language information dictionary for the given language\n    code in a context variable.\n\n    Usage::\n\n        {% get_language_info for LANGUAGE_CODE as l %}\n        {{ l.code }}\n        {{ l.name }}\n        {{ l.name_local }}\n        {{ l.bidi|yesno:"bi-directional,uni-directional" }}\n    '),
               ('django.templatetags.i18n.do_get_language_info_list',
                ['parser', 'token'],
                '\n    This will store a list of language information dictionaries for the given\n    language codes in a context variable. The language codes can be specified\n    either as a list of strings or a settings.LANGUAGES style tuple (or any\n    sequence of sequences whose first items are language codes).\n\n    Usage::\n\n        {% get_language_info_list for LANGUAGES as langs %}\n        {% for l in langs %}\n          {{ l.code }}\n          {{ l.name }}\n          {{ l.name_local }}\n          {{ l.bidi|yesno:"bi-directional,uni-directional" }}\n        {% endfor %}\n    '),
               ('django.templatetags.i18n.language_name', ['lang_code'], ''),
               ('django.templatetags.i18n.language_name_local', ['lang_code'], ''),
               ('django.templatetags.i18n.language_bidi', ['lang_code'], ''),
               ('django.templatetags.i18n.do_get_current_language',
                ['parser', 'token'],
                "\n    This will store the current language in the context.\n\n    Usage::\n\n        {% get_current_language as language %}\n\n    This will fetch the currently active language and\n    put it's value into the ``language`` context\n    variable.\n    "),
               ('django.templatetags.i18n.do_get_current_language_bidi',
                ['parser', 'token'],
                "\n    This will store the current language layout in the context.\n\n    Usage::\n\n        {% get_current_language_bidi as bidi %}\n\n    This will fetch the currently active language's layout and\n    put it's value into the ``bidi`` context variable.\n    True indicates right-to-left layout, otherwise left-to-right\n    "),
               ('django.templatetags.i18n.do_translate',
                ['parser', 'token'],
                '\n    This will mark a string for translation and will\n    translate the string for the current language.\n\n    Usage::\n\n        {% trans "this is a test" %}\n\n    This will mark the string for translation so it will\n    be pulled out by mark-messages.py into the .po files\n    and will run the string through the translation engine.\n\n    There is a second form::\n\n        {% trans "this is a test" noop %}\n\n    This will only mark for translation, but will return\n    the string unchanged. Use it when you need to store\n    values into forms that should be translated later on.\n\n    You can use variables instead of constant strings\n    to translate stuff you marked somewhere else::\n\n        {% trans variable %}\n\n    This will just try to translate the contents of\n    the variable ``variable``. Make sure that the string\n    in there is something that is in the .po file.\n    '),
               ('django.templatetags.i18n.do_block_translate',
                ['parser', 'token'],
                '\n    This will translate a block of text with parameters.\n\n    Usage::\n\n        {% blocktrans with bar=foo|filter boo=baz|filter %}\n        This is {{ bar }} and {{ boo }}.\n        {% endblocktrans %}\n\n    Additionally, this supports pluralization::\n\n        {% blocktrans count count=var|length %}\n        There is {{ count }} object.\n        {% plural %}\n        There are {{ count }} objects.\n        {% endblocktrans %}\n\n    This is much like ngettext, only in template syntax.\n\n    The "var as value" legacy format is still supported::\n\n        {% blocktrans with foo|filter as bar and baz|filter as boo %}\n        {% blocktrans count var|length as count %}\n    '),
               ('django.http.parse_cookie', ['cookie'], ''),
               ('django.http.get_host', ['request'], ''),
               ('django.http.str_to_unicode',
                ['s', 'encoding'],
                '\n    Converts basestring objects to unicode, using the given encoding. Illegally\n    encoded input characters are replaced with Unicode "unknown" codepoint\n    (\\ufffd).\n\n    Returns any non-basestring objects without change.\n    '),
               ('django.http.utils.fix_location_header',
                ['request', 'response'],
                '\n    Ensures that we always use an absolute URI in any location header in the\n    response. This is required by RFC 2616, section 14.30.\n\n    Code constructing response objects is free to insert relative paths, as\n    this function converts them to absolute paths.\n    '),
               ('django.http.utils.conditional_content_removal',
                ['request', 'response'],
                '\n    Removes the content of responses for HEAD requests, 1xx, 204 and 304\n    responses. Ensures compliance with RFC 2616, section 4.3.\n    '),
               ('django.http.utils.fix_IE_for_attach',
                ['request', 'response'],
                '\n    This function will prevent Django from serving a Content-Disposition header\n    while expecting the browser to cache it (only when the browser is IE). This\n    leads to IE not allowing the client to download.\n    '),
               ('django.http.utils.fix_IE_for_vary',
                ['request', 'response'],
                '\n    This function will fix the bug reported at\n    http://support.microsoft.com/kb/824847/en-us?spid=8722&sid=global\n    by clearing the Vary header whenever the mime-type is not safe\n    enough for Internet Explorer to handle.  Poor thing.\n    '),
               ('django.http.multipartparser.exhaust',
                ['stream_or_iterable'],
                '\n    Completely exhausts an iterator or stream.\n\n    Raise a MultiPartParserError if the argument is not a stream or an iterable.\n    '),
               ('django.http.multipartparser.parse_boundary_stream',
                ['stream', 'max_header_size'],
                '\n    Parses one and exactly one stream that encapsulates a boundary.\n    '),
               ('django.http.multipartparser.parse_header',
                ['line'],
                ' Parse the header into a key-value. '),
               ('django.http.multipartparser._parse_header_params', ['s'], ''),
               ('django.dispatch.dispatcher._make_id', ['target'], ''),
               ('django.dispatch.dispatcher.receiver',
                ['signal', '**kwargs'],
                '\n    A decorator for connecting receivers to signals. Used by passing in the\n    signal and keyword arguments to connect::\n\n        @receiver(post_save, sender=MyModel)\n        def signal_receiver(sender, **kwargs):\n            ...\n\n    '),
               ('django.dispatch.saferef.safeRef',
                ['target', 'onDelete=None'],
                "Return a *safe* weak reference to a callable target\n\n    target -- the object to be weakly referenced, if it's a\n        bound method reference, will create a BoundMethodWeakref,\n        otherwise creates a simple weakref.\n    onDelete -- if provided, will have a hard reference stored\n        to the callable to be called after the safe reference\n        goes out of scope with the reference object, (either a\n        weakref or a BoundMethodWeakref) as argument.\n    "),
               ('django.dispatch.saferef.get_bound_method_weakref',
                ['target', 'onDelete'],
                'Instantiates the appropiate BoundMethodWeakRef, depending on the details of\n    the underlying class method implementation'),
               ('django.shortcuts.render_to_response',
                ['*args', '**kwargs'],
                '\n    Returns a HttpResponse whose content is filled with the result of calling\n    django.template.loader.render_to_string() with the passed arguments.\n    '),
               ('django.shortcuts.render',
                ['request', '*args', '**kwargs'],
                '\n    Returns a HttpResponse whose content is filled with the result of calling\n    django.template.loader.render_to_string() with the passed arguments.\n    Uses a RequestContext by default.\n    '),
               ('django.shortcuts.redirect',
                ['to', '*args', '**kwargs'],
                "\n    Returns an HttpResponseRedirect to the apropriate URL for the arguments\n    passed.\n\n    The arguments could be:\n\n        * A model: the model's `get_absolute_url()` function will be called.\n\n        * A view name, possibly with arguments: `urlresolvers.reverse()` will\n          be used to reverse-resolve the name.\n\n        * A URL, which will be used as-is for the redirect location.\n\n    By default issues a temporary redirect; pass permanent=True to issue a\n    permanent redirect\n    "),
               ('django.shortcuts._get_queryset',
                ['klass'],
                '\n    Returns a QuerySet from a Model, Manager, or QuerySet. Created to make\n    get_object_or_404 and get_list_or_404 more DRY.\n    '),
               ('django.shortcuts.get_object_or_404',
                ['klass', '*args', '**kwargs'],
                '\n    Uses get() to return an object, or raises a Http404 exception if the object\n    does not exist.\n\n    klass may be a Model, Manager, or QuerySet object. All other passed\n    arguments and keyword arguments are used in the get() query.\n\n    Note: Like with get(), an MultipleObjectsReturned will be raised if more than one\n    object is found.\n    '),
               ('django.shortcuts.get_list_or_404',
                ['klass', '*args', '**kwargs'],
                '\n    Uses filter() to return a list of objects, or raise a Http404 exception if\n    the list is empty.\n\n    klass may be a Model, Manager, or QuerySet object. All other passed\n    arguments and keyword arguments are used in the filter() query.\n    '),
               ('django.bin.unique-messages.unique_messages', [], ''),
               ('django.bin.profiling.gather_profile_stats.gather_stats', ['p'], ''),
               ('django.contrib.admin.autodiscover',
                [],
                '\n    Auto-discover INSTALLED_APPS admin.py modules and fail silently when\n    not present. This forces an import on them to register any admin bits they\n    may want.\n    '),
               ('django.contrib.admin.validation.validate',
                ['cls', 'model'],
                '\n    Does basic ModelAdmin option validation. Calls custom validation\n    classmethod in the end if it is provided in cls. The signature of the\n    custom validation classmethod should be: def validate(cls, model).\n    '),
               ('django.contrib.admin.validation.validate_inline',
                ['cls', 'parent', 'parent_model'],
                ''),
               ('django.contrib.admin.validation.validate_base', ['cls', 'model'], ''),
               ('django.contrib.admin.validation.check_isseq', ['cls', 'label', 'obj'], ''),
               ('django.contrib.admin.validation.check_isdict', ['cls', 'label', 'obj'], ''),
               ('django.contrib.admin.validation.get_field',
                ['cls', 'model', 'opts', 'label', 'field'],
                ''),
               ('django.contrib.admin.validation.check_formfield',
                ['cls', 'model', 'opts', 'label', 'field'],
                ''),
               ('django.contrib.admin.validation.fetch_attr',
                ['cls', 'model', 'opts', 'label', 'field'],
                ''),
               ('django.contrib.admin.validation.check_readonly_fields',
                ['cls', 'model', 'opts'],
                ''),
               ('django.contrib.admin.actions.delete_selected',
                ['modeladmin', 'request', 'queryset'],
                '\n    Default action which deletes the selected objects.\n\n    This action first displays a confirmation page whichs shows all the\n    deleteable objects, or, if the user has no permission one of the related\n    childs (foreignkeys), a "permission denied" message.\n\n    Next, it delets all selected objects and redirects back to the change list.\n    '),
               ('django.contrib.admin.helpers.normalize_fieldsets',
                ['fieldsets'],
                '\n    Make sure the keys in fieldset dictionaries are strings. Returns the\n    normalized data.\n    '),
               ('django.contrib.admin.helpers.normalize_dictionary',
                ['data_dict'],
                '\n    Converts all the keys in "data_dict" to strings. The keys must be\n    convertible using str().\n    '),
               ('django.contrib.admin.util.quote',
                ['s'],
                "\n    Ensure that primary key values do not confuse the admin URLs by escaping\n    any '/', '_' and ':' characters. Similar to urllib.quote, except that the\n    quoting is slightly different so that it doesn't get automatically\n    unquoted by the Web browser.\n    "),
               ('django.contrib.admin.util.unquote',
                ['s'],
                '\n    Undo the effects of quote(). Based heavily on urllib.unquote().\n    '),
               ('django.contrib.admin.util.flatten_fieldsets',
                ['fieldsets'],
                'Returns a list of field names from an admin fieldsets structure.'),
               ('django.contrib.admin.util.get_deleted_objects',
                ['objs', 'opts', 'user', 'admin_site', 'using'],
                '\n    Find all objects related to ``objs`` that should also be deleted. ``objs``\n    must be a homogenous iterable of objects (e.g. a QuerySet).\n\n    Returns a nested list of strings suitable for display in the\n    template with the ``unordered_list`` filter.\n\n    '),
               ('django.contrib.admin.util.model_format_dict',
                ['obj'],
                "\n    Return a `dict` with keys 'verbose_name' and 'verbose_name_plural',\n    typically for use with string formatting.\n\n    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.\n\n    "),
               ('django.contrib.admin.util.model_ngettext',
                ['obj', 'n=None'],
                '\n    Return the appropriate `verbose_name` or `verbose_name_plural` value for\n    `obj` depending on the count `n`.\n\n    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.\n    If `obj` is a `QuerySet` instance, `n` is optional and the length of the\n    `QuerySet` is used.\n\n    '),
               ('django.contrib.admin.util.lookup_field',
                ['name', 'obj', 'model_admin=None'],
                ''),
               ('django.contrib.admin.util.label_for_field',
                ['name', 'model', 'model_admin=None', 'return_attr=False'],
                ''),
               ('django.contrib.admin.util.help_text_for_field', ['name', 'model'], ''),
               ('django.contrib.admin.util.display_for_field', ['value', 'field'], ''),
               ('django.contrib.admin.util.get_model_from_relation', ['field'], ''),
               ('django.contrib.admin.util.reverse_field_path',
                ['model', 'path'],
                ' Create a reversed field path.\n\n    E.g. Given (Order, "user__groups"),\n    return (Group, "user__order").\n\n    Final field must be a related model, not a data field.\n\n    '),
               ('django.contrib.admin.util.get_fields_from_path',
                ['model', 'path'],
                ' Return list of Fields given path relative to model.\n\n    e.g. (ModelX, "user__groups__name") -> [\n        <django.db.models.fields.related.ForeignKey object at 0x...>,\n        <django.db.models.fields.related.ManyToManyField object at 0x...>,\n        <django.db.models.fields.CharField object at 0x...>,\n    ]\n    '),
               ('django.contrib.admin.util.remove_trailing_data_field',
                ['fields'],
                ' Discard trailing non-relation field if extant. '),
               ('django.contrib.admin.util.get_limit_choices_to_from_path',
                ['model', 'path'],
                ' Return Q object for limiting choices if applicable.\n\n    If final model in path is linked via a ForeignKey or ManyToManyField which\n    has a `limit_choices_to` attribute, return it as a Q object.\n    '),
               ('django.contrib.admin.widgets.url_params_from_lookup_dict',
                ['lookups'],
                '\n    Converts the type of lookups specified in a ForeignKey limit_choices_to\n    attribute to a dictionary of query parameters\n    '),
               ('django.contrib.admin.templatetags.admin_modify.prepopulated_fields_js',
                ['context'],
                '\n    Creates a list of prepopulated_fields that should render Javascript for\n    the prepopulated fields for both the admin form and inlines.\n    '),
               ('django.contrib.admin.templatetags.admin_modify.submit_row',
                ['context'],
                '\n    Displays the row of buttons for delete and save.\n    '),
               ('django.contrib.admin.templatetags.admin_modify.cell_count',
                ['inline_admin_form'],
                'Returns the number of cells used in a tabular inline'),
               ('django.contrib.admin.templatetags.admin_list.paginator_number',
                ['cl', 'i'],
                '\n    Generates an individual page index link in a paginated list.\n    '),
               ('django.contrib.admin.templatetags.admin_list.pagination',
                ['cl'],
                '\n    Generates the series of links to the pages in a paginated list.\n    '),
               ('django.contrib.admin.templatetags.admin_list.result_headers',
                ['cl'],
                '\n    Generates the list column headers.\n    '),
               ('django.contrib.admin.templatetags.admin_list._boolean_icon', ['field_val'], ''),
               ('django.contrib.admin.templatetags.admin_list.items_for_result',
                ['cl', 'result', 'form'],
                '\n    Generates the actual list of data.\n    '),
               ('django.contrib.admin.templatetags.admin_list.results', ['cl'], ''),
               ('django.contrib.admin.templatetags.admin_list.result_hidden_fields', ['cl'], ''),
               ('django.contrib.admin.templatetags.admin_list.result_list',
                ['cl'],
                '\n    Displays the headers and data list together\n    '),
               ('django.contrib.admin.templatetags.admin_list.date_hierarchy',
                ['cl'],
                '\n    Displays the date hierarchy for date drill-down functionality.\n    '),
               ('django.contrib.admin.templatetags.admin_list.search_form',
                ['cl'],
                '\n    Displays a search form for searching the list.\n    '),
               ('django.contrib.admin.templatetags.admin_list.admin_list_filter',
                ['cl', 'spec'],
                ''),
               ('django.contrib.admin.templatetags.admin_list.admin_actions',
                ['context'],
                '\n    Track the number of times the action field has been rendered on the page,\n    so we know which value to use.\n    '),
               ('django.contrib.admin.templatetags.adminmedia.admin_media_prefix',
                [],
                '\n    Returns the string contained in the setting ADMIN_MEDIA_PREFIX.\n    '),
               ('compress.main', [], ''),
               ('django.contrib.admin.views.decorators.staff_member_required',
                ['view_func'],
                '\n    Decorator for views that checks that the user is logged in and is a staff\n    member, displaying the login page if necessary.\n    '),
               ('django.contrib.formtools.utils.security_hash',
                ['request', 'form', '*args'],
                '\n    Calculates a security hash for the given Form instance.\n\n    This creates a list of the form field names/values in a deterministic\n    order, pickles the result with the SECRET_KEY setting, then takes an md5\n    hash of that.\n    '),
               ('django.contrib.formtools.utils.form_hmac',
                ['form'],
                '\n    Calculates a security hash for the given Form instance.\n    '),
               ('django.contrib.localflavor.br.forms.DV_maker', ['v'], ''),
               ('django.contrib.localflavor.es.forms.cif_get_checksum', ['number'], ''),
               ('django.contrib.localflavor.se.utils.id_number_checksum',
                ['gd'],
                '\n    Calculates a Swedish ID number checksum, using the\n    "Luhn"-algoritm\n    '),
               ('django.contrib.localflavor.se.utils.validate_id_birthday',
                ['gd', 'fix_coordination_number_day=True'],
                '\n    Validates the birth_day and returns the datetime.date object for\n    the birth_day.\n\n    If the date is an invalid birth day, a ValueError will be raised.\n    '),
               ('django.contrib.localflavor.se.utils.format_personal_id_number',
                ['birth_day', 'gd'],
                ''),
               ('django.contrib.localflavor.se.utils.format_organisation_number', ['gd'], ''),
               ('django.contrib.localflavor.se.utils.valid_organisation', ['gd'], ''),
               ('django.contrib.localflavor.it.util.ssn_check_digit',
                ['value'],
                'Calculate Italian social security number check digit.'),
               ('django.contrib.localflavor.it.util.vat_number_check_digit',
                ['vat_number'],
                'Calculate Italian VAT number check digit.'),
               ('django.contrib.localflavor.uy.util.get_validation_digit',
                ['number'],
                ' Calculates the validation digit for the given number. '),
               ('django.contrib.gis.shortcuts.compress_kml',
                ['kml'],
                'Returns compressed KMZ from the given KML string.'),
               ('django.contrib.gis.shortcuts.render_to_kml',
                ['*args', '**kwargs'],
                'Renders the response as KML (using the correct MIME type).'),
               ('django.contrib.gis.shortcuts.render_to_kmz',
                ['*args', '**kwargs'],
                '\n    Compresses the KML content and returns as KMZ (using the correct \n    MIME type).\n    '),
               ('django.contrib.gis.shortcuts.render_to_text',
                ['*args', '**kwargs'],
                'Renders the response using the MIME type for plain text.'),
               ('django.contrib.gis.geos.libgeos.notice_h',
                ['fmt', 'lst', 'output_h=sys.stdout'],
                ''),
               ('django.contrib.gis.geos.libgeos.error_h',
                ['fmt', 'lst', 'output_h=sys.stderr'],
                ''),
               ('django.contrib.gis.geos.libgeos.get_pointer_arr',
                ['n'],
                'Gets a ctypes pointer array (of length `n`) for GEOSGeom_t opaque pointer.'),
               ('django.contrib.gis.geos.libgeos.geos_version_info',
                [],
                '\n    Returns a dictionary containing the various version metadata parsed from\n    the GEOS version string, including the version number, whether the version\n    is a release candidate (and what number release candidate), and the C API\n    version.\n    '),
               ('django.contrib.gis.geos.factory.fromfile',
                ['file_h'],
                '\n    Given a string file name, returns a GEOSGeometry. The file may contain WKB,\n    WKT, or HEX.\n    '),
               ('django.contrib.gis.geos.factory.fromstr',
                ['string', '**kwargs'],
                'Given a string value, returns a GEOSGeometry object.'),
               ('django.contrib.gis.geos.prototypes.coordseq.check_cs_ptr',
                ['result', 'func', 'cargs'],
                'Error checking on routines that return Geometries.'),
               ('django.contrib.gis.geos.prototypes.coordseq.check_cs_op',
                ['result', 'func', 'cargs'],
                'Checks the status code of a coordinate sequence operation.'),
               ('django.contrib.gis.geos.prototypes.coordseq.check_cs_get',
                ['result', 'func', 'cargs'],
                'Checking the coordinate sequence retrieval.'),
               ('django.contrib.gis.geos.prototypes.coordseq.cs_int',
                ['func'],
                'For coordinate sequence routines that return an integer.'),
               ('django.contrib.gis.geos.prototypes.coordseq.cs_operation',
                ['func', 'ordinate=False', 'get=False'],
                'For coordinate sequence operations.'),
               ('django.contrib.gis.geos.prototypes.coordseq.cs_output',
                ['func', 'argtypes'],
                'For routines that return a coordinate sequence.'),
               ('django.contrib.gis.geos.prototypes.geom.bin_constructor',
                ['func'],
                'Generates a prototype for binary construction (HEX, WKB) GEOS routines.'),
               ('django.contrib.gis.geos.prototypes.geom.bin_output',
                ['func'],
                'Generates a prototype for the routines that return a a sized string.'),
               ('django.contrib.gis.geos.prototypes.geom.geom_output',
                ['func', 'argtypes'],
                'For GEOS routines that return a geometry.'),
               ('django.contrib.gis.geos.prototypes.geom.geom_index',
                ['func'],
                'For GEOS routines that return geometries from an index.'),
               ('django.contrib.gis.geos.prototypes.geom.int_from_geom',
                ['func', 'zero=False'],
                'Argument is a geometry, return type is an integer.'),
               ('django.contrib.gis.geos.prototypes.geom.string_from_geom',
                ['func'],
                'Argument is a Geometry, return type is a string.'),
               ('django.contrib.gis.geos.prototypes.io.wkb_read_func', ['func'], ''),
               ('django.contrib.gis.geos.prototypes.io.wkb_write_func', ['func'], ''),
               ('django.contrib.gis.geos.prototypes.io.wkb_writer_get',
                ['func', 'restype=c_int'],
                ''),
               ('django.contrib.gis.geos.prototypes.io.wkb_writer_set',
                ['func', 'argtype=c_int'],
                ''),
               ('django.contrib.gis.geos.prototypes.io.wkt_r', [], ''),
               ('django.contrib.gis.geos.prototypes.io.wkt_w', [], ''),
               ('django.contrib.gis.geos.prototypes.io.wkb_r', [], ''),
               ('django.contrib.gis.geos.prototypes.io.wkb_w', [], ''),
               ('django.contrib.gis.geos.prototypes.io.ewkb_w', [], ''),
               ('django.contrib.gis.geos.prototypes.io.ewkb_w3d', [], ''),
               ('django.contrib.gis.geos.prototypes.misc.dbl_from_geom',
                ['func', 'num_geom=1'],
                '\n    Argument is a Geometry, return type is double that is passed\n    in by reference as the last argument.\n    '),
               ('django.contrib.gis.geos.prototypes.topology.topology',
                ['func', '*args'],
                'For GEOS unary topology functions.'),
               ('django.contrib.gis.geos.prototypes.predicates.binary_predicate',
                ['func', '*args'],
                'For GEOS binary predicate functions.'),
               ('django.contrib.gis.geos.prototypes.predicates.unary_predicate',
                ['func'],
                'For GEOS unary predicate functions.'),
               ('django.contrib.gis.geos.prototypes.errcheck.last_arg_byref',
                ['args'],
                "Returns the last C argument's value by reference."),
               ('django.contrib.gis.geos.prototypes.errcheck.check_dbl',
                ['result', 'func', 'cargs'],
                'Checks the status code and returns the double value passed in by reference.'),
               ('django.contrib.gis.geos.prototypes.errcheck.check_geom',
                ['result', 'func', 'cargs'],
                'Error checking on routines that return Geometries.'),
               ('django.contrib.gis.geos.prototypes.errcheck.check_minus_one',
                ['result', 'func', 'cargs'],
                'Error checking on routines that should not return -1.'),
               ('django.contrib.gis.geos.prototypes.errcheck.check_predicate',
                ['result', 'func', 'cargs'],
                'Error checking for unary/binary predicate functions.'),
               ('django.contrib.gis.geos.prototypes.errcheck.check_sized_string',
                ['result', 'func', 'cargs'],
                '\n    Error checking for routines that return explicitly sized strings.\n\n    This frees the memory allocated by GEOS at the result pointer.\n    '),
               ('django.contrib.gis.geos.prototypes.errcheck.check_string',
                ['result', 'func', 'cargs'],
                '\n    Error checking for routines that return strings.\n\n    This frees the memory allocated by GEOS at the result pointer.\n    '),
               ('django.contrib.gis.geos.prototypes.errcheck.check_zero',
                ['result', 'func', 'cargs'],
                'Error checking on routines that should not return 0.'),
               ('django.contrib.gis.geos.prototypes.prepared.prepared_predicate', ['func'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.getItem', ['o', 'i'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.delItem', ['o', 'i'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.setItem', ['o', 'i', 'v'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_distance', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_buffer', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_geom_typeid',
                ['x'],
                ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_num_coords', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_centroid', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_empty', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_valid', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_simple', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_ring', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_boundary', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_convex_hull',
                ['x'],
                ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_extent', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_area', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.api_get_length', ['x'], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.suite', [], ''),
               ('django.contrib.gis.geos.tests.test_geos_mutation.run', ['verbosity=2'], ''),
               ('django.contrib.gis.geos.tests.suite',
                [],
                'Builds a test suite for the GEOS tests.'),
               ('django.contrib.gis.geos.tests.run', ['verbosity=1'], 'Runs the GEOS tests.'),
               ('django.contrib.gis.geos.tests.test_geos.suite', [], ''),
               ('django.contrib.gis.geos.tests.test_geos.run', ['verbosity=2'], ''),
               ('django.contrib.gis.geos.tests.test_mutable_list.nextRange', ['length'], ''),
               ('django.contrib.gis.geos.tests.test_mutable_list.suite', [], ''),
               ('django.contrib.gis.geos.tests.test_mutable_list.run', ['verbosity=2'], ''),
               ('django.contrib.gis.geos.tests.test_io.suite', [], ''),
               ('django.contrib.gis.geos.tests.test_io.run', ['verbosity=2'], ''),
               ('django.contrib.gis.gdal.error.check_err',
                ['code'],
                'Checks the given OGRERR, and raises an exception where appropriate.'),
               ('django.contrib.gis.gdal.libgdal.std_call',
                ['func'],
                '\n    Returns the correct STDCALL function for certain OSR routines on Win32\n    platforms.\n    '),
               ('django.contrib.gis.gdal.libgdal.gdal_version',
                [],
                'Returns only the GDAL version number information.'),
               ('django.contrib.gis.gdal.libgdal.gdal_full_version',
                [],
                'Returns the full GDAL version information.'),
               ('django.contrib.gis.gdal.libgdal.gdal_release_date',
                ['date=False'],
                '\n    Returns the release date in a string format, e.g, "2007/06/27".\n    If the date keyword argument is set to True, a Python datetime object\n    will be returned instead.\n    '),
               ('django.contrib.gis.gdal.libgdal.gdal_version_info', [], ''),
               ('django.contrib.gis.gdal.prototypes.generation.double_output',
                ['func', 'argtypes', 'errcheck=False', 'strarg=False'],
                'Generates a ctypes function that returns a double value.'),
               ('django.contrib.gis.gdal.prototypes.generation.geom_output',
                ['func', 'argtypes', 'offset=None'],
                '\n    Generates a function that returns a Geometry either by reference\n    or directly (if the return_geom keyword is set to True).\n    '),
               ('django.contrib.gis.gdal.prototypes.generation.int_output',
                ['func', 'argtypes'],
                'Generates a ctypes function that returns an integer value.'),
               ('django.contrib.gis.gdal.prototypes.generation.srs_output',
                ['func', 'argtypes'],
                '\n    Generates a ctypes prototype for the given function with\n    the given C arguments that returns a pointer to an OGR\n    Spatial Reference System.\n    '),
               ('django.contrib.gis.gdal.prototypes.generation.const_string_output',
                ['func', 'argtypes', 'offset=None'],
                ''),
               ('django.contrib.gis.gdal.prototypes.generation.string_output',
                ['func', 'argtypes', 'offset=-1', 'str_result=False'],
                '\n    Generates a ctypes prototype for the given function with the\n    given argument types that returns a string from a GDAL pointer.\n    The `const` flag indicates whether the allocated pointer should \n    be freed via the GDAL library routine VSIFree -- but only applies\n    only when `str_result` is True.\n    '),
               ('django.contrib.gis.gdal.prototypes.generation.void_output',
                ['func', 'argtypes', 'errcheck=True'],
                "\n    For functions that don't only return an error code that needs to\n    be examined.\n    "),
               ('django.contrib.gis.gdal.prototypes.generation.voidptr_output',
                ['func', 'argtypes'],
                'For functions that return c_void_p.'),
               ('django.contrib.gis.gdal.prototypes.geom.env_func',
                ['f', 'argtypes'],
                'For getting OGREnvelopes.'),
               ('django.contrib.gis.gdal.prototypes.geom.pnt_func',
                ['f'],
                'For accessing point information.'),
               ('django.contrib.gis.gdal.prototypes.geom.topology_func', ['f'], ''),
               ('django.contrib.gis.gdal.prototypes.srs.srs_double',
                ['f'],
                '\n    Creates a function prototype for the OSR routines that take\n    the OSRSpatialReference object and\n    '),
               ('django.contrib.gis.gdal.prototypes.srs.units_func',
                ['f'],
                '\n    Creates a ctypes function prototype for OSR units functions, e.g.,\n    OSRGetAngularUnits, OSRGetLinearUnits.\n    '),
               ('django.contrib.gis.gdal.prototypes.errcheck.arg_byref',
                ['args', 'offset=-1'],
                "Returns the pointer argument's by-refernece value."),
               ('django.contrib.gis.gdal.prototypes.errcheck.ptr_byref',
                ['args', 'offset=-1'],
                'Returns the pointer argument passed in by-reference.'),
               ('django.contrib.gis.gdal.prototypes.errcheck.check_bool',
                ['result', 'func', 'cargs'],
                'Returns the boolean evaluation of the value.'),
               ('django.contrib.gis.gdal.prototypes.errcheck.check_const_string',
                ['result', 'func', 'cargs', 'offset=None'],
                '\n    Similar functionality to `check_string`, but does not free the pointer.\n    '),
               ('django.contrib.gis.gdal.prototypes.errcheck.check_string',
                ['result', 'func', 'cargs', 'offset=-1', 'str_result=False'],
                '\n    Checks the string output returned from the given function, and frees\n    the string pointer allocated by OGR.  The `str_result` keyword\n    may be used when the result is the string pointer, otherwise\n    the OGR error code is assumed.  The `offset` keyword may be used\n    to extract the string pointer passed in by-reference at the given\n    slice offset in the function arguments.\n    '),
               ('django.contrib.gis.gdal.prototypes.errcheck.check_envelope',
                ['result', 'func', 'cargs', 'offset=-1'],
                'Checks a function that returns an OGR Envelope by reference.'),
               ('django.contrib.gis.gdal.prototypes.errcheck.check_geom',
                ['result', 'func', 'cargs'],
                'Checks a function that returns a geometry.'),
               ('django.contrib.gis.gdal.prototypes.errcheck.check_geom_offset',
                ['result', 'func', 'cargs', 'offset=-1'],
                'Chcks the geometry at the given offset in the C parameter list.'),
               ('django.contrib.gis.gdal.prototypes.errcheck.check_srs',
                ['result', 'func', 'cargs'],
                ''),
               ('django.contrib.gis.gdal.prototypes.errcheck.check_arg_errcode',
                ['result', 'func', 'cargs'],
                '\n    The error code is returned in the last argument, by reference.\n    Check its value with `check_err` before returning the result.\n    '),
               ('django.contrib.gis.gdal.prototypes.errcheck.check_errcode',
                ['result', 'func', 'cargs'],
                '\n    Check the error code returned (c_int).\n    '),
               ('django.contrib.gis.gdal.prototypes.errcheck.check_pointer',
                ['result', 'func', 'cargs'],
                'Makes sure the result pointer is valid.'),
               ('django.contrib.gis.gdal.prototypes.errcheck.check_str_arg',
                ['result', 'func', 'cargs'],
                '\n    This is for the OSRGet[Angular|Linear]Units functions, which\n    require that the returned string pointer not be freed.  This\n    returns both the double and tring values.\n    '),
               ('django.contrib.gis.gdal.tests.suite',
                [],
                'Builds a test suite for the GDAL tests.'),
               ('django.contrib.gis.gdal.tests.run', ['verbosity=1'], 'Runs the GDAL tests.'),
               ('django.contrib.gis.gdal.tests.test_ds.suite', [], ''),
               ('django.contrib.gis.gdal.tests.test_ds.run', ['verbosity=2'], ''),
               ('django.contrib.gis.gdal.tests.test_envelope.suite', [], ''),
               ('django.contrib.gis.gdal.tests.test_envelope.run', ['verbosity=2'], ''),
               ('django.contrib.gis.gdal.tests.test_driver.suite', [], ''),
               ('django.contrib.gis.gdal.tests.test_driver.run', ['verbosity=2'], ''),
               ('django.contrib.gis.gdal.tests.test_geom.suite', [], ''),
               ('django.contrib.gis.gdal.tests.test_geom.run', ['verbosity=2'], ''),
               ('django.contrib.gis.gdal.tests.test_srs.suite', [], ''),
               ('django.contrib.gis.gdal.tests.test_srs.run', ['verbosity=2'], ''),
               ('django.contrib.gis.tests.test_measure.suite', [], ''),
               ('django.contrib.gis.tests.test_measure.run', ['verbosity=2'], ''),
               ('django.contrib.gis.tests.run_tests', ['*args', '**kwargs'], ''),
               ('django.contrib.gis.tests.run_gis_tests',
                ['test_labels',
                 'verbosity=1',
                 'interactive=True',
                 'failfast=False',
                 'extra_tests=None'],
                ''),
               ('django.contrib.gis.tests.geo_apps',
                ['namespace=True', 'runtests=False'],
                '\n    Returns a list of GeoDjango test applications that reside in\n    `django.contrib.gis.tests` that can be used with the current\n    database and the spatial libraries that are installed.\n    '),
               ('django.contrib.gis.tests.geodjango_suite',
                ['apps=True'],
                '\n    Returns a TestSuite consisting only of GeoDjango tests that can be run.\n    '),
               ('django.contrib.gis.tests.utils.pass_test', ['*args'], ''),
               ('django.contrib.gis.tests.utils.no_backend',
                ['test_func', 'backend'],
                'Use this decorator to disable test on specified backend.'),
               ('django.contrib.gis.tests.utils.no_oracle', ['func'], ''),
               ('django.contrib.gis.tests.utils.no_postgis', ['func'], ''),
               ('django.contrib.gis.tests.utils.no_mysql', ['func'], ''),
               ('django.contrib.gis.tests.utils.no_spatialite', ['func'], ''),
               ('django.contrib.gis.tests.test_geoip.suite', [], ''),
               ('django.contrib.gis.tests.test_geoip.run', ['verbosity=2'], ''),
               ('django.contrib.gis.tests.test_geoforms.suite', [], ''),
               ('django.contrib.gis.tests.test_geoforms.run', ['verbosity=2'], ''),
               ('django.contrib.gis.tests.test_spatialrefsys.suite', [], ''),
               ('django.contrib.gis.tests.test_spatialrefsys.run', ['verbosity=2'], ''),
               ('django.contrib.gis.tests.geo3d.tests.gen_bbox', [], ''),
               ('django.contrib.gis.management.commands.ogrinspect.layer_option',
                ['option', 'opt', 'value', 'parser'],
                '\n    Callback for `make_option` for the `ogrinspect` `layer_key`\n    keyword option which may be an integer or a string.\n    '),
               ('django.contrib.gis.management.commands.ogrinspect.list_option',
                ['option', 'opt', 'value', 'parser'],
                "\n    Callback for `make_option` for `ogrinspect` keywords that require\n    a string list.  If the string is 'True'/'true' then the option \n    value will be a boolean instead.\n    "),
               ('django.contrib.gis.sitemaps.views.index',
                ['request', 'sitemaps'],
                '\n    This view generates a sitemap index that uses the proper view\n    for resolving geographic section sitemap URLs.\n    '),
               ('django.contrib.gis.sitemaps.views.sitemap',
                ['request', 'sitemaps', 'section=None'],
                '\n    This view generates a sitemap with additional geographic\n    elements defined by Google.\n    '),
               ('django.contrib.gis.sitemaps.views.kml',
                ['request',
                 'label',
                 'model',
                 'field_name=None',
                 'compress=False',
                 'using=DEFAULT_DB_ALIAS'],
                "\n    This view generates KML for the given app label, model, and field name.\n\n    The model's default manager must be GeoManager, and the field name\n    must be that of a geographic field.\n    "),
               ('django.contrib.gis.sitemaps.views.kmz',
                ['request', 'label', 'model', 'field_name=None', 'using=DEFAULT_DB_ALIAS'],
                '\n    This view returns KMZ for the given app label, model, and field name.\n    '),
               ('django.contrib.gis.geometry.test_data.tuplize',
                ['seq'],
                'Turn all nested sequences to tuples in given sequence.'),
               ('django.contrib.gis.geometry.test_data.strconvert',
                ['d'],
                'Converts all keys in dictionary to str type.'),
               ('django.contrib.gis.geometry.test_data.get_ds_file', ['name', 'ext'], ''),
               ('django.contrib.gis.db.backends.util.gqn',
                ['val'],
                '\n    The geographic quote name function; used for quoting tables and\n    geometries (they use single rather than the double quotes of the\n    backend quotename function).\n    '),
               ('django.contrib.gis.db.backends.spatialite.operations.get_dist_ops',
                ['operator'],
                'Returns operations for regular distances; spherical distances are not currently supported.'),
               ('django.contrib.gis.db.models.fields.get_srid_info',
                ['srid', 'connection'],
                '\n    Returns the units, unit name, and spheroid WKT associated with the\n    given SRID from the `spatial_ref_sys` (or equivalent) spatial database\n    table for the given database connection.  These results are cached.\n    '),
               ('django.contrib.gis.utils.wkt.precision_wkt',
                ['geom', 'prec'],
                "\n    Returns WKT text of the geometry according to the given precision (an \n    integer or a string).  If the precision is an integer, then the decimal\n    places of coordinates WKT will be truncated to that number:\n\n     >>> pnt = Point(5, 23)\n     >>> pnt.wkt\n     'POINT (5.0000000000000000 23.0000000000000000)'\n     >>> precision(geom, 1)\n     'POINT (5.0 23.0)'\n\n    If the precision is a string, it must be valid Python format string \n    (e.g., '%20.7f') -- thus, you should know what you're doing.\n    "),
               ('django.contrib.gis.utils.ogrinfo.ogrinfo',
                ['data_source', 'num_features=10'],
                '\n    Walks the available layers in the supplied `data_source`, displaying\n    the fields for the first `num_features` features.\n    '),
               ('django.contrib.gis.utils.geoip.record_output', ['func'], ''),
               ('django.contrib.gis.utils.geoip.string_output', ['func'], ''),
               ('django.contrib.gis.utils.srs.add_srs_entry',
                ['srs',
                 "auth_name='EPSG'",
                 'auth_srid=None',
                 'ref_sys_name=None',
                 'database=DEFAULT_DB_ALIAS'],
                '\n    This function takes a GDAL SpatialReference system and adds its information\n    to the `spatial_ref_sys` table of the spatial backend.  Doing this enables\n    database-level spatial transformations for the backend.  Thus, this utility\n    is useful for adding spatial reference systems not included by default with\n    the backend -- for example, the so-called "Google Maps Mercator Projection"\n    is excluded in PostGIS 1.3 and below, and the following adds it to the\n    `spatial_ref_sys` table:\n\n    >>> from django.contrib.gis.utils import add_srs_entry\n    >>> add_srs_entry(900913)\n\n    Keyword Arguments:\n     auth_name:\n       This keyword may be customized with the value of the `auth_name` field.\n       Defaults to \'EPSG\'.\n\n     auth_srid:\n       This keyword may be customized with the value of the `auth_srid` field.\n       Defaults to the SRID determined by GDAL.\n\n     ref_sys_name:\n       For SpatiaLite users only, sets the value of the the `ref_sys_name` field.\n       Defaults to the name determined by GDAL.\n\n     database:\n      The name of the database connection to use; the default is the value\n      of `django.db.DEFAULT_DB_ALIAS` (at the time of this writing, it\'s value\n      is \'default\').\n    '),
               ('django.contrib.gis.utils.ogrinspect.mapping',
                ['data_source', "geom_name='geom'", 'layer_key=0', 'multi_geom=False'],
                '\n    Given a DataSource, generates a dictionary that may be used\n    for invoking the LayerMapping utility.\n\n    Keyword Arguments:\n     `geom_name` => The name of the geometry field to use for the model.\n\n     `layer_key` => The key for specifying which layer in the DataSource to use;\n       defaults to 0 (the first layer).  May be an integer index or a string\n       identifier for the layer.\n\n     `multi_geom` => Boolean (default: False) - specify as multigeometry.\n    '),
               ('django.contrib.gis.utils.ogrinspect.ogrinspect',
                ['*args', '**kwargs'],
                "\n    Given a data source (either a string or a DataSource object) and a string\n    model name this function will generate a GeoDjango model.\n\n    Usage:\n\n    >>> from django.contrib.gis.utils import ogrinspect\n    >>> ogrinspect('/path/to/shapefile.shp','NewModel')\n\n    ...will print model definition to stout\n\n    or put this in a python script and use to redirect the output to a new\n    model like:\n\n    $ python generate_model.py > myapp/models.py\n\n    # generate_model.py\n    from django.contrib.gis.utils import ogrinspect\n    shp_file = 'data/mapping_hacks/world_borders.shp'\n    model_name = 'WorldBorders'\n\n    print ogrinspect(shp_file, model_name, multi_geom=True, srid=4326,\n                     geom_name='shapes', blank=True)\n\n    Required Arguments\n     `datasource` => string or DataSource object to file pointer\n\n     `model name` => string of name of new model class to create\n\n    Optional Keyword Arguments\n     `geom_name` => For specifying the model name for the Geometry Field.\n       Otherwise will default to `geom`\n\n     `layer_key` => The key for specifying which layer in the DataSource to use;\n       defaults to 0 (the first layer).  May be an integer index or a string\n       identifier for the layer.\n\n     `srid` => The SRID to use for the Geometry Field.  If it can be determined,\n       the SRID of the datasource is used.\n\n     `multi_geom` => Boolean (default: False) - specify as multigeometry.\n\n     `name_field` => String - specifies a field name to return for the\n       `__unicode__` function (which will be generated if specified).\n\n     `imports` => Boolean (default: True) - set to False to omit the\n       `from django.contrib.gis.db import models` code from the\n       autogenerated models thus avoiding duplicated imports when building\n       more than one model by batching ogrinspect()\n\n     `decimal` => Boolean or sequence (default: False).  When set to True\n       all generated model fields corresponding to the `OFTReal` type will\n       be `DecimalField` instead of `FloatField`.  A sequence of specific\n       field names to generate as `DecimalField` may also be used.\n\n     `blank` => Boolean or sequence (default: False).  When set to True all\n       generated model fields will have `blank=True`.  If the user wants to\n       give specific fields to have blank, then a list/tuple of OGR field\n       names may be used.\n\n     `null` => Boolean (default: False) - When set to True all generated\n       model fields will have `null=True`.  If the user wants to specify\n       give specific fields to have null, then a list/tuple of OGR field\n       names may be used.\n\n    Note: This routine calls the _ogrinspect() helper to do the heavy lifting.\n    "),
               ('django.contrib.gis.utils.ogrinspect._ogrinspect',
                ['data_source',
                 'model_name',
                 "geom_name='geom'",
                 'layer_key=0',
                 'srid=None',
                 'multi_geom=False',
                 'name_field=None',
                 'imports=True',
                 'decimal=False',
                 'blank=False',
                 'null=False'],
                '\n    Helper routine for `ogrinspect` that generates GeoDjango models corresponding\n    to the given data source.  See the `ogrinspect` docstring for more details.\n    '),
               ('django.contrib.syndication.views.add_domain',
                ['domain', 'url', 'secure=False'],
                ''),
               ('django.contrib.syndication.views.feed',
                ['request', 'url', 'feed_dict=None'],
                'Provided for backwards compatibility.'),
               ('django.contrib.contenttypes.management.update_contenttypes',
                ['app', 'created_models', 'verbosity=2', '**kwargs'],
                '\n    Creates content types for models in the given app, removing any model\n    entries that no longer have a matching model class.\n    '),
               ('django.contrib.contenttypes.management.update_all_contenttypes',
                ['verbosity=2', '**kwargs'],
                ''),
               ('django.contrib.contenttypes.views.shortcut',
                ['request', 'content_type_id', 'object_id'],
                "Redirect to an object's page based on a content-type ID and an object ID."),
               ('django.contrib.contenttypes.generic.create_generic_related_manager',
                ['superclass'],
                "\n    Factory function for a manager that subclasses 'superclass' (which is a\n    Manager) and adds behavior for generic related objects.\n    "),
               ('django.contrib.contenttypes.generic.generic_inlineformset_factory',
                ['model',
                 'form=ModelForm',
                 'formset=BaseGenericInlineFormSet',
                 "ct_field='content_type'",
                 "fk_field='object_id'",
                 'fields=None',
                 'exclude=None',
                 'extra=3',
                 'can_order=False',
                 'can_delete=True',
                 'max_num=None',
                 'formfield_callback=lambda f: f.formfield()'],
                '\n    Returns an ``GenericInlineFormSet`` for the given kwargs.\n\n    You must provide ``ct_field`` and ``object_id`` if they different from the\n    defaults ``content_type`` and ``object_id`` respectively.\n    '),
               ('django.contrib.auth.decorators.user_passes_test',
                ['test_func', 'login_url=None', 'redirect_field_name=REDIRECT_FIELD_NAME'],
                '\n    Decorator for views that checks that the user passes the given test,\n    redirecting to the log-in page if necessary. The test should be a callable\n    that takes the user object and returns True if the user passes.\n    '),
               ('django.contrib.auth.decorators.login_required',
                ['function=None', 'redirect_field_name=REDIRECT_FIELD_NAME', 'login_url=None'],
                '\n    Decorator for views that checks that the user is logged in, redirecting\n    to the log-in page if necessary.\n    '),
               ('django.contrib.auth.decorators.permission_required',
                ['perm', 'login_url=None'],
                '\n    Decorator for views that checks whether a user has a particular permission\n    enabled, redirecting to the log-in page if necessary.\n    '),
               ('django.contrib.auth.models.get_hexdigest',
                ['algorithm', 'salt', 'raw_password'],
                "\n    Returns a string of the hexdigest of the given plaintext password and salt\n    using the given algorithm ('md5', 'sha1' or 'crypt').\n    "),
               ('django.contrib.auth.models.check_password',
                ['raw_password', 'enc_password'],
                '\n    Returns a boolean of whether the raw_password was correct. Handles\n    encryption formats behind the scenes.\n    '),
               ('django.contrib.auth.models.update_last_login',
                ['sender', 'user', '**kwargs'],
                '\n    A signal receiver which updates the last_login date for\n    the user logging in.\n    '),
               ('django.contrib.auth.models._user_get_all_permissions', ['user', 'obj'], ''),
               ('django.contrib.auth.models._user_has_perm', ['user', 'perm', 'obj'], ''),
               ('django.contrib.auth.models._user_has_module_perms', ['user', 'app_label'], ''),
               ('django.contrib.auth.views.login',
                ['request',
                 "template_name='registration/login.html'",
                 'redirect_field_name=REDIRECT_FIELD_NAME',
                 'authentication_form=AuthenticationForm',
                 'current_app=None',
                 'extra_context=None'],
                '\n    Displays the login form and handles the login action.\n    '),
               ('django.contrib.auth.views.logout',
                ['request',
                 'next_page=None',
                 "template_name='registration/logged_out.html'",
                 'redirect_field_name=REDIRECT_FIELD_NAME',
                 'current_app=None',
                 'extra_context=None'],
                "\n    Logs out the user and displays 'You are logged out' message.\n    "),
               ('django.contrib.auth.views.logout_then_login',
                ['request', 'login_url=None', 'current_app=None', 'extra_context=None'],
                '\n    Logs out the user if he is logged in. Then redirects to the log-in page.\n    '),
               ('django.contrib.auth.views.redirect_to_login',
                ['next', 'login_url=None', 'redirect_field_name=REDIRECT_FIELD_NAME'],
                "\n    Redirects the user to the login page, passing the given 'next' page\n    "),
               ('django.contrib.auth.views.password_reset',
                ['request',
                 'is_admin_site=False',
                 "template_name='registration/password_reset_form.html'",
                 "email_template_name='registration/password_reset_email.html'",
                 'password_reset_form=PasswordResetForm',
                 'token_generator=default_token_generator',
                 'post_reset_redirect=None',
                 'from_email=None',
                 'current_app=None',
                 'extra_context=None'],
                ''),
               ('django.contrib.auth.views.password_reset_done',
                ['request',
                 "template_name='registration/password_reset_done.html'",
                 'current_app=None',
                 'extra_context=None'],
                ''),
               ('django.contrib.auth.views.password_reset_confirm',
                ['request',
                 'uidb36=None',
                 'token=None',
                 "template_name='registration/password_reset_confirm.html'",
                 'token_generator=default_token_generator',
                 'set_password_form=SetPasswordForm',
                 'post_reset_redirect=None',
                 'current_app=None',
                 'extra_context=None'],
                '\n    View that checks the hash in a password reset link and presents a\n    form for entering a new password.\n    '),
               ('django.contrib.auth.views.password_reset_complete',
                ['request',
                 "template_name='registration/password_reset_complete.html'",
                 'current_app=None',
                 'extra_context=None'],
                ''),
               ('django.contrib.auth.views.password_change',
                ['request',
                 "template_name='registration/password_change_form.html'",
                 'post_change_redirect=None',
                 'password_change_form=PasswordChangeForm',
                 'current_app=None',
                 'extra_context=None'],
                ''),
               ('django.contrib.auth.views.password_change_done',
                ['request',
                 "template_name='registration/password_change_done.html'",
                 'current_app=None',
                 'extra_context=None'],
                ''),
               ('django.contrib.auth.load_backend', ['path'], ''),
               ('django.contrib.auth.get_backends', [], ''),
               ('django.contrib.auth.authenticate',
                ['**credentials'],
                '\n    If the given credentials are valid, return a User object.\n    '),
               ('django.contrib.auth.login',
                ['request', 'user'],
                "\n    Persist a user id and a backend in the request. This way a user doesn't\n    have to reauthenticate on every request.\n    "),
               ('django.contrib.auth.logout',
                ['request'],
                "\n    Removes the authenticated user's ID from the request and flushes their\n    session data.\n    "),
               ('django.contrib.auth.get_user', ['request'], ''),
               ('django.contrib.auth.context_processors.auth',
                ['request'],
                "\n    Returns context variables required by apps that use Django's authentication\n    system.\n\n    If there is no 'user' attribute in the request, uses AnonymousUser (from\n    django.contrib.auth).\n    "),
               ('django.contrib.auth.tests.urls.remote_user_auth_view',
                ['request'],
                'Dummy view for remote user tests'),
               ('django.contrib.auth.management._get_permission_codename',
                ['action', 'opts'],
                ''),
               ('django.contrib.auth.management._get_all_permissions',
                ['opts'],
                'Returns (codename, name) for all permissions in the given opts.'),
               ('django.contrib.auth.management.create_permissions',
                ['app', 'created_models', 'verbosity', '**kwargs'],
                ''),
               ('django.contrib.auth.management.create_superuser',
                ['app', 'created_models', 'verbosity', '**kwargs'],
                ''),
               ('django.contrib.auth.management.commands.createsuperuser.is_valid_email',
                ['value'],
                ''),
               ('django.contrib.auth.handlers.modpython.authenhandler',
                ['req', '**kwargs'],
                "\n    Authentication handler that checks against Django's auth database.\n    "),
               ('django.contrib.comments.get_comment_app',
                [],
                '\n    Get the comment app (i.e. "django.contrib.comments") as defined in the settings\n    '),
               ('django.contrib.comments.get_comment_app_name',
                [],
                '\n    Returns the name of the comment app (either the setting value, if it\n    exists, or the default).\n    '),
               ('django.contrib.comments.get_model',
                [],
                '\n    Returns the comment model class.\n    '),
               ('django.contrib.comments.get_form',
                [],
                '\n    Returns the comment ModelForm class.\n    '),
               ('django.contrib.comments.get_form_target',
                [],
                '\n    Returns the target URL for the comment form submission view.\n    '),
               ('django.contrib.comments.get_flag_url',
                ['comment'],
                '\n    Get the URL for the "flag this comment" view.\n    '),
               ('django.contrib.comments.get_delete_url',
                ['comment'],
                '\n    Get the URL for the "delete this comment" view.\n    '),
               ('django.contrib.comments.get_approve_url',
                ['comment'],
                '\n    Get the URL for the "approve this comment from moderation" view.\n    '),
               ('django.contrib.comments.templatetags.comments.get_comment_count',
                ['parser', 'token'],
                "\n    Gets the comment count for the given params and populates the template\n    context with a variable containing that value, whose name is defined by the\n    'as' clause.\n\n    Syntax::\n\n        {% get_comment_count for [object] as [varname]  %}\n        {% get_comment_count for [app].[model] [object_id] as [varname]  %}\n\n    Example usage::\n\n        {% get_comment_count for event as comment_count %}\n        {% get_comment_count for calendar.event event.id as comment_count %}\n        {% get_comment_count for calendar.event 17 as comment_count %}\n\n    "),
               ('django.contrib.comments.templatetags.comments.get_comment_list',
                ['parser', 'token'],
                "\n    Gets the list of comments for the given params and populates the template\n    context with a variable containing that value, whose name is defined by the\n    'as' clause.\n\n    Syntax::\n\n        {% get_comment_list for [object] as [varname]  %}\n        {% get_comment_list for [app].[model] [object_id] as [varname]  %}\n\n    Example usage::\n\n        {% get_comment_list for event as comment_list %}\n        {% for comment in comment_list %}\n            ...\n        {% endfor %}\n\n    "),
               ('django.contrib.comments.templatetags.comments.render_comment_list',
                ['parser', 'token'],
                '\n    Render the comment list (as returned by ``{% get_comment_list %}``)\n    through the ``comments/list.html`` template\n\n    Syntax::\n\n        {% render_comment_list for [object] %}\n        {% render_comment_list for [app].[model] [object_id] %}\n\n    Example usage::\n\n        {% render_comment_list for event %}\n\n    '),
               ('django.contrib.comments.templatetags.comments.get_comment_form',
                ['parser', 'token'],
                '\n    Get a (new) form object to post a new comment.\n\n    Syntax::\n\n        {% get_comment_form for [object] as [varname] %}\n        {% get_comment_form for [app].[model] [object_id] as [varname] %}\n    '),
               ('django.contrib.comments.templatetags.comments.render_comment_form',
                ['parser', 'token'],
                '\n    Render the comment form (as returned by ``{% render_comment_form %}``) through\n    the ``comments/form.html`` template.\n\n    Syntax::\n\n        {% render_comment_form for [object] %}\n        {% render_comment_form for [app].[model] [object_id] %}\n    '),
               ('django.contrib.comments.templatetags.comments.comment_form_target',
                [],
                '\n    Get the target URL for the comment form.\n\n    Example::\n\n        <form action="{% comment_form_target %}" method="post">\n    '),
               ('django.contrib.comments.templatetags.comments.get_comment_permalink',
                ['comment', 'anchor_pattern=None'],
                '\n    Get the permalink for a comment, optionally specifying the format of the\n    named anchor to be appended to the end of the URL.\n\n    Example::\n        {{ get_comment_permalink comment "#c%(id)s-by-%(user_name)s" }}\n    '),
               ('django.contrib.comments.views.utils.next_redirect',
                ['data', 'default', 'default_view', '**get_kwargs'],
                '\n    Handle the "where should I go next?" part of comment views.\n\n    The next value could be a kwarg to the function (``default``), or a\n    ``?next=...`` GET arg, or the URL of a given view (``default_view``). See\n    the view modules for examples.\n\n    Returns an ``HttpResponseRedirect``.\n    '),
               ('django.contrib.comments.views.utils.confirmation_view',
                ['template', "doc='Display a confirmation view.'"],
                '\n    Confirmation view generator for the "comment was\n    posted/flagged/deleted/approved" views.\n    '),
               ('django.contrib.comments.views.moderation.flag',
                ['request', 'comment_id', 'next=None'],
                '\n    Flags a comment. Confirmation on GET, action on POST.\n\n    Templates: `comments/flag.html`,\n    Context:\n        comment\n            the flagged `comments.comment` object\n    '),
               ('django.contrib.comments.views.moderation.delete',
                ['request', 'comment_id', 'next=None'],
                '\n    Deletes a comment. Confirmation on GET, action on POST. Requires the "can\n    moderate comments" permission.\n\n    Templates: `comments/delete.html`,\n    Context:\n        comment\n            the flagged `comments.comment` object\n    '),
               ('django.contrib.comments.views.moderation.approve',
                ['request', 'comment_id', 'next=None'],
                '\n    Approve a comment (that is, mark it as public and non-removed). Confirmation\n    on GET, action on POST. Requires the "can moderate comments" permission.\n\n    Templates: `comments/approve.html`,\n    Context:\n        comment\n            the `comments.comment` object for approval\n    '),
               ('django.contrib.comments.views.moderation.perform_flag',
                ['request', 'comment'],
                '\n    Actually perform the flagging of a comment from a request.\n    '),
               ('django.contrib.comments.views.moderation.perform_delete',
                ['request', 'comment'],
                ''),
               ('django.contrib.comments.views.moderation.perform_approve',
                ['request', 'comment'],
                ''),
               ('django.contrib.comments.views.comments.post_comment',
                ['request', 'next=None', 'using=None'],
                '\n    Post a comment.\n\n    HTTP POST is required. If ``POST[\'submit\'] == "preview"`` or if there are\n    errors a preview template, ``comments/preview.html``, will be rendered.\n    '),
               ('django.contrib.markup.templatetags.markup.textile', ['value'], ''),
               ('django.contrib.markup.templatetags.markup.markdown',
                ['value', "arg=''"],
                '\n    Runs Markdown over a given value, optionally using various\n    extensions python-markdown supports.\n\n    Syntax::\n\n        {{ value|markdown:"extension1_name,extension2_name..." }}\n\n    To enable safe mode, which strips raw HTML and only returns HTML\n    generated by actual Markdown syntax, pass "safe" as the first\n    extension in the list.\n\n    If the version of Markdown in use does not support extensions,\n    they will be silently ignored.\n\n    '),
               ('django.contrib.markup.templatetags.markup.restructuredtext', ['value'], ''),
               ('django.contrib.webdesign.lorem_ipsum.sentence',
                [],
                '\n    Returns a randomly generated sentence of lorem ipsum text.\n\n    The first word is capitalized, and the sentence ends in either a period or\n    question mark. Commas are added at random.\n    '),
               ('django.contrib.webdesign.lorem_ipsum.paragraph',
                [],
                '\n    Returns a randomly generated paragraph of lorem ipsum text.\n\n    The paragraph consists of between 1 and 4 sentences, inclusive.\n    '),
               ('django.contrib.webdesign.lorem_ipsum.paragraphs',
                ['count', 'common=True'],
                "\n    Returns a list of paragraphs as returned by paragraph().\n\n    If `common` is True, then the first paragraph will be the standard\n    'lorem ipsum' paragraph. Otherwise, the first paragraph will be random\n    Latin text. Either way, subsequent paragraphs will be random Latin text.\n    "),
               ('django.contrib.webdesign.lorem_ipsum.words',
                ['count', 'common=True'],
                "\n    Returns a string of `count` lorem ipsum words separated by a single space.\n\n    If `common` is True, then the first 19 words will be the standard\n    'lorem ipsum' words. Otherwise, all words will be selected randomly.\n    "),
               ('django.contrib.webdesign.templatetags.webdesign.lorem',
                ['parser', 'token'],
                '\n    Creates random Latin text useful for providing test data in templates.\n\n    Usage format::\n\n        {% lorem [count] [method] [random] %}\n\n    ``count`` is a number (or variable) containing the number of paragraphs or\n    words to generate (default is 1).\n\n    ``method`` is either ``w`` for words, ``p`` for HTML paragraphs, ``b`` for\n    plain-text paragraph blocks (default is ``b``).\n\n    ``random`` is the word ``random``, which if given, does not use the common\n    paragraph (starting "Lorem ipsum dolor sit amet, consectetuer...").\n\n    Examples:\n        * ``{% lorem %}`` will output the common "lorem ipsum" paragraph\n        * ``{% lorem 3 p %}`` will output the common "lorem ipsum" paragraph\n          and two random paragraphs each wrapped in HTML ``<p>`` tags\n        * ``{% lorem 2 w random %}`` will output two random latin words\n    '),
               ('django.contrib.flatpages.views.flatpage',
                ['request', 'url'],
                '\n    Public interface to the flat page view.\n\n    Models: `flatpages.flatpages`\n    Templates: Uses the template defined by the ``template_name`` field,\n        or `flatpages/default.html` if template_name is not defined.\n    Context:\n        flatpage\n            `flatpages.flatpages` object\n    '),
               ('django.contrib.flatpages.views.render_flatpage',
                ['request', 'f'],
                '\n    Internal interface to the flat page view.\n    '),
               ('django.contrib.flatpages.templatetags.flatpages.get_flatpages',
                ['parser', 'token'],
                "\n    Retrieves all flatpage objects available for the current site and\n    visible to the specific user (or visible to all users if no user is\n    specified). Populates the template context with them in a variable\n    whose name is defined by the ``as`` clause.\n\n    An optional ``for`` clause can be used to control the user whose\n    permissions are to be used in determining which flatpages are visible.\n\n    An optional argument, ``starts_with``, can be applied to limit the\n    returned flatpages to those beginning with a particular base URL.\n    This argument can be passed as a variable or a string, as it resolves\n    from the template context.\n\n    Syntax::\n\n        {% get_flatpages ['url_starts_with'] [for user] as context_name %}\n\n    Example usage::\n\n        {% get_flatpages as flatpages %}\n        {% get_flatpages for someuser as flatpages %}\n        {% get_flatpages '/about/' as about_pages %}\n        {% get_flatpages prefix as about_pages %}\n        {% get_flatpages '/about/' for someuser as about_pages %}\n    "),
               ('django.contrib.databrowse.views.choice_list',
                ['request', 'app_label', 'module_name', 'field_name', 'models'],
                ''),
               ('django.contrib.databrowse.views.choice_detail',
                ['request', 'app_label', 'module_name', 'field_name', 'field_val', 'models'],
                ''),
               ('django.contrib.staticfiles.views.serve',
                ['request', 'path', 'document_root=None', 'insecure=False', '**kwargs'],
                "\n    Serve static files below a given point in the directory structure or\n    from locations inferred from the staticfiles finders.\n\n    To use, put a URL pattern such as::\n\n        (r'^(?P<path>.*)$', 'django.contrib.staticfiles.views.serve')\n\n    in your URLconf.\n\n    It uses the django.views.static view to serve the found files.\n    "),
               ('django.contrib.staticfiles.utils.is_ignored',
                ['path', 'ignore_patterns=[]'],
                '\n    Return True or False depending on whether the ``path`` should be\n    ignored (if it matches any pattern in ``ignore_patterns``).\n    '),
               ('django.contrib.staticfiles.utils.get_files',
                ['storage', 'ignore_patterns=[]', "location=''"],
                '\n    Recursively walk the storage directories yielding the paths\n    of all files that should be copied.\n    '),
               ('django.contrib.staticfiles.utils.check_settings',
                [],
                '\n    Checks if the staticfiles settings have sane values.\n\n    '),
               ('django.contrib.staticfiles.urls.staticfiles_urlpatterns',
                ['prefix=None'],
                '\n    Helper function to return a URL pattern for serving static files.\n    '),
               ('django.contrib.staticfiles.finders.find',
                ['path', 'all=False'],
                '\n    Find a static file with the given path using all enabled finders.\n\n    If ``all`` is ``False`` (default), return the first matching\n    absolute path (or ``None`` if no match). Otherwise return a list.\n    '),
               ('django.contrib.staticfiles.finders.get_finders', [], ''),
               ('django.contrib.staticfiles.finders._get_finder',
                ['import_path'],
                '\n    Imports the staticfiles finder class described by import_path, where\n    import_path is the full Python path to the class.\n    '),
               ('django.contrib.sitemaps.views.index',
                ['request', 'sitemaps', "template_name='sitemap_index.xml'"],
                ''),
               ('django.contrib.sitemaps.views.sitemap',
                ['request', 'sitemaps', 'section=None', "template_name='sitemap.xml'"],
                ''),
               ('django.contrib.sitemaps.ping_google',
                ['sitemap_url=None', 'ping_url=PING_URL'],
                "\n    Alerts Google that the sitemap for the current site has been updated.\n    If sitemap_url is provided, it should be an absolute path to the sitemap\n    for this site -- e.g., '/sitemap.xml'. If sitemap_url is not provided, this\n    function will attempt to deduce it by using urlresolvers.reverse().\n    "),
               ('django.contrib.sites.models.get_current_site',
                ['request'],
                '\n    Checks if contrib.sites is installed and returns either the current\n    ``Site`` object or a ``RequestSite`` object based on the request.\n    '),
               ('django.contrib.sites.management.create_default_site',
                ['app', 'created_models', 'verbosity', 'db', '**kwargs'],
                ''),
               ('django.contrib.humanize.templatetags.humanize.ordinal',
                ['value'],
                "\n    Converts an integer to its ordinal as a string. 1 is '1st', 2 is '2nd',\n    3 is '3rd', etc. Works for any integer.\n    "),
               ('django.contrib.humanize.templatetags.humanize.intcomma',
                ['value'],
                "\n    Converts an integer to a string containing commas every three digits.\n    For example, 3000 becomes '3,000' and 45000 becomes '45,000'.\n    "),
               ('django.contrib.humanize.templatetags.humanize.intword',
                ['value'],
                "\n    Converts a large integer to a friendly text representation. Works best for\n    numbers over 1 million. For example, 1000000 becomes '1.0 million', 1200000\n    becomes '1.2 million' and '1200000000' becomes '1.2 billion'.\n    "),
               ('django.contrib.humanize.templatetags.humanize.apnumber',
                ['value'],
                '\n    For numbers 1-9, returns the number spelled out. Otherwise, returns the\n    number. This follows Associated Press style.\n    '),
               ('django.contrib.humanize.templatetags.humanize.naturalday',
                ['value', 'arg=None'],
                '\n    For date values that are tomorrow, today or yesterday compared to\n    present day returns representing string. Otherwise, returns a string\n    formatted according to settings.DATE_FORMAT.\n    '),
               ('django.contrib.messages.utils.get_level_tags',
                [],
                '\n    Returns the message level tags.\n    '),
               ('django.contrib.messages.context_processors.messages',
                ['request'],
                "\n    Returns a lazy 'messages' context variable.\n    "),
               ('django.contrib.messages.api.add_message',
                ['request', 'level', 'message', "extra_tags=''", 'fail_silently=False'],
                "\n    Attempts to add a message to the request using the 'messages' app, falling\n    back to the user's message_set if MessageMiddleware hasn't been enabled.\n    "),
               ('django.contrib.messages.api.get_messages',
                ['request'],
                '\n    Returns the message storage on the request if it exists, otherwise returns\n    user.message_set.all() as the old auth context processor did.\n    '),
               ('django.contrib.messages.api.get_level',
                ['request'],
                '\n    Returns the minimum level of messages to be recorded.\n\n    The default level is the ``MESSAGE_LEVEL`` setting. If this is not found,\n    the ``INFO`` level is used.\n    '),
               ('django.contrib.messages.api.set_level',
                ['request', 'level'],
                '\n    Sets the minimum level of messages to be recorded, returning ``True`` if\n    the level was recorded successfully.\n\n    If set to ``None``, the default level will be used (see the ``get_level``\n    method).\n    '),
               ('django.contrib.messages.api.debug',
                ['request', 'message', "extra_tags=''", 'fail_silently=False'],
                '\n    Adds a message with the ``DEBUG`` level.\n    '),
               ('django.contrib.messages.api.info',
                ['request', 'message', "extra_tags=''", 'fail_silently=False'],
                '\n    Adds a message with the ``INFO`` level.\n    '),
               ('django.contrib.messages.api.success',
                ['request', 'message', "extra_tags=''", 'fail_silently=False'],
                '\n    Adds a message with the ``SUCCESS`` level.\n    '),
               ('django.contrib.messages.api.warning',
                ['request', 'message', "extra_tags=''", 'fail_silently=False'],
                '\n    Adds a message with the ``WARNING`` level.\n    '),
               ('django.contrib.messages.api.error',
                ['request', 'message', "extra_tags=''", 'fail_silently=False'],
                '\n    Adds a message with the ``ERROR`` level.\n    '),
               ('django.contrib.messages.storage.get_storage',
                ['import_path'],
                '\n    Imports the message storage class described by import_path, where\n    import_path is the full Python path to the class.\n    '),
               ('django.contrib.messages.tests.cookie.set_cookie_data',
                ['storage', 'messages', 'invalid=False', 'encode_empty=False'],
                "\n    Sets ``request.COOKIES`` with the encoded data and removes the storage\n    backend's loaded data cache.\n    "),
               ('django.contrib.messages.tests.cookie.stored_cookie_messages_count',
                ['storage', 'response'],
                '\n    Returns an integer containing the number of messages stored.\n    '),
               ('django.contrib.messages.tests.base.skipUnlessAuthIsInstalled', ['func'], ''),
               ('django.contrib.messages.tests.base.add_level_messages',
                ['storage'],
                '\n    Adds 6 messages from different levels (including a custom one) to a storage\n    instance.\n    '),
               ('django.contrib.messages.tests.session.set_session_data',
                ['storage', 'messages'],
                "\n    Sets the messages into the backend request's session and remove the\n    backend's loaded data cache.\n    "),
               ('django.contrib.messages.tests.session.stored_session_messages_count',
                ['storage'],
                ''),
               ('django.contrib.messages.tests.urls.add', ['request', 'message_type'], ''),
               ('django.contrib.messages.tests.urls.add_template_response',
                ['request', 'message_type'],
                ''),
               ('django.contrib.messages.tests.urls.show', ['request'], ''),
               ('django.contrib.messages.tests.urls.show_template_response', ['request'], ''),
               ('django.contrib.admindocs.views.get_root_path', [], ''),
               ('django.contrib.admindocs.views.doc_index', ['request'], ''),
               ('django.contrib.admindocs.views.bookmarklets', ['request'], ''),
               ('django.contrib.admindocs.views.template_tag_index', ['request'], ''),
               ('django.contrib.admindocs.views.template_filter_index', ['request'], ''),
               ('django.contrib.admindocs.views.view_index', ['request'], ''),
               ('django.contrib.admindocs.views.view_detail', ['request', 'view'], ''),
               ('django.contrib.admindocs.views.model_index', ['request'], ''),
               ('django.contrib.admindocs.views.model_detail',
                ['request', 'app_label', 'model_name'],
                ''),
               ('django.contrib.admindocs.views.template_detail', ['request', 'template'], ''),
               ('django.contrib.admindocs.views.missing_docutils_page',
                ['request'],
                'Display an error message for people without docutils'),
               ('django.contrib.admindocs.views.load_all_installed_template_libraries', [], ''),
               ('django.contrib.admindocs.views.get_return_data_type',
                ['func_name'],
                'Return a somewhat-helpful data type given a function name'),
               ('django.contrib.admindocs.views.get_readable_field_data_type',
                ['field'],
                "Returns the description for a given field type, if it exists,\n    Fields' descriptions can contain format strings, which will be interpolated\n    against the values of field.__dict__ before being output."),
               ('django.contrib.admindocs.views.extract_views_from_urlpatterns',
                ['urlpatterns', "base=''"],
                '\n    Return a list of views from a list of urlpatterns.\n\n    Each object in the returned list is a two-tuple: (view_func, regex)\n    '),
               ('django.contrib.admindocs.views.simplify_regex',
                ['pattern'],
                '\n    Clean up urlpattern regexes into something somewhat readable by Mere Humans:\n    turns something like "^(?P<sport_slug>\\w+)/athletes/(?P<athlete_slug>\\w+)/$"\n    into "<sport_slug>/athletes/<athlete_slug>/"\n    '),
               ('django.contrib.admindocs.utils.trim_docstring',
                ['docstring'],
                '\n    Uniformly trims leading/trailing whitespace from docstrings.\n\n    Based on http://www.python.org/peps/pep-0257.html#handling-docstring-indentation\n    '),
               ('django.contrib.admindocs.utils.parse_docstring',
                ['docstring'],
                '\n    Parse out the parts of a docstring.  Returns (title, body, metadata).\n    '),
               ('django.contrib.admindocs.utils.parse_rst',
                ['text', 'default_reference_context', 'thing_being_parsed=None'],
                '\n    Convert the string from reST to an XHTML fragment.\n    '),
               ('django.contrib.admindocs.utils.create_reference_role',
                ['rolename', 'urlbase'],
                ''),
               ('django.contrib.admindocs.utils.default_reference_role',
                ['name', 'rawtext', 'text', 'lineno', 'inliner', 'options=None', 'content=None'],
                ''),
               ('django.test.simple.get_tests', ['app_module'], ''),
               ('django.test.simple.build_suite',
                ['app_module'],
                'Create a complete Django test suite for the provided application module'),
               ('django.test.simple.build_test',
                ['label'],
                'Construct a test case with the specified label. Label should be of the\n    form model.TestClass or model.TestClass.test_method. Returns an\n    instantiated test or test suite corresponding to the label provided.\n\n    '),
               ('django.test.simple.partition_suite',
                ['suite', 'classes', 'bins'],
                '\n    Partitions a test suite by test type.\n\n    classes is a sequence of types\n    bins is a sequence of TestSuites, one more than classes\n\n    Tests of type classes[i] are added to bins[i],\n    tests with no match found in classes are place in bins[-1]\n    '),
               ('django.test.simple.reorder_suite',
                ['suite', 'classes'],
                '\n    Reorders a test suite by test type.\n\n    classes is a sequence of types\n\n    All tests of type clases[0] are placed first, then tests of type classes[1], etc.\n    Tests with no match in classes are placed last.\n    '),
               ('django.test.simple.dependency_ordered',
                ['test_databases', 'dependencies'],
                'Reorder test_databases into an order that honors the dependencies\n    described in TEST_DEPENDENCIES.\n    '),
               ('django.test.simple.run_tests',
                ['test_labels',
                 'verbosity=1',
                 'interactive=True',
                 'failfast=False',
                 'extra_tests=None'],
                ''),
               ('django.test.utils.instrumented_test_render',
                ['self', 'context'],
                '\n    An instrumented Template render method, providing a signal\n    that can be intercepted by the test system Client\n    '),
               ('django.test.utils.setup_test_environment',
                [],
                'Perform any global pre-test setup. This involves:\n\n        - Installing the instrumented test renderer\n        - Set the email backend to the locmem email backend.\n        - Setting the active locale to match the LANGUAGE_CODE setting.\n    '),
               ('django.test.utils.teardown_test_environment',
                [],
                'Perform any global post-test teardown. This involves:\n\n        - Restoring the original test renderer\n        - Restoring the email sending functions\n\n    '),
               ('django.test.utils.get_warnings_state',
                [],
                '\n    Returns an object containing the state of the warnings module\n    '),
               ('django.test.utils.restore_warnings_state',
                ['state'],
                '\n    Restores the state of the warnings module when passed an object that was\n    returned by get_warnings_state()\n    '),
               ('django.test.utils.get_runner', ['settings'], ''),
               ('django.test.client.store_rendered_templates',
                ['store', 'signal', 'sender', 'template', 'context', '**kwargs'],
                '\n    Stores templates and contexts that are rendered.\n\n    The context is copied so that it is an accurate representation at the time\n    of rendering.\n    '),
               ('django.test.client.encode_multipart',
                ['boundary', 'data'],
                '\n    Encodes multipart POST data from a dictionary of form values.\n\n    The key will be used as the form data name; the value will be transmitted\n    as content. If the value is a file, the contents of the file will be sent\n    as an application/octet-stream; otherwise, str(value) will be sent.\n    '),
               ('django.test.client.encode_file', ['boundary', 'key', 'file'], ''),
               ('django.test._doctest.patch_isclass', ['isclass'], ''),
               ('django.test._doctest.register_optionflag', ['name'], ''),
               ('django.test._doctest.is_private',
                ['prefix', 'base'],
                'prefix, base -> true iff name prefix + "." + base is "private".\n\n    Prefix may be an empty string, and base does not contain a period.\n    Prefix is ignored (although functions you write conforming to this\n    protocol may make use of it).\n    Return true iff base begins with an (at least one) underscore, but\n    does not both begin and end with (at least) two underscores.\n\n    >>> is_private("a.b", "my_func")\n    False\n    >>> is_private("____", "_my_func")\n    True\n    >>> is_private("someclass", "__init__")\n    False\n    >>> is_private("sometypo", "__init_")\n    True\n    >>> is_private("x.y.z", "_")\n    True\n    >>> is_private("_x.y.z", "__")\n    False\n    >>> is_private("", "")  # senseless but consistent\n    False\n    '),
               ('django.test._doctest._extract_future_flags',
                ['globs'],
                '\n    Return the compiler-flags associated with the future features that\n    have been imported into the given namespace (globs).\n    '),
               ('django.test._doctest._normalize_module',
                ['module', 'depth=2'],
                '\n    Return the module specified by `module`.  In particular:\n      - If `module` is a module, then return module.\n      - If `module` is a string, then import and return the\n        module with that name.\n      - If `module` is None, then return the calling module.\n        The calling module is assumed to be the module of\n        the stack frame at the given depth in the call stack.\n    '),
               ('django.test._doctest._indent',
                ['s', 'indent=4'],
                '\n    Add the given number of space characters to the beginning every\n    non-blank line in `s`, and return the result.\n    '),
               ('django.test._doctest._exception_traceback',
                ['exc_info'],
                '\n    Return a string containing a traceback message for the given\n    exc_info tuple (as returned by sys.exc_info()).\n    '),
               ('django.test._doctest._ellipsis_match',
                ['want', 'got'],
                "\n    Essentially the only subtle case:\n    >>> _ellipsis_match('aa...aa', 'aaa')\n    False\n    "),
               ('django.test._doctest._comment_line',
                ['line'],
                'Return a commented form of the given line'),
               ('django.test._doctest._module_relative_path', ['module', 'path'], ''),
               ('django.test._doctest.testmod',
                ['m=None',
                 'name=None',
                 'globs=None',
                 'verbose=None',
                 'isprivate=None',
                 'report=True',
                 'optionflags=0',
                 'extraglobs=None',
                 'raise_on_error=False',
                 'exclude_empty=False'],
                'm=None, name=None, globs=None, verbose=None, isprivate=None,\n       report=True, optionflags=0, extraglobs=None, raise_on_error=False,\n       exclude_empty=False\n\n    Test examples in docstrings in functions and classes reachable\n    from module m (or the current module if m is not supplied), starting\n    with m.__doc__.  Unless isprivate is specified, private names\n    are not skipped.\n\n    Also test examples reachable from dict m.__test__ if it exists and is\n    not None.  m.__test__ maps names to functions, classes and strings;\n    function and class docstrings are tested even if the name is private;\n    strings are tested directly, as if they were docstrings.\n\n    Return (#failures, #tests).\n\n    See doctest.__doc__ for an overview.\n\n    Optional keyword arg "name" gives the name of the module; by default\n    use m.__name__.\n\n    Optional keyword arg "globs" gives a dict to be used as the globals\n    when executing examples; by default, use m.__dict__.  A copy of this\n    dict is actually used for each docstring, so that each docstring\'s\n    examples start with a clean slate.\n\n    Optional keyword arg "extraglobs" gives a dictionary that should be\n    merged into the globals that are used to execute examples.  By\n    default, no extra globals are used.  This is new in 2.4.\n\n    Optional keyword arg "verbose" prints lots of stuff if true, prints\n    only failures if false; by default, it\'s true iff "-v" is in sys.argv.\n\n    Optional keyword arg "report" prints a summary at the end when true,\n    else prints nothing at the end.  In verbose mode, the summary is\n    detailed, else very brief (in fact, empty if all tests passed).\n\n    Optional keyword arg "optionflags" or\'s together module constants,\n    and defaults to 0.  This is new in 2.3.  Possible values (see the\n    docs for details):\n\n        DONT_ACCEPT_TRUE_FOR_1\n        DONT_ACCEPT_BLANKLINE\n        NORMALIZE_WHITESPACE\n        ELLIPSIS\n        IGNORE_EXCEPTION_DETAIL\n        REPORT_UDIFF\n        REPORT_CDIFF\n        REPORT_NDIFF\n        REPORT_ONLY_FIRST_FAILURE\n\n    Optional keyword arg "raise_on_error" raises an exception on the\n    first unexpected exception or failure. This allows failures to be\n    post-mortem debugged.\n\n    Deprecated in Python 2.4:\n    Optional keyword arg "isprivate" specifies a function used to\n    determine whether a name is private.  The default function is\n    treat all functions as public.  Optionally, "isprivate" can be\n    set to doctest.is_private to skip over functions marked as private\n    using the underscore naming convention; see its docs for details.\n\n    Advanced tomfoolery:  testmod runs methods of a local instance of\n    class doctest.Tester, then merges the results into (or creates)\n    global Tester instance doctest.master.  Methods of doctest.master\n    can be called directly too, if you want to do something unusual.\n    Passing report=0 to testmod is especially useful then, to delay\n    displaying a summary.  Invoke doctest.master.summarize(verbose)\n    when you\'re done fiddling.\n    '),
               ('django.test._doctest.testfile',
                ['filename',
                 'module_relative=True',
                 'name=None',
                 'package=None',
                 'globs=None',
                 'verbose=None',
                 'report=True',
                 'optionflags=0',
                 'extraglobs=None',
                 'raise_on_error=False',
                 'parser=DocTestParser()'],
                '\n    Test examples in the given file.  Return (#failures, #tests).\n\n    Optional keyword arg "module_relative" specifies how filenames\n    should be interpreted:\n\n      - If "module_relative" is True (the default), then "filename"\n         specifies a module-relative path.  By default, this path is\n         relative to the calling module\'s directory; but if the\n         "package" argument is specified, then it is relative to that\n         package.  To ensure os-independence, "filename" should use\n         "/" characters to separate path segments, and should not\n         be an absolute path (i.e., it may not begin with "/").\n\n      - If "module_relative" is False, then "filename" specifies an\n        os-specific path.  The path may be absolute or relative (to\n        the current working directory).\n\n    Optional keyword arg "name" gives the name of the test; by default\n    use the file\'s basename.\n\n    Optional keyword argument "package" is a Python package or the\n    name of a Python package whose directory should be used as the\n    base directory for a module relative filename.  If no package is\n    specified, then the calling module\'s directory is used as the base\n    directory for module relative filenames.  It is an error to\n    specify "package" if "module_relative" is False.\n\n    Optional keyword arg "globs" gives a dict to be used as the globals\n    when executing examples; by default, use {}.  A copy of this dict\n    is actually used for each docstring, so that each docstring\'s\n    examples start with a clean slate.\n\n    Optional keyword arg "extraglobs" gives a dictionary that should be\n    merged into the globals that are used to execute examples.  By\n    default, no extra globals are used.\n\n    Optional keyword arg "verbose" prints lots of stuff if true, prints\n    only failures if false; by default, it\'s true iff "-v" is in sys.argv.\n\n    Optional keyword arg "report" prints a summary at the end when true,\n    else prints nothing at the end.  In verbose mode, the summary is\n    detailed, else very brief (in fact, empty if all tests passed).\n\n    Optional keyword arg "optionflags" or\'s together module constants,\n    and defaults to 0.  Possible values (see the docs for details):\n\n        DONT_ACCEPT_TRUE_FOR_1\n        DONT_ACCEPT_BLANKLINE\n        NORMALIZE_WHITESPACE\n        ELLIPSIS\n        IGNORE_EXCEPTION_DETAIL\n        REPORT_UDIFF\n        REPORT_CDIFF\n        REPORT_NDIFF\n        REPORT_ONLY_FIRST_FAILURE\n\n    Optional keyword arg "raise_on_error" raises an exception on the\n    first unexpected exception or failure. This allows failures to be\n    post-mortem debugged.\n\n    Optional keyword arg "parser" specifies a DocTestParser (or\n    subclass) that should be used to extract tests from the files.\n\n    Advanced tomfoolery:  testmod runs methods of a local instance of\n    class doctest.Tester, then merges the results into (or creates)\n    global Tester instance doctest.master.  Methods of doctest.master\n    can be called directly too, if you want to do something unusual.\n    Passing report=0 to testmod is especially useful then, to delay\n    displaying a summary.  Invoke doctest.master.summarize(verbose)\n    when you\'re done fiddling.\n    '),
               ('django.test._doctest.run_docstring_examples',
                ['f',
                 'globs',
                 'verbose=False',
                 "name='NoName'",
                 'compileflags=None',
                 'optionflags=0'],
                "\n    Test examples in the given object's docstring (`f`), using `globs`\n    as globals.  Optional argument `name` is used in failure messages.\n    If the optional argument `verbose` is true, then generate output\n    even if there are no failures.\n\n    `compileflags` gives the set of flags that should be used by the\n    Python compiler when running the examples.  If not specified, then\n    it will default to the set of future-import flags that apply to\n    `globs`.\n\n    Optional keyword arg `optionflags` specifies options for the\n    testing and output.  See the documentation for `testmod` for more\n    information.\n    "),
               ('django.test._doctest.set_unittest_reportflags',
                ['flags'],
                "Sets the unittest option flags.\n\n    The old flag is returned so that a runner could restore the old\n    value if it wished to:\n\n      >>> old = _unittest_reportflags\n      >>> set_unittest_reportflags(REPORT_NDIFF |\n      ...                          REPORT_ONLY_FIRST_FAILURE) == old\n      True\n\n      >>> import doctest\n      >>> doctest._unittest_reportflags == (REPORT_NDIFF |\n      ...                                   REPORT_ONLY_FIRST_FAILURE)\n      True\n\n    Only reporting flags can be set:\n\n      >>> set_unittest_reportflags(ELLIPSIS)\n      Traceback (most recent call last):\n      ...\n      ValueError: ('Only reporting flags allowed', 8)\n\n      >>> set_unittest_reportflags(old) == (REPORT_NDIFF |\n      ...                                   REPORT_ONLY_FIRST_FAILURE)\n      True\n    "),
               ('django.test._doctest.DocTestSuite',
                ['module=None',
                 'globs=None',
                 'extraglobs=None',
                 'test_finder=None',
                 'test_class=DocTestCase',
                 '**options'],
                '\n    Convert doctest tests for a module to a unittest test suite.\n\n    This converts each documentation string in a module that\n    contains doctest tests to a unittest test case.  If any of the\n    tests in a doc string fail, then the test case fails.  An exception\n    is raised showing the name of the file containing the test and a\n    (sometimes approximate) line number.\n\n    The `module` argument provides the module to be tested.  The argument\n    can be either a module or a module name.\n\n    If no argument is given, the calling module is used.\n\n    A number of options may be provided as keyword arguments:\n\n    setUp\n      A set-up function.  This is called before running the\n      tests in each file. The setUp function will be passed a DocTest\n      object.  The setUp function can access the test globals as the\n      globs attribute of the test passed.\n\n    tearDown\n      A tear-down function.  This is called after running the\n      tests in each file.  The tearDown function will be passed a DocTest\n      object.  The tearDown function can access the test globals as the\n      globs attribute of the test passed.\n\n    globs\n      A dictionary containing initial global variables for the tests.\n\n    optionflags\n       A set of doctest option flags expressed as an integer.\n    '),
               ('django.test._doctest.DocFileTest',
                ['path',
                 'module_relative=True',
                 'package=None',
                 'globs=None',
                 'parser=DocTestParser()',
                 '**options'],
                ''),
               ('django.test._doctest.DocFileSuite',
                ['*paths', '**kw'],
                'A unittest suite for one or more doctest files.\n\n    The path to each doctest file is given as a string; the\n    interpretation of that string depends on the keyword argument\n    "module_relative".\n\n    A number of options may be provided as keyword arguments:\n\n    module_relative\n      If "module_relative" is True, then the given file paths are\n      interpreted as os-independent module-relative paths.  By\n      default, these paths are relative to the calling module\'s\n      directory; but if the "package" argument is specified, then\n      they are relative to that package.  To ensure os-independence,\n      "filename" should use "/" characters to separate path\n      segments, and may not be an absolute path (i.e., it may not\n      begin with "/").\n\n      If "module_relative" is False, then the given file paths are\n      interpreted as os-specific paths.  These paths may be absolute\n      or relative (to the current working directory).\n\n    package\n      A Python package or the name of a Python package whose directory\n      should be used as the base directory for module relative paths.\n      If "package" is not specified, then the calling module\'s\n      directory is used as the base directory for module relative\n      filenames.  It is an error to specify "package" if\n      "module_relative" is False.\n\n    setUp\n      A set-up function.  This is called before running the\n      tests in each file. The setUp function will be passed a DocTest\n      object.  The setUp function can access the test globals as the\n      globs attribute of the test passed.\n\n    tearDown\n      A tear-down function.  This is called after running the\n      tests in each file.  The tearDown function will be passed a DocTest\n      object.  The tearDown function can access the test globals as the\n      globs attribute of the test passed.\n\n    globs\n      A dictionary containing initial global variables for the tests.\n\n    optionflags\n      A set of doctest option flags expressed as an integer.\n\n    parser\n      A DocTestParser (or subclass) that should be used to extract\n      tests from the files.\n    '),
               ('django.test._doctest.script_from_examples',
                ['s'],
                "Extract script from text with examples.\n\n       Converts text with examples to a Python script.  Example input is\n       converted to regular code.  Example output and all other words\n       are converted to comments:\n\n       >>> text = '''\n       ...       Here are examples of simple math.\n       ...\n       ...           Python has super accurate integer addition\n       ...\n       ...           >>> 2 + 2\n       ...           5\n       ...\n       ...           And very friendly error messages:\n       ...\n       ...           >>> 1/0\n       ...           To Infinity\n       ...           And\n       ...           Beyond\n       ...\n       ...           You can use logic if you want:\n       ...\n       ...           >>> if 0:\n       ...           ...    blah\n       ...           ...    blah\n       ...           ...\n       ...\n       ...           Ho hum\n       ...           '''\n\n       >>> print script_from_examples(text)\n       # Here are examples of simple math.\n       #\n       #     Python has super accurate integer addition\n       #\n       2 + 2\n       # Expected:\n       ## 5\n       #\n       #     And very friendly error messages:\n       #\n       1/0\n       # Expected:\n       ## To Infinity\n       ## And\n       ## Beyond\n       #\n       #     You can use logic if you want:\n       #\n       if 0:\n          blah\n          blah\n       #\n       #     Ho hum\n       "),
               ('django.test._doctest.testsource',
                ['module', 'name'],
                'Extract the test sources from a doctest docstring as a script.\n\n    Provide the module (or dotted name of the module) containing the\n    test to be debugged and the name (within the module) of the object\n    with the doc string with tests to be debugged.\n    '),
               ('django.test._doctest.debug_src',
                ['src', 'pm=False', 'globs=None'],
                "Debug a single doctest docstring, in argument `src`'"),
               ('django.test._doctest.debug_script',
                ['src', 'pm=False', 'globs=None'],
                'Debug a test script.  `src` is the script, as a string.'),
               ('django.test._doctest.debug',
                ['module', 'name', 'pm=False'],
                'Debug a single doctest docstring.\n\n    Provide the module (or dotted name of the module) containing the\n    test to be debugged and the name (within the module) of the object\n    with the docstring with tests to be debugged.\n    '),
               ('django.test._doctest._test', [], ''),
               ('django.test.testcases.to_list',
                ['value'],
                "\n    Puts value into a list if it's not already one.\n    Returns an empty list if value is None.\n    "),
               ('django.test.testcases.nop', ['*args', '**kwargs'], ''),
               ('django.test.testcases.disable_transaction_methods', [], ''),
               ('django.test.testcases.restore_transaction_methods', [], ''),
               ('django.test.testcases.connections_support_transactions',
                [],
                "\n    Returns True if all connections support transactions.  This is messy\n    because 2.4 doesn't support any or all.\n    "),
               ('django.test.testcases._deferredSkip', ['condition', 'reason'], ''),
               ('django.test.testcases.skipIfDBFeature',
                ['feature'],
                'Skip a test if a database has the named feature'),
               ('django.test.testcases.skipUnlessDBFeature',
                ['feature'],
                'Skip a test unless a database has the named feature'),
               ('django.forms.models.construct_instance',
                ['form', 'instance', 'fields=None', 'exclude=None'],
                "\n    Constructs and returns a model instance from the bound ``form``'s\n    ``cleaned_data``, but does not save the returned instance to the\n    database.\n    "),
               ('django.forms.models.save_instance',
                ['form',
                 'instance',
                 'fields=None',
                 "fail_message='saved'",
                 'commit=True',
                 'exclude=None',
                 'construct=True'],
                "\n    Saves bound Form ``form``'s cleaned_data into model instance ``instance``.\n\n    If commit=True, then the changes to ``instance`` will be saved to the\n    database. Returns ``instance``.\n\n    If construct=False, assume ``instance`` has already been constructed and\n    just needs to be saved.\n    "),
               ('django.forms.models.model_to_dict',
                ['instance', 'fields=None', 'exclude=None'],
                "\n    Returns a dict containing the data in ``instance`` suitable for passing as\n    a Form's ``initial`` keyword argument.\n\n    ``fields`` is an optional list of field names. If provided, only the named\n    fields will be included in the returned dict.\n\n    ``exclude`` is an optional list of field names. If provided, the named\n    fields will be excluded from the returned dict, even if they are listed in\n    the ``fields`` argument.\n    "),
               ('django.forms.models.fields_for_model',
                ['model',
                 'fields=None',
                 'exclude=None',
                 'widgets=None',
                 'formfield_callback=None'],
                '\n    Returns a ``SortedDict`` containing form fields for the given model.\n\n    ``fields`` is an optional list of field names. If provided, only the named\n    fields will be included in the returned fields.\n\n    ``exclude`` is an optional list of field names. If provided, the named\n    fields will be excluded from the returned fields, even if they are listed\n    in the ``fields`` argument.\n    '),
               ('django.forms.models.modelform_factory',
                ['model',
                 'form=ModelForm',
                 'fields=None',
                 'exclude=None',
                 'formfield_callback=None'],
                ''),
               ('django.forms.models.modelformset_factory',
                ['model',
                 'form=ModelForm',
                 'formfield_callback=None',
                 'formset=BaseModelFormSet',
                 'extra=1',
                 'can_delete=False',
                 'can_order=False',
                 'max_num=None',
                 'fields=None',
                 'exclude=None'],
                '\n    Returns a FormSet class for the given Django model class.\n    '),
               ('django.forms.models._get_foreign_key',
                ['parent_model', 'model', 'fk_name=None', 'can_fail=False'],
                '\n    Finds and returns the ForeignKey from model to parent if there is one\n    (returns None if can_fail is True and no such field exists). If fk_name is\n    provided, assume it is the name of the ForeignKey field. Unles can_fail is\n    True, an exception is raised if there is no ForeignKey from model to\n    parent_model.\n    '),
               ('django.forms.models.inlineformset_factory',
                ['parent_model',
                 'model',
                 'form=ModelForm',
                 'formset=BaseInlineFormSet',
                 'fk_name=None',
                 'fields=None',
                 'exclude=None',
                 'extra=3',
                 'can_order=False',
                 'can_delete=True',
                 'max_num=None',
                 'formfield_callback=None'],
                '\n    Returns an ``InlineFormSet`` for the given kwargs.\n\n    You must provide ``fk_name`` if ``model`` has more than one ``ForeignKey``\n    to ``parent_model``.\n    '),
               ('django.forms.forms.pretty_name',
                ['name'],
                "Converts 'first_name' to 'First name'"),
               ('django.forms.forms.get_declared_fields',
                ['bases', 'attrs', 'with_base_fields=True'],
                "\n    Create a list of form field instances from the passed in 'attrs', plus any\n    similar fields on the base classes (in 'bases'). This is used by both the\n    Form and ModelForm metclasses.\n\n    If 'with_base_fields' is True, all fields from the bases are used.\n    Otherwise, only fields in the 'declared_fields' attribute on the bases are\n    used. The distinction is useful in ModelForm subclassing.\n    Also integrates any additional media definitions\n    "),
               ('django.forms.fields.en_format',
                ['name'],
                '\n    Helper function to stay backward compatible.\n    '),
               ('django.forms.util.flatatt',
                ['attrs'],
                '\n    Convert a dictionary of attributes to a single string.\n    The returned string will contain a leading space followed by key="value",\n    XML-style pairs.  It is assumed that the keys do not need to be XML-escaped.\n    If the passed dictionary is empty, then return an empty string.\n    '),
               ('django.forms.widgets.media_property', ['cls'], ''),
               ('django.forms.formsets.formset_factory',
                ['form',
                 'formset=BaseFormSet',
                 'extra=1',
                 'can_order=False',
                 'can_delete=False',
                 'max_num=None'],
                'Return a FormSet for the given form class.'),
               ('django.forms.formsets.all_valid',
                ['formsets'],
                'Returns true if every formset in formsets is valid.'),
               ('django.forms.extras.widgets._parse_date_fmt', [], ''),
               ('django.conf.urls.static.static',
                ['prefix', "view='django.views.static.serve'", '**kwargs'],
                "\n    Helper function to return a URL pattern for serving files in debug mode.\n\n    from django.conf import settings\n    from django.conf.urls.static import static\n\n    urlpatterns = patterns('',\n        # ... the rest of your URLconf goes here ...\n    ) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n\n    "),
               ('django.conf.urls.defaults.include',
                ['arg', 'namespace=None', 'app_name=None'],
                ''),
               ('django.conf.urls.defaults.patterns', ['prefix', '*args'], ''),
               ('django.conf.urls.defaults.url',
                ['regex', 'view', 'kwargs=None', 'name=None', "prefix=''"],
                ''),
               ('django.template.context.get_standard_processors', [], ''),
               ('django.template.smartif.infix',
                ['bp', 'func'],
                '\n    Creates an infix operator, given a binding power and a function that\n    evaluates the node\n    '),
               ('django.template.smartif.prefix',
                ['bp', 'func'],
                '\n    Creates a prefix operator, given a binding power and a function that\n    evaluates the node.\n    '),
               ('django.template.base.compile_string',
                ['template_string', 'origin'],
                'Compiles template_string into NodeList ready for rendering'),
               ('django.template.base.resolve_variable',
                ['path', 'context'],
                '\n    Returns the resolved variable, which may contain attribute syntax, within\n    the given context.\n\n    Deprecated; use the Variable class instead.\n    '),
               ('django.template.base._render_value_in_context',
                ['value', 'context'],
                '\n    Converts any value to a string to become part of a rendered template. This\n    means escaping, if required, and conversion to a unicode object. If value\n    is a string, it is expected to have already been translated.\n    '),
               ('django.template.base.generic_tag_compiler',
                ['params', 'defaults', 'name', 'node_class', 'parser', 'token'],
                'Returns a template.Node subclass.'),
               ('django.template.base.import_library',
                ['taglib_module'],
                "Load a template tag library module.\n\n    Verifies that the library contains a 'register' attribute, and\n    returns that attribute as the representation of the library\n    "),
               ('django.template.base.get_templatetags_modules',
                [],
                'Return the list of all available template tag modules.\n\n    Caches the result for faster access.\n    '),
               ('django.template.base.get_library',
                ['library_name'],
                '\n    Load the template library module with the given name.\n\n    If library is not already loaded loop over all templatetags modules to locate it.\n\n    {% load somelib %} and {% load someotherlib %} loops twice.\n\n    Subsequent loads eg. {% load somelib %} in the same process will grab the cached\n    module from libraries.\n    '),
               ('django.template.base.add_to_builtins', ['module'], ''),
               ('django.template.defaultfilters.stringfilter',
                ['func'],
                '\n    Decorator for filters which should only receive unicode objects. The object\n    passed as the first positional argument will be converted to a unicode\n    object.\n    '),
               ('django.template.defaultfilters.addslashes',
                ['value'],
                '\n    Adds slashes before quotes. Useful for escaping strings in CSV, for\n    example. Less useful for escaping JavaScript; use the ``escapejs``\n    filter instead.\n    '),
               ('django.template.defaultfilters.capfirst',
                ['value'],
                'Capitalizes the first character of the value.'),
               ('django.template.defaultfilters.escapejs',
                ['value'],
                'Hex encodes characters for use in JavaScript strings.'),
               ('django.template.defaultfilters.fix_ampersands',
                ['value'],
                'Replaces ampersands with ``&amp;`` entities.'),
               ('django.template.defaultfilters.floatformat',
                ['text', 'arg=-1'],
                '\n    Displays a float to a specified number of decimal places.\n\n    If called without an argument, it displays the floating point number with\n    one decimal place -- but only if there\'s a decimal place to be displayed:\n\n    * num1 = 34.23234\n    * num2 = 34.00000\n    * num3 = 34.26000\n    * {{ num1|floatformat }} displays "34.2"\n    * {{ num2|floatformat }} displays "34"\n    * {{ num3|floatformat }} displays "34.3"\n\n    If arg is positive, it will always display exactly arg number of decimal\n    places:\n\n    * {{ num1|floatformat:3 }} displays "34.232"\n    * {{ num2|floatformat:3 }} displays "34.000"\n    * {{ num3|floatformat:3 }} displays "34.260"\n\n    If arg is negative, it will display arg number of decimal places -- but\n    only if there are places to be displayed:\n\n    * {{ num1|floatformat:"-3" }} displays "34.232"\n    * {{ num2|floatformat:"-3" }} displays "34"\n    * {{ num3|floatformat:"-3" }} displays "34.260"\n\n    If the input float is infinity or NaN, the (platform-dependent) string\n    representation of that value will be displayed.\n    '),
               ('django.template.defaultfilters.iriencode',
                ['value'],
                'Escapes an IRI value for use in a URL.'),
               ('django.template.defaultfilters.linenumbers',
                ['value', 'autoescape=None'],
                'Displays text with line numbers.'),
               ('django.template.defaultfilters.lower',
                ['value'],
                'Converts a string into all lowercase.'),
               ('django.template.defaultfilters.make_list',
                ['value'],
                "\n    Returns the value turned into a list.\n\n    For an integer, it's a list of digits.\n    For a string, it's a list of characters.\n    "),
               ('django.template.defaultfilters.slugify',
                ['value'],
                '\n    Normalizes string, converts to lowercase, removes non-alpha characters,\n    and converts spaces to hyphens.\n    '),
               ('django.template.defaultfilters.stringformat',
                ['value', 'arg'],
                '\n    Formats the variable according to the arg, a string formatting specifier.\n\n    This specifier uses Python string formating syntax, with the exception that\n    the leading "%" is dropped.\n\n    See http://docs.python.org/lib/typesseq-strings.html for documentation\n    of Python string formatting\n    '),
               ('django.template.defaultfilters.title',
                ['value'],
                'Converts a string into titlecase.'),
               ('django.template.defaultfilters.truncatewords',
                ['value', 'arg'],
                '\n    Truncates a string after a certain number of words.\n\n    Argument: Number of words to truncate after.\n\n    Newlines within the string are removed.\n    '),
               ('django.template.defaultfilters.truncatewords_html',
                ['value', 'arg'],
                '\n    Truncates HTML after a certain number of words.\n\n    Argument: Number of words to truncate after.\n\n    Newlines in the HTML are preserved.\n    '),
               ('django.template.defaultfilters.upper',
                ['value'],
                'Converts a string into all uppercase.'),
               ('django.template.defaultfilters.urlencode',
                ['value', 'safe=None'],
                "\n    Escapes a value for use in a URL.\n\n    Takes an optional ``safe`` parameter used to determine the characters which\n    should not be escaped by Django's ``urlquote`` method. If not provided, the\n    default safe characters will be used (but an empty string can be provided\n    when *all* characters should be escaped).\n    "),
               ('django.template.defaultfilters.urlize',
                ['value', 'autoescape=None'],
                'Converts URLs in plain text into clickable links.'),
               ('django.template.defaultfilters.urlizetrunc',
                ['value', 'limit', 'autoescape=None'],
                "\n    Converts URLs into clickable links, truncating URLs to the given character\n    limit, and adding 'rel=nofollow' attribute to discourage spamming.\n\n    Argument: Length to truncate URLs to.\n    "),
               ('django.template.defaultfilters.wordcount',
                ['value'],
                'Returns the number of words.'),
               ('django.template.defaultfilters.wordwrap',
                ['value', 'arg'],
                '\n    Wraps words at specified line length.\n\n    Argument: number of characters to wrap the text at.\n    '),
               ('django.template.defaultfilters.ljust',
                ['value', 'arg'],
                '\n    Left-aligns the value in a field of a given width.\n\n    Argument: field size.\n    '),
               ('django.template.defaultfilters.rjust',
                ['value', 'arg'],
                '\n    Right-aligns the value in a field of a given width.\n\n    Argument: field size.\n    '),
               ('django.template.defaultfilters.center',
                ['value', 'arg'],
                'Centers the value in a field of a given width.'),
               ('django.template.defaultfilters.cut',
                ['value', 'arg'],
                '\n    Removes all values of arg from the given string.\n    '),
               ('django.template.defaultfilters.escape',
                ['value'],
                '\n    Marks the value as a string that should not be auto-escaped.\n    '),
               ('django.template.defaultfilters.force_escape',
                ['value'],
                '\n    Escapes a string\'s HTML. This returns a new string containing the escaped\n    characters (as opposed to "escape", which marks the content for later\n    possible escaping).\n    '),
               ('django.template.defaultfilters.linebreaks',
                ['value', 'autoescape=None'],
                '\n    Replaces line breaks in plain text with appropriate HTML; a single\n    newline becomes an HTML line break (``<br />``) and a new line\n    followed by a blank line becomes a paragraph break (``</p>``).\n    '),
               ('django.template.defaultfilters.linebreaksbr',
                ['value', 'autoescape=None'],
                '\n    Converts all newlines in a piece of plain text to HTML line breaks\n    (``<br />``).\n    '),
               ('django.template.defaultfilters.safe',
                ['value'],
                '\n    Marks the value as a string that should not be auto-escaped.\n    '),
               ('django.template.defaultfilters.safeseq',
                ['value'],
                '\n    A "safe" filter for sequences. Marks each element in the sequence,\n    individually, as safe, after converting them to unicode. Returns a list\n    with the results.\n    '),
               ('django.template.defaultfilters.removetags',
                ['value', 'tags'],
                'Removes a space separated list of [X]HTML tags from the output.'),
               ('django.template.defaultfilters.striptags',
                ['value'],
                'Strips all [X]HTML tags.'),
               ('django.template.defaultfilters.dictsort',
                ['value', 'arg'],
                '\n    Takes a list of dicts, returns that list sorted by the property given in\n    the argument.\n    '),
               ('django.template.defaultfilters.dictsortreversed',
                ['value', 'arg'],
                '\n    Takes a list of dicts, returns that list sorted in reverse order by the\n    property given in the argument.\n    '),
               ('django.template.defaultfilters.first',
                ['value'],
                'Returns the first item in a list.'),
               ('django.template.defaultfilters.join',
                ['value', 'arg', 'autoescape=None'],
                "\n    Joins a list with a string, like Python's ``str.join(list)``.\n    "),
               ('django.template.defaultfilters.last',
                ['value'],
                'Returns the last item in a list'),
               ('django.template.defaultfilters.length',
                ['value'],
                'Returns the length of the value - useful for lists.'),
               ('django.template.defaultfilters.length_is',
                ['value', 'arg'],
                "Returns a boolean of whether the value's length is the argument."),
               ('django.template.defaultfilters.random',
                ['value'],
                'Returns a random item from the list.'),
               ('django.template.defaultfilters.slice_',
                ['value', 'arg'],
                "\n    Returns a slice of the list.\n\n    Uses the same syntax as Python's list slicing; see\n    http://diveintopython.org/native_data_types/lists.html#odbchelper.list.slice\n    for an introduction.\n    "),
               ('django.template.defaultfilters.unordered_list',
                ['value', 'autoescape=None'],
                "\n    Recursively takes a self-nested list and returns an HTML unordered list --\n    WITHOUT opening and closing <ul> tags.\n\n    The list is assumed to be in the proper format. For example, if ``var``\n    contains: ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``,\n    then ``{{ var|unordered_list }}`` would return::\n\n        <li>States\n        <ul>\n                <li>Kansas\n                <ul>\n                        <li>Lawrence</li>\n                        <li>Topeka</li>\n                </ul>\n                </li>\n                <li>Illinois</li>\n        </ul>\n        </li>\n    "),
               ('django.template.defaultfilters.add',
                ['value', 'arg'],
                'Adds the arg to the value.'),
               ('django.template.defaultfilters.get_digit',
                ['value', 'arg'],
                '\n    Given a whole number, returns the requested digit of it, where 1 is the\n    right-most digit, 2 is the second-right-most digit, etc. Returns the\n    original value for invalid input (if input or argument is not an integer,\n    or if argument is less than 1). Otherwise, output is always an integer.\n    '),
               ('django.template.defaultfilters.date',
                ['value', 'arg=None'],
                'Formats a date according to the given format.'),
               ('django.template.defaultfilters.time',
                ['value', 'arg=None'],
                'Formats a time according to the given format.'),
               ('django.template.defaultfilters.timesince',
                ['value', 'arg=None'],
                'Formats a date as the time since that date (i.e. "4 days, 6 hours").'),
               ('django.template.defaultfilters.timeuntil',
                ['value', 'arg=None'],
                'Formats a date as the time until that date (i.e. "4 days, 6 hours").'),
               ('django.template.defaultfilters.default',
                ['value', 'arg'],
                'If value is unavailable, use given default.'),
               ('django.template.defaultfilters.default_if_none',
                ['value', 'arg'],
                'If value is None, use given default.'),
               ('django.template.defaultfilters.divisibleby',
                ['value', 'arg'],
                'Returns True if the value is devisible by the argument.'),
               ('django.template.defaultfilters.yesno',
                ['value', 'arg=None'],
                '\n    Given a string mapping values for true, false and (optionally) None,\n    returns one of those strings accoding to the value:\n\n    ==========  ======================  ==================================\n    Value       Argument                Outputs\n    ==========  ======================  ==================================\n    ``True``    ``"yeah,no,maybe"``     ``yeah``\n    ``False``   ``"yeah,no,maybe"``     ``no``\n    ``None``    ``"yeah,no,maybe"``     ``maybe``\n    ``None``    ``"yeah,no"``           ``"no"`` (converts None to False\n                                        if no mapping for None is given.\n    ==========  ======================  ==================================\n    '),
               ('django.template.defaultfilters.filesizeformat',
                ['bytes'],
                "\n    Formats the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,\n    102 bytes, etc).\n    "),
               ('django.template.defaultfilters.pluralize',
                ['value', "arg=u's'"],
                '\n    Returns a plural suffix if the value is not 1. By default, \'s\' is used as\n    the suffix:\n\n    * If value is 0, vote{{ value|pluralize }} displays "0 votes".\n    * If value is 1, vote{{ value|pluralize }} displays "1 vote".\n    * If value is 2, vote{{ value|pluralize }} displays "2 votes".\n\n    If an argument is provided, that string is used instead:\n\n    * If value is 0, class{{ value|pluralize:"es" }} displays "0 classes".\n    * If value is 1, class{{ value|pluralize:"es" }} displays "1 class".\n    * If value is 2, class{{ value|pluralize:"es" }} displays "2 classes".\n\n    If the provided argument contains a comma, the text before the comma is\n    used for the singular case and the text after the comma is used for the\n    plural case:\n\n    * If value is 0, cand{{ value|pluralize:"y,ies" }} displays "0 candies".\n    * If value is 1, cand{{ value|pluralize:"y,ies" }} displays "1 candy".\n    * If value is 2, cand{{ value|pluralize:"y,ies" }} displays "2 candies".\n    '),
               ('django.template.defaultfilters.phone2numeric',
                ['value'],
                'Takes a phone number and converts it in to its numerical equivalent.'),
               ('django.template.defaultfilters.pprint',
                ['value'],
                'A wrapper around pprint.pprint -- for debugging, really.'),
               ('django.template.defaulttags.token_kwargs',
                ['bits', 'parser', 'support_legacy=False'],
                '\n    A utility method for parsing token keyword arguments.\n\n    :param bits: A list containing remainder of the token (split by spaces)\n        that is to be checked for arguments. Valid arguments will be removed\n        from this list.\n\n    :param support_legacy: If set to true ``True``, the legacy format\n        ``1 as foo`` will be accepted. Otherwise, only the standard ``foo=1``\n        format is allowed.\n\n    :returns: A dictionary of the arguments retrieved from the ``bits`` token\n        list.\n\n    There is no requirement for all remaining token ``bits`` to be keyword\n    arguments, so the dictionary will be returned as soon as an invalid\n    argument format is reached.\n    '),
               ('django.template.defaulttags.include_is_allowed', ['filepath'], ''),
               ('django.template.defaulttags.autoescape',
                ['parser', 'token'],
                '\n    Force autoescape behaviour for this block.\n    '),
               ('django.template.defaulttags.comment',
                ['parser', 'token'],
                '\n    Ignores everything between ``{% comment %}`` and ``{% endcomment %}``.\n    '),
               ('django.template.defaulttags.cycle',
                ['parser', 'token'],
                '\n    Cycles among the given strings each time this tag is encountered.\n\n    Within a loop, cycles among the given strings each time through\n    the loop::\n\n        {% for o in some_list %}\n            <tr class="{% cycle \'row1\' \'row2\' %}">\n                ...\n            </tr>\n        {% endfor %}\n\n    Outside of a loop, give the values a unique name the first time you call\n    it, then use that name each sucessive time through::\n\n            <tr class="{% cycle \'row1\' \'row2\' \'row3\' as rowcolors %}">...</tr>\n            <tr class="{% cycle rowcolors %}">...</tr>\n            <tr class="{% cycle rowcolors %}">...</tr>\n\n    You can use any number of values, separated by spaces. Commas can also\n    be used to separate values; if a comma is used, the cycle values are\n    interpreted as literal strings.\n\n    The optional flag "silent" can be used to prevent the cycle declaration\n    from returning any value::\n\n        {% cycle \'row1\' \'row2\' as rowcolors silent %}{# no value here #}\n        {% for o in some_list %}\n            <tr class="{% cycle rowcolors %}">{# first value will be "row1" #}\n                ...\n            </tr>\n        {% endfor %}\n\n    '),
               ('django.template.defaulttags.csrf_token', ['parser', 'token'], ''),
               ('django.template.defaulttags.debug',
                ['parser', 'token'],
                '\n    Outputs a whole load of debugging information, including the current\n    context and imported modules.\n\n    Sample usage::\n\n        <pre>\n            {% debug %}\n        </pre>\n    '),
               ('django.template.defaulttags.do_filter',
                ['parser', 'token'],
                '\n    Filters the contents of the block through variable filters.\n\n    Filters can also be piped through each other, and they can have\n    arguments -- just like in variable syntax.\n\n    Sample usage::\n\n        {% filter force_escape|lower %}\n            This text will be HTML-escaped, and will appear in lowercase.\n        {% endfilter %}\n    '),
               ('django.template.defaulttags.firstof',
                ['parser', 'token'],
                '\n    Outputs the first variable passed that is not False, without escaping.\n\n    Outputs nothing if all the passed variables are False.\n\n    Sample usage::\n\n        {% firstof var1 var2 var3 %}\n\n    This is equivalent to::\n\n        {% if var1 %}\n            {{ var1|safe }}\n        {% else %}{% if var2 %}\n            {{ var2|safe }}\n        {% else %}{% if var3 %}\n            {{ var3|safe }}\n        {% endif %}{% endif %}{% endif %}\n\n    but obviously much cleaner!\n\n    You can also use a literal string as a fallback value in case all\n    passed variables are False::\n\n        {% firstof var1 var2 var3 "fallback value" %}\n\n    If you want to escape the output, use a filter tag::\n\n        {% filter force_escape %}\n            {% firstof var1 var2 var3 "fallback value" %}\n        {% endfilter %}\n\n    '),
               ('django.template.defaulttags.do_for',
                ['parser', 'token'],
                '\n    Loops over each item in an array.\n\n    For example, to display a list of athletes given ``athlete_list``::\n\n        <ul>\n        {% for athlete in athlete_list %}\n            <li>{{ athlete.name }}</li>\n        {% endfor %}\n        </ul>\n\n    You can loop over a list in reverse by using\n    ``{% for obj in list reversed %}``.\n\n    You can also unpack multiple values from a two-dimensional array::\n\n        {% for key,value in dict.items %}\n            {{ key }}: {{ value }}\n        {% endfor %}\n\n    The ``for`` tag can take an optional ``{% empty %}`` clause that will\n    be displayed if the given array is empty or could not be found::\n\n        <ul>\n          {% for athlete in athlete_list %}\n            <li>{{ athlete.name }}</li>\n          {% empty %}\n            <li>Sorry, no athletes in this list.</li>\n          {% endfor %}\n        <ul>\n\n    The above is equivalent to -- but shorter, cleaner, and possibly faster\n    than -- the following::\n\n        <ul>\n          {% if althete_list %}\n            {% for athlete in athlete_list %}\n              <li>{{ athlete.name }}</li>\n            {% endfor %}\n          {% else %}\n            <li>Sorry, no athletes in this list.</li>\n          {% endif %}\n        </ul>\n\n    The for loop sets a number of variables available within the loop:\n\n        ==========================  ================================================\n        Variable                    Description\n        ==========================  ================================================\n        ``forloop.counter``         The current iteration of the loop (1-indexed)\n        ``forloop.counter0``        The current iteration of the loop (0-indexed)\n        ``forloop.revcounter``      The number of iterations from the end of the\n                                    loop (1-indexed)\n        ``forloop.revcounter0``     The number of iterations from the end of the\n                                    loop (0-indexed)\n        ``forloop.first``           True if this is the first time through the loop\n        ``forloop.last``            True if this is the last time through the loop\n        ``forloop.parentloop``      For nested loops, this is the loop "above" the\n                                    current one\n        ==========================  ================================================\n\n    '),
               ('django.template.defaulttags.do_ifequal', ['parser', 'token', 'negate'], ''),
               ('django.template.defaulttags.ifequal',
                ['parser', 'token'],
                '\n    Outputs the contents of the block if the two arguments equal each other.\n\n    Examples::\n\n        {% ifequal user.id comment.user_id %}\n            ...\n        {% endifequal %}\n\n        {% ifnotequal user.id comment.user_id %}\n            ...\n        {% else %}\n            ...\n        {% endifnotequal %}\n    '),
               ('django.template.defaulttags.ifnotequal',
                ['parser', 'token'],
                '\n    Outputs the contents of the block if the two arguments are not equal.\n    See ifequal.\n    '),
               ('django.template.defaulttags.do_if',
                ['parser', 'token'],
                '\n    The ``{% if %}`` tag evaluates a variable, and if that variable is "true"\n    (i.e., exists, is not empty, and is not a false boolean value), the\n    contents of the block are output:\n\n    ::\n\n        {% if athlete_list %}\n            Number of athletes: {{ athlete_list|count }}\n        {% else %}\n            No athletes.\n        {% endif %}\n\n    In the above, if ``athlete_list`` is not empty, the number of athletes will\n    be displayed by the ``{{ athlete_list|count }}`` variable.\n\n    As you can see, the ``if`` tag can take an option ``{% else %}`` clause\n    that will be displayed if the test fails.\n\n    ``if`` tags may use ``or``, ``and`` or ``not`` to test a number of\n    variables or to negate a given variable::\n\n        {% if not athlete_list %}\n            There are no athletes.\n        {% endif %}\n\n        {% if athlete_list or coach_list %}\n            There are some athletes or some coaches.\n        {% endif %}\n\n        {% if athlete_list and coach_list %}\n            Both atheletes and coaches are available.\n        {% endif %}\n\n        {% if not athlete_list or coach_list %}\n            There are no athletes, or there are some coaches.\n        {% endif %}\n\n        {% if athlete_list and not coach_list %}\n            There are some athletes and absolutely no coaches.\n        {% endif %}\n\n    Comparison operators are also available, and the use of filters is also\n    allowed, for example::\n\n        {% if articles|length >= 5 %}...{% endif %}\n\n    Arguments and operators _must_ have a space between them, so\n    ``{% if 1>2 %}`` is not a valid if tag.\n\n    All supported operators are: ``or``, ``and``, ``in``, ``not in``\n    ``==`` (or ``=``), ``!=``, ``>``, ``>=``, ``<`` and ``<=``.\n\n    Operator precedence follows Python.\n    '),
               ('django.template.defaulttags.ifchanged',
                ['parser', 'token'],
                '\n    Checks if a value has changed from the last iteration of a loop.\n\n    The \'ifchanged\' block tag is used within a loop. It has two possible uses.\n\n    1. Checks its own rendered contents against its previous state and only\n       displays the content if it has changed. For example, this displays a\n       list of days, only displaying the month if it changes::\n\n            <h1>Archive for {{ year }}</h1>\n\n            {% for date in days %}\n                {% ifchanged %}<h3>{{ date|date:"F" }}</h3>{% endifchanged %}\n                <a href="{{ date|date:"M/d"|lower }}/">{{ date|date:"j" }}</a>\n            {% endfor %}\n\n    2. If given a variable, check whether that variable has changed.\n       For example, the following shows the date every time it changes, but\n       only shows the hour if both the hour and the date have changed::\n\n            {% for date in days %}\n                {% ifchanged date.date %} {{ date.date }} {% endifchanged %}\n                {% ifchanged date.hour date.date %}\n                    {{ date.hour }}\n                {% endifchanged %}\n            {% endfor %}\n    '),
               ('django.template.defaulttags.ssi',
                ['parser', 'token'],
                '\n    Outputs the contents of a given file into the page.\n\n    Like a simple "include" tag, the ``ssi`` tag includes the contents\n    of another file -- which must be specified using an absolute path --\n    in the current page::\n\n        {% ssi /home/html/ljworld.com/includes/right_generic.html %}\n\n    If the optional "parsed" parameter is given, the contents of the included\n    file are evaluated as template code, with the current context::\n\n        {% ssi /home/html/ljworld.com/includes/right_generic.html parsed %}\n    '),
               ('django.template.defaulttags.load',
                ['parser', 'token'],
                '\n    Loads a custom template tag set.\n\n    For example, to load the template tags in\n    ``django/templatetags/news/photos.py``::\n\n        {% load news.photos %}\n\n    Can also be used to load an individual tag/filter from\n    a library::\n\n        {% load byline from news %}\n\n    '),
               ('django.template.defaulttags.now',
                ['parser', 'token'],
                '\n    Displays the date, formatted according to the given string.\n\n    Uses the same format as PHP\'s ``date()`` function; see http://php.net/date\n    for all the possible values.\n\n    Sample usage::\n\n        It is {% now "jS F Y H:i" %}\n    '),
               ('django.template.defaulttags.regroup',
                ['parser', 'token'],
                '\n    Regroups a list of alike objects by a common attribute.\n\n    This complex tag is best illustrated by use of an example:  say that\n    ``people`` is a list of ``Person`` objects that have ``first_name``,\n    ``last_name``, and ``gender`` attributes, and you\'d like to display a list\n    that looks like:\n\n        * Male:\n            * George Bush\n            * Bill Clinton\n        * Female:\n            * Margaret Thatcher\n            * Colendeeza Rice\n        * Unknown:\n            * Pat Smith\n\n    The following snippet of template code would accomplish this dubious task::\n\n        {% regroup people by gender as grouped %}\n        <ul>\n        {% for group in grouped %}\n            <li>{{ group.grouper }}\n            <ul>\n                {% for item in group.list %}\n                <li>{{ item }}</li>\n                {% endfor %}\n            </ul>\n        {% endfor %}\n        </ul>\n\n    As you can see, ``{% regroup %}`` populates a variable with a list of\n    objects with ``grouper`` and ``list`` attributes.  ``grouper`` contains the\n    item that was grouped by; ``list`` contains the list of objects that share\n    that ``grouper``.  In this case, ``grouper`` would be ``Male``, ``Female``\n    and ``Unknown``, and ``list`` is the list of people with those genders.\n\n    Note that ``{% regroup %}`` does not work when the list to be grouped is not\n    sorted by the key you are grouping by!  This means that if your list of\n    people was not sorted by gender, you\'d need to make sure it is sorted\n    before using it, i.e.::\n\n        {% regroup people|dictsort:"gender" by gender as grouped %}\n\n    '),
               ('django.template.defaulttags.spaceless',
                ['parser', 'token'],
                '\n    Removes whitespace between HTML tags, including tab and newline characters.\n\n    Example usage::\n\n        {% spaceless %}\n            <p>\n                <a href="foo/">Foo</a>\n            </p>\n        {% endspaceless %}\n\n    This example would return this HTML::\n\n        <p><a href="foo/">Foo</a></p>\n\n    Only space between *tags* is normalized -- not space between tags and text.\n    In this example, the space around ``Hello`` won\'t be stripped::\n\n        {% spaceless %}\n            <strong>\n                Hello\n            </strong>\n        {% endspaceless %}\n    '),
               ('django.template.defaulttags.templatetag',
                ['parser', 'token'],
                '\n    Outputs one of the bits used to compose template tags.\n\n    Since the template system has no concept of "escaping", to display one of\n    the bits used in template tags, you must use the ``{% templatetag %}`` tag.\n\n    The argument tells which template bit to output:\n\n        ==================  =======\n        Argument            Outputs\n        ==================  =======\n        ``openblock``       ``{%``\n        ``closeblock``      ``%}``\n        ``openvariable``    ``{{``\n        ``closevariable``   ``}}``\n        ``openbrace``       ``{``\n        ``closebrace``      ``}``\n        ``opencomment``     ``{#``\n        ``closecomment``    ``#}``\n        ==================  =======\n    '),
               ('django.template.defaulttags.url',
                ['parser', 'token'],
                "\n    Returns an absolute URL matching given view with its parameters.\n\n    This is a way to define links that aren't tied to a particular URL\n    configuration::\n\n        {% url path.to.some_view arg1 arg2 %}\n\n        or\n\n        {% url path.to.some_view name1=value1 name2=value2 %}\n\n    The first argument is a path to a view. It can be an absolute python path\n    or just ``app_name.view_name`` without the project name if the view is\n    located inside the project.  Other arguments are comma-separated values\n    that will be filled in place of positional and keyword arguments in the\n    URL. All arguments for the URL should be present.\n\n    For example if you have a view ``app_name.client`` taking client's id and\n    the corresponding line in a URLconf looks like this::\n\n        ('^client/(\\d+)/$', 'app_name.client')\n\n    and this app's URLconf is included into the project's URLconf under some\n    path::\n\n        ('^clients/', include('project_name.app_name.urls'))\n\n    then in a template you can create a link for a certain client like this::\n\n        {% url app_name.client client.id %}\n\n    The URL will look like ``/clients/client/123/``.\n    "),
               ('django.template.defaulttags.widthratio',
                ['parser', 'token'],
                "\n    For creating bar charts and such, this tag calculates the ratio of a given\n    value to a maximum value, and then applies that ratio to a constant.\n\n    For example::\n\n        <img src='bar.gif' height='10' width='{% widthratio this_value max_value 100 %}' />\n\n    Above, if ``this_value`` is 175 and ``max_value`` is 200, the image in\n    the above example will be 88 pixels wide (because 175/200 = .875;\n    .875 * 100 = 87.5 which is rounded up to 88).\n    "),
               ('django.template.defaulttags.do_with',
                ['parser', 'token'],
                '\n    Adds one or more values to the context (inside of this block) for caching\n    and easy access.\n\n    For example::\n\n        {% with total=person.some_sql_method %}\n            {{ total }} object{{ total|pluralize }}\n        {% endwith %}\n\n    Multiple values can be added to the context::\n\n        {% with foo=1 bar=2 %}\n            ...\n        {% endwith %}\n\n    The legacy format of ``{% with person.some_sql_method as total %}`` is\n    still accepted.\n    '),
               ('django.template.loader.make_origin',
                ['display_name', 'loader', 'name', 'dirs'],
                ''),
               ('django.template.loader.find_template_loader', ['loader'], ''),
               ('django.template.loader.find_template', ['name', 'dirs=None'], ''),
               ('django.template.loader.find_template_source', ['name', 'dirs=None'], ''),
               ('django.template.loader.get_template',
                ['template_name'],
                '\n    Returns a compiled Template object for the given template name,\n    handling template inheritance recursively.\n    '),
               ('django.template.loader.get_template_from_string',
                ['source', 'origin=None', 'name=None'],
                '\n    Returns a compiled Template object for the given template code,\n    handling template inheritance recursively.\n    '),
               ('django.template.loader.render_to_string',
                ['template_name', 'dictionary=None', 'context_instance=None'],
                '\n    Loads the given template_name and renders it with the given dictionary as\n    context. The template_name may be a string to load a single template using\n    get_template, or it may be a tuple to use select_template to find one of\n    the templates in the list. Returns a string.\n    '),
               ('django.template.loader.select_template',
                ['template_name_list'],
                'Given a list of template names, returns the first that can be loaded.'),
               ('django.template.loader_tags.do_block',
                ['parser', 'token'],
                '\n    Define a block that can be overridden by child templates.\n    '),
               ('django.template.loader_tags.do_extends',
                ['parser', 'token'],
                '\n    Signal that this template extends a parent template.\n\n    This tag may be used in two ways: ``{% extends "base" %}`` (with quotes)\n    uses the literal value "base" as the name of the parent template to extend,\n    or ``{% extends variable %}`` uses the value of ``variable`` as either the\n    name of the parent template to extend (if it evaluates to a string) or as\n    the parent tempate itelf (if it evaluates to a Template object).\n    '),
               ('django.template.loader_tags.do_include',
                ['parser', 'token'],
                '\n    Loads a template and renders it with the current context. You can pass\n    additional context using keyword arguments.\n\n    Example::\n\n        {% include "foo/some_include" %}\n        {% include "foo/some_include" with bar="BAZZ!" baz="BING!" %}\n\n    Use the ``only`` argument to exclude the current context when rendering\n    the included template::\n\n        {% include "foo/some_include" only %}\n        {% include "foo/some_include" with bar="1" only %}\n    '),
               ('django.template.loaders.filesystem.load_template_source',
                ['template_name', 'template_dirs=None'],
                ''),
               ('django.template.loaders.eggs.load_template_source',
                ['template_name', 'template_dirs=None'],
                ''),
               ('django.template.loaders.app_directories.load_template_source',
                ['template_name', 'template_dirs=None'],
                ''),
               ('django.middleware.csrf._get_failure_view',
                [],
                '\n    Returns the view to be used for CSRF rejections\n    '),
               ('django.middleware.csrf._get_new_csrf_key', [], ''),
               ('django.middleware.csrf._make_legacy_session_token', ['session_id'], ''),
               ('django.middleware.csrf.get_token',
                ['request'],
                "\n    Returns the the CSRF token required for a POST form. The token is an\n    alphanumeric value.\n\n    A side effect of calling this function is to make the the csrf_protect\n    decorator and the CsrfViewMiddleware add a CSRF cookie and a 'Vary: Cookie'\n    header to the outgoing response.  For this reason, you may need to use this\n    function lazily, as is done by the csrf context processor.\n    "),
               ('django.middleware.csrf._sanitize_token', ['token'], ''),
               ('django.middleware.common._is_ignorable_404',
                ['uri'],
                "\n    Returns True if a 404 at the given URL *shouldn't* notify the site managers.\n    "),
               ('django.middleware.common._is_internal_request',
                ['domain', 'referer'],
                '\n    Returns true if the referring URL is the same domain as the current request.\n    '),
               ('django.middleware.common._is_valid_path',
                ['path', 'urlconf=None'],
                '\n    Returns True if the given path resolves against the default URL resolver,\n    False otherwise.\n\n    This is a convenience method to make working with "is this a match?" cases\n    easier, avoiding unnecessarily indented try...except blocks.\n    '),
               ('django.db.close_connection', ['**kwargs'], ''),
               ('django.db.reset_queries', ['**kwargs'], ''),
               ('django.db._rollback_on_exception', ['**kwargs'], ''),
               ('django.db.utils.load_backend', ['backend_name'], ''),
               ('django.db.transaction.enter_transaction_management',
                ['managed=True', 'using=None'],
                '\n    Enters transaction management for a running thread. It must be balanced with\n    the appropriate leave_transaction_management call, since the actual state is\n    managed as a stack.\n\n    The state and dirty flag are carried over from the surrounding block or\n    from the settings, if there is no surrounding block (dirty is always false\n    when no current block is running).\n    '),
               ('django.db.transaction.leave_transaction_management',
                ['using=None'],
                '\n    Leaves transaction management for a running thread. A dirty flag is carried\n    over to the surrounding block, as a commit will commit all changes, even\n    those from outside. (Commits are on connection level.)\n    '),
               ('django.db.transaction.is_dirty',
                ['using=None'],
                '\n    Returns True if the current transaction requires a commit for changes to\n    happen.\n    '),
               ('django.db.transaction.set_dirty',
                ['using=None'],
                '\n    Sets a dirty flag for the current thread and code streak. This can be used\n    to decide in a managed block of code to decide whether there are open\n    changes waiting for commit.\n    '),
               ('django.db.transaction.set_clean',
                ['using=None'],
                '\n    Resets a dirty flag for the current thread and code streak. This can be used\n    to decide in a managed block of code to decide whether a commit or rollback\n    should happen.\n    '),
               ('django.db.transaction.clean_savepoints', ['using=None'], ''),
               ('django.db.transaction.is_managed',
                ['using=None'],
                '\n    Checks whether the transaction manager is in manual or in auto state.\n    '),
               ('django.db.transaction.managed',
                ['flag=True', 'using=None'],
                '\n    Puts the transaction manager into a manual state: managed transactions have\n    to be committed explicitly by the user. If you switch off transaction\n    management and there is a pending commit/rollback, the data will be\n    commited.\n    '),
               ('django.db.transaction.commit_unless_managed',
                ['using=None'],
                '\n    Commits changes if the system is not in managed transaction mode.\n    '),
               ('django.db.transaction.rollback_unless_managed',
                ['using=None'],
                '\n    Rolls back changes if the system is not in managed transaction mode.\n    '),
               ('django.db.transaction.commit',
                ['using=None'],
                '\n    Does the commit itself and resets the dirty flag.\n    '),
               ('django.db.transaction.rollback',
                ['using=None'],
                '\n    This function does the rollback itself and resets the dirty flag.\n    '),
               ('django.db.transaction.savepoint',
                ['using=None'],
                '\n    Creates a savepoint (if supported and required by the backend) inside the\n    current transaction. Returns an identifier for the savepoint that will be\n    used for the subsequent rollback or commit.\n    '),
               ('django.db.transaction.savepoint_rollback',
                ['sid', 'using=None'],
                '\n    Rolls back the most recent savepoint (if one exists). Does nothing if\n    savepoints are not supported.\n    '),
               ('django.db.transaction.savepoint_commit',
                ['sid', 'using=None'],
                '\n    Commits the most recent savepoint (if one exists). Does nothing if\n    savepoints are not supported.\n    '),
               ('django.db.transaction._transaction_func',
                ['entering', 'exiting', 'using'],
                '\n    Takes 3 things, an entering function (what to do to start this block of\n    transaction management), an exiting function (what to do to end it, on both\n    success and failure, and using which can be: None, indiciating using is\n    DEFAULT_DB_ALIAS, a callable, indicating that using is DEFAULT_DB_ALIAS and\n    to return the function already wrapped.\n\n    Returns either a Transaction objects, which is both a decorator and a\n    context manager, or a wrapped function, if using is a callable.\n    '),
               ('django.db.transaction.autocommit',
                ['using=None'],
                "\n    Decorator that activates commit on save. This is Django's default behavior;\n    this decorator is useful if you globally activated transaction management in\n    your settings file and want the default behavior in some view functions.\n    "),
               ('django.db.transaction.commit_on_success',
                ['using=None'],
                '\n    This decorator activates commit on response. This way, if the view function\n    runs successfully, a commit is made; if the viewfunc produces an exception,\n    a rollback is made. This is one of the most common ways to do transaction\n    control in Web apps.\n    '),
               ('django.db.transaction.commit_manually',
                ['using=None'],
                "\n    Decorator that activates manual transaction control. It just disables\n    automatic transaction control and doesn't do any commit/rollback of its\n    own -- it's up to the user to call the commit and rollback functions\n    themselves.\n    "),
               ('django.db.backends.util.typecast_date', ['s'], ''),
               ('django.db.backends.util.typecast_time', ['s'], ''),
               ('django.db.backends.util.typecast_timestamp', ['s'], ''),
               ('django.db.backends.util.typecast_boolean', ['s'], ''),
               ('django.db.backends.util.typecast_decimal', ['s'], ''),
               ('django.db.backends.util.rev_typecast_boolean', ['obj', 'd'], ''),
               ('django.db.backends.util.rev_typecast_decimal', ['d'], ''),
               ('django.db.backends.util.truncate_name',
                ['name', 'length=None', 'hash_len=4'],
                'Shortens a string to a repeatable mangled version with the given length.\n    '),
               ('django.db.backends.util.format_number',
                ['value', 'max_digits', 'decimal_places'],
                '\n    Formats a number into a string with the requisite number of digits and\n    decimal places.\n    '),
               ('django.db.backends.postgresql.base.typecast_string',
                ['s'],
                '\n    Cast all returned strings to unicode strings.\n    '),
               ('django.db.backends.postgresql.version._parse_version',
                ['text'],
                'Internal parsing method. Factored out for testing purposes.'),
               ('django.db.backends.postgresql.version.get_version',
                ['cursor'],
                "\n    Returns a tuple representing the major, minor and revision number of the\n    server. For example, (7, 4, 1) or (8, 3, 4). The revision number will be\n    None in the case of initial releases (e.g., 'PostgreSQL 8.3') or in the\n    case of beta and prereleases ('PostgreSQL 8.4beta1').\n    "),
               ('django.db.backends.sqlite3.base._sqlite_extract', ['lookup_type', 'dt'], ''),
               ('django.db.backends.sqlite3.base._sqlite_date_trunc', ['lookup_type', 'dt'], ''),
               ('django.db.backends.sqlite3.base._sqlite_format_dtdelta',
                ['dt', 'conn', 'days', 'secs', 'usecs'],
                ''),
               ('django.db.backends.sqlite3.base._sqlite_regexp',
                ['re_pattern', 're_string'],
                ''),
               ('django.db.backends.oracle.base._setup_environment', ['environ'], ''),
               ('django.db.backends.oracle.base._rowfactory', ['row', 'cursor'], ''),
               ('django.db.backends.oracle.base.to_unicode',
                ['s'],
                '\n    Convert strings to Unicode objects (and return all other data types\n    unchanged).\n    '),
               ('django.db.backends.oracle.base._get_sequence_reset_sql', [], ''),
               ('django.db.backends.oracle.base.get_sequence_name', ['table'], ''),
               ('django.db.backends.oracle.base.get_trigger_name', ['table'], ''),
               ('django.db.backends.dummy.base.complain', ['*args', '**kwargs'], ''),
               ('django.db.backends.dummy.base.ignore', ['*args', '**kwargs'], ''),
               ('django.db.models.deletion.CASCADE',
                ['collector', 'field', 'sub_objs', 'using'],
                ''),
               ('django.db.models.deletion.PROTECT',
                ['collector', 'field', 'sub_objs', 'using'],
                ''),
               ('django.db.models.deletion.SET', ['value'], ''),
               ('django.db.models.deletion.SET_DEFAULT',
                ['collector', 'field', 'sub_objs', 'using'],
                ''),
               ('django.db.models.deletion.DO_NOTHING',
                ['collector', 'field', 'sub_objs', 'using'],
                ''),
               ('django.db.models.deletion.force_managed', ['func'], ''),
               ('django.db.models.permalink',
                ['func'],
                '\n    Decorator that calls urlresolvers.reverse() to return a URL using\n    parameters returned by the decorated function "func".\n\n    "func" should be a function that returns a tuple in one of the\n    following formats:\n        (viewname, viewargs)\n        (viewname, viewargs, viewkwargs)\n    '),
               ('django.db.models.query.get_cached_row',
                ['klass',
                 'row',
                 'index_start',
                 'using',
                 'max_depth=0',
                 'cur_depth=0',
                 'requested=None',
                 'offset=0',
                 'only_load=None',
                 'local_only=False'],
                '\n    Helper function that recursively returns an object with the specified\n    related attributes already populated.\n\n    This method may be called recursively to populate deep select_related()\n    clauses.\n\n    Arguments:\n     * klass - the class to retrieve (and instantiate)\n     * row - the row of data returned by the database cursor\n     * index_start - the index of the row at which data for this\n       object is known to start\n     * using - the database alias on which the query is being executed.\n     * max_depth - the maximum depth to which a select_related()\n       relationship should be explored.\n     * cur_depth - the current depth in the select_related() tree.\n       Used in recursive calls to determin if we should dig deeper.\n     * requested - A dictionary describing the select_related() tree\n       that is to be retrieved. keys are field names; values are\n       dictionaries describing the keys on that related object that\n       are themselves to be select_related().\n     * offset - the number of additional fields that are known to\n       exist in `row` for `klass`. This usually means the number of\n       annotated results on `klass`.\n     * only_load - if the query has had only() or defer() applied,\n       this is the list of field names that will be returned. If None,\n       the full field list for `klass` can be assumed.\n     * local_only - Only populate local fields. This is used when building\n       following reverse select-related relations\n    '),
               ('django.db.models.query.insert_query',
                ['model', 'values', 'return_id=False', 'raw_values=False', 'using=None'],
                '\n    Inserts a new record for the given model. This provides an interface to\n    the InsertQuery class and is how Model.save() is implemented. It is not\n    part of the public API.\n    '),
               ('django.db.models.query_utils.select_related_descend',
                ['field', 'restricted', 'requested', 'reverse=False'],
                '\n    Returns True if this field should be used to descend deeper for\n    select_related() purposes. Used by both the query construction code\n    (sql.query.fill_related_selections()) and the model instance creation code\n    (query.get_cached_row()).\n\n    Arguments:\n     * field - the field to be checked\n     * restricted - a boolean field, indicating if the field list has been\n       manually restricted using a requested clause)\n     * requested - The select_related() dictionary.\n     * reverse - boolean, True if we are checking a reverse select related\n    '),
               ('django.db.models.query_utils.deferred_class_factory',
                ['model', 'attrs'],
                '\n    Returns a class object that is a copy of "model" with the specified "attrs"\n    being replaced with DeferredAttribute objects. The "pk_value" ties the\n    deferred attributes to a particular instance of the model.\n    '),
               ('django.db.models.manager.ensure_default_manager',
                ['sender', '**kwargs'],
                "\n    Ensures that a Model subclass contains a default manager  and sets the\n    _default_manager attribute on the class. Also sets up the _base_manager\n    points to a plain Manager instance (which could be the same as\n    _default_manager if it's not a subclass of Manager).\n    "),
               ('django.db.models.base.method_set_order',
                ['ordered_obj', 'self', 'id_list', 'using=None'],
                ''),
               ('django.db.models.base.method_get_order', ['ordered_obj', 'self'], ''),
               ('django.db.models.base.get_absolute_url',
                ['opts', 'func', 'self', '*args', '**kwargs'],
                ''),
               ('django.db.models.base.simple_class_factory',
                ['model', 'attrs'],
                'Used to unpickle Models without deferred fields.\n\n    We need to do this the hard way, rather than just using\n    the default __reduce__ implementation, because of a\n    __deepcopy__ problem in Python 2.4\n    '),
               ('django.db.models.base.model_unpickle',
                ['model', 'attrs', 'factory'],
                '\n    Used to unpickle Model subclasses with deferred fields.\n    '),
               ('django.db.models.base.subclass_exception', ['name', 'parents', 'unused'], ''),
               ('django.db.models.base.subclass_exception', ['name', 'parents', 'module'], ''),
               ('django.db.models.sql.query.get_order_dir',
                ['field', "default='ASC'"],
                "\n    Returns the field name and direction for an order specification. For\n    example, '-foo' is returned as ('foo', 'DESC').\n\n    The 'default' param is used to indicate which way no prefix (or a '+'\n    prefix) should sort. The '-' prefix always sorts the opposite way.\n    "),
               ('django.db.models.sql.query.setup_join_cache',
                ['sender', '**kwargs'],
                "\n    The information needed to join between model fields is something that is\n    invariant over the life of the model, so we cache it in the model's Options\n    class, rather than recomputing it all the time.\n\n    This method initialises the (empty) cache when the model is created.\n    "),
               ('django.db.models.sql.query.add_to_dict',
                ['data', 'key', 'value'],
                '\n    A helper function to add "value" to the set of values for "key", whether or\n    not "key" already exists.\n    '),
               ('django.db.models.sql.query.get_proxied_model', ['opts'], ''),
               ('django.db.models.sql.compiler.empty_iter',
                [],
                '\n    Returns an iterator containing no results.\n    '),
               ('django.db.models.sql.compiler.order_modified_iter',
                ['cursor', 'trim', 'sentinel'],
                "\n    Yields blocks of rows from a cursor. We use this iterator in the special\n    case when extra output columns have been added to support ordering\n    requirements. We must trim those extra columns before anything else can use\n    the results, since they're only needed to make the SQL valid.\n    "),
               ('django.db.models.fields.subclassing.call_with_connection', ['func'], ''),
               ('django.db.models.fields.subclassing.call_with_connection_and_prepared',
                ['func'],
                ''),
               ('django.db.models.fields.subclassing.make_contrib',
                ['superclass', 'func=None'],
                "\n    Returns a suitable contribute_to_class() method for the Field subclass.\n\n    If 'func' is passed in, it is the existing contribute_to_class() method on\n    the subclass and it is called before anything else. It is assumed in this\n    case that the existing contribute_to_class() calls all the necessary\n    superclass methods.\n    "),
               ('django.db.models.fields.related.add_lazy_relation',
                ['cls', 'field', 'relation', 'operation'],
                '\n    Adds a lookup on ``cls`` when a related field is defined using a string,\n    i.e.::\n\n        class MyModel(Model):\n            fk = ForeignKey("AnotherModel")\n\n    This string can be:\n\n        * RECURSIVE_RELATIONSHIP_CONSTANT (i.e. "self") to indicate a recursive\n          relation.\n\n        * The name of a model (i.e "AnotherModel") to indicate another model in\n          the same app.\n\n        * An app-label and model name (i.e. "someapp.AnotherModel") to indicate\n          another model in a different app.\n\n    If the other model hasn\'t yet been loaded -- almost a given if you\'re using\n    lazy relationships -- then the relation won\'t be set up until the\n    class_prepared signal fires at the end of model initialization.\n\n    operation is the work that must be performed once the relation can be resolved.\n    '),
               ('django.db.models.fields.related.do_pending_lookups',
                ['sender', '**kwargs'],
                '\n    Handle any pending relations to the sending model. Sent from class_prepared.\n    '),
               ('django.db.models.fields.related.create_many_related_manager',
                ['superclass', 'rel=False'],
                "Creates a manager that subclasses 'superclass' (which is a Manager)\n    and adds behavior for many-to-many related objects."),
               ('django.db.models.fields.related.create_many_to_many_intermediary_model',
                ['field', 'klass'],
                ''),
               ('django.utils.timesince.timesince',
                ['d', 'now=None'],
                '\n    Takes two datetime objects and returns the time between d and now\n    as a nicely formatted string, e.g. "10 minutes".  If d occurs after now,\n    then "0 minutes" is returned.\n\n    Units used are years, months, weeks, days, hours, and minutes.\n    Seconds and microseconds are ignored.  Up to two adjacent units will be\n    displayed.  For example, "2 weeks, 3 days" and "1 year, 3 months" are\n    possible outputs, but "2 weeks, 3 hours" and "1 year, 5 days" are not.\n\n    Adapted from http://blog.natbat.co.uk/archive/2003/Jun/14/time_since\n    '),
               ('django.utils.timesince.timeuntil',
                ['d', 'now=None'],
                '\n    Like timesince, but returns a string measuring the time until\n    the given time.\n    '),
               ('django.utils.decorators.method_decorator',
                ['decorator'],
                '\n    Converts a function decorator into a method decorator\n    '),
               ('django.utils.decorators.decorator_from_middleware_with_args',
                ['middleware_class'],
                '\n    Like decorator_from_middleware, but returns a function\n    that accepts the arguments to be passed to the middleware_class.\n    Use like::\n\n         cache_page = decorator_from_middleware_with_args(CacheMiddleware)\n         # ...\n\n         @cache_page(3600)\n         def my_view(request):\n             # ...\n    '),
               ('django.utils.decorators.decorator_from_middleware',
                ['middleware_class'],
                '\n    Given a middleware class (not an instance), returns a view decorator. This\n    lets you use middleware functionality on a per-view basis. The middleware\n    is created with no params passed.\n    '),
               ('django.utils.decorators.available_attrs',
                ['fn'],
                '\n    Return the list of functools-wrappable attributes on a callable.\n    This is required as a workaround for http://bugs.python.org/issue3445.\n    '),
               ('django.utils.decorators.make_middleware_decorator', ['middleware_class'], ''),
               ('django.utils.text.wrap',
                ['text', 'width'],
                '\n    A word-wrap function that preserves existing line breaks and most spaces in\n    the text. Expects that existing line breaks are posix newlines.\n    '),
               ('django.utils.text.truncate_words',
                ['s', 'num', "end_text='...'"],
                'Truncates a string after a certain number of words. Takes an optional\n    argument of what should be used to notify that the string has been\n    truncated, defaulting to ellipsis (...)\n\n    Newlines in the string will be stripped.\n    '),
               ('django.utils.text.truncate_html_words',
                ['s', 'num', "end_text='...'"],
                'Truncates HTML to a certain number of words (not counting tags and\n    comments). Closes opened tags if they were correctly closed in the given\n    html. Takes an optional argument of what should be used to notify that the\n    string has been truncated, defaulting to ellipsis (...).\n\n    Newlines in the HTML are preserved.\n    '),
               ('django.utils.text.get_valid_filename',
                ['s'],
                '\n    Returns the given string converted to a string that can be used for a clean\n    filename. Specifically, leading and trailing spaces are removed; other\n    spaces are converted to underscores; and anything that is not a unicode\n    alphanumeric, dash, underscore, or dot, is removed.\n    >>> get_valid_filename("john\'s portrait in 2004.jpg")\n    u\'johns_portrait_in_2004.jpg\'\n    '),
               ('django.utils.text.get_text_list',
                ['list_', "last_word=ugettext_lazy('or')"],
                "\n    >>> get_text_list(['a', 'b', 'c', 'd'])\n    u'a, b, c or d'\n    >>> get_text_list(['a', 'b', 'c'], 'and')\n    u'a, b and c'\n    >>> get_text_list(['a', 'b'], 'and')\n    u'a and b'\n    >>> get_text_list(['a'])\n    u'a'\n    >>> get_text_list([])\n    u''\n    "),
               ('django.utils.text.normalize_newlines', ['text'], ''),
               ('django.utils.text.recapitalize',
                ['text'],
                'Recapitalizes text, placing caps after end-of-sentence punctuation.'),
               ('django.utils.text.phone2numeric',
                ['phone'],
                'Converts a phone number with letters into its numeric equivalent.'),
               ('django.utils.text.compress_string', ['s'], ''),
               ('django.utils.text.javascript_quote', ['s', 'quote_double_quotes=False'], ''),
               ('django.utils.text.smart_split',
                ['text'],
                '\n    Generator that splits a string by spaces, leaving quoted phrases together.\n    Supports both single and double quotes, and supports escaping quotes with\n    backslashes. In the output, strings will keep their initial and trailing\n    quote marks and escaped quotes will remain escaped (the results can then\n    be further processed with unescape_string_literal()).\n\n    >>> list(smart_split(r\'This is "a person\\\'s" test.\'))\n    [u\'This\', u\'is\', u\'"a person\\\\\\\'s"\', u\'test.\']\n    >>> list(smart_split(r"Another \'person\\\'s\' test."))\n    [u\'Another\', u"\'person\\\\\'s\'", u\'test.\']\n    >>> list(smart_split(r\'A "\\"funky\\" style" test.\'))\n    [u\'A\', u\'"\\\\"funky\\\\" style"\', u\'test.\']\n    '),
               ('django.utils.text._replace_entity', ['match'], ''),
               ('django.utils.text.unescape_entities', ['text'], ''),
               ('django.utils.text.unescape_string_literal',
                ['s'],
                '\n    Convert quoted string literals to unquoted strings with escaped quotes and\n    backslashes unquoted::\n\n        >>> unescape_string_literal(\'"abc"\')\n        \'abc\'\n        >>> unescape_string_literal("\'abc\'")\n        \'abc\'\n        >>> unescape_string_literal(\'"a \\"bc\\""\')\n        \'a "bc"\'\n        >>> unescape_string_literal("\'\\\'ab\\\' c\'")\n        "\'ab\' c"\n    '),
               ('django.utils.autoreload.code_changed', [], ''),
               ('django.utils.autoreload.ensure_echo_on', [], ''),
               ('django.utils.autoreload.reloader_thread', [], ''),
               ('django.utils.autoreload.restart_with_reloader', [], ''),
               ('django.utils.autoreload.python_reloader', ['main_func', 'args', 'kwargs'], ''),
               ('django.utils.autoreload.jython_reloader', ['main_func', 'args', 'kwargs'], ''),
               ('django.utils.autoreload.main', ['main_func', 'args=None', 'kwargs=None'], ''),
               ('django.utils.importlib._resolve_name',
                ['name', 'package', 'level'],
                'Return the absolute name of the module to be imported.'),
               ('django.utils.importlib.import_module',
                ['name', 'package=None'],
                "Import a module.\n\n    The 'package' argument is required when performing a relative import. It\n    specifies the package to use as the anchor point from which to resolve the\n    relative import to an absolute import.\n\n    "),
               ('django.utils.numberformat.format',
                ['number', 'decimal_sep', 'decimal_pos', 'grouping=0', "thousand_sep=''"],
                '\n    Gets a number (as a number or string), and returns it as a string,\n    using formats definied as arguments:\n\n    * decimal_sep: Decimal separator symbol (for example ".")\n    * decimal_pos: Number of decimal positions\n    * grouping: Number of digits in every group limited by thousand separator\n    * thousand_sep: Thousand separator symbol (for example ",")\n\n    '),
               ('django.utils.http.urlquote',
                ['url', "safe='/'"],
                "\n    A version of Python's urllib.quote() function that can operate on unicode\n    strings. The url is first UTF-8 encoded before quoting. The returned string\n    can safely be used as part of an argument to a subsequent iri_to_uri() call\n    without double-quoting occurring.\n    "),
               ('django.utils.http.urlquote_plus',
                ['url', "safe=''"],
                "\n    A version of Python's urllib.quote_plus() function that can operate on\n    unicode strings. The url is first UTF-8 encoded before quoting. The\n    returned string can safely be used as part of an argument to a subsequent\n    iri_to_uri() call without double-quoting occurring.\n    "),
               ('django.utils.http.urlencode',
                ['query', 'doseq=0'],
                "\n    A version of Python's urllib.urlencode() function that can operate on\n    unicode strings. The parameters are first case to UTF-8 encoded strings and\n    then encoded as per normal.\n    "),
               ('django.utils.http.cookie_date',
                ['epoch_seconds=None'],
                "\n    Formats the time to ensure compatibility with Netscape's cookie standard.\n\n    Accepts a floating point number expressed in seconds since the epoch, in\n    UTC - such as that outputted by time.time(). If set to None, defaults to\n    the current time.\n\n    Outputs a string in the format 'Wdy, DD-Mon-YYYY HH:MM:SS GMT'.\n    "),
               ('django.utils.http.http_date',
                ['epoch_seconds=None'],
                "\n    Formats the time to match the RFC1123 date format as specified by HTTP\n    RFC2616 section 3.3.1.\n\n    Accepts a floating point number expressed in seconds since the epoch, in\n    UTC - such as that outputted by time.time(). If set to None, defaults to\n    the current time.\n\n    Outputs a string in the format 'Wdy, DD Mon YYYY HH:MM:SS GMT'.\n    "),
               ('django.utils.http.parse_http_date',
                ['date'],
                '\n    Parses a date format as specified by HTTP RFC2616 section 3.3.1.\n\n    The three formats allowed by the RFC are accepted, even if only the first\n    one is still in widespread use.\n\n    Returns an floating point number expressed in seconds since the epoch, in\n    UTC.\n    '),
               ('django.utils.http.parse_http_date_safe',
                ['date'],
                '\n    Same as parse_http_date, but returns None if the input is invalid.\n    '),
               ('django.utils.http.base36_to_int',
                ['s'],
                "\n    Converts a base 36 string to an ``int``. Raises ``ValueError` if the\n    input won't fit into an int.\n    "),
               ('django.utils.http.int_to_base36',
                ['i'],
                '\n    Converts an integer to a base36 string\n    '),
               ('django.utils.http.parse_etags',
                ['etag_str'],
                '\n    Parses a string with one or several etags passed in If-None-Match and\n    If-Match headers by the rules in RFC 2616. Returns a list of etags\n    without surrounding double quotes (") and unescaped from \\<CHAR>.\n    '),
               ('django.utils.http.quote_etag',
                ['etag'],
                '\n    Wraps a string in double quotes escaping contents as necesary.\n    '),
               ('django.utils.http.same_origin',
                ['url1', 'url2'],
                "\n        Checks if two URLs are 'same-origin'\n        "),
               ('django.utils.http.same_origin',
                ['url1', 'url2'],
                "\n        Checks if two URLs are 'same-origin'\n        "),
               ('django.utils.formats.reset_format_cache',
                [],
                'Clear any cached formats.\n\n    This method is provided primarily for testing purposes,\n    so that the effects of cached formats can be removed.\n    '),
               ('django.utils.formats.iter_format_modules',
                ['lang'],
                '\n    Does the heavy lifting of finding format modules.\n    '),
               ('django.utils.formats.get_format_modules',
                ['reverse=False'],
                '\n    Returns a list of the format modules found\n    '),
               ('django.utils.formats.get_format',
                ['format_type', 'lang=None', 'use_l10n=None'],
                "\n    For a specific format type, returns the format for the current\n    language (locale), defaults to the format in the settings.\n    format_type is the name of the format, e.g. 'DATE_FORMAT'\n\n    If use_l10n is provided and is not None, that will force the value to\n    be localized (or not), overriding the value of settings.USE_L10N.\n    "),
               ('django.utils.formats.date_format',
                ['value', 'format=None', 'use_l10n=None'],
                '\n    Formats a datetime.date or datetime.datetime object using a\n    localizable format\n\n    If use_l10n is provided and is not None, that will force the value to\n    be localized (or not), overriding the value of settings.USE_L10N.\n    '),
               ('django.utils.formats.time_format',
                ['value', 'format=None', 'use_l10n=None'],
                '\n    Formats a datetime.time object using a localizable format\n\n    If use_l10n is provided and is not None, that will force the value to\n    be localized (or not), overriding the value of settings.USE_L10N.\n    '),
               ('django.utils.formats.number_format',
                ['value', 'decimal_pos=None', 'use_l10n=None'],
                '\n    Formats a numeric value using localization settings\n\n    If use_l10n is provided and is not None, that will force the value to\n    be localized (or not), overriding the value of settings.USE_L10N.\n    '),
               ('django.utils.formats.localize',
                ['value', 'use_l10n=None'],
                '\n    Checks if value is a localizable type (date, number...) and returns it\n    formatted as a string using current locale format.\n\n    If use_l10n is provided and is not None, that will force the value to\n    be localized (or not), overriding the value of settings.USE_L10N.\n    '),
               ('django.utils.formats.localize_input',
                ['value', 'default=None'],
                '\n    Checks if an input value is a localizable type and returns it\n    formatted with the appropriate formatting string of the current locale.\n    '),
               ('django.utils.formats.sanitize_separators',
                ['value'],
                '\n    Sanitizes a value according to the current decimal and\n    thousand separator setting. Used with form field input.\n    '),
               ('django.utils.itercompat.product',
                ['*args', '**kwds'],
                '\n    Taken from http://docs.python.org/library/itertools.html#itertools.product\n    '),
               ('django.utils.itercompat.is_iterable',
                ['x'],
                'A implementation independent way of checking for iterables'),
               ('django.utils.itercompat.all', ['iterable'], ''),
               ('django.utils.itercompat.any', ['iterable'], ''),
               ('django.utils.stopwords.strip_stopwords',
                ['sentence'],
                'Removes stopwords - also normalizes whitespace'),
               ('django.utils.functional.curry', ['_curried_func', '*args', '**kwargs'], ''),
               ('django.utils.functional.update_wrapper',
                ['wrapper',
                 'wrapped',
                 'assigned=WRAPPER_ASSIGNMENTS',
                 'updated=WRAPPER_UPDATES'],
                'Update a wrapper function to look like the wrapped function\n\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to\n       functools.WRAPPER_ASSIGNMENTS)\n       updated is a tuple naming the attributes off the wrapper that\n       are updated with the corresponding attribute from the wrapped\n       function (defaults to functools.WRAPPER_UPDATES)\n    '),
               ('django.utils.functional.wraps',
                ['wrapped', 'assigned=WRAPPER_ASSIGNMENTS', 'updated=WRAPPER_UPDATES'],
                'Decorator factory to apply update_wrapper() to a wrapper function\n\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying curry() to\n       update_wrapper().\n    '),
               ('django.utils.functional.memoize',
                ['func', 'cache', 'num_args'],
                "\n    Wrap a function so that results for any argument tuple are stored in\n    'cache'. Note that the args to the function must be usable as dictionary\n    keys.\n\n    Only the first num_args are considered when creating the key.\n    "),
               ('django.utils.functional.lazy',
                ['func', '*resultclasses'],
                '\n    Turns any callable into a lazy evaluated callable. You need to give result\n    classes or types -- at least one is needed so that the automatic forcing of\n    the lazy evaluation code is triggered. Results are not memoized; the\n    function is evaluated on every access.\n    '),
               ('django.utils.functional._lazy_proxy_unpickle',
                ['func', 'args', 'kwargs', '*resultclasses'],
                ''),
               ('django.utils.functional.allow_lazy',
                ['func', '*resultclasses'],
                '\n    A decorator that allows a function to be called with one or more lazy\n    arguments. If none of the args are lazy, the function is evaluated\n    immediately, otherwise a __proxy__ is returned that will evaluate the\n    function when needed.\n    '),
               ('django.utils.regex_helper.normalize',
                ['pattern'],
                '\n    Given a reg-exp pattern, normalizes it to a list of forms that suffice for\n    reverse matching. This does the following:\n\n    (1) For any repeating sections, keeps the minimum number of occurrences\n        permitted (this means zero for optional groups).\n    (2) If an optional group includes parameters, include one occurrence of\n        that group (along with the zero occurrence case from step (1)).\n    (3) Select the first (essentially an arbitrary) element from any character\n        class. Select an arbitrary character for any unordered class (e.g. \'.\'\n        or \'\\w\') in the pattern.\n    (5) Ignore comments and any of the reg-exp flags that won\'t change\n        what we construct ("iLmsu"). "(?x)" is an error, however.\n    (6) Raise an error on all other non-capturing (?...) forms (e.g.\n        look-ahead and look-behind matches) and any disjunctive (\'|\')\n        constructs.\n\n    Django\'s URLs for forward resolving are either all positional arguments or\n    all keyword arguments. That is assumed here, as well. Although reverse\n    resolving can be done using positional args when keyword args are\n    specified, the two cannot be mixed in the same reverse() call.\n    '),
               ('django.utils.regex_helper.next_char',
                ['input_iter'],
                '\n    An iterator that yields the next character from "pattern_iter", respecting\n    escape sequences. An escaped character is replaced by a representative of\n    its class (e.g. \\w -> "x"). If the escaped character is one that is\n    skipped, it is not returned (the next character is returned instead).\n\n    Yields the next character, along with a boolean indicating whether it is a\n    raw (unescaped) character or not.\n    '),
               ('django.utils.regex_helper.walk_to_end',
                ['ch', 'input_iter'],
                '\n    The iterator is currently inside a capturing group. We want to walk to the\n    close of this group, skipping over any nested groups and handling escaped\n    parentheses correctly.\n    '),
               ('django.utils.regex_helper.get_quantifier',
                ['ch', 'input_iter'],
                '\n    Parse a quantifier from the input, where "ch" is the first character in the\n    quantifier.\n\n    Returns the minimum number of occurences permitted by the quantifier and\n    either None or the next character from the input_iter if the next character\n    is not part of the quantifier.\n    '),
               ('django.utils.regex_helper.contains',
                ['source', 'inst'],
                '\n    Returns True if the "source" contains an instance of "inst". False,\n    otherwise.\n    '),
               ('django.utils.regex_helper.flatten_result',
                ['source'],
                '\n    Turns the given source sequence into a list of reg-exp possibilities and\n    their arguments. Returns a list of strings and a list of argument lists.\n    Each of the two lists will be of the same length.\n    '),
               ('django.utils.feedgenerator.rfc2822_date', ['date'], ''),
               ('django.utils.feedgenerator.rfc3339_date', ['date'], ''),
               ('django.utils.feedgenerator.get_tag_uri',
                ['url', 'date'],
                '\n    Creates a TagURI.\n\n    See http://diveintomark.org/archives/2004/05/28/howto-atom-id\n    '),
               ('django.utils.safestring.mark_safe',
                ['s'],
                '\n    Explicitly mark a string as safe for (HTML) output purposes. The returned\n    object can be used everywhere a string or unicode object is appropriate.\n\n    Can be called multiple times on a single string.\n    '),
               ('django.utils.safestring.mark_for_escaping',
                ['s'],
                '\n    Explicitly mark a string as requiring HTML escaping upon output. Has no\n    effect on SafeData subclasses.\n\n    Can be called multiple times on a single string (the resulting escaping is\n    only applied once).\n    '),
               ('django.utils._threading_local._patch', ['self'], ''),
               ('django.utils.datetime_safe.new_date',
                ['d'],
                'Generate a safe date from a datetime.date object.'),
               ('django.utils.datetime_safe.new_datetime',
                ['d'],
                '\n    Generate a safe datetime from a datetime.date or datetime.datetime object.\n    '),
               ('django.utils.datetime_safe._findall', ['text', 'substr'], ''),
               ('django.utils.datetime_safe.strftime', ['dt', 'fmt'], ''),
               ('django.utils.checksums.luhn',
                ['candidate'],
                '\n    Checks a candidate number for validity according to the Luhn\n    algorithm (used in validation of, for example, credit cards).\n    Both numeric and string candidates are accepted.\n    '),
               ('django.utils.crypto.salted_hmac',
                ['key_salt', 'value', 'secret=None'],
                "\n    Returns the HMAC-SHA1 of 'value', using a key generated from key_salt and a\n    secret (which defaults to settings.SECRET_KEY).\n\n    A different key_salt should be passed in for every application of HMAC.\n    "),
               ('django.utils.crypto.constant_time_compare',
                ['val1', 'val2'],
                '\n    Returns True if the two strings are equal, False otherwise.\n\n    The time taken is independent of the number of characters that match.\n    '),
               ('django.utils.dictconfig.valid_ident', ['s'], ''),
               ('django.utils.dictconfig._checkLevel', ['level'], ''),
               ('django.utils.dictconfig.dictConfig',
                ['config'],
                'Configure logging using a dictionary.'),
               ('django.utils._os.abspathu',
                ['path'],
                '\n        Version of os.path.abspath that uses the unicode representation\n        of the current working directory, thus avoiding a UnicodeDecodeError\n        in join when the cwd has non-ASCII characters.\n        '),
               ('django.utils._os.safe_join',
                ['base', '*paths'],
                '\n    Joins one or more path components to the base path component intelligently.\n    Returns a normalized, absolute version of the final path.\n\n    The final path must be located inside of the base path component (otherwise\n    a ValueError is raised).\n    '),
               ('django.utils._os.rmtree_errorhandler',
                ['func', 'path', 'exc_info'],
                '\n    On Windows, some files are read-only (e.g. in in .svn dirs), so when\n    rmtree() tries to remove them, an exception is thrown.\n    We catch that here, remove the read-only attribute, and hopefully\n    continue without problems.\n    '),
               ('django.utils.html.escape',
                ['html'],
                '\n    Returns the given HTML with ampersands, quotes and angle brackets encoded.\n    '),
               ('django.utils.html.escapejs',
                ['value'],
                'Hex encodes characters for use in JavaScript strings.'),
               ('django.utils.html.conditional_escape',
                ['html'],
                "\n    Similar to escape(), except that it doesn't operate on pre-escaped strings.\n    "),
               ('django.utils.html.linebreaks',
                ['value', 'autoescape=False'],
                'Converts newlines into <p> and <br />s.'),
               ('django.utils.html.strip_tags',
                ['value'],
                'Returns the given HTML with all tags stripped.'),
               ('django.utils.html.strip_spaces_between_tags',
                ['value'],
                'Returns the given HTML with spaces between tags removed.'),
               ('django.utils.html.strip_entities',
                ['value'],
                'Returns the given HTML with all entities (&something;) stripped.'),
               ('django.utils.html.fix_ampersands',
                ['value'],
                'Returns the given HTML with all unencoded ampersands encoded correctly.'),
               ('django.utils.html.urlize',
                ['text', 'trim_url_limit=None', 'nofollow=False', 'autoescape=False'],
                '\n    Converts any URLs in text into clickable links.\n\n    Works on http://, https://, www. links and links ending in .org, .net or\n    .com. Links can have trailing punctuation (periods, commas, close-parens)\n    and leading punctuation (opening parens) and it\'ll still do the right\n    thing.\n\n    If trim_url_limit is not None, the URLs in link text longer than this limit\n    will truncated to trim_url_limit-3 characters and appended with an elipsis.\n\n    If nofollow is True, the URLs in link text will get a rel="nofollow"\n    attribute.\n\n    If autoescape is True, the link text and URLs will get autoescaped.\n    '),
               ('django.utils.html.clean_html',
                ['text'],
                '\n    Clean the given HTML.  Specifically, do the following:\n        * Convert <b> and <i> to <strong> and <em>.\n        * Encode all ampersands correctly.\n        * Remove all "target" attributes from <a> tags.\n        * Remove extraneous HTML, such as presentational tags that open and\n          immediately close and <br clear="all">.\n        * Convert hard-coded bullets into HTML unordered lists.\n        * Remove stuff like "<p>&nbsp;&nbsp;</p>", but only if it\'s at the\n          bottom of the text.\n    '),
               ('django.utils.termcolors.colorize',
                ["text=''", 'opts=()', '**kwargs'],
                "\n    Returns your text, enclosed in ANSI graphics codes.\n\n    Depends on the keyword arguments 'fg' and 'bg', and the contents of\n    the opts tuple/list.\n\n    Returns the RESET code if no parameters are given.\n\n    Valid colors:\n        'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'\n\n    Valid options:\n        'bold'\n        'underscore'\n        'blink'\n        'reverse'\n        'conceal'\n        'noreset' - string will not be auto-terminated with the RESET code\n\n    Examples:\n        colorize('hello', fg='red', bg='blue', opts=('blink',))\n        colorize()\n        colorize('goodbye', opts=('underscore',))\n        print colorize('first line', fg='red', opts=('noreset',))\n        print 'this should be red too'\n        print colorize('and so should this')\n        print 'this should not be red'\n    "),
               ('django.utils.termcolors.make_style',
                ['opts=()', '**kwargs'],
                "\n    Returns a function with default parameters for colorize()\n\n    Example:\n        bold_red = make_style(opts=('bold',), fg='red')\n        print bold_red('hello')\n        KEYWORD = make_style(fg='yellow')\n        COMMENT = make_style(fg='blue', opts=('bold',))\n    "),
               ('django.utils.termcolors.parse_color_setting',
                ['config_string'],
                'Parse a DJANGO_COLORS environment variable to produce the system palette\n\n    The general form of a pallete definition is:\n\n        "palette;role=fg;role=fg/bg;role=fg,option,option;role=fg/bg,option,option"\n\n    where:\n        palette is a named palette; one of \'light\', \'dark\', or \'nocolor\'.\n        role is a named style used by Django\n        fg is a background color.\n        bg is a background color.\n        option is a display options.\n\n    Specifying a named palette is the same as manually specifying the individual\n    definitions for each role. Any individual definitions following the pallete\n    definition will augment the base palette definition.\n\n    Valid roles:\n        \'error\', \'notice\', \'sql_field\', \'sql_coltype\', \'sql_keyword\', \'sql_table\',\n        \'http_info\', \'http_success\', \'http_redirect\', \'http_bad_request\',\n        \'http_not_found\', \'http_server_error\'\n\n    Valid colors:\n        \'black\', \'red\', \'green\', \'yellow\', \'blue\', \'magenta\', \'cyan\', \'white\'\n\n    Valid options:\n        \'bold\', \'underscore\', \'blink\', \'reverse\', \'conceal\'\n\n    '),
               ('django.utils.dateformat.format',
                ['value', 'format_string'],
                'Convenience function'),
               ('django.utils.dateformat.time_format',
                ['value', 'format_string'],
                'Convenience function'),
               ('django.utils.cache.patch_cache_control',
                ['response', '**kwargs'],
                '\n    This function patches the Cache-Control header by adding all\n    keyword arguments to it. The transformation is as follows:\n\n    * All keyword parameter names are turned to lowercase, and underscores\n      are converted to hyphens.\n    * If the value of a parameter is True (exactly True, not just a\n      true value), only the parameter name is added to the header.\n    * All other parameters are added with their value, after applying\n      str() to it.\n    '),
               ('django.utils.cache.get_max_age',
                ['response'],
                "\n    Returns the max-age from the response Cache-Control header as an integer\n    (or ``None`` if it wasn't found or wasn't an integer.\n    "),
               ('django.utils.cache.patch_response_headers',
                ['response', 'cache_timeout=None'],
                "\n    Adds some useful headers to the given HttpResponse object:\n        ETag, Last-Modified, Expires and Cache-Control\n\n    Each header is only added if it isn't already set.\n\n    cache_timeout is in seconds. The CACHE_MIDDLEWARE_SECONDS setting is used\n    by default.\n    "),
               ('django.utils.cache.add_never_cache_headers',
                ['response'],
                '\n    Adds headers to a response to indicate that a page should never be cached.\n    '),
               ('django.utils.cache.patch_vary_headers',
                ['response', 'newheaders'],
                '\n    Adds (or updates) the "Vary" header in the given HttpResponse object.\n    newheaders is a list of header names that should be in "Vary". Existing\n    headers in "Vary" aren\'t removed.\n    '),
               ('django.utils.cache.has_vary_header',
                ['response', 'header_query'],
                '\n    Checks to see if the response has a given header name in its Vary header.\n    '),
               ('django.utils.cache._i18n_cache_key_suffix',
                ['request', 'cache_key'],
                'If enabled, returns the cache key ending with a locale.'),
               ('django.utils.cache._generate_cache_key',
                ['request', 'method', 'headerlist', 'key_prefix'],
                'Returns a cache key from the headers given in the header list.'),
               ('django.utils.cache._generate_cache_header_key',
                ['key_prefix', 'request'],
                'Returns a cache key for the header cache.'),
               ('django.utils.cache.get_cache_key',
                ['request', 'key_prefix=None', "method='GET'", 'cache=None'],
                '\n    Returns a cache key based on the request path and query. It can be used\n    in the request phase because it pulls the list of headers to take into\n    account from the global path registry and uses those to build a cache key\n    to check against.\n\n    If there is no headerlist stored, the page needs to be rebuilt, so this\n    function returns None.\n    '),
               ('django.utils.cache.learn_cache_key',
                ['request', 'response', 'cache_timeout=None', 'key_prefix=None', 'cache=None'],
                '\n    Learns what headers to take into account for some request path from the\n    response object. It stores those headers in a global path registry so that\n    later access to that path will know what headers to take into account\n    without building the response object itself. The headers are named in the\n    Vary header of the response, but we want to prevent response generation.\n\n    The list of headers to use for cache key generation is stored in the same\n    cache as the pages themselves. If the cache ages some data out of the\n    cache, this just means that we have to build the response once to get at\n    the Vary header and so at the list of headers to use for the cache key.\n    '),
               ('django.utils.cache._to_tuple', ['s'], ''),
               ('django.utils.version.get_svn_revision',
                ['path=None'],
                "\n    Returns the SVN revision in the form SVN-XXXX,\n    where XXXX is the revision number.\n\n    Returns SVN-unknown if anything goes wrong, such as an unexpected\n    format of internal SVN files.\n\n    If path is provided, it should be a directory whose SVN info you want to\n    inspect. If it's not provided, this will use the root django/ package\n    directory.\n    "),
               ('django.utils.daemonize.become_daemon',
                ["our_home_dir='.'", "out_log='/dev/null'", "err_log='/dev/null'", 'umask=18'],
                'Robustly turn into a UNIX daemon, running in our_home_dir.'),
               ('django.utils.daemonize.become_daemon',
                ["our_home_dir='.'", 'out_log=None', 'err_log=None', 'umask=18'],
                "\n        If we're not running under a POSIX system, just simulate the daemon\n        mode by doing redirections and directory changing.\n        "),
               ('django.utils.encoding.smart_unicode',
                ['s', "encoding='utf-8'", 'strings_only=False', "errors='strict'"],
                "\n    Returns a unicode object representing 's'. Treats bytestrings using the\n    'encoding' codec.\n\n    If strings_only is True, don't convert (some) non-string-like objects.\n    "),
               ('django.utils.encoding.is_protected_type',
                ['obj'],
                'Determine if the object instance is of a protected type.\n\n    Objects of protected types are preserved as-is when passed to\n    force_unicode(strings_only=True).\n    '),
               ('django.utils.encoding.force_unicode',
                ['s', "encoding='utf-8'", 'strings_only=False', "errors='strict'"],
                "\n    Similar to smart_unicode, except that lazy instances are resolved to\n    strings, rather than kept as lazy objects.\n\n    If strings_only is True, don't convert (some) non-string-like objects.\n    "),
               ('django.utils.encoding.smart_str',
                ['s', "encoding='utf-8'", 'strings_only=False', "errors='strict'"],
                "\n    Returns a bytestring version of 's', encoded as specified in 'encoding'.\n\n    If strings_only is True, don't convert (some) non-string-like objects.\n    "),
               ('django.utils.encoding.iri_to_uri',
                ['iri'],
                '\n    Convert an Internationalized Resource Identifier (IRI) portion to a URI\n    portion that is suitable for inclusion in a URL.\n\n    This is the algorithm from section 3.1 of RFC 3987.  However, since we are\n    assuming input is either UTF-8 or unicode already, we can simplify things a\n    little from the full method.\n\n    Returns an ASCII string containing the encoded result.\n    '),
               ('django.utils.encoding.filepath_to_uri',
                ['path'],
                "Convert an file system path to a URI portion that is suitable for\n    inclusion in a URL.\n\n    We are assuming input is either UTF-8 or unicode already.\n\n    This method will encode certain chars that would normally be recognized as\n    special chars for URIs.  Note that this method does not encode the '\n    character, as it is a valid character within URIs.  See\n    encodeURIComponent() JavaScript function for more details.\n\n    Returns an ASCII string containing the encoded result.\n    "),
               ('django.utils.module_loading.module_has_submodule',
                ['package', 'module_name'],
                "See if 'module' is in 'package'."),
               ('django.utils.log.getLogger', ['name=None'], ''),
               ('django.utils.translation.gettext_noop', ['message'], ''),
               ('django.utils.translation.gettext', ['message'], ''),
               ('django.utils.translation.ngettext', ['singular', 'plural', 'number'], ''),
               ('django.utils.translation.ugettext', ['message'], ''),
               ('django.utils.translation.ungettext', ['singular', 'plural', 'number'], ''),
               ('django.utils.translation.pgettext', ['context', 'message'], ''),
               ('django.utils.translation.npgettext',
                ['context', 'singular', 'plural', 'number'],
                ''),
               ('django.utils.translation.activate', ['language'], ''),
               ('django.utils.translation.deactivate', [], ''),
               ('django.utils.translation.get_language', [], ''),
               ('django.utils.translation.get_language_bidi', [], ''),
               ('django.utils.translation.get_date_formats', [], ''),
               ('django.utils.translation.get_partial_date_formats', [], ''),
               ('django.utils.translation.check_for_language', ['lang_code'], ''),
               ('django.utils.translation.to_locale', ['language'], ''),
               ('django.utils.translation.get_language_from_request', ['request'], ''),
               ('django.utils.translation.templatize', ['src', 'origin=None'], ''),
               ('django.utils.translation.deactivate_all', [], ''),
               ('django.utils.translation._string_concat',
                ['*strings'],
                '\n    Lazy variant of string concatenation, needed for translations that are\n    constructed from multiple parts.\n    '),
               ('django.utils.translation.get_language_info', ['lang_code'], ''),
               ('django.utils.translation.trans_real.to_locale',
                ['language', 'to_lower=False'],
                "\n    Turns a language name (en-us) into a locale name (en_US). If 'to_lower' is\n    True, the last component is lower-cased (en_us).\n    "),
               ('django.utils.translation.trans_real.to_language',
                ['locale'],
                'Turns a locale name (en_US) into a language name (en-us).'),
               ('django.utils.translation.trans_real.translation',
                ['language'],
                "\n    Returns a translation object.\n\n    This translation object will be constructed out of multiple GNUTranslations\n    objects by merging their catalogs. It will construct a object for the\n    requested language and add a fallback to the default language, if it's\n    different from the requested language.\n    "),
               ('django.utils.translation.trans_real.activate',
                ['language'],
                '\n    Fetches the translation object for a given tuple of application name and\n    language and installs it as the current translation object for the current\n    thread.\n    '),
               ('django.utils.translation.trans_real.deactivate',
                [],
                '\n    Deinstalls the currently active translation object so that further _ calls\n    will resolve against the default translation object, again.\n    '),
               ('django.utils.translation.trans_real.deactivate_all',
                [],
                '\n    Makes the active translation object a NullTranslations() instance. This is\n    useful when we want delayed translations to appear as the original string\n    for some reason.\n    '),
               ('django.utils.translation.trans_real.get_language',
                [],
                'Returns the currently selected language.'),
               ('django.utils.translation.trans_real.get_language_bidi',
                [],
                "\n    Returns selected language's BiDi layout.\n\n    * False = left-to-right layout\n    * True = right-to-left layout\n    "),
               ('django.utils.translation.trans_real.catalog',
                [],
                '\n    Returns the current active catalog for further processing.\n    This can be used if you need to modify the catalog or want to access the\n    whole message catalog instead of just translating one string.\n    '),
               ('django.utils.translation.trans_real.do_translate',
                ['message', 'translation_function'],
                "\n    Translates 'message' using the given 'translation_function' name -- which\n    will be either gettext or ugettext. It uses the current thread to find the\n    translation object to use. If no current translation is activated, the\n    message will be run through the default translation object.\n    "),
               ('django.utils.translation.trans_real.gettext', ['message'], ''),
               ('django.utils.translation.trans_real.ugettext', ['message'], ''),
               ('django.utils.translation.trans_real.pgettext', ['context', 'message'], ''),
               ('django.utils.translation.trans_real.gettext_noop',
                ['message'],
                "\n    Marks strings for translation but doesn't translate them now. This can be\n    used to store strings in global variables that should stay in the base\n    language (because they might be used externally) and will be translated\n    later.\n    "),
               ('django.utils.translation.trans_real.do_ntranslate',
                ['singular', 'plural', 'number', 'translation_function'],
                ''),
               ('django.utils.translation.trans_real.ngettext',
                ['singular', 'plural', 'number'],
                '\n    Returns a UTF-8 bytestring of the translation of either the singular or\n    plural, based on the number.\n    '),
               ('django.utils.translation.trans_real.ungettext',
                ['singular', 'plural', 'number'],
                '\n    Returns a unicode strings of the translation of either the singular or\n    plural, based on the number.\n    '),
               ('django.utils.translation.trans_real.npgettext',
                ['context', 'singular', 'plural', 'number'],
                ''),
               ('django.utils.translation.trans_real.all_locale_paths',
                [],
                '\n    Returns a list of paths to user-provides languages files.\n    '),
               ('django.utils.translation.trans_real.check_for_language',
                ['lang_code'],
                '\n    Checks whether there is a global language file for the given language\n    code. This is used to decide whether a user-provided language is\n    available. This is only used for language codes from either the cookies or\n    session and during format localization.\n    '),
               ('django.utils.translation.trans_real.get_language_from_request',
                ['request'],
                '\n    Analyzes the request to find what language the user wants the system to\n    show. Only languages listed in settings.LANGUAGES are taken into account.\n    If the user requests a sublanguage where we have a main language, we send\n    out the main language.\n    '),
               ('django.utils.translation.trans_real.blankout',
                ['src', 'char'],
                '\n    Changes every non-whitespace character to the given char.\n    Used in the templatize function.\n    '),
               ('django.utils.translation.trans_real.templatize',
                ['src', 'origin=None'],
                '\n    Turns a Django template into something that is understood by xgettext. It\n    does so by translating the Django translation tags into standard gettext\n    function invocations.\n    '),
               ('django.utils.translation.trans_real.parse_accept_lang_header',
                ['lang_string'],
                "\n    Parses the lang_string, which is the body of an HTTP Accept-Language\n    header, and returns a list of (lang, q-value), ordered by 'q' values.\n\n    Any format errors in lang_string results in an empty list being returned.\n    "),
               ('django.utils.translation.trans_real.get_date_formats',
                [],
                "\n    Checks whether translation files provide a translation for some technical\n    message ID to store date and time formats. If it doesn't contain one, the\n    formats provided in the settings will be used.\n    "),
               ('django.utils.translation.trans_real.get_partial_date_formats',
                [],
                "\n    Checks whether translation files provide a translation for some technical\n    message ID to store partial date formats. If it doesn't contain one, the\n    formats provided in the settings will be used.\n    "),
               ('django.utils.translation.trans_null.ngettext',
                ['singular', 'plural', 'number'],
                ''),
               ('django.utils.translation.trans_null.ungettext',
                ['singular', 'plural', 'number'],
                ''),
               ('django.utils.translation.trans_null.pgettext', ['context', 'message'], ''),
               ('django.utils.translation.trans_null.npgettext',
                ['context', 'singular', 'plural', 'number'],
                ''),
               ('django.utils.translation.trans_null.gettext', ['message'], ''),
               ('django.utils.translation.trans_null.ugettext', ['message'], ''),
               ('django.utils.translation.trans_null.to_locale', ['language'], ''),
               ('django.utils.translation.trans_null.get_language_from_request', ['request'], ''),
               ('django.utils.translation.trans_null.get_date_formats', [], ''),
               ('django.utils.translation.trans_null.get_partial_date_formats', [], ''),
               ('django.utils.simplejson.decoder._floatconstants', [], ''),
               ('django.utils.simplejson.decoder.linecol', ['doc', 'pos'], ''),
               ('django.utils.simplejson.decoder.errmsg', ['msg', 'doc', 'pos', 'end=None'], ''),
               ('django.utils.simplejson.decoder.py_scanstring',
                ['s',
                 'end',
                 'encoding=None',
                 'strict=True',
                 '_b=BACKSLASH',
                 '_m=STRINGCHUNK.match'],
                'Scan the string s for a JSON string. End is the index of the\n    character in s after the quote that started the JSON string.\n    Unescapes all valid JSON string escape sequences and raises ValueError\n    on attempt to decode an invalid string. If strict is False then literal\n    control characters are allowed in the string.\n    \n    Returns a tuple of the decoded string and the index of the character in s\n    after the end quote.'),
               ('django.utils.simplejson.decoder.JSONObject',
                ['(s, end)',
                 'encoding',
                 'strict',
                 'scan_once',
                 'object_hook',
                 '_w=WHITESPACE.match',
                 '_ws=WHITESPACE_STR'],
                ''),
               ('django.utils.simplejson.decoder.JSONArray',
                ['(s, end)', 'scan_once', '_w=WHITESPACE.match', '_ws=WHITESPACE_STR'],
                ''),
               ('django.utils.simplejson.dump',
                ['obj',
                 'fp',
                 'skipkeys=False',
                 'ensure_ascii=True',
                 'check_circular=True',
                 'allow_nan=True',
                 'cls=None',
                 'indent=None',
                 'separators=None',
                 "encoding='utf-8'",
                 'default=None',
                 '**kw'],
                "Serialize ``obj`` as a JSON formatted stream to ``fp`` (a\n        ``.write()``-supporting file-like object).\n\n        If ``skipkeys`` is ``True`` then ``dict`` keys that are not basic types\n        (``str``, ``unicode``, ``int``, ``long``, ``float``, ``bool``, ``None``)\n        will be skipped instead of raising a ``TypeError``.\n\n        If ``ensure_ascii`` is ``False``, then the some chunks written to ``fp``\n        may be ``unicode`` instances, subject to normal Python ``str`` to\n        ``unicode`` coercion rules. Unless ``fp.write()`` explicitly\n        understands ``unicode`` (as in ``codecs.getwriter()``) this is likely\n        to cause an error.\n\n        If ``check_circular`` is ``False``, then the circular reference check\n        for container types will be skipped and a circular reference will\n        result in an ``OverflowError`` (or worse).\n\n        If ``allow_nan`` is ``False``, then it will be a ``ValueError`` to\n        serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``)\n        in strict compliance of the JSON specification, instead of using the\n        JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n\n        If ``indent`` is a non-negative integer, then JSON array elements and object\n        members will be pretty-printed with that indent level. An indent level\n        of 0 will only insert newlines. ``None`` is the most compact representation.\n\n        If ``separators`` is an ``(item_separator, dict_separator)`` tuple\n        then it will be used instead of the default ``(', ', ': ')`` separators.\n        ``(',', ':')`` is the most compact JSON representation.\n\n        ``encoding`` is the character encoding for str instances, default is UTF-8.\n\n        ``default(obj)`` is a function that should return a serializable version\n        of obj or raise TypeError. The default simply raises TypeError.\n\n        To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n        ``.default()`` method to serialize additional types), specify it with\n        the ``cls`` kwarg.\n\n        "),
               ('django.utils.simplejson.dumps',
                ['obj',
                 'skipkeys=False',
                 'ensure_ascii=True',
                 'check_circular=True',
                 'allow_nan=True',
                 'cls=None',
                 'indent=None',
                 'separators=None',
                 "encoding='utf-8'",
                 'default=None',
                 '**kw'],
                "Serialize ``obj`` to a JSON formatted ``str``.\n\n        If ``skipkeys`` is ``True`` then ``dict`` keys that are not basic types\n        (``str``, ``unicode``, ``int``, ``long``, ``float``, ``bool``, ``None``)\n        will be skipped instead of raising a ``TypeError``.\n\n        If ``ensure_ascii`` is ``False``, then the return value will be a\n        ``unicode`` instance subject to normal Python ``str`` to ``unicode``\n        coercion rules instead of being escaped to an ASCII ``str``.\n\n        If ``check_circular`` is ``False``, then the circular reference check\n        for container types will be skipped and a circular reference will\n        result in an ``OverflowError`` (or worse).\n\n        If ``allow_nan`` is ``False``, then it will be a ``ValueError`` to\n        serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) in\n        strict compliance of the JSON specification, instead of using the\n        JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n\n        If ``indent`` is a non-negative integer, then JSON array elements and\n        object members will be pretty-printed with that indent level. An indent\n        level of 0 will only insert newlines. ``None`` is the most compact\n        representation.\n\n        If ``separators`` is an ``(item_separator, dict_separator)`` tuple\n        then it will be used instead of the default ``(', ', ': ')`` separators.\n        ``(',', ':')`` is the most compact JSON representation.\n\n        ``encoding`` is the character encoding for str instances, default is UTF-8.\n\n        ``default(obj)`` is a function that should return a serializable version\n        of obj or raise TypeError. The default simply raises TypeError.\n\n        To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n        ``.default()`` method to serialize additional types), specify it with\n        the ``cls`` kwarg.\n\n        "),
               ('django.utils.simplejson.load',
                ['fp',
                 'encoding=None',
                 'cls=None',
                 'object_hook=None',
                 'parse_float=None',
                 'parse_int=None',
                 'parse_constant=None',
                 '**kw'],
                'Deserialize ``fp`` (a ``.read()``-supporting file-like object containing\n        a JSON document) to a Python object.\n\n        If the contents of ``fp`` is encoded with an ASCII based encoding other\n        than utf-8 (e.g. latin-1), then an appropriate ``encoding`` name must\n        be specified. Encodings that are not ASCII based (such as UCS-2) are\n        not allowed, and should be wrapped with\n        ``codecs.getreader(fp)(encoding)``, or simply decoded to a ``unicode``\n        object and passed to ``loads()``\n\n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n\n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg.\n\n        '),
               ('django.utils.simplejson.loads',
                ['s',
                 'encoding=None',
                 'cls=None',
                 'object_hook=None',
                 'parse_float=None',
                 'parse_int=None',
                 'parse_constant=None',
                 '**kw'],
                'Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a JSON\n        document) to a Python object.\n\n        If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding\n        other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name\n        must be specified. Encodings that are not ASCII based (such as UCS-2)\n        are not allowed and should be decoded to ``unicode`` first.\n\n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n\n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n\n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n\n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN, null, true, false.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n\n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg.\n\n        '),
               ('django.utils.simplejson.encoder.encode_basestring',
                ['s'],
                'Return a JSON representation of a Python string\n\n    '),
               ('django.utils.simplejson.encoder.py_encode_basestring_ascii',
                ['s'],
                'Return an ASCII-only JSON representation of a Python string\n\n    '),
               ('django.utils.simplejson.encoder._make_iterencode',
                ['markers',
                 '_default',
                 '_encoder',
                 '_indent',
                 '_floatstr',
                 '_key_separator',
                 '_item_separator',
                 '_sort_keys',
                 '_skipkeys',
                 '_one_shot',
                 'False=False',
                 'True=True',
                 'ValueError=ValueError',
                 'basestring=basestring',
                 'dict=dict',
                 'float=float',
                 'id=id',
                 'int=int',
                 'isinstance=isinstance',
                 'list=list',
                 'long=long',
                 'str=str',
                 'tuple=tuple'],
                ''),
               ('django.utils.simplejson.tool.main', [], ''),
               ('django.utils.simplejson.scanner.py_make_scanner', ['context'], ''),
               ('django.utils.unittest.collector.collector', [], ''),
               ('django.utils.unittest.result.failfast', ['method'], ''),
               ('django.utils.unittest.main.main_', [], ''),
               ('django.utils.unittest.case._id', ['obj'], ''),
               ('django.utils.unittest.case.skip',
                ['reason'],
                '\n    Unconditionally skip a test.\n    '),
               ('django.utils.unittest.case.skipIf',
                ['condition', 'reason'],
                '\n    Skip a test if the condition is true.\n    '),
               ('django.utils.unittest.case.skipUnless',
                ['condition', 'reason'],
                '\n    Skip a test unless the condition is true.\n    '),
               ('django.utils.unittest.case.expectedFailure', ['func'], ''),
               ('django.utils.unittest.compatibility.wraps', ['_'], ''),
               ('django.utils.unittest.compatibility._relpath_nt',
                ['path', 'start=os.path.curdir'],
                'Return a relative version of a path'),
               ('django.utils.unittest.compatibility._relpath_posix',
                ['path', 'start=os.path.curdir'],
                'Return a relative version of a path'),
               ('django.utils.unittest.loader._CmpToKey',
                ['mycmp'],
                'Convert a cmp= function into a key= function'),
               ('django.utils.unittest.loader._make_failed_import_test',
                ['name', 'suiteClass'],
                ''),
               ('django.utils.unittest.loader._make_failed_load_tests',
                ['name', 'exception', 'suiteClass'],
                ''),
               ('django.utils.unittest.loader._make_failed_test',
                ['classname', 'methodname', 'exception', 'suiteClass'],
                ''),
               ('django.utils.unittest.loader._makeLoader',
                ['prefix', 'sortUsing', 'suiteClass=None'],
                ''),
               ('django.utils.unittest.loader.getTestCaseNames',
                ['testCaseClass', 'prefix', 'sortUsing=cmp'],
                ''),
               ('django.utils.unittest.loader.makeSuite',
                ['testCaseClass',
                 "prefix='test'",
                 'sortUsing=cmp',
                 'suiteClass=suite.TestSuite'],
                ''),
               ('django.utils.unittest.loader.findTestCases',
                ['module', "prefix='test'", 'sortUsing=cmp', 'suiteClass=suite.TestSuite'],
                ''),
               ('django.utils.unittest.suite._isnotsuite',
                ['test'],
                'A crude way to tell apart testcases and suites with duck-typing'),
               ('django.utils.unittest.signals.registerResult', ['result'], ''),
               ('django.utils.unittest.signals.removeResult', ['result'], ''),
               ('django.utils.unittest.signals.installHandler', [], ''),
               ('django.utils.unittest.signals.removeHandler', ['method=None'], ''),
               ('django.utils.unittest.util.safe_repr', ['obj', 'short=False'], ''),
               ('django.utils.unittest.util.safe_str', ['obj'], ''),
               ('django.utils.unittest.util.strclass', ['cls'], ''),
               ('django.utils.unittest.util.sorted_list_difference',
                ['expected', 'actual'],
                'Finds elements in only one or the other of two, sorted input lists.\n\n    Returns a two-element tuple of lists.    The first list contains those\n    elements in the "expected" list but not in the "actual" list, and the\n    second contains those elements in the "actual" list but not in the\n    "expected" list.    Duplicate elements in either input list are ignored.\n    '),
               ('django.utils.unittest.util.unorderable_list_difference',
                ['expected', 'actual', 'ignore_duplicate=False'],
                'Same behavior as sorted_list_difference but\n    for lists of unorderable items (like dicts).\n\n    As it does a linear search per item (remove) it\n    has O(n*n) performance.\n    '),
               ('django.utils.unittest.runner.registerResult', ['_'], ''),
               ('django.views.csrf.csrf_failure',
                ['request', "reason=''"],
                '\n    Default view used when request fails CSRF protection\n    '),
               ('django.views.debug.linebreak_iter', ['template_source'], ''),
               ('django.views.debug.cleanse_setting',
                ['key', 'value'],
                'Cleanse an individual setting key/value of sensitive content.\n\n    If the value is a dictionary, recursively cleanse the keys in\n    that dictionary.\n    '),
               ('django.views.debug.get_safe_settings',
                [],
                'Returns a dictionary of the settings module, with sensitive settings blurred out.'),
               ('django.views.debug.technical_500_response',
                ['request', 'exc_type', 'exc_value', 'tb'],
                '\n    Create a technical server error response. The last three arguments are\n    the values returned from sys.exc_info() and friends.\n    '),
               ('django.views.debug.technical_404_response',
                ['request', 'exception'],
                'Create a technical 404 error response. The exception should be the Http404.'),
               ('django.views.debug.empty_urlconf',
                ['request'],
                'Create an empty URLconf 404 error response.'),
               ('django.views.static.serve',
                ['request', 'path', 'document_root=None', 'show_indexes=False'],
                "\n    Serve static files below a given point in the directory structure.\n\n    To use, put a URL pattern such as::\n\n        (r'^(?P<path>.*)$', 'django.views.static.serve', {'document_root' : '/path/to/my/files/'})\n\n    in your URLconf. You must provide the ``document_root`` param. You may\n    also set ``show_indexes`` to ``True`` if you'd like to serve a basic index\n    of the directory.  This index view will use the template hardcoded below,\n    but if you'd like to override it, you can create a template called\n    ``static/directory_index.html``.\n    "),
               ('django.views.static.directory_index', ['path', 'fullpath'], ''),
               ('django.views.static.was_modified_since',
                ['header=None', 'mtime=0', 'size=0'],
                "\n    Was something modified since the user last downloaded it?\n\n    header\n      This is the value of the If-Modified-Since header.  If this is None,\n      I'll just return True.\n\n    mtime\n      This is the modification time of the item we're talking about.\n\n    size\n      This is the size of the item we're talking about.\n    "),
               ('django.views.defaults.page_not_found',
                ['request', "template_name='404.html'"],
                "\n    Default 404 handler.\n\n    Templates: `404.html`\n    Context:\n        request_path\n            The path of the requested URL (e.g., '/app/pages/bad_page/')\n    "),
               ('django.views.defaults.server_error',
                ['request', "template_name='500.html'"],
                '\n    500 error handler.\n\n    Templates: `500.html`\n    Context: None\n    '),
               ('django.views.defaults.shortcut',
                ['request', 'content_type_id', 'object_id'],
                ''),
               ('django.views.i18n.set_language',
                ['request'],
                "\n    Redirect to a given url while setting the chosen language in the\n    session or cookie. The url and the language code need to be\n    specified in the request parameters.\n\n    Since this view changes how the user will see the rest of the site, it must\n    only be accessed as a POST request. If called as a GET request, it will\n    redirect to the page in the request (the 'next' parameter) without changing\n    any state.\n    "),
               ('django.views.i18n.get_formats',
                [],
                '\n    Returns all formats strings required for i18n to work\n    '),
               ('django.views.i18n.null_javascript_catalog',
                ['request', 'domain=None', 'packages=None'],
                '\n    Returns "identity" versions of the JavaScript i18n functions -- i.e.,\n    versions that don\'t actually do anything.\n    '),
               ('django.views.i18n.javascript_catalog',
                ['request', "domain='djangojs'", 'packages=None'],
                "\n    Returns the selected language catalog as a javascript library.\n\n    Receives the list of packages to check for translations in the\n    packages parameter either from an infodict or as a +-delimited\n    string from the request. Default is 'django.conf'.\n\n    Additionally you can override the gettext domain for this view,\n    but usually you don't want to do that, as JavaScript messages\n    go to the djangojs domain. But this might be needed if you\n    deliver your JavaScript source from Django templates.\n    "),
               ('django.views.decorators.csrf.csrf_response_exempt',
                ['view_func'],
                '\n    Modifies a view function so that its response is exempt\n    from the post-processing of the CSRF middleware.\n    '),
               ('django.views.decorators.csrf.csrf_view_exempt',
                ['view_func'],
                '\n    Marks a view function as being exempt from CSRF view protection.\n    '),
               ('django.views.decorators.csrf.csrf_exempt',
                ['view_func'],
                '\n    Marks a view function as being exempt from the CSRF checks\n    and post processing.\n\n    This is the same as using both the csrf_view_exempt and\n    csrf_response_exempt decorators.\n    '),
               ('django.views.decorators.http.require_http_methods',
                ['request_method_list'],
                '\n    Decorator to make a view only accept particular request methods.  Usage::\n\n        @require_http_methods(["GET", "POST"])\n        def my_view(request):\n            # I can assume now that only GET or POST requests make it this far\n            # ...\n\n    Note that request methods should be in uppercase.\n    '),
               ('django.views.decorators.http.condition',
                ['etag_func=None', 'last_modified_func=None'],
                '\n    Decorator to support conditional retrieval (or change) for a view\n    function.\n\n    The parameters are callables to compute the ETag and last modified time for\n    the requested resource, respectively. The callables are passed the same\n    parameters as the view itself. The Etag function should return a string (or\n    None if the resource doesn\'t exist), whilst the last_modified function\n    should return a datetime object (or None if the resource doesn\'t exist).\n\n    If both parameters are provided, all the preconditions must be met before\n    the view is processed.\n\n    This decorator will either pass control to the wrapped view function or\n    return an HTTP 304 response (unmodified) or 412 response (preconditions\n    failed), depending upon the request method.\n\n    Any behavior marked as "undefined" in the HTTP spec (e.g. If-none-match\n    plus If-modified-since headers) will result in the view function being\n    called.\n    '),
               ('django.views.decorators.http.etag', ['etag_func'], ''),
               ('django.views.decorators.http.last_modified', ['last_modified_func'], ''),
               ('django.views.decorators.cache.cache_page',
                ['*args', '**kwargs'],
                "\n    Decorator for views that tries getting the page from the cache and\n    populates the cache if the page isn't in the cache yet.\n\n    The cache is keyed by the URL and some data from the headers.\n    Additionally there is the key prefix that is used to distinguish different\n    cache areas in a multi-site setup. You could use the\n    sites.get_current().domain, for example, as that is unique across a Django\n    project.\n\n    Additionally, all headers from the response's Vary header will be taken\n    into account on caching -- just like the middleware does.\n    "),
               ('django.views.decorators.cache.cache_control', ['**kwargs'], ''),
               ('django.views.decorators.cache.never_cache',
                ['view_func'],
                '\n    Decorator that adds headers to a response so that it will\n    never be cached.\n    '),
               ('django.views.decorators.vary.vary_on_headers',
                ['*headers'],
                "\n    A view decorator that adds the specified headers to the Vary header of the\n    response. Usage:\n\n       @vary_on_headers('Cookie', 'Accept-language')\n       def index(request):\n           ...\n\n    Note that the header names are not case-sensitive.\n    "),
               ('django.views.decorators.vary.vary_on_cookie',
                ['func'],
                '\n    A view decorator that adds "Cookie" to the Vary header of a response. This\n    indicates that a page\'s contents depends on cookies. Usage:\n\n        @vary_on_cookie\n        def index(request):\n            ...\n    '),
               ('django.views.generic.simple.direct_to_template',
                ['request', 'template', 'extra_context=None', 'mimetype=None', '**kwargs'],
                '\n    Render a given template with any extra URL parameters in the context as\n    ``{{ params }}``.\n    '),
               ('django.views.generic.simple.redirect_to',
                ['request', 'url', 'permanent=True', 'query_string=False', '**kwargs'],
                "\n    Redirect to a given URL.\n\n    The given url may contain dict-style string formatting, which will be\n    interpolated against the params in the URL.  For example, to redirect from\n    ``/foo/<id>/`` to ``/bar/<id>/``, you could use the following URLconf::\n\n        urlpatterns = patterns('',\n            ('^foo/(?P<id>\\d+)/$', 'django.views.generic.simple.redirect_to', {'url' : '/bar/%(id)s/'}),\n        )\n\n    If the given url is ``None``, a HttpResponseGone (410) will be issued.\n\n    If the ``permanent`` argument is False, then the response will have a 302\n    HTTP status code. Otherwise, the status code will be 301.\n\n    If the ``query_string`` argument is True, then the GET query string\n    from the request is appended to the URL.\n\n    "),
               ('django.views.generic.dates._date_from_string',
                ['year',
                 'year_format',
                 'month',
                 'month_format',
                 "day=''",
                 "day_format=''",
                 "delim='__'"],
                '\n    Helper: get a datetime.date object given a format string and a year,\n    month, and possibly day; raise a 404 for an invalid date.\n    '),
               ('django.views.generic.dates._month_bounds',
                ['date'],
                '\n    Helper: return the first and last days of the month for the given date.\n    '),
               ('django.views.generic.dates._get_next_prev_month',
                ['generic_view', 'naive_result', 'is_previous', 'use_first_day'],
                "\n    Helper: Get the next or the previous valid date. The idea is to allow\n    links on month/day views to never be 404s by never providing a date\n    that'll be invalid for the given view.\n\n    This is a bit complicated since it handles both next and previous months\n    and days (for MonthArchiveView and DayArchiveView); hence the coupling to generic_view.\n\n    However in essence the logic comes down to:\n\n        * If allow_empty and allow_future are both true, this is easy: just\n          return the naive result (just the next/previous day or month,\n          reguardless of object existence.)\n\n        * If allow_empty is true, allow_future is false, and the naive month\n          isn't in the future, then return it; otherwise return None.\n\n        * If allow_empty is false and allow_future is true, return the next\n          date *that contains a valid object*, even if it's in the future. If\n          there are no next objects, return None.\n\n        * If allow_empty is false and allow_future is false, return the next\n          date that contains a valid object. If that date is in the future, or\n          if there are no next objects, return None.\n\n    "),
               ('django.views.generic.dates._date_lookup_for_field',
                ['field', 'date'],
                "\n    Get the lookup kwargs for looking up a date against a given Field. If the\n    date field is a DateTimeField, we can't just do filter(df=date) because\n    that doesn't take the time into account. So we need to make a range lookup\n    in those cases.\n    "),
               ('django.views.generic.list_detail.object_list',
                ['request',
                 'queryset',
                 'paginate_by=None',
                 'page=None',
                 'allow_empty=True',
                 'template_name=None',
                 'template_loader=loader',
                 'extra_context=None',
                 'context_processors=None',
                 "template_object_name='object'",
                 'mimetype=None'],
                '\n    Generic list of objects.\n\n    Templates: ``<app_label>/<model_name>_list.html``\n    Context:\n        object_list\n            list of objects\n        is_paginated\n            are the results paginated?\n        results_per_page\n            number of objects per page (if paginated)\n        has_next\n            is there a next page?\n        has_previous\n            is there a prev page?\n        page\n            the current page\n        next\n            the next page\n        previous\n            the previous page\n        pages\n            number of pages, total\n        hits\n            number of objects, total\n        last_on_page\n            the result number of the last of object in the\n            object_list (1-indexed)\n        first_on_page\n            the result number of the first object in the\n            object_list (1-indexed)\n        page_range:\n            A list of the page numbers (1-indexed).\n    '),
               ('django.views.generic.list_detail.object_detail',
                ['request',
                 'queryset',
                 'object_id=None',
                 'slug=None',
                 "slug_field='slug'",
                 'template_name=None',
                 'template_name_field=None',
                 'template_loader=loader',
                 'extra_context=None',
                 'context_processors=None',
                 "template_object_name='object'",
                 'mimetype=None'],
                '\n    Generic detail of an object.\n\n    Templates: ``<app_label>/<model_name>_detail.html``\n    Context:\n        object\n            the object\n    '),
               ('django.views.generic.create_update.apply_extra_context',
                ['extra_context', 'context'],
                '\n    Adds items from extra_context dict to context.  If a value in extra_context\n    is callable, then it is called and the result is added to context.\n    '),
               ('django.views.generic.create_update.get_model_and_form_class',
                ['model', 'form_class'],
                '\n    Returns a model and form class based on the model and form_class\n    parameters that were passed to the generic view.\n\n    If ``form_class`` is given then its associated model will be returned along\n    with ``form_class`` itself.  Otherwise, if ``model`` is given, ``model``\n    itself will be returned along with a ``ModelForm`` class created from\n    ``model``.\n    '),
               ('django.views.generic.create_update.redirect',
                ['post_save_redirect', 'obj'],
                "\n    Returns a HttpResponseRedirect to ``post_save_redirect``.\n\n    ``post_save_redirect`` should be a string, and can contain named string-\n    substitution place holders of ``obj`` field names.\n\n    If ``post_save_redirect`` is None, then redirect to ``obj``'s URL returned\n    by ``get_absolute_url()``.  If ``obj`` has no ``get_absolute_url`` method,\n    then raise ImproperlyConfigured.\n\n    This function is meant to handle the post_save_redirect parameter to the\n    ``create_object`` and ``update_object`` views.\n    "),
               ('django.views.generic.create_update.lookup_object',
                ['model', 'object_id', 'slug', 'slug_field'],
                '\n    Return the ``model`` object with the passed ``object_id``.  If\n    ``object_id`` is None, then return the object whose ``slug_field``\n    equals the passed ``slug``.  If ``slug`` and ``slug_field`` are not passed,\n    then raise Http404 exception.\n    '),
               ('django.views.generic.create_update.create_object',
                ['request',
                 'model=None',
                 'template_name=None',
                 'template_loader=loader',
                 'extra_context=None',
                 'post_save_redirect=None',
                 'login_required=False',
                 'context_processors=None',
                 'form_class=None'],
                '\n    Generic object-creation function.\n\n    Templates: ``<app_label>/<model_name>_form.html``\n    Context:\n        form\n            the form for the object\n    '),
               ('django.views.generic.create_update.update_object',
                ['request',
                 'model=None',
                 'object_id=None',
                 'slug=None',
                 "slug_field='slug'",
                 'template_name=None',
                 'template_loader=loader',
                 'extra_context=None',
                 'post_save_redirect=None',
                 'login_required=False',
                 'context_processors=None',
                 "template_object_name='object'",
                 'form_class=None'],
                '\n    Generic object-update function.\n\n    Templates: ``<app_label>/<model_name>_form.html``\n    Context:\n        form\n            the form for the object\n        object\n            the original object being edited\n    '),
               ('django.views.generic.create_update.delete_object',
                ['request',
                 'model',
                 'post_delete_redirect',
                 'object_id=None',
                 'slug=None',
                 "slug_field='slug'",
                 'template_name=None',
                 'template_loader=loader',
                 'extra_context=None',
                 'login_required=False',
                 'context_processors=None',
                 "template_object_name='object'"],
                '\n    Generic object-delete function.\n\n    The given template will be used to confirm deletetion if this view is\n    fetched using GET; for safty, deletion will only be performed if this\n    view is POSTed.\n\n    Templates: ``<app_label>/<model_name>_confirm_delete.html``\n    Context:\n        object\n            the original object being deleted\n    '),
               ('django.views.generic.date_based.archive_index',
                ['request',
                 'queryset',
                 'date_field',
                 'num_latest=15',
                 'template_name=None',
                 'template_loader=loader',
                 'extra_context=None',
                 'allow_empty=True',
                 'context_processors=None',
                 'mimetype=None',
                 'allow_future=False',
                 "template_object_name='latest'"],
                '\n    Generic top-level archive of date-based objects.\n\n    Templates: ``<app_label>/<model_name>_archive.html``\n    Context:\n        date_list\n            List of years\n        latest\n            Latest N (defaults to 15) objects by date\n    '),
               ('django.views.generic.date_based.archive_year',
                ['request',
                 'year',
                 'queryset',
                 'date_field',
                 'template_name=None',
                 'template_loader=loader',
                 'extra_context=None',
                 'allow_empty=False',
                 'context_processors=None',
                 "template_object_name='object'",
                 'mimetype=None',
                 'make_object_list=False',
                 'allow_future=False'],
                '\n    Generic yearly archive view.\n\n    Templates: ``<app_label>/<model_name>_archive_year.html``\n    Context:\n        date_list\n            List of months in this year with objects\n        year\n            This year\n        object_list\n            List of objects published in the given month\n            (Only available if make_object_list argument is True)\n    '),
               ('django.views.generic.date_based.archive_month',
                ['request',
                 'year',
                 'month',
                 'queryset',
                 'date_field',
                 "month_format='%b'",
                 'template_name=None',
                 'template_loader=loader',
                 'extra_context=None',
                 'allow_empty=False',
                 'context_processors=None',
                 "template_object_name='object'",
                 'mimetype=None',
                 'allow_future=False'],
                '\n    Generic monthly archive view.\n\n    Templates: ``<app_label>/<model_name>_archive_month.html``\n    Context:\n        date_list:\n            List of days in this month with objects\n        month:\n            (date) this month\n        next_month:\n            (date) the first day of the next month, or None if the next month is in the future\n        previous_month:\n            (date) the first day of the previous month\n        object_list:\n            list of objects published in the given month\n    '),
               ('django.views.generic.date_based.archive_week',
                ['request',
                 'year',
                 'week',
                 'queryset',
                 'date_field',
                 'template_name=None',
                 'template_loader=loader',
                 'extra_context=None',
                 'allow_empty=True',
                 'context_processors=None',
                 "template_object_name='object'",
                 'mimetype=None',
                 'allow_future=False'],
                '\n    Generic weekly archive view.\n\n    Templates: ``<app_label>/<model_name>_archive_week.html``\n    Context:\n        week:\n            (date) this week\n        object_list:\n            list of objects published in the given week\n    '),
               ('django.views.generic.date_based.archive_day',
                ['request',
                 'year',
                 'month',
                 'day',
                 'queryset',
                 'date_field',
                 "month_format='%b'",
                 "day_format='%d'",
                 'template_name=None',
                 'template_loader=loader',
                 'extra_context=None',
                 'allow_empty=False',
                 'context_processors=None',
                 "template_object_name='object'",
                 'mimetype=None',
                 'allow_future=False'],
                '\n    Generic daily archive view.\n\n    Templates: ``<app_label>/<model_name>_archive_day.html``\n    Context:\n        object_list:\n            list of objects published that day\n        day:\n            (datetime) the day\n        previous_day\n            (datetime) the previous day\n        next_day\n            (datetime) the next day, or None if the current day is today\n    '),
               ('django.views.generic.date_based.archive_today',
                ['request', '**kwargs'],
                '\n    Generic daily archive view for today. Same as archive_day view.\n    '),
               ('django.views.generic.date_based.object_detail',
                ['request',
                 'year',
                 'month',
                 'day',
                 'queryset',
                 'date_field',
                 "month_format='%b'",
                 "day_format='%d'",
                 'object_id=None',
                 'slug=None',
                 "slug_field='slug'",
                 'template_name=None',
                 'template_name_field=None',
                 'template_loader=loader',
                 'extra_context=None',
                 'context_processors=None',
                 "template_object_name='object'",
                 'mimetype=None',
                 'allow_future=False'],
                '\n    Generic detail view from year/month/day/slug or year/month/day/id structure.\n\n    Templates: ``<app_label>/<model_name>_detail.html``\n    Context:\n        object:\n            the object to be detailed\n    ')],
 'HIERARCHY': ['django',
               'django.core.template_loader',
               'django.core',
               'django.core.paginator',
               'django.core.exceptions',
               'django.core.xheaders',
               'django.core.urlresolvers',
               'django.core.context_processors',
               'django.core.signals',
               'django.core.validators',
               'django.core.files',
               'django.core.files.utils',
               'django.core.files.uploadedfile',
               'django.core.files.locks',
               'django.core.files.temp',
               'django.core.files.storage',
               'django.core.files.base',
               'django.core.files.uploadhandler',
               'django.core.files.images',
               'django.core.files.move',
               'django.core.servers',
               'django.core.servers.fastcgi',
               'django.core.servers.basehttp',
               'django.core.mail',
               'django.core.mail.utils',
               'django.core.mail.message',
               'django.core.mail.backends',
               'django.core.mail.backends.dummy',
               'django.core.mail.backends.smtp',
               'django.core.mail.backends.filebased',
               'django.core.mail.backends.console',
               'django.core.mail.backends.locmem',
               'django.core.mail.backends.base',
               'django.core.cache',
               'django.core.cache.backends',
               'django.core.cache.backends.dummy',
               'django.core.cache.backends.db',
               'django.core.cache.backends.filebased',
               'django.core.cache.backends.locmem',
               'django.core.cache.backends.base',
               'django.core.cache.backends.memcached',
               'django.core.serializers.json',
               'django.core.serializers',
               'django.core.serializers.pyyaml',
               'django.core.serializers.python',
               'django.core.serializers.xml_serializer',
               'django.core.serializers.base',
               'django.core.management.sql',
               'django.core.management.color',
               'django.core.management',
               'django.core.management.validation',
               'django.core.management.base',
               'django.core.management.commands.sql',
               'django.core.management.commands.makemessages',
               'django.core.management.commands.sqlclear',
               'django.core.management.commands.sqlinitialdata',
               'django.core.management.commands',
               'django.core.management.commands.sqlsequencereset',
               'django.core.management.commands.shell',
               'django.core.management.commands.diffsettings',
               'django.core.management.commands.runserver',
               'django.core.management.commands.sqlindexes',
               'django.core.management.commands.runfcgi',
               'django.core.management.commands.reset',
               'django.core.management.commands.createcachetable',
               'django.core.management.commands.flush',
               'django.core.management.commands.test',
               'django.core.management.commands.startproject',
               'django.core.management.commands.loaddata',
               'django.core.management.commands.sqlall',
               'django.core.management.commands.cleanup',
               'django.core.management.commands.compilemessages',
               'django.core.management.commands.startapp',
               'django.core.management.commands.inspectdb',
               'django.core.management.commands.sqlcustom',
               'django.core.management.commands.dbshell',
               'django.core.management.commands.dumpdata',
               'django.core.management.commands.validate',
               'django.core.management.commands.testserver',
               'django.core.management.commands.sqlreset',
               'django.core.management.commands.sqlflush',
               'django.core.management.commands.syncdb',
               'django.core.handlers.wsgi',
               'django.core.handlers',
               'django.core.handlers.modpython',
               'django.core.handlers.profiler-hotshot',
               'django.core.handlers.base',
               'django.templatetags',
               'django.templatetags.static',
               'django.templatetags.future',
               'django.templatetags.cache',
               'django.templatetags.l10n',
               'django.templatetags.i18n',
               'django.http',
               'django.http.utils',
               'django.http.multipartparser',
               'django.dispatch.dispatcher',
               'django.dispatch',
               'django.dispatch.saferef',
               'django.shortcuts',
               'django.bin.django-admin',
               'django.bin',
               'django.bin.unique-messages',
               'django.bin.daily_cleanup',
               'django.bin.profiling',
               'django.bin.profiling.gather_profile_stats',
               'django.contrib',
               'django.contrib.csrf',
               'django.contrib.csrf.middleware',
               'django.contrib.sessions.models',
               'django.contrib.sessions',
               'django.contrib.sessions.middleware',
               'django.contrib.sessions.tests',
               'django.contrib.sessions.backends',
               'django.contrib.sessions.backends.db',
               'django.contrib.sessions.backends.cached_db',
               'django.contrib.sessions.backends.base',
               'django.contrib.sessions.backends.file',
               'django.contrib.sessions.backends.cache',
               'django.contrib.admin.models',
               'django.contrib.admin.filterspecs',
               'django.contrib.admin.options',
               'django.contrib.admin',
               'django.contrib.admin.validation',
               'django.contrib.admin.forms',
               'django.contrib.admin.actions',
               'django.contrib.admin.sites',
               'django.contrib.admin.helpers',
               'django.contrib.admin.util',
               'django.contrib.admin.widgets',
               'django.contrib.admin.templatetags.admin_modify',
               'django.contrib.admin.templatetags',
               'django.contrib.admin.templatetags.admin_list',
               'django.contrib.admin.templatetags.adminmedia',
               'django.contrib.admin.templatetags.log',
               'compress',
               'django.contrib.admin.views.decorators',
               'django.contrib.admin.views',
               'django.contrib.admin.views.main',
               'django.contrib.formtools.models',
               'django.contrib.formtools',
               'django.contrib.formtools.utils',
               'django.contrib.formtools.preview',
               'django.contrib.formtools.wizard',
               'django.contrib.formtools.tests',
               'django.contrib.formtools.tests.urls',
               'django.contrib.localflavor',
               'django.contrib.localflavor.be',
               'django.contrib.localflavor.be.forms',
               'django.contrib.localflavor.be.be_provinces',
               'django.contrib.localflavor.be.be_regions',
               'django.contrib.localflavor.ca',
               'django.contrib.localflavor.ca.forms',
               'django.contrib.localflavor.ca.ca_provinces',
               'django.contrib.localflavor.us.models',
               'django.contrib.localflavor.us',
               'django.contrib.localflavor.us.forms',
               'django.contrib.localflavor.us.us_states',
               'django.contrib.localflavor.br',
               'django.contrib.localflavor.br.forms',
               'django.contrib.localflavor.br.br_states',
               'django.contrib.localflavor.tr',
               'django.contrib.localflavor.tr.forms',
               'django.contrib.localflavor.tr.tr_provinces',
               'django.contrib.localflavor.fi',
               'django.contrib.localflavor.fi.fi_municipalities',
               'django.contrib.localflavor.fi.forms',
               'django.contrib.localflavor.es.es_provinces',
               'django.contrib.localflavor.es',
               'django.contrib.localflavor.es.forms',
               'django.contrib.localflavor.es.es_regions',
               'django.contrib.localflavor.jp',
               'django.contrib.localflavor.jp.forms',
               'django.contrib.localflavor.jp.jp_prefectures',
               'django.contrib.localflavor.nl',
               'django.contrib.localflavor.nl.nl_provinces',
               'django.contrib.localflavor.nl.forms',
               'django.contrib.localflavor.de',
               'django.contrib.localflavor.de.de_states',
               'django.contrib.localflavor.de.forms',
               'django.contrib.localflavor.in_',
               'django.contrib.localflavor.in_.in_states',
               'django.contrib.localflavor.in_.forms',
               'django.contrib.localflavor.se',
               'django.contrib.localflavor.se.utils',
               'django.contrib.localflavor.se.forms',
               'django.contrib.localflavor.se.se_counties',
               'django.contrib.localflavor.no',
               'django.contrib.localflavor.no.no_municipalities',
               'django.contrib.localflavor.no.forms',
               'django.contrib.localflavor.uk',
               'django.contrib.localflavor.uk.forms',
               'django.contrib.localflavor.uk.uk_regions',
               'django.contrib.localflavor.pt',
               'django.contrib.localflavor.pt.forms',
               'django.contrib.localflavor.is_.is_postalcodes',
               'django.contrib.localflavor.is_',
               'django.contrib.localflavor.is_.forms',
               'django.contrib.localflavor.it.it_province',
               'django.contrib.localflavor.it',
               'django.contrib.localflavor.it.forms',
               'django.contrib.localflavor.it.it_region',
               'django.contrib.localflavor.it.util',
               'django.contrib.localflavor.mx',
               'django.contrib.localflavor.mx.forms',
               'django.contrib.localflavor.mx.mx_states',
               'django.contrib.localflavor.ch.ch_states',
               'django.contrib.localflavor.ch',
               'django.contrib.localflavor.ch.forms',
               'django.contrib.localflavor.id',
               'django.contrib.localflavor.id.forms',
               'django.contrib.localflavor.id.id_choices',
               'django.contrib.localflavor.au',
               'django.contrib.localflavor.au.forms',
               'django.contrib.localflavor.au.au_states',
               'django.contrib.localflavor.ar',
               'django.contrib.localflavor.ar.forms',
               'django.contrib.localflavor.ar.ar_provinces',
               'django.contrib.localflavor.pe',
               'django.contrib.localflavor.pe.forms',
               'django.contrib.localflavor.pe.pe_region',
               'django.contrib.localflavor.cz',
               'django.contrib.localflavor.cz.cz_regions',
               'django.contrib.localflavor.cz.forms',
               'django.contrib.localflavor.sk.sk_regions',
               'django.contrib.localflavor.sk',
               'django.contrib.localflavor.sk.forms',
               'django.contrib.localflavor.sk.sk_districts',
               'django.contrib.localflavor.il',
               'django.contrib.localflavor.il.forms',
               'django.contrib.localflavor.ie.ie_counties',
               'django.contrib.localflavor.ie',
               'django.contrib.localflavor.ie.forms',
               'django.contrib.localflavor.uy.uy_departaments',
               'django.contrib.localflavor.uy',
               'django.contrib.localflavor.uy.forms',
               'django.contrib.localflavor.uy.util',
               'django.contrib.localflavor.kw',
               'django.contrib.localflavor.kw.forms',
               'django.contrib.localflavor.pl',
               'django.contrib.localflavor.pl.forms',
               'django.contrib.localflavor.pl.pl_administrativeunits',
               'django.contrib.localflavor.pl.pl_voivodeships',
               'django.contrib.localflavor.at',
               'django.contrib.localflavor.at.at_states',
               'django.contrib.localflavor.at.forms',
               'django.contrib.localflavor.generic',
               'django.contrib.localflavor.generic.forms',
               'django.contrib.localflavor.ro',
               'django.contrib.localflavor.ro.forms',
               'django.contrib.localflavor.ro.ro_counties',
               'django.contrib.localflavor.za',
               'django.contrib.localflavor.za.za_provinces',
               'django.contrib.localflavor.za.forms',
               'django.contrib.localflavor.cl',
               'django.contrib.localflavor.cl.forms',
               'django.contrib.localflavor.cl.cl_regions',
               'django.contrib.localflavor.fr',
               'django.contrib.localflavor.fr.forms',
               'django.contrib.localflavor.fr.fr_department',
               'django.contrib.gis.models',
               'django.contrib.gis.shortcuts',
               'django.contrib.gis',
               'django.contrib.gis.measure',
               'django.contrib.gis.feeds',
               'django.contrib.gis.admin.options',
               'django.contrib.gis.admin',
               'django.contrib.gis.admin.widgets',
               'django.contrib.gis.geos.collections',
               'django.contrib.gis.geos.coordseq',
               'django.contrib.gis.geos',
               'django.contrib.gis.geos.point',
               'django.contrib.gis.geos.geometry',
               'django.contrib.gis.geos.libgeos',
               'django.contrib.gis.geos.mutable_list',
               'django.contrib.gis.geos.error',
               'django.contrib.gis.geos.io',
               'django.contrib.gis.geos.factory',
               'django.contrib.gis.geos.base',
               'django.contrib.gis.geos.linestring',
               'django.contrib.gis.geos.polygon',
               'django.contrib.gis.geos.prepared',
               'django.contrib.gis.geos.prototypes.coordseq',
               'django.contrib.gis.geos.prototypes',
               'django.contrib.gis.geos.prototypes.geom',
               'django.contrib.gis.geos.prototypes.io',
               'django.contrib.gis.geos.prototypes.misc',
               'django.contrib.gis.geos.prototypes.threadsafe',
               'django.contrib.gis.geos.prototypes.topology',
               'django.contrib.gis.geos.prototypes.predicates',
               'django.contrib.gis.geos.prototypes.errcheck',
               'django.contrib.gis.geos.prototypes.prepared',
               'django.contrib.gis.geos.tests.test_geos_mutation',
               'django.contrib.gis.geos.tests',
               'django.contrib.gis.geos.tests.test_geos',
               'django.contrib.gis.geos.tests.test_mutable_list',
               'django.contrib.gis.geos.tests.test_io',
               'django.contrib.gis.gdal',
               'django.contrib.gis.gdal.geometries',
               'django.contrib.gis.gdal.srs',
               'django.contrib.gis.gdal.field',
               'django.contrib.gis.gdal.error',
               'django.contrib.gis.gdal.layer',
               'django.contrib.gis.gdal.feature',
               'django.contrib.gis.gdal.libgdal',
               'django.contrib.gis.gdal.driver',
               'django.contrib.gis.gdal.base',
               'django.contrib.gis.gdal.datasource',
               'django.contrib.gis.gdal.geomtype',
               'django.contrib.gis.gdal.envelope',
               'django.contrib.gis.gdal.prototypes.generation',
               'django.contrib.gis.gdal.prototypes',
               'django.contrib.gis.gdal.prototypes.geom',
               'django.contrib.gis.gdal.prototypes.srs',
               'django.contrib.gis.gdal.prototypes.errcheck',
               'django.contrib.gis.gdal.prototypes.ds',
               'django.contrib.gis.gdal.tests',
               'django.contrib.gis.gdal.tests.test_ds',
               'django.contrib.gis.gdal.tests.test_envelope',
               'django.contrib.gis.gdal.tests.test_driver',
               'django.contrib.gis.gdal.tests.test_geom',
               'django.contrib.gis.gdal.tests.test_srs',
               'django.contrib.gis.maps',
               'django.contrib.gis.maps.google',
               'django.contrib.gis.maps.google.zoom',
               'django.contrib.gis.maps.google.gmap',
               'django.contrib.gis.maps.google.overlays',
               'django.contrib.gis.maps.openlayers',
               'django.contrib.gis.tests.test_measure',
               'django.contrib.gis.tests',
               'django.contrib.gis.tests.utils',
               'django.contrib.gis.tests.test_geoip',
               'django.contrib.gis.tests.test_geoforms',
               'django.contrib.gis.tests.test_spatialrefsys',
               'django.contrib.gis.tests.geoapp.models',
               'django.contrib.gis.tests.geoapp',
               'django.contrib.gis.tests.geoapp.sitemaps',
               'django.contrib.gis.tests.geoapp.test_feeds',
               'django.contrib.gis.tests.geoapp.feeds',
               'django.contrib.gis.tests.geoapp.test_regress',
               'django.contrib.gis.tests.geoapp.urls',
               'django.contrib.gis.tests.geoapp.test_sitemaps',
               'django.contrib.gis.tests.geoapp.tests',
               'django.contrib.gis.tests.layermap.models',
               'django.contrib.gis.tests.layermap',
               'django.contrib.gis.tests.layermap.tests',
               'django.contrib.gis.tests.relatedapp.models',
               'django.contrib.gis.tests.relatedapp',
               'django.contrib.gis.tests.relatedapp.tests',
               'django.contrib.gis.tests.geo3d.models',
               'django.contrib.gis.tests.geo3d.views',
               'django.contrib.gis.tests.geo3d',
               'django.contrib.gis.tests.geo3d.tests',
               'django.contrib.gis.tests.distapp.models',
               'django.contrib.gis.tests.distapp',
               'django.contrib.gis.tests.distapp.tests',
               'django.contrib.gis.tests.geogapp.models',
               'django.contrib.gis.tests.geogapp',
               'django.contrib.gis.tests.geogapp.tests',
               'django.contrib.gis.management',
               'django.contrib.gis.management.base',
               'django.contrib.gis.management.commands',
               'django.contrib.gis.management.commands.ogrinspect',
               'django.contrib.gis.management.commands.inspectdb',
               'django.contrib.gis.forms',
               'django.contrib.gis.forms.fields',
               'django.contrib.gis.sitemaps.views',
               'django.contrib.gis.sitemaps',
               'django.contrib.gis.sitemaps.georss',
               'django.contrib.gis.sitemaps.kml',
               'django.contrib.gis.geometry',
               'django.contrib.gis.geometry.test_data',
               'django.contrib.gis.geometry.regex',
               'django.contrib.gis.geometry.backend',
               'django.contrib.gis.geometry.backend.geos',
               'django.contrib.gis.db',
               'django.contrib.gis.db.backends',
               'django.contrib.gis.db.backends.adapter',
               'django.contrib.gis.db.backends.base',
               'django.contrib.gis.db.backends.util',
               'django.contrib.gis.db.backends.oracle.models',
               'django.contrib.gis.db.backends.oracle',
               'django.contrib.gis.db.backends.oracle.compiler',
               'django.contrib.gis.db.backends.oracle.introspection',
               'django.contrib.gis.db.backends.oracle.adapter',
               'django.contrib.gis.db.backends.oracle.base',
               'django.contrib.gis.db.backends.oracle.creation',
               'django.contrib.gis.db.backends.oracle.operations',
               'django.contrib.gis.db.backends.spatialite.models',
               'django.contrib.gis.db.backends.spatialite',
               'django.contrib.gis.db.backends.spatialite.introspection',
               'django.contrib.gis.db.backends.spatialite.adapter',
               'django.contrib.gis.db.backends.spatialite.client',
               'django.contrib.gis.db.backends.spatialite.base',
               'django.contrib.gis.db.backends.spatialite.creation',
               'django.contrib.gis.db.backends.spatialite.operations',
               'django.contrib.gis.db.backends.mysql',
               'django.contrib.gis.db.backends.mysql.introspection',
               'django.contrib.gis.db.backends.mysql.base',
               'django.contrib.gis.db.backends.mysql.creation',
               'django.contrib.gis.db.backends.mysql.operations',
               'django.contrib.gis.db.backends.postgis.models',
               'django.contrib.gis.db.backends.postgis',
               'django.contrib.gis.db.backends.postgis.introspection',
               'django.contrib.gis.db.backends.postgis.adapter',
               'django.contrib.gis.db.backends.postgis.base',
               'django.contrib.gis.db.backends.postgis.creation',
               'django.contrib.gis.db.backends.postgis.operations',
               'django.contrib.gis.db.models',
               'django.contrib.gis.db.models.proxy',
               'django.contrib.gis.db.models.query',
               'django.contrib.gis.db.models.aggregates',
               'django.contrib.gis.db.models.manager',
               'django.contrib.gis.db.models.fields',
               'django.contrib.gis.db.models.sql',
               'django.contrib.gis.db.models.sql.query',
               'django.contrib.gis.db.models.sql.compiler',
               'django.contrib.gis.db.models.sql.aggregates',
               'django.contrib.gis.db.models.sql.where',
               'django.contrib.gis.db.models.sql.conversion',
               'django.contrib.gis.db.backend',
               'django.contrib.gis.utils',
               'django.contrib.gis.utils.wkt',
               'django.contrib.gis.utils.ogrinfo',
               'django.contrib.gis.utils.geoip',
               'django.contrib.gis.utils.srs',
               'django.contrib.gis.utils.ogrinspect',
               'django.contrib.gis.utils.layermapping',
               'django.contrib.syndication.views',
               'django.contrib.syndication',
               'django.contrib.syndication.feeds',
               'django.contrib.contenttypes.models',
               'django.contrib.contenttypes.management',
               'django.contrib.contenttypes.views',
               'django.contrib.contenttypes',
               'django.contrib.contenttypes.tests',
               'django.contrib.contenttypes.generic',
               'django.contrib.auth.decorators',
               'django.contrib.auth.models',
               'django.contrib.auth.views',
               'django.contrib.auth',
               'django.contrib.auth.forms',
               'django.contrib.auth.backends',
               'django.contrib.auth.middleware',
               'django.contrib.auth.urls',
               'django.contrib.auth.create_superuser',
               'django.contrib.auth.admin',
               'django.contrib.auth.context_processors',
               'django.contrib.auth.tokens',
               'django.contrib.auth.signals',
               'django.contrib.auth.tests.decorators',
               'django.contrib.auth.tests.models',
               'django.contrib.auth.tests.views',
               'django.contrib.auth.tests',
               'django.contrib.auth.tests.forms',
               'django.contrib.auth.tests.remote_user',
               'django.contrib.auth.tests.permissions',
               'django.contrib.auth.tests.auth_backends',
               'django.contrib.auth.tests.urls',
               'django.contrib.auth.tests.tokens',
               'django.contrib.auth.tests.signals',
               'django.contrib.auth.tests.basic',
               'django.contrib.auth.management',
               'django.contrib.auth.management.commands',
               'django.contrib.auth.management.commands.changepassword',
               'django.contrib.auth.management.commands.createsuperuser',
               'django.contrib.auth.handlers',
               'django.contrib.auth.handlers.modpython',
               'django.contrib.comments.models',
               'django.contrib.comments',
               'django.contrib.comments.managers',
               'django.contrib.comments.moderation',
               'django.contrib.comments.forms',
               'django.contrib.comments.feeds',
               'django.contrib.comments.urls',
               'django.contrib.comments.admin',
               'django.contrib.comments.signals',
               'django.contrib.comments.templatetags',
               'django.contrib.comments.templatetags.comments',
               'django.contrib.comments.views',
               'django.contrib.comments.views.utils',
               'django.contrib.comments.views.moderation',
               'django.contrib.comments.views.comments',
               'django.contrib.markup.models',
               'django.contrib.markup',
               'django.contrib.markup.tests',
               'django.contrib.markup.templatetags.markup',
               'django.contrib.markup.templatetags',
               'django.contrib.webdesign.models',
               'django.contrib.webdesign',
               'django.contrib.webdesign.lorem_ipsum',
               'django.contrib.webdesign.tests',
               'django.contrib.webdesign.templatetags',
               'django.contrib.webdesign.templatetags.webdesign',
               'django.contrib.flatpages.models',
               'django.contrib.flatpages.views',
               'django.contrib.flatpages',
               'django.contrib.flatpages.middleware',
               'django.contrib.flatpages.urls',
               'django.contrib.flatpages.admin',
               'django.contrib.flatpages.templatetags',
               'django.contrib.flatpages.templatetags.flatpages',
               'django.contrib.flatpages.tests.csrf',
               'django.contrib.flatpages.tests.views',
               'django.contrib.flatpages.tests',
               'django.contrib.flatpages.tests.templatetags',
               'django.contrib.flatpages.tests.forms',
               'django.contrib.flatpages.tests.middleware',
               'django.contrib.flatpages.tests.urls',
               'django.contrib.databrowse.views',
               'django.contrib.databrowse',
               'django.contrib.databrowse.datastructures',
               'django.contrib.databrowse.sites',
               'django.contrib.databrowse.urls',
               'django.contrib.databrowse.plugins',
               'django.contrib.databrowse.plugins.objects',
               'django.contrib.databrowse.plugins.fieldchoices',
               'django.contrib.databrowse.plugins.calendars',
               'django.contrib.staticfiles.models',
               'django.contrib.staticfiles.views',
               'django.contrib.staticfiles',
               'django.contrib.staticfiles.utils',
               'django.contrib.staticfiles.storage',
               'django.contrib.staticfiles.urls',
               'django.contrib.staticfiles.handlers',
               'django.contrib.staticfiles.finders',
               'django.contrib.staticfiles.management',
               'django.contrib.staticfiles.management.commands',
               'django.contrib.staticfiles.management.commands.runserver',
               'django.contrib.staticfiles.management.commands.findstatic',
               'django.contrib.staticfiles.management.commands.collectstatic',
               'django.contrib.sitemaps.models',
               'django.contrib.sitemaps.views',
               'django.contrib.sitemaps',
               'django.contrib.sitemaps.tests',
               'django.contrib.sitemaps.tests.urls',
               'django.contrib.sitemaps.management',
               'django.contrib.sitemaps.management.commands',
               'django.contrib.sitemaps.management.commands.ping_google',
               'django.contrib.redirects.models',
               'django.contrib.redirects',
               'django.contrib.redirects.middleware',
               'django.contrib.redirects.admin',
               'django.contrib.sites.models',
               'django.contrib.sites.management',
               'django.contrib.sites',
               'django.contrib.sites.managers',
               'django.contrib.sites.admin',
               'django.contrib.sites.tests',
               'django.contrib.humanize',
               'django.contrib.humanize.templatetags',
               'django.contrib.humanize.templatetags.humanize',
               'django.contrib.messages.models',
               'django.contrib.messages',
               'django.contrib.messages.utils',
               'django.contrib.messages.middleware',
               'django.contrib.messages.constants',
               'django.contrib.messages.context_processors',
               'django.contrib.messages.api',
               'django.contrib.messages.storage.user_messages',
               'django.contrib.messages.storage',
               'django.contrib.messages.storage.cookie',
               'django.contrib.messages.storage.base',
               'django.contrib.messages.storage.session',
               'django.contrib.messages.storage.fallback',
               'django.contrib.messages.tests.user_messages',
               'django.contrib.messages.tests',
               'django.contrib.messages.tests.cookie',
               'django.contrib.messages.tests.base',
               'django.contrib.messages.tests.middleware',
               'django.contrib.messages.tests.session',
               'django.contrib.messages.tests.urls',
               'django.contrib.messages.tests.fallback',
               'django.contrib.admindocs.models',
               'django.contrib.admindocs.views',
               'django.contrib.admindocs',
               'django.contrib.admindocs.utils',
               'django.contrib.admindocs.urls',
               'django.contrib.admindocs.tests',
               'django.contrib.admindocs.tests.fields',
               'django.test.simple',
               'django.test',
               'django.test.utils',
               'django.test.client',
               'django.test._doctest',
               'django.test.signals',
               'django.test.testcases',
               'django.forms.models',
               'django.forms',
               'django.forms.forms',
               'django.forms.fields',
               'django.forms.util',
               'django.forms.widgets',
               'django.forms.formsets',
               'django.forms.extras',
               'django.forms.extras.widgets',
               'django.conf.global_settings',
               'django.conf',
               'django.conf.locale',
               'django.conf.locale.es_NI',
               'django.conf.locale.es_NI.formats',
               'django.conf.locale.sq',
               'django.conf.locale.sq.formats',
               'django.conf.locale.en',
               'django.conf.locale.en.formats',
               'django.conf.locale.ca',
               'django.conf.locale.ca.formats',
               'django.conf.locale.sv',
               'django.conf.locale.sv.formats',
               'django.conf.locale.eu',
               'django.conf.locale.eu.formats',
               'django.conf.locale.zh_TW',
               'django.conf.locale.zh_TW.formats',
               'django.conf.locale.et',
               'django.conf.locale.et.formats',
               'django.conf.locale.tr',
               'django.conf.locale.tr.formats',
               'django.conf.locale.bg',
               'django.conf.locale.bg.formats',
               'django.conf.locale.fi',
               'django.conf.locale.fi.formats',
               'django.conf.locale.el',
               'django.conf.locale.el.formats',
               'django.conf.locale.es',
               'django.conf.locale.es.formats',
               'django.conf.locale.nb',
               'django.conf.locale.nb.formats',
               'django.conf.locale.kn',
               'django.conf.locale.kn.formats',
               'django.conf.locale.da',
               'django.conf.locale.da.formats',
               'django.conf.locale.nl',
               'django.conf.locale.nl.formats',
               'django.conf.locale.hr',
               'django.conf.locale.hr.formats',
               'django.conf.locale.sr_Latn',
               'django.conf.locale.sr_Latn.formats',
               'formats',
               'django.conf.locale.de',
               'django.conf.locale.de.formats',
               'django.conf.locale.cs',
               'django.conf.locale.cs.formats',
               'django.conf.locale.te',
               'django.conf.locale.te.formats',
               'django.conf.locale.zh_CN',
               'django.conf.locale.zh_CN.formats',
               'django.conf.locale.lt',
               'django.conf.locale.lt.formats',
               'django.conf.locale.no',
               'django.conf.locale.no.formats',
               'django.conf.locale.ml',
               'django.conf.locale.ml.formats',
               'django.conf.locale.mk',
               'django.conf.locale.mk.formats',
               'django.conf.locale.uk',
               'django.conf.locale.uk.formats',
               'django.conf.locale.pt',
               'django.conf.locale.pt.formats',
               'django.conf.locale.it',
               'django.conf.locale.it.formats',
               'django.conf.locale.vi',
               'django.conf.locale.vi.formats',
               'django.conf.locale.pt_BR',
               'django.conf.locale.pt_BR.formats',
               'django.conf.locale.ta',
               'django.conf.locale.ta.formats',
               'django.conf.locale.id',
               'django.conf.locale.id.formats',
               'django.conf.locale.is',
               'django.conf.locale.is.formats',
               'django.conf.locale.ar',
               'django.conf.locale.ar.formats',
               'django.conf.locale.fy_NL',
               'django.conf.locale.fy_NL.formats',
               'django.conf.locale.ko',
               'django.conf.locale.ko.formats',
               'django.conf.locale.fa',
               'django.conf.locale.fa.formats',
               'django.conf.locale.ka',
               'django.conf.locale.ka.formats',
               'django.conf.locale.ja',
               'django.conf.locale.ja.formats',
               'django.conf.locale.ru',
               'django.conf.locale.ru.formats',
               'django.conf.locale.lv',
               'django.conf.locale.lv.formats',
               'django.conf.locale.sl',
               'django.conf.locale.sl.formats',
               'django.conf.locale.bn',
               'django.conf.locale.bn.formats',
               'django.conf.locale.nn',
               'django.conf.locale.nn.formats',
               'django.conf.locale.sk',
               'django.conf.locale.sk.formats',
               'django.conf.locale.ga',
               'django.conf.locale.ga.formats',
               'django.conf.locale.he',
               'django.conf.locale.he.formats',
               'django.conf.locale.hu',
               'django.conf.locale.hu.formats',
               'django.conf.locale.es_AR',
               'django.conf.locale.es_AR.formats',
               'django.conf.locale.bs',
               'django.conf.locale.bs.formats',
               'django.conf.locale.th',
               'django.conf.locale.th.formats',
               'django.conf.locale.cy',
               'django.conf.locale.cy.formats',
               'django.conf.locale.hi',
               'django.conf.locale.hi.formats',
               'django.conf.locale.pl',
               'django.conf.locale.pl.formats',
               'django.conf.locale.ro',
               'django.conf.locale.ro.formats',
               'django.conf.locale.km',
               'django.conf.locale.km.formats',
               'django.conf.locale.mn',
               'django.conf.locale.mn.formats',
               'django.conf.locale.en_GB',
               'django.conf.locale.en_GB.formats',
               'django.conf.locale.gl',
               'django.conf.locale.gl.formats',
               'django.conf.locale.fr',
               'django.conf.locale.fr.formats',
               'django.conf.locale.sr',
               'django.conf.locale.sr.formats',
               'django.conf.urls.shortcut',
               'django.conf.urls',
               'django.conf.urls.static',
               'django.conf.urls.defaults',
               'django.conf.urls.i18n',
               'django.conf.project_template',
               'django.conf.project_template.urls',
               'django.conf.project_template.manage',
               'django.conf.project_template.settings',
               'django.conf.app_template.models',
               'django.conf.app_template.views',
               'django.conf.app_template',
               'django.conf.app_template.tests',
               'django.template.debug',
               'django.template',
               'django.template.context',
               'django.template.smartif',
               'django.template.base',
               'django.template.defaultfilters',
               'django.template.defaulttags',
               'django.template.response',
               'django.template.loader',
               'django.template.loader_tags',
               'django.template.loaders.filesystem',
               'django.template.loaders',
               'django.template.loaders.cached',
               'django.template.loaders.eggs',
               'django.template.loaders.app_directories',
               'django.middleware.csrf',
               'django.middleware.doc',
               'django.middleware',
               'django.middleware.http',
               'django.middleware.common',
               'django.middleware.gzip',
               'django.middleware.locale',
               'django.middleware.transaction',
               'django.middleware.cache',
               'django.db',
               'django.db.utils',
               'django.db.transaction',
               'django.db.backends',
               'django.db.backends.creation',
               'django.db.backends.signals',
               'django.db.backends.util',
               'django.db.backends.postgresql',
               'django.db.backends.postgresql.introspection',
               'django.db.backends.postgresql.client',
               'django.db.backends.postgresql.base',
               'django.db.backends.postgresql.creation',
               'django.db.backends.postgresql.operations',
               'django.db.backends.postgresql.version',
               'django.db.backends.sqlite3',
               'django.db.backends.sqlite3.introspection',
               'django.db.backends.sqlite3.client',
               'django.db.backends.sqlite3.base',
               'django.db.backends.sqlite3.creation',
               'django.db.backends.oracle',
               'django.db.backends.oracle.compiler',
               'django.db.backends.oracle.introspection',
               'django.db.backends.oracle.client',
               'django.db.backends.oracle.base',
               'django.db.backends.oracle.creation',
               'django.db.backends.dummy',
               'django.db.backends.dummy.base',
               'django.db.backends.mysql',
               'django.db.backends.mysql.validation',
               'django.db.backends.mysql.compiler',
               'django.db.backends.mysql.introspection',
               'django.db.backends.mysql.client',
               'django.db.backends.mysql.base',
               'django.db.backends.mysql.creation',
               'django.db.backends.postgresql_psycopg2',
               'django.db.backends.postgresql_psycopg2.introspection',
               'django.db.backends.postgresql_psycopg2.base',
               'django.db.models.deletion',
               'django.db.models.related',
               'django.db.models.options',
               'django.db.models',
               'django.db.models.query',
               'django.db.models.aggregates',
               'django.db.models.loading',
               'django.db.models.query_utils',
               'django.db.models.manager',
               'django.db.models.base',
               'django.db.models.expressions',
               'django.db.models.signals',
               'django.db.models.sql.subqueries',
               'django.db.models.sql',
               'django.db.models.sql.query',
               'django.db.models.sql.compiler',
               'django.db.models.sql.datastructures',
               'django.db.models.sql.aggregates',
               'django.db.models.sql.expressions',
               'django.db.models.sql.where',
               'django.db.models.sql.constants',
               'django.db.models.fields.subclassing',
               'django.db.models.fields.related',
               'django.db.models.fields',
               'django.db.models.fields.proxy',
               'django.db.models.fields.files',
               'django.utils.timesince',
               'django.utils.decorators',
               'django.utils.text',
               'django.utils.autoreload',
               'django.utils.tzinfo',
               'django.utils.importlib',
               'django.utils.numberformat',
               'django.utils',
               'django.utils.http',
               'django.utils.formats',
               'django.utils.itercompat',
               'django.utils.dates',
               'django.utils.stopwords',
               'django.utils.functional',
               'django.utils.copycompat',
               'django.utils.datastructures',
               'django.utils.regex_helper',
               'django.utils.feedgenerator',
               'django.utils.safestring',
               'django.utils._threading_local',
               'django.utils.synch',
               'django.utils.xmlutils',
               'django.utils.datetime_safe',
               'django.utils.checksums',
               'django.utils.crypto',
               'django.utils.hashcompat',
               'django.utils.dictconfig',
               'django.utils._os',
               'django.utils.html',
               'django.utils.termcolors',
               'django.utils.dateformat',
               'django.utils.cache',
               'django.utils.version',
               'django.utils.daemonize',
               'django.utils.encoding',
               'django.utils.tree',
               'django.utils.module_loading',
               'django.utils.log',
               'django.utils.translation',
               'django.utils.translation.trans_real',
               'django.utils.translation.trans_null',
               'django.utils.simplejson.decoder',
               'django.utils.simplejson',
               'django.utils.simplejson.encoder',
               'django.utils.simplejson.tool',
               'django.utils.simplejson.scanner',
               'django.utils.unittest.collector',
               'django.utils.unittest.result',
               'django.utils.unittest',
               'django.utils.unittest.main',
               'django.utils.unittest.case',
               'django.utils.unittest.compatibility',
               'django.utils.unittest.__main__',
               'django.utils.unittest.loader',
               'django.utils.unittest.suite',
               'django.utils.unittest.signals',
               'django.utils.unittest.util',
               'django.utils.unittest.runner',
               'django.views.csrf',
               'django.views.debug',
               'django.views',
               'django.views.static',
               'django.views.defaults',
               'django.views.i18n',
               'django.views.decorators.csrf',
               'django.views.decorators',
               'django.views.decorators.http',
               'django.views.decorators.gzip',
               'django.views.decorators.cache',
               'django.views.decorators.vary',
               'django.views.generic.simple',
               'django.views.generic.detail',
               'django.views.generic',
               'django.views.generic.dates',
               'django.views.generic.edit',
               'django.views.generic.base',
               'django.views.generic.list',
               'django.views.generic.list_detail',
               'django.views.generic.create_update',
               'django.views.generic.date_based'],
 'POINTERS': {'compress.optparse': 'optparse',
              'compress.os': 'os',
              'compress.subprocess': 'subprocess',
              'compress.sys': 'sys',
              'django.bin.daily_cleanup.management': 'django.core.management',
              'django.bin.django-admin.management': 'django.core.management',
              'django.bin.profiling.gather_profile_stats.os': 'os',
              'django.bin.profiling.gather_profile_stats.pstats': 'pstats',
              'django.bin.profiling.gather_profile_stats.stats': 'hotshot.stats',
              'django.bin.profiling.gather_profile_stats.sys': 'sys',
              'django.bin.unique-messages.os': 'os',
              'django.bin.unique-messages.sys': 'sys',
              'django.conf.LazyObject': 'django.utils.functional.LazyObject',
              'django.conf.app_template.models.models': 'django.db.models',
              'django.conf.app_template.tests.TestCase': 'django.test.TestCase',
              'django.conf.global_settings': 'django.conf.global_settings',
              'django.conf.global_settings.get_version': 'django.get_version',
              'django.conf.importlib': 'django.utils.importlib',
              'django.conf.os': 'os',
              'django.conf.project_template.manage.execute_manager': 'django.core.management.execute_manager',
              'django.conf.project_template.manage.imp': 'imp',
              'django.conf.project_template.manage.settings': 'django.conf.project_template.settings',
              'django.conf.project_template.manage.sys': 'sys',
              'django.conf.project_template.urls.include': 'django.conf.urls.defaults.include',
              'django.conf.project_template.urls.patterns': 'django.conf.urls.defaults.patterns',
              'django.conf.project_template.urls.url': 'django.conf.urls.defaults.url',
              'django.conf.re': 're',
              'django.conf.time': 'time',
              'django.conf.urls.defaults.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.conf.urls.defaults.RegexURLPattern': 'django.core.urlresolvers.RegexURLPattern',
              'django.conf.urls.defaults.RegexURLResolver': 'django.core.urlresolvers.RegexURLResolver',
              'django.conf.urls.i18n.*': 'django.conf.urls.defaults.*',
              'django.conf.urls.shortcut.*': 'django.conf.urls.defaults.*',
              'django.conf.urls.static.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.conf.urls.static.patterns': 'django.conf.urls.defaults.patterns',
              'django.conf.urls.static.re': 're',
              'django.conf.urls.static.settings': 'django.conf.settings',
              'django.conf.urls.static.url': 'django.conf.urls.defaults.url',
              'django.conf.warnings': 'warnings',
              'django.contrib.admin.ACTION_CHECKBOX_NAME': 'django.contrib.admin.helpers.ACTION_CHECKBOX_NAME',
              'django.contrib.admin.AdminSite': 'django.contrib.admin.sites.AdminSite',
              'django.contrib.admin.HORIZONTAL': 'django.contrib.admin.options.HORIZONTAL',
              'django.contrib.admin.ModelAdmin': 'django.contrib.admin.options.ModelAdmin',
              'django.contrib.admin.StackedInline': 'django.contrib.admin.options.StackedInline',
              'django.contrib.admin.TabularInline': 'django.contrib.admin.options.TabularInline',
              'django.contrib.admin.VERTICAL': 'django.contrib.admin.options.VERTICAL',
              'django.contrib.admin.actions.PermissionDenied': 'django.core.exceptions.PermissionDenied',
              'django.contrib.admin.actions._': 'django.utils.translation.ugettext',
              'django.contrib.admin.actions.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.admin.actions.get_deleted_objects': 'django.contrib.admin.util.get_deleted_objects',
              'django.contrib.admin.actions.helpers': 'django.contrib.admin.helpers',
              'django.contrib.admin.actions.model_ngettext': 'django.contrib.admin.util.model_ngettext',
              'django.contrib.admin.actions.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.admin.actions.router': 'django.db.router',
              'django.contrib.admin.actions.template': 'django.template',
              'django.contrib.admin.actions.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'django.contrib.admin.copy': 'copy',
              'django.contrib.admin.filterspecs.EMPTY_CHANGELIST_VALUE': 'django.contrib.admin.views.main.EMPTY_CHANGELIST_VALUE',
              'django.contrib.admin.filterspecs._': 'django.utils.translation.ugettext',
              'django.contrib.admin.filterspecs.datetime': 'datetime',
              'django.contrib.admin.filterspecs.escape': 'django.utils.html.escape',
              'django.contrib.admin.filterspecs.get_limit_choices_to_from_path': 'django.contrib.admin.util.get_limit_choices_to_from_path',
              'django.contrib.admin.filterspecs.get_model_from_relation': 'django.contrib.admin.util.get_model_from_relation',
              'django.contrib.admin.filterspecs.iri_to_uri': 'django.utils.encoding.iri_to_uri',
              'django.contrib.admin.filterspecs.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.admin.filterspecs.models': 'django.db.models',
              'django.contrib.admin.filterspecs.reverse_field_path': 'django.contrib.admin.util.reverse_field_path',
              'django.contrib.admin.filterspecs.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.admin.forms.AuthenticationForm': 'django.contrib.auth.forms.AuthenticationForm',
              'django.contrib.admin.forms.User': 'django.contrib.auth.models.User',
              'django.contrib.admin.forms._': 'django.utils.translation.ugettext',
              'django.contrib.admin.forms.authenticate': 'django.contrib.auth.authenticate',
              'django.contrib.admin.forms.forms': 'django.forms',
              'django.contrib.admin.forms.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'django.contrib.admin.helpers.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.admin.helpers.DELETION_FIELD_NAME': 'django.forms.formsets.DELETION_FIELD_NAME',
              'django.contrib.admin.helpers.EMPTY_CHANGELIST_VALUE': 'django.contrib.admin.views.main.EMPTY_CHANGELIST_VALUE',
              'django.contrib.admin.helpers.ManyToManyRel': 'django.db.models.fields.related.ManyToManyRel',
              'django.contrib.admin.helpers.ORDERING_FIELD_NAME': 'django.forms.formsets.ORDERING_FIELD_NAME',
              'django.contrib.admin.helpers.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.contrib.admin.helpers._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.admin.helpers._boolean_icon': 'django.contrib.admin.templatetags.admin_list._boolean_icon',
              'django.contrib.admin.helpers.capfirst': 'django.template.defaultfilters.capfirst',
              'django.contrib.admin.helpers.conditional_escape': 'django.utils.html.conditional_escape',
              'django.contrib.admin.helpers.display_for_field': 'django.contrib.admin.util.display_for_field',
              'django.contrib.admin.helpers.escape': 'django.utils.html.escape',
              'django.contrib.admin.helpers.flatatt': 'django.forms.util.flatatt',
              'django.contrib.admin.helpers.flatten_fieldsets': 'django.contrib.admin.util.flatten_fieldsets',
              'django.contrib.admin.helpers.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.admin.helpers.forms': 'django.forms',
              'django.contrib.admin.helpers.help_text_for_field': 'django.contrib.admin.util.help_text_for_field',
              'django.contrib.admin.helpers.label_for_field': 'django.contrib.admin.util.label_for_field',
              'django.contrib.admin.helpers.lookup_field': 'django.contrib.admin.util.lookup_field',
              'django.contrib.admin.helpers.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.admin.helpers.settings': 'django.conf.settings',
              'django.contrib.admin.helpers.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.admin.import_module': 'django.utils.importlib.import_module',
              'django.contrib.admin.models.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.admin.models.User': 'django.contrib.auth.models.User',
              'django.contrib.admin.models._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.admin.models.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.admin.models.models': 'django.db.models',
              'django.contrib.admin.models.quote': 'django.contrib.admin.util.quote',
              'django.contrib.admin.models.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.admin.module_has_submodule': 'django.utils.module_loading.module_has_submodule',
              'django.contrib.admin.options.ADDITION': 'django.contrib.admin.models.ADDITION',
              'django.contrib.admin.options.BLANK_CHOICE_DASH': 'django.db.models.fields.BLANK_CHOICE_DASH',
              'django.contrib.admin.options.BaseInlineFormSet': 'django.forms.models.BaseInlineFormSet',
              'django.contrib.admin.options.CHANGE': 'django.contrib.admin.models.CHANGE',
              'django.contrib.admin.options.ChangeList': 'django.contrib.admin.views.main.ChangeList',
              'django.contrib.admin.options.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.admin.options.DELETION': 'django.contrib.admin.models.DELETION',
              'django.contrib.admin.options.ERROR_FLAG': 'django.contrib.admin.views.main.ERROR_FLAG',
              'django.contrib.admin.options.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.contrib.admin.options.Http404': 'django.http.Http404',
              'django.contrib.admin.options.HttpResponse': 'django.http.HttpResponse',
              'django.contrib.admin.options.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'django.contrib.admin.options.IS_POPUP_VAR': 'django.contrib.admin.views.main.IS_POPUP_VAR',
              'django.contrib.admin.options.LOOKUP_SEP': 'django.db.models.sql.constants.LOOKUP_SEP',
              'django.contrib.admin.options.LogEntry': 'django.contrib.admin.models.LogEntry',
              'django.contrib.admin.options.Paginator': 'django.core.paginator.Paginator',
              'django.contrib.admin.options.PermissionDenied': 'django.core.exceptions.PermissionDenied',
              'django.contrib.admin.options.QUERY_TERMS': 'django.db.models.sql.constants.QUERY_TERMS',
              'django.contrib.admin.options.RelatedObject': 'django.db.models.related.RelatedObject',
              'django.contrib.admin.options.SortedDict': 'django.utils.datastructures.SortedDict',
              'django.contrib.admin.options.ValidationError': 'django.core.exceptions.ValidationError',
              'django.contrib.admin.options._': 'django.utils.translation.ugettext',
              'django.contrib.admin.options.all_valid': 'django.forms.formsets.all_valid',
              'django.contrib.admin.options.capfirst': 'django.utils.text.capfirst',
              'django.contrib.admin.options.csrf_protect': 'django.views.decorators.csrf.csrf_protect',
              'django.contrib.admin.options.curry': 'django.utils.functional.curry',
              'django.contrib.admin.options.escape': 'django.utils.html.escape',
              'django.contrib.admin.options.escapejs': 'django.utils.html.escapejs',
              'django.contrib.admin.options.flatten_fieldsets': 'django.contrib.admin.util.flatten_fieldsets',
              'django.contrib.admin.options.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.admin.options.forms': 'django.forms',
              'django.contrib.admin.options.get_deleted_objects': 'django.contrib.admin.util.get_deleted_objects',
              'django.contrib.admin.options.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'django.contrib.admin.options.get_text_list': 'django.utils.text.get_text_list',
              'django.contrib.admin.options.helpers': 'django.contrib.admin.helpers',
              'django.contrib.admin.options.inlineformset_factory': 'django.forms.models.inlineformset_factory',
              'django.contrib.admin.options.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.admin.options.messages': 'django.contrib.messages',
              'django.contrib.admin.options.method_decorator': 'django.utils.decorators.method_decorator',
              'django.contrib.admin.options.model_format_dict': 'django.contrib.admin.util.model_format_dict',
              'django.contrib.admin.options.modelform_factory': 'django.forms.models.modelform_factory',
              'django.contrib.admin.options.modelformset_factory': 'django.forms.models.modelformset_factory',
              'django.contrib.admin.options.models': 'django.db.models',
              'django.contrib.admin.options.patterns': 'django.conf.urls.defaults.patterns',
              'django.contrib.admin.options.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.admin.options.router': 'django.db.router',
              'django.contrib.admin.options.settings': 'django.conf.settings',
              'django.contrib.admin.options.template': 'django.template',
              'django.contrib.admin.options.transaction': 'django.db.transaction',
              'django.contrib.admin.options.ungettext': 'django.utils.translation.ungettext',
              'django.contrib.admin.options.unquote': 'django.contrib.admin.util.unquote',
              'django.contrib.admin.options.update_wrapper': 'django.utils.functional.update_wrapper',
              'django.contrib.admin.options.url': 'django.conf.urls.defaults.url',
              'django.contrib.admin.options.widgets': 'django.contrib.admin.widgets',
              'django.contrib.admin.settings': 'django.conf.settings',
              'django.contrib.admin.site': 'django.contrib.admin.sites.site',
              'django.contrib.admin.sites.AdminAuthenticationForm': 'django.contrib.admin.forms.AdminAuthenticationForm',
              'django.contrib.admin.sites.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.admin.sites.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.admin.sites.LogEntry': 'django.contrib.admin.models.LogEntry',
              'django.contrib.admin.sites.ModelAdmin': 'django.contrib.admin.ModelAdmin',
              'django.contrib.admin.sites.ModelBase': 'django.db.models.base.ModelBase',
              'django.contrib.admin.sites.REDIRECT_FIELD_NAME': 'django.contrib.auth.REDIRECT_FIELD_NAME',
              'django.contrib.admin.sites._': 'django.utils.translation.ugettext',
              'django.contrib.admin.sites.actions': 'django.contrib.admin.actions',
              'django.contrib.admin.sites.capfirst': 'django.utils.text.capfirst',
              'django.contrib.admin.sites.contenttype_views': 'django.contrib.contenttypes.views',
              'django.contrib.admin.sites.csrf_protect': 'django.views.decorators.csrf.csrf_protect',
              'django.contrib.admin.sites.http': 'django.http',
              'django.contrib.admin.sites.include': 'django.conf.urls.defaults.include',
              'django.contrib.admin.sites.javascript_catalog': 'django.views.i18n.null_javascript_catalog',
              'django.contrib.admin.sites.login': 'django.contrib.auth.views.login',
              'django.contrib.admin.sites.logout': 'django.contrib.auth.views.logout',
              'django.contrib.admin.sites.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.admin.sites.never_cache': 'django.views.decorators.cache.never_cache',
              'django.contrib.admin.sites.password_change': 'django.contrib.auth.views.password_change',
              'django.contrib.admin.sites.password_change_done': 'django.contrib.auth.views.password_change_done',
              'django.contrib.admin.sites.patterns': 'django.conf.urls.defaults.patterns',
              'django.contrib.admin.sites.re': 're',
              'django.contrib.admin.sites.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.admin.sites.reverse': 'django.core.urlresolvers.reverse',
              'django.contrib.admin.sites.settings': 'django.conf.settings',
              'django.contrib.admin.sites.template': 'django.template',
              'django.contrib.admin.sites.update_wrapper': 'django.utils.functional.update_wrapper',
              'django.contrib.admin.sites.url': 'django.conf.urls.defaults.url',
              'django.contrib.admin.sites.validate': 'django.contrib.admin.validation.validate',
              'django.contrib.admin.templatetags.admin_list.ALL_VAR': 'django.contrib.admin.views.main.ALL_VAR',
              'django.contrib.admin.templatetags.admin_list.EMPTY_CHANGELIST_VALUE': 'django.contrib.admin.views.main.EMPTY_CHANGELIST_VALUE',
              'django.contrib.admin.templatetags.admin_list.Library': 'django.template.Library',
              'django.contrib.admin.templatetags.admin_list.ORDER_TYPE_VAR': 'django.contrib.admin.views.main.ORDER_TYPE_VAR',
              'django.contrib.admin.templatetags.admin_list.ORDER_VAR': 'django.contrib.admin.views.main.ORDER_VAR',
              'django.contrib.admin.templatetags.admin_list.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.contrib.admin.templatetags.admin_list.PAGE_VAR': 'django.contrib.admin.views.main.PAGE_VAR',
              'django.contrib.admin.templatetags.admin_list.SEARCH_VAR': 'django.contrib.admin.views.main.SEARCH_VAR',
              'django.contrib.admin.templatetags.admin_list._': 'django.utils.translation.ugettext',
              'django.contrib.admin.templatetags.admin_list.capfirst': 'django.utils.text.capfirst',
              'django.contrib.admin.templatetags.admin_list.conditional_escape': 'django.utils.html.conditional_escape',
              'django.contrib.admin.templatetags.admin_list.datetime': 'datetime',
              'django.contrib.admin.templatetags.admin_list.display_for_field': 'django.contrib.admin.util.display_for_field',
              'django.contrib.admin.templatetags.admin_list.escape': 'django.utils.html.escape',
              'django.contrib.admin.templatetags.admin_list.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.admin.templatetags.admin_list.formats': 'django.utils.formats',
              'django.contrib.admin.templatetags.admin_list.label_for_field': 'django.contrib.admin.util.label_for_field',
              'django.contrib.admin.templatetags.admin_list.lookup_field': 'django.contrib.admin.util.lookup_field',
              'django.contrib.admin.templatetags.admin_list.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.admin.templatetags.admin_list.models': 'django.db.models',
              'django.contrib.admin.templatetags.admin_list.settings': 'django.conf.settings',
              'django.contrib.admin.templatetags.admin_list.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.admin.templatetags.admin_modify.template': 'django.template',
              'django.contrib.admin.templatetags.adminmedia.Library': 'django.template.Library',
              'django.contrib.admin.templatetags.adminmedia.PrefixNode': 'django.templatetags.static.PrefixNode',
              'django.contrib.admin.templatetags.log.LogEntry': 'django.contrib.admin.models.LogEntry',
              'django.contrib.admin.templatetags.log.template': 'django.template',
              'django.contrib.admin.util.Collector': 'django.db.models.deletion.Collector',
              'django.contrib.admin.util.EMPTY_CHANGELIST_VALUE': 'django.contrib.admin.views.main.EMPTY_CHANGELIST_VALUE',
              'django.contrib.admin.util.LOOKUP_SEP': 'django.db.models.sql.constants.LOOKUP_SEP',
              'django.contrib.admin.util.RelatedObject': 'django.db.models.related.RelatedObject',
              'django.contrib.admin.util._boolean_icon': 'django.contrib.admin.templatetags.admin_list._boolean_icon',
              'django.contrib.admin.util.capfirst': 'django.utils.text.capfirst',
              'django.contrib.admin.util.escape': 'django.utils.html.escape',
              'django.contrib.admin.util.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.admin.util.formats': 'django.utils.formats',
              'django.contrib.admin.util.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.admin.util.models': 'django.db.models',
              'django.contrib.admin.util.pretty_name': 'django.forms.forms.pretty_name',
              'django.contrib.admin.util.reverse': 'django.core.urlresolvers.reverse',
              'django.contrib.admin.util.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.admin.util.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.admin.util.ungettext': 'django.utils.translation.ungettext',
              'django.contrib.admin.validation.BaseModelAdmin': 'django.contrib.admin.options.BaseModelAdmin',
              'django.contrib.admin.validation.BaseModelForm': 'django.forms.models.BaseModelForm',
              'django.contrib.admin.validation.BaseModelFormSet': 'django.forms.models.BaseModelFormSet',
              'django.contrib.admin.validation.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.contrib.admin.validation.HORIZONTAL': 'django.contrib.admin.options.HORIZONTAL',
              'django.contrib.admin.validation.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.admin.validation.NotRelationField': 'django.contrib.admin.util.NotRelationField',
              'django.contrib.admin.validation.VERTICAL': 'django.contrib.admin.options.VERTICAL',
              'django.contrib.admin.validation._get_foreign_key': 'django.forms.models._get_foreign_key',
              'django.contrib.admin.validation.fields_for_model': 'django.forms.models.fields_for_model',
              'django.contrib.admin.validation.flatten_fieldsets': 'django.contrib.admin.options.flatten_fieldsets',
              'django.contrib.admin.validation.get_fields_from_path': 'django.contrib.admin.util.get_fields_from_path',
              'django.contrib.admin.validation.models': 'django.db.models',
              'django.contrib.admin.views.decorators.AdminAuthenticationForm': 'django.contrib.admin.forms.AdminAuthenticationForm',
              'django.contrib.admin.views.decorators.REDIRECT_FIELD_NAME': 'django.contrib.auth.REDIRECT_FIELD_NAME',
              'django.contrib.admin.views.decorators._': 'django.utils.translation.ugettext',
              'django.contrib.admin.views.decorators.login': 'django.contrib.auth.views.login',
              'django.contrib.admin.views.decorators.wraps': 'django.utils.functional.wraps',
              'django.contrib.admin.views.main.FilterSpec': 'django.contrib.admin.filterspecs.FilterSpec',
              'django.contrib.admin.views.main.IncorrectLookupParameters': 'django.contrib.admin.options.IncorrectLookupParameters',
              'django.contrib.admin.views.main.InvalidPage': 'django.core.paginator.InvalidPage',
              'django.contrib.admin.views.main.SuspiciousOperation': 'django.core.exceptions.SuspiciousOperation',
              'django.contrib.admin.views.main.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.admin.views.main.get_fields_from_path': 'django.contrib.admin.util.get_fields_from_path',
              'django.contrib.admin.views.main.models': 'django.db.models',
              'django.contrib.admin.views.main.operator': 'operator',
              'django.contrib.admin.views.main.quote': 'django.contrib.admin.util.quote',
              'django.contrib.admin.views.main.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.admin.views.main.ugettext': 'django.utils.translation.ugettext',
              'django.contrib.admin.views.main.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'django.contrib.admin.views.main.urlencode': 'django.utils.http.urlencode',
              'django.contrib.admin.widgets.NoReverseMatch': 'django.core.urlresolvers.NoReverseMatch',
              'django.contrib.admin.widgets.RadioFieldRenderer': 'django.forms.widgets.RadioFieldRenderer',
              'django.contrib.admin.widgets.TO_FIELD_VAR': 'django.contrib.admin.views.main.TO_FIELD_VAR',
              'django.contrib.admin.widgets._': 'django.utils.translation.ugettext',
              'django.contrib.admin.widgets.copy': 'django.utils.copycompat',
              'django.contrib.admin.widgets.escape': 'django.utils.html.escape',
              'django.contrib.admin.widgets.flatatt': 'django.forms.util.flatatt',
              'django.contrib.admin.widgets.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.admin.widgets.forms': 'django.forms',
              'django.contrib.admin.widgets.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.admin.widgets.reverse': 'django.core.urlresolvers.reverse',
              'django.contrib.admin.widgets.settings': 'django.conf.settings',
              'django.contrib.admin.widgets.truncate_words': 'django.utils.text.truncate_words',
              'django.contrib.admindocs.tests.builtin_fields': 'django.db.models.fields',
              'django.contrib.admindocs.tests.fields': 'django.contrib.admindocs.tests.fields',
              'django.contrib.admindocs.tests.fields.models': 'django.db.models',
              'django.contrib.admindocs.tests.unittest': 'django.utils.unittest',
              'django.contrib.admindocs.tests.views': 'django.contrib.admindocs.views',
              'django.contrib.admindocs.urls.*': 'django.conf.urls.defaults.*',
              'django.contrib.admindocs.urls.views': 'django.contrib.admindocs.views',
              'django.contrib.admindocs.utils.HeaderParseError': 'email.Errors.HeaderParseError',
              'django.contrib.admindocs.utils.HeaderParser': 'email.Parser.HeaderParser',
              'django.contrib.admindocs.utils.docutils.core': 'docutils.core',
              'django.contrib.admindocs.utils.docutils.nodes': 'docutils.nodes',
              'django.contrib.admindocs.utils.docutils.parsers.rst.roles': 'docutils.parsers.rst.roles',
              'django.contrib.admindocs.utils.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.admindocs.utils.re': 're',
              'django.contrib.admindocs.utils.reverse': 'django.core.urlresolvers.reverse',
              'django.contrib.admindocs.utils.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.admindocs.views.Http404': 'django.http.Http404',
              'django.contrib.admindocs.views.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.admindocs.views.RequestContext': 'django.template.RequestContext',
              'django.contrib.admindocs.views.Site': 'django.contrib.sites.models.Site',
              'django.contrib.admindocs.views.ViewDoesNotExist': 'django.core.exceptions.ViewDoesNotExist',
              'django.contrib.admindocs.views._': 'django.utils.translation.ugettext',
              'django.contrib.admindocs.views.admin': 'django.contrib.admin',
              'django.contrib.admindocs.views.import_module': 'django.utils.importlib.import_module',
              'django.contrib.admindocs.views.inspect': 'inspect',
              'django.contrib.admindocs.views.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.admindocs.views.models': 'django.db.models',
              'django.contrib.admindocs.views.os': 'os',
              'django.contrib.admindocs.views.re': 're',
              'django.contrib.admindocs.views.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.admindocs.views.settings': 'django.conf.settings',
              'django.contrib.admindocs.views.staff_member_required': 'django.contrib.admin.views.decorators.staff_member_required',
              'django.contrib.admindocs.views.template': 'django.template',
              'django.contrib.admindocs.views.templatetags': 'django.templatetags',
              'django.contrib.admindocs.views.urlresolvers': 'django.core.urlresolvers',
              'django.contrib.admindocs.views.utils': 'django.contrib.admindocs.utils',
              'django.contrib.auth.AnonymousUser': 'django.contrib.auth.models.AnonymousUser',
              'django.contrib.auth.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.auth.admin.AdminPasswordChangeForm': 'django.contrib.auth.forms.AdminPasswordChangeForm',
              'django.contrib.auth.admin.Group': 'django.contrib.auth.models.Group',
              'django.contrib.auth.admin.Http404': 'django.http.Http404',
              'django.contrib.auth.admin.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'django.contrib.auth.admin.PermissionDenied': 'django.core.exceptions.PermissionDenied',
              'django.contrib.auth.admin.RequestContext': 'django.template.RequestContext',
              'django.contrib.auth.admin.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.admin.UserChangeForm': 'django.contrib.auth.forms.UserChangeForm',
              'django.contrib.auth.admin.UserCreationForm': 'django.contrib.auth.forms.UserCreationForm',
              'django.contrib.auth.admin._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.auth.admin.admin': 'django.contrib.admin',
              'django.contrib.auth.admin.csrf_protect': 'django.views.decorators.csrf.csrf_protect',
              'django.contrib.auth.admin.escape': 'django.utils.html.escape',
              'django.contrib.auth.admin.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'django.contrib.auth.admin.messages': 'django.contrib.messages',
              'django.contrib.auth.admin.method_decorator': 'django.utils.decorators.method_decorator',
              'django.contrib.auth.admin.patterns': 'django.conf.urls.defaults.patterns',
              'django.contrib.auth.admin.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.auth.admin.settings': 'django.conf.settings',
              'django.contrib.auth.admin.transaction': 'django.db.transaction',
              'django.contrib.auth.admin.ugettext': 'django.utils.translation.ugettext',
              'django.contrib.auth.backends.Permission': 'django.contrib.auth.models.Permission',
              'django.contrib.auth.backends.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.backends.connection': 'django.db.connection',
              'django.contrib.auth.context_processors.AnonymousUser': 'django.contrib.auth.models.AnonymousUser',
              'django.contrib.auth.context_processors.SimpleLazyObject': 'django.utils.functional.SimpleLazyObject',
              'django.contrib.auth.context_processors.lazy': 'django.utils.functional.lazy',
              'django.contrib.auth.context_processors.memoize': 'django.utils.functional.memoize',
              'django.contrib.auth.context_processors.messages': 'django.contrib.messages',
              'django.contrib.auth.create_superuser.call_command': 'django.core.management.call_command',
              'django.contrib.auth.datetime': 'datetime',
              'django.contrib.auth.decorators.REDIRECT_FIELD_NAME': 'django.contrib.auth.REDIRECT_FIELD_NAME',
              'django.contrib.auth.decorators.available_attrs': 'django.utils.decorators.available_attrs',
              'django.contrib.auth.decorators.redirect_to_login': 'django.contrib.auth.views.redirect_to_login',
              'django.contrib.auth.decorators.settings': 'django.conf.settings',
              'django.contrib.auth.decorators.urlparse': 'urlparse',
              'django.contrib.auth.decorators.wraps': 'django.utils.functional.wraps',
              'django.contrib.auth.forms.Context': 'django.template.Context',
              'django.contrib.auth.forms.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.auth.forms.authenticate': 'django.contrib.auth.authenticate',
              'django.contrib.auth.forms.default_token_generator': 'django.contrib.auth.tokens.default_token_generator',
              'django.contrib.auth.forms.forms': 'django.forms',
              'django.contrib.auth.forms.get_current_site': 'django.contrib.sites.models.get_current_site',
              'django.contrib.auth.forms.int_to_base36': 'django.utils.http.int_to_base36',
              'django.contrib.auth.forms.loader': 'django.template.loader',
              'django.contrib.auth.forms.send_mail': 'django.core.mail.send_mail',
              'django.contrib.auth.handlers.modpython.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.handlers.modpython.apache': 'mod_python.apache',
              'django.contrib.auth.handlers.modpython.db': 'django.db',
              'django.contrib.auth.handlers.modpython.os': 'os',
              'django.contrib.auth.import_module': 'django.utils.importlib.import_module',
              'django.contrib.auth.management.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.auth.management.auth_app': 'django.contrib.auth.models',
              'django.contrib.auth.management.call_command': 'django.core.management.call_command',
              'django.contrib.auth.management.commands.changepassword.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.contrib.auth.management.commands.changepassword.CommandError': 'django.core.management.base.CommandError',
              'django.contrib.auth.management.commands.changepassword.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.management.commands.changepassword.getpass': 'getpass',
              'django.contrib.auth.management.commands.createsuperuser.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.contrib.auth.management.commands.createsuperuser.CommandError': 'django.core.management.base.CommandError',
              'django.contrib.auth.management.commands.createsuperuser.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.management.commands.createsuperuser._': 'django.utils.translation.ugettext',
              'django.contrib.auth.management.commands.createsuperuser.exceptions': 'django.core.exceptions',
              'django.contrib.auth.management.commands.createsuperuser.getpass': 'getpass',
              'django.contrib.auth.management.commands.createsuperuser.make_option': 'optparse.make_option',
              'django.contrib.auth.management.commands.createsuperuser.re': 're',
              'django.contrib.auth.management.commands.createsuperuser.sys': 'sys',
              'django.contrib.auth.management.get_models': 'django.db.models.get_models',
              'django.contrib.auth.management.signals': 'django.db.models.signals',
              'django.contrib.auth.middleware.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.auth.middleware.auth': 'django.contrib.auth',
              'django.contrib.auth.middleware.get_user': 'django.contrib.auth.get_user',
              'django.contrib.auth.models.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.auth.models.EmptyManager': 'django.db.models.manager.EmptyManager',
              'django.contrib.auth.models.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.auth.models._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.auth.models.auth': 'django.contrib.auth',
              'django.contrib.auth.models.choice': 'random.choice',
              'django.contrib.auth.models.constant_time_compare': 'django.utils.crypto.constant_time_compare',
              'django.contrib.auth.models.crypt': 'crypt',
              'django.contrib.auth.models.datetime': 'datetime',
              'django.contrib.auth.models.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.contrib.auth.models.models': 'django.db.models',
              'django.contrib.auth.models.random': 'random',
              'django.contrib.auth.models.send_mail': 'django.core.mail.send_mail',
              'django.contrib.auth.models.settings': 'django.conf.settings',
              'django.contrib.auth.models.sha_constructor': 'django.utils.hashcompat.sha_constructor',
              'django.contrib.auth.models.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.auth.models.urllib': 'urllib',
              'django.contrib.auth.models.user_logged_in': 'django.contrib.auth.signals.user_logged_in',
              'django.contrib.auth.models.warnings': 'warnings',
              'django.contrib.auth.settings': 'django.conf.settings',
              'django.contrib.auth.signals.Signal': 'django.dispatch.Signal',
              'django.contrib.auth.tests.AnonymousUserBackendTest': 'django.contrib.auth.tests.auth_backends.AnonymousUserBackendTest',
              'django.contrib.auth.tests.AuthenticationFormTest': 'django.contrib.auth.tests.forms.AuthenticationFormTest',
              'django.contrib.auth.tests.BackendTest': 'django.contrib.auth.tests.auth_backends.BackendTest',
              'django.contrib.auth.tests.BasicTestCase': 'django.contrib.auth.tests.basic.BasicTestCase',
              'django.contrib.auth.tests.ChangePasswordTest': 'django.contrib.auth.tests.views.ChangePasswordTest',
              'django.contrib.auth.tests.InActiveUserBackendTest': 'django.contrib.auth.tests.auth_backends.InActiveUserBackendTest',
              'django.contrib.auth.tests.LoginRequiredTestCase': 'django.contrib.auth.tests.decorators.LoginRequiredTestCase',
              'django.contrib.auth.tests.LoginTest': 'django.contrib.auth.tests.views.LoginTest',
              'django.contrib.auth.tests.LoginURLSettings': 'django.contrib.auth.tests.views.LoginURLSettings',
              'django.contrib.auth.tests.LogoutTest': 'django.contrib.auth.tests.views.LogoutTest',
              'django.contrib.auth.tests.NoAnonymousUserBackendTest': 'django.contrib.auth.tests.auth_backends.NoAnonymousUserBackendTest',
              'django.contrib.auth.tests.NoBackendsTest': 'django.contrib.auth.tests.auth_backends.NoBackendsTest',
              'django.contrib.auth.tests.NoInActiveUserBackendTest': 'django.contrib.auth.tests.auth_backends.NoInActiveUserBackendTest',
              'django.contrib.auth.tests.PasswordChangeFormTest': 'django.contrib.auth.tests.forms.PasswordChangeFormTest',
              'django.contrib.auth.tests.PasswordResetFormTest': 'django.contrib.auth.tests.forms.PasswordResetFormTest',
              'django.contrib.auth.tests.PasswordResetTest': 'django.contrib.auth.tests.views.PasswordResetTest',
              'django.contrib.auth.tests.ProfileTestCase': 'django.contrib.auth.tests.models.ProfileTestCase',
              'django.contrib.auth.tests.RemoteUserCustomTest': 'django.contrib.auth.tests.remote_user.RemoteUserCustomTest',
              'django.contrib.auth.tests.RemoteUserNoCreateTest': 'django.contrib.auth.tests.remote_user.RemoteUserNoCreateTest',
              'django.contrib.auth.tests.RemoteUserTest': 'django.contrib.auth.tests.remote_user.RemoteUserTest',
              'django.contrib.auth.tests.RowlevelBackendTest': 'django.contrib.auth.tests.auth_backends.RowlevelBackendTest',
              'django.contrib.auth.tests.SetPasswordFormTest': 'django.contrib.auth.tests.forms.SetPasswordFormTest',
              'django.contrib.auth.tests.SignalTestCase': 'django.contrib.auth.tests.signals.SignalTestCase',
              'django.contrib.auth.tests.TestAuthPermissions': 'django.contrib.auth.tests.permissions.TestAuthPermissions',
              'django.contrib.auth.tests.TokenGeneratorTest': 'django.contrib.auth.tests.tokens.TokenGeneratorTest',
              'django.contrib.auth.tests.UserChangeFormTest': 'django.contrib.auth.tests.forms.UserChangeFormTest',
              'django.contrib.auth.tests.UserCreationFormTest': 'django.contrib.auth.tests.forms.UserCreationFormTest',
              'django.contrib.auth.tests.auth_backends.AnonymousUser': 'django.contrib.auth.models.AnonymousUser',
              'django.contrib.auth.tests.auth_backends.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.auth.tests.auth_backends.Group': 'django.contrib.auth.models.Group',
              'django.contrib.auth.tests.auth_backends.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.auth.tests.auth_backends.Permission': 'django.contrib.auth.models.Permission',
              'django.contrib.auth.tests.auth_backends.TestCase': 'django.test.TestCase',
              'django.contrib.auth.tests.auth_backends.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.tests.auth_backends.settings': 'django.conf.settings',
              'django.contrib.auth.tests.auth_backends.warnings': 'warnings',
              'django.contrib.auth.tests.basic.AnonymousUser': 'django.contrib.auth.models.AnonymousUser',
              'django.contrib.auth.tests.basic.StringIO': 'StringIO.StringIO',
              'django.contrib.auth.tests.basic.TestCase': 'django.test.TestCase',
              'django.contrib.auth.tests.basic.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.tests.basic.call_command': 'django.core.management.call_command',
              'django.contrib.auth.tests.decorators.AuthViewsTestCase': 'django.contrib.auth.tests.views.AuthViewsTestCase',
              'django.contrib.auth.tests.decorators.login_required': 'django.contrib.auth.decorators.login_required',
              'django.contrib.auth.tests.decorators.settings': 'django.conf.settings',
              'django.contrib.auth.tests.forms.AuthenticationForm': 'django.contrib.auth.forms.AuthenticationForm',
              'django.contrib.auth.tests.forms.PasswordChangeForm': 'django.contrib.auth.forms.PasswordChangeForm',
              'django.contrib.auth.tests.forms.PasswordResetForm': 'django.contrib.auth.forms.PasswordResetForm',
              'django.contrib.auth.tests.forms.SetPasswordForm': 'django.contrib.auth.forms.SetPasswordForm',
              'django.contrib.auth.tests.forms.TestCase': 'django.test.TestCase',
              'django.contrib.auth.tests.forms.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.tests.forms.UserChangeForm': 'django.contrib.auth.forms.UserChangeForm',
              'django.contrib.auth.tests.forms.UserCreationForm': 'django.contrib.auth.forms.UserCreationForm',
              'django.contrib.auth.tests.models.SiteProfileNotAvailable': 'django.contrib.auth.models.SiteProfileNotAvailable',
              'django.contrib.auth.tests.models.TestCase': 'django.test.TestCase',
              'django.contrib.auth.tests.models.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.tests.models.settings': 'django.conf.settings',
              'django.contrib.auth.tests.permissions.StringIO': 'StringIO.StringIO',
              'django.contrib.auth.tests.permissions.TestCase': 'django.test.TestCase',
              'django.contrib.auth.tests.permissions.auth_models': 'django.contrib.auth.models',
              'django.contrib.auth.tests.permissions.call_command': 'django.core.management.call_command',
              'django.contrib.auth.tests.permissions.contenttypes_models': 'django.contrib.contenttypes.models',
              'django.contrib.auth.tests.permissions.create_permissions': 'django.contrib.auth.management.create_permissions',
              'django.contrib.auth.tests.remote_user.RemoteUserBackend': 'django.contrib.auth.backends.RemoteUserBackend',
              'django.contrib.auth.tests.remote_user.TestCase': 'django.test.TestCase',
              'django.contrib.auth.tests.remote_user.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.tests.remote_user.datetime': 'datetime.datetime',
              'django.contrib.auth.tests.remote_user.settings': 'django.conf.settings',
              'django.contrib.auth.tests.signals.TestCase': 'django.test.TestCase',
              'django.contrib.auth.tests.signals.signals': 'django.contrib.auth.signals',
              'django.contrib.auth.tests.tokens.AnonymousUser': 'django.contrib.auth.models.AnonymousUser',
              'django.contrib.auth.tests.tokens.PasswordResetTokenGenerator': 'django.contrib.auth.tokens.PasswordResetTokenGenerator',
              'django.contrib.auth.tests.tokens.TestCase': 'django.test.TestCase',
              'django.contrib.auth.tests.tokens.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.tests.tokens.date': 'datetime.date',
              'django.contrib.auth.tests.tokens.int_to_base36': 'django.utils.http.int_to_base36',
              'django.contrib.auth.tests.tokens.settings': 'django.conf.settings',
              'django.contrib.auth.tests.tokens.sha_constructor': 'django.utils.hashcompat.sha_constructor',
              'django.contrib.auth.tests.tokens.timedelta': 'datetime.timedelta',
              'django.contrib.auth.tests.urls.HttpResponse': 'django.http.HttpResponse',
              'django.contrib.auth.tests.urls.RequestContext': 'django.template.RequestContext',
              'django.contrib.auth.tests.urls.Template': 'django.template.Template',
              'django.contrib.auth.tests.urls.login_required': 'django.contrib.auth.decorators.login_required',
              'django.contrib.auth.tests.urls.never_cache': 'django.views.decorators.cache.never_cache',
              'django.contrib.auth.tests.urls.password_reset': 'django.contrib.auth.views.password_reset',
              'django.contrib.auth.tests.urls.patterns': 'django.conf.urls.defaults.patterns',
              'django.contrib.auth.tests.urls.urlpatterns': 'django.contrib.auth.urls.urlpatterns',
              'django.contrib.auth.tests.views.AuthenticationForm': 'django.contrib.auth.forms.AuthenticationForm',
              'django.contrib.auth.tests.views.QueryDict': 'django.http.QueryDict',
              'django.contrib.auth.tests.views.REDIRECT_FIELD_NAME': 'django.contrib.auth.REDIRECT_FIELD_NAME',
              'django.contrib.auth.tests.views.RequestSite': 'django.contrib.sites.models.RequestSite',
              'django.contrib.auth.tests.views.SESSION_KEY': 'django.contrib.auth.SESSION_KEY',
              'django.contrib.auth.tests.views.Site': 'django.contrib.sites.models.Site',
              'django.contrib.auth.tests.views.TestCase': 'django.test.TestCase',
              'django.contrib.auth.tests.views.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.tests.views.mail': 'django.core.mail',
              'django.contrib.auth.tests.views.os': 'os',
              'django.contrib.auth.tests.views.re': 're',
              'django.contrib.auth.tests.views.reverse': 'django.core.urlresolvers.reverse',
              'django.contrib.auth.tests.views.settings': 'django.conf.settings',
              'django.contrib.auth.tests.views.urllib': 'urllib',
              'django.contrib.auth.tokens.base36_to_int': 'django.utils.http.base36_to_int',
              'django.contrib.auth.tokens.constant_time_compare': 'django.utils.crypto.constant_time_compare',
              'django.contrib.auth.tokens.date': 'datetime.date',
              'django.contrib.auth.tokens.int_to_base36': 'django.utils.http.int_to_base36',
              'django.contrib.auth.tokens.salted_hmac': 'django.utils.crypto.salted_hmac',
              'django.contrib.auth.tokens.settings': 'django.conf.settings',
              'django.contrib.auth.tokens.sha_constructor': 'django.utils.hashcompat.sha_constructor',
              'django.contrib.auth.urls.*': 'django.conf.urls.defaults.*',
              'django.contrib.auth.user_logged_in': 'django.contrib.auth.signals.user_logged_in',
              'django.contrib.auth.user_logged_out': 'django.contrib.auth.signals.user_logged_out',
              'django.contrib.auth.views.AuthenticationForm': 'django.contrib.auth.forms.AuthenticationForm',
              'django.contrib.auth.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'django.contrib.auth.views.PasswordChangeForm': 'django.contrib.auth.forms.PasswordChangeForm',
              'django.contrib.auth.views.PasswordResetForm': 'django.contrib.auth.forms.PasswordResetForm',
              'django.contrib.auth.views.QueryDict': 'django.http.QueryDict',
              'django.contrib.auth.views.REDIRECT_FIELD_NAME': 'django.contrib.auth.REDIRECT_FIELD_NAME',
              'django.contrib.auth.views.RequestContext': 'django.template.RequestContext',
              'django.contrib.auth.views.SetPasswordForm': 'django.contrib.auth.forms.SetPasswordForm',
              'django.contrib.auth.views.User': 'django.contrib.auth.models.User',
              'django.contrib.auth.views._': 'django.utils.translation.ugettext',
              'django.contrib.auth.views.auth_login': 'django.contrib.auth.login',
              'django.contrib.auth.views.auth_logout': 'django.contrib.auth.logout',
              'django.contrib.auth.views.base36_to_int': 'django.utils.http.base36_to_int',
              'django.contrib.auth.views.csrf_protect': 'django.views.decorators.csrf.csrf_protect',
              'django.contrib.auth.views.default_token_generator': 'django.contrib.auth.tokens.default_token_generator',
              'django.contrib.auth.views.get_current_site': 'django.contrib.sites.models.get_current_site',
              'django.contrib.auth.views.login_required': 'django.contrib.auth.decorators.login_required',
              'django.contrib.auth.views.never_cache': 'django.views.decorators.cache.never_cache',
              'django.contrib.auth.views.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.auth.views.reverse': 'django.core.urlresolvers.reverse',
              'django.contrib.auth.views.settings': 'django.conf.settings',
              'django.contrib.auth.views.urlparse': 'urlparse',
              'django.contrib.auth.warn': 'warnings.warn',
              'django.contrib.comments.Comment': 'django.contrib.comments.models.Comment',
              'django.contrib.comments.CommentForm': 'django.contrib.comments.forms.CommentForm',
              'django.contrib.comments.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.comments.admin.Comment': 'django.contrib.comments.models.Comment',
              'django.contrib.comments.admin._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.comments.admin.admin': 'django.contrib.admin',
              'django.contrib.comments.admin.get_model': 'django.contrib.comments.get_model',
              'django.contrib.comments.admin.perform_approve': 'django.contrib.comments.views.moderation.perform_approve',
              'django.contrib.comments.admin.perform_delete': 'django.contrib.comments.views.moderation.perform_delete',
              'django.contrib.comments.admin.perform_flag': 'django.contrib.comments.views.moderation.perform_flag',
              'django.contrib.comments.admin.ungettext': 'django.utils.translation.ungettext',
              'django.contrib.comments.feeds.Feed': 'django.contrib.syndication.views.Feed',
              'django.contrib.comments.feeds.Site': 'django.contrib.sites.models.Site',
              'django.contrib.comments.feeds._': 'django.utils.translation.ugettext',
              'django.contrib.comments.feeds.comments': 'django.contrib.comments',
              'django.contrib.comments.feeds.settings': 'django.conf.settings',
              'django.contrib.comments.forms.Comment': 'django.contrib.comments.models.Comment',
              'django.contrib.comments.forms.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.comments.forms.ErrorDict': 'django.forms.util.ErrorDict',
              'django.contrib.comments.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.comments.forms.constant_time_compare': 'django.utils.crypto.constant_time_compare',
              'django.contrib.comments.forms.datetime': 'datetime',
              'django.contrib.comments.forms.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.comments.forms.forms': 'django.forms',
              'django.contrib.comments.forms.get_text_list': 'django.utils.text.get_text_list',
              'django.contrib.comments.forms.salted_hmac': 'django.utils.crypto.salted_hmac',
              'django.contrib.comments.forms.settings': 'django.conf.settings',
              'django.contrib.comments.forms.sha_constructor': 'django.utils.hashcompat.sha_constructor',
              'django.contrib.comments.forms.time': 'time',
              'django.contrib.comments.forms.ungettext': 'django.utils.translation.ungettext',
              'django.contrib.comments.import_module': 'django.utils.importlib.import_module',
              'django.contrib.comments.managers.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.comments.managers.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.comments.managers.models': 'django.db.models',
              'django.contrib.comments.models.CommentManager': 'django.contrib.comments.managers.CommentManager',
              'django.contrib.comments.models.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.comments.models.Site': 'django.contrib.sites.models.Site',
              'django.contrib.comments.models.User': 'django.contrib.auth.models.User',
              'django.contrib.comments.models._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.comments.models.datetime': 'datetime',
              'django.contrib.comments.models.generic': 'django.contrib.contenttypes.generic',
              'django.contrib.comments.models.models': 'django.db.models',
              'django.contrib.comments.models.settings': 'django.conf.settings',
              'django.contrib.comments.models.urlresolvers': 'django.core.urlresolvers',
              'django.contrib.comments.moderation.Context': 'django.template.Context',
              'django.contrib.comments.moderation.ModelBase': 'django.db.models.base.ModelBase',
              'django.contrib.comments.moderation.Site': 'django.contrib.sites.models.Site',
              'django.contrib.comments.moderation.comments': 'django.contrib.comments',
              'django.contrib.comments.moderation.datetime': 'datetime',
              'django.contrib.comments.moderation.loader': 'django.template.loader',
              'django.contrib.comments.moderation.send_mail': 'django.core.mail.send_mail',
              'django.contrib.comments.moderation.settings': 'django.conf.settings',
              'django.contrib.comments.moderation.signals': 'django.contrib.comments.signals',
              'django.contrib.comments.settings': 'django.conf.settings',
              'django.contrib.comments.signals.Signal': 'django.dispatch.Signal',
              'django.contrib.comments.templatetags.comments.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.comments.templatetags.comments.comments': 'django.contrib.comments',
              'django.contrib.comments.templatetags.comments.render_to_string': 'django.template.loader.render_to_string',
              'django.contrib.comments.templatetags.comments.settings': 'django.conf.settings',
              'django.contrib.comments.templatetags.comments.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.comments.templatetags.comments.template': 'django.template',
              'django.contrib.comments.urlresolvers': 'django.core.urlresolvers',
              'django.contrib.comments.urls.*': 'django.conf.urls.defaults.*',
              'django.contrib.comments.views.comments.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.contrib.comments.views.comments.RequestContext': 'django.template.RequestContext',
              'django.contrib.comments.views.comments.ValidationError': 'django.core.exceptions.ValidationError',
              'django.contrib.comments.views.comments.comments': 'django.contrib.comments',
              'django.contrib.comments.views.comments.confirmation_view': 'django.contrib.comments.views.utils.confirmation_view',
              'django.contrib.comments.views.comments.csrf_protect': 'django.views.decorators.csrf.csrf_protect',
              'django.contrib.comments.views.comments.escape': 'django.utils.html.escape',
              'django.contrib.comments.views.comments.http': 'django.http',
              'django.contrib.comments.views.comments.models': 'django.db.models',
              'django.contrib.comments.views.comments.next_redirect': 'django.contrib.comments.views.utils.next_redirect',
              'django.contrib.comments.views.comments.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.comments.views.comments.render_to_string': 'django.template.loader.render_to_string',
              'django.contrib.comments.views.comments.require_POST': 'django.views.decorators.http.require_POST',
              'django.contrib.comments.views.comments.settings': 'django.conf.settings',
              'django.contrib.comments.views.comments.signals': 'django.contrib.comments.signals',
              'django.contrib.comments.views.moderation.comments': 'django.contrib.comments',
              'django.contrib.comments.views.moderation.confirmation_view': 'django.contrib.comments.views.utils.confirmation_view',
              'django.contrib.comments.views.moderation.csrf_protect': 'django.views.decorators.csrf.csrf_protect',
              'django.contrib.comments.views.moderation.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'django.contrib.comments.views.moderation.login_required': 'django.contrib.auth.decorators.login_required',
              'django.contrib.comments.views.moderation.next_redirect': 'django.contrib.comments.views.utils.next_redirect',
              'django.contrib.comments.views.moderation.permission_required': 'django.contrib.auth.decorators.permission_required',
              'django.contrib.comments.views.moderation.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.comments.views.moderation.settings': 'django.conf.settings',
              'django.contrib.comments.views.moderation.signals': 'django.contrib.comments.signals',
              'django.contrib.comments.views.moderation.template': 'django.template',
              'django.contrib.comments.views.utils.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'django.contrib.comments.views.utils.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.contrib.comments.views.utils.RequestContext': 'django.template.RequestContext',
              'django.contrib.comments.views.utils.comments': 'django.contrib.comments',
              'django.contrib.comments.views.utils.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.comments.views.utils.textwrap': 'textwrap',
              'django.contrib.comments.views.utils.urllib': 'urllib',
              'django.contrib.comments.views.utils.urlresolvers': 'django.core.urlresolvers',
              'django.contrib.contenttypes.generic.BaseModelFormSet': 'django.forms.models.BaseModelFormSet',
              'django.contrib.contenttypes.generic.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.contenttypes.generic.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.contrib.contenttypes.generic.Field': 'django.db.models.fields.related.Field',
              'django.contrib.contenttypes.generic.InlineModelAdmin': 'django.contrib.admin.options.InlineModelAdmin',
              'django.contrib.contenttypes.generic.ManyToManyRel': 'django.db.models.fields.related.ManyToManyRel',
              'django.contrib.contenttypes.generic.ModelForm': 'django.forms.ModelForm',
              'django.contrib.contenttypes.generic.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.contrib.contenttypes.generic.RelatedField': 'django.db.models.fields.related.RelatedField',
              'django.contrib.contenttypes.generic.connection': 'django.db.connection',
              'django.contrib.contenttypes.generic.curry': 'django.utils.functional.curry',
              'django.contrib.contenttypes.generic.flatten_fieldsets': 'django.contrib.admin.options.flatten_fieldsets',
              'django.contrib.contenttypes.generic.get_model': 'django.db.models.loading.get_model',
              'django.contrib.contenttypes.generic.modelformset_factory': 'django.forms.models.modelformset_factory',
              'django.contrib.contenttypes.generic.models': 'django.db.models',
              'django.contrib.contenttypes.generic.router': 'django.db.router',
              'django.contrib.contenttypes.generic.save_instance': 'django.forms.models.save_instance',
              'django.contrib.contenttypes.generic.signals': 'django.db.models.signals',
              'django.contrib.contenttypes.generic.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.contenttypes.management.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.contenttypes.management.get_apps': 'django.db.models.get_apps',
              'django.contrib.contenttypes.management.get_models': 'django.db.models.get_models',
              'django.contrib.contenttypes.management.signals': 'django.db.models.signals',
              'django.contrib.contenttypes.management.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.contenttypes.models._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.contenttypes.models.models': 'django.db.models',
              'django.contrib.contenttypes.models.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.contenttypes.tests.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.contenttypes.tests.HttpRequest': 'django.http.HttpRequest',
              'django.contrib.contenttypes.tests.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.contrib.contenttypes.tests.Site': 'django.contrib.sites.models.Site',
              'django.contrib.contenttypes.tests.TestCase': 'django.test.TestCase',
              'django.contrib.contenttypes.tests.User': 'django.contrib.auth.models.User',
              'django.contrib.contenttypes.tests.db': 'django.db',
              'django.contrib.contenttypes.tests.settings': 'django.conf.settings',
              'django.contrib.contenttypes.tests.shortcut': 'django.contrib.contenttypes.views.shortcut',
              'django.contrib.contenttypes.views.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'django.contrib.contenttypes.views.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.contrib.contenttypes.views.Site': 'django.contrib.sites.models.Site',
              'django.contrib.contenttypes.views.get_current_site': 'django.contrib.sites.models.get_current_site',
              'django.contrib.contenttypes.views.http': 'django.http',
              'django.contrib.csrf.middleware.CsrfMiddleware': 'django.middleware.csrf.CsrfMiddleware',
              'django.contrib.csrf.middleware.CsrfResponseMiddleware': 'django.middleware.csrf.CsrfResponseMiddleware',
              'django.contrib.csrf.middleware.CsrfViewMiddleware': 'django.middleware.csrf.CsrfViewMiddleware',
              'django.contrib.csrf.middleware.csrf_exempt': 'django.views.decorators.csrf.csrf_exempt',
              'django.contrib.csrf.middleware.csrf_response_exempt': 'django.views.decorators.csrf.csrf_response_exempt',
              'django.contrib.csrf.middleware.csrf_view_exempt': 'django.views.decorators.csrf.csrf_view_exempt',
              'django.contrib.csrf.middleware.warnings': 'warnings',
              'django.contrib.databrowse.DatabrowsePlugin': 'django.contrib.databrowse.sites.DatabrowsePlugin',
              'django.contrib.databrowse.DatabrowseSite': 'django.contrib.databrowse.sites.DatabrowseSite',
              'django.contrib.databrowse.ModelDatabrowse': 'django.contrib.databrowse.sites.ModelDatabrowse',
              'django.contrib.databrowse.datastructures.QuerySet': 'django.db.models.query.QuerySet',
              'django.contrib.databrowse.datastructures.capfirst': 'django.utils.text.capfirst',
              'django.contrib.databrowse.datastructures.formats': 'django.utils.formats',
              'django.contrib.databrowse.datastructures.iri_to_uri': 'django.utils.encoding.iri_to_uri',
              'django.contrib.databrowse.datastructures.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.databrowse.datastructures.models': 'django.db.models',
              'django.contrib.databrowse.datastructures.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.databrowse.datastructures.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.databrowse.plugins.calendars.DatabrowsePlugin': 'django.contrib.databrowse.sites.DatabrowsePlugin',
              'django.contrib.databrowse.plugins.calendars.EasyModel': 'django.contrib.databrowse.datastructures.EasyModel',
              'django.contrib.databrowse.plugins.calendars.capfirst': 'django.utils.text.capfirst',
              'django.contrib.databrowse.plugins.calendars.date_based': 'django.views.generic.date_based',
              'django.contrib.databrowse.plugins.calendars.datetime_safe': 'django.utils.datetime_safe',
              'django.contrib.databrowse.plugins.calendars.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.databrowse.plugins.calendars.http': 'django.http',
              'django.contrib.databrowse.plugins.calendars.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.databrowse.plugins.calendars.models': 'django.db.models',
              'django.contrib.databrowse.plugins.calendars.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.databrowse.plugins.fieldchoices.DatabrowsePlugin': 'django.contrib.databrowse.sites.DatabrowsePlugin',
              'django.contrib.databrowse.plugins.fieldchoices.EasyModel': 'django.contrib.databrowse.datastructures.EasyModel',
              'django.contrib.databrowse.plugins.fieldchoices.capfirst': 'django.utils.text.capfirst',
              'django.contrib.databrowse.plugins.fieldchoices.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.databrowse.plugins.fieldchoices.http': 'django.http',
              'django.contrib.databrowse.plugins.fieldchoices.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.databrowse.plugins.fieldchoices.models': 'django.db.models',
              'django.contrib.databrowse.plugins.fieldchoices.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.databrowse.plugins.fieldchoices.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.databrowse.plugins.fieldchoices.urllib': 'urllib',
              'django.contrib.databrowse.plugins.objects.DatabrowsePlugin': 'django.contrib.databrowse.sites.DatabrowsePlugin',
              'django.contrib.databrowse.plugins.objects.EasyModel': 'django.contrib.databrowse.datastructures.EasyModel',
              'django.contrib.databrowse.plugins.objects.http': 'django.http',
              'django.contrib.databrowse.plugins.objects.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.databrowse.plugins.objects.urlparse': 'urlparse',
              'django.contrib.databrowse.site': 'django.contrib.databrowse.sites.site',
              'django.contrib.databrowse.sites.CalendarPlugin': 'django.contrib.databrowse.plugins.calendars.CalendarPlugin',
              'django.contrib.databrowse.sites.EasyModel': 'django.contrib.databrowse.datastructures.EasyModel',
              'django.contrib.databrowse.sites.FieldChoicePlugin': 'django.contrib.databrowse.plugins.fieldchoices.FieldChoicePlugin',
              'django.contrib.databrowse.sites.ObjectDetailPlugin': 'django.contrib.databrowse.plugins.objects.ObjectDetailPlugin',
              'django.contrib.databrowse.sites.http': 'django.http',
              'django.contrib.databrowse.sites.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.databrowse.sites.models': 'django.db.models',
              'django.contrib.databrowse.sites.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.databrowse.urls.*': 'django.conf.urls.defaults.*',
              'django.contrib.databrowse.urls.views': 'django.contrib.databrowse.views',
              'django.contrib.databrowse.views.Http404': 'django.http.Http404',
              'django.contrib.databrowse.views.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.flatpages.admin.FlatPage': 'django.contrib.flatpages.models.FlatPage',
              'django.contrib.flatpages.admin._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.flatpages.admin.admin': 'django.contrib.admin',
              'django.contrib.flatpages.admin.forms': 'django.forms',
              'django.contrib.flatpages.middleware.Http404': 'django.http.Http404',
              'django.contrib.flatpages.middleware.flatpage': 'django.contrib.flatpages.views.flatpage',
              'django.contrib.flatpages.middleware.settings': 'django.conf.settings',
              'django.contrib.flatpages.models.Site': 'django.contrib.sites.models.Site',
              'django.contrib.flatpages.models._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.flatpages.models.models': 'django.db.models',
              'django.contrib.flatpages.templatetags.flatpages.FlatPage': 'django.contrib.flatpages.models.FlatPage',
              'django.contrib.flatpages.templatetags.flatpages.settings': 'django.conf.settings',
              'django.contrib.flatpages.templatetags.flatpages.template': 'django.template',
              'django.contrib.flatpages.tests.*': 'django.contrib.flatpages.tests.views.*',
              'django.contrib.flatpages.tests.csrf.Client': 'django.test.Client',
              'django.contrib.flatpages.tests.csrf.TestCase': 'django.test.TestCase',
              'django.contrib.flatpages.tests.csrf.User': 'django.contrib.auth.models.User',
              'django.contrib.flatpages.tests.csrf.os': 'os',
              'django.contrib.flatpages.tests.csrf.settings': 'django.conf.settings',
              'django.contrib.flatpages.tests.forms.FlatpageForm': 'django.contrib.flatpages.admin.FlatpageForm',
              'django.contrib.flatpages.tests.forms.TestCase': 'django.test.TestCase',
              'django.contrib.flatpages.tests.forms.settings': 'django.conf.settings',
              'django.contrib.flatpages.tests.middleware.TestCase': 'django.test.TestCase',
              'django.contrib.flatpages.tests.middleware.User': 'django.contrib.auth.models.User',
              'django.contrib.flatpages.tests.middleware.os': 'os',
              'django.contrib.flatpages.tests.middleware.settings': 'django.conf.settings',
              'django.contrib.flatpages.tests.templatetags.AnonymousUser': 'django.contrib.auth.models.AnonymousUser',
              'django.contrib.flatpages.tests.templatetags.Context': 'django.template.Context',
              'django.contrib.flatpages.tests.templatetags.Template': 'django.template.Template',
              'django.contrib.flatpages.tests.templatetags.TemplateSyntaxError': 'django.template.TemplateSyntaxError',
              'django.contrib.flatpages.tests.templatetags.TestCase': 'django.test.TestCase',
              'django.contrib.flatpages.tests.templatetags.User': 'django.contrib.auth.models.User',
              'django.contrib.flatpages.tests.templatetags.os': 'os',
              'django.contrib.flatpages.tests.templatetags.settings': 'django.conf.settings',
              'django.contrib.flatpages.tests.urls.*': 'django.conf.urls.defaults.*',
              'django.contrib.flatpages.tests.views.FlatPage': 'django.contrib.flatpages.models.FlatPage',
              'django.contrib.flatpages.tests.views.TestCase': 'django.test.TestCase',
              'django.contrib.flatpages.tests.views.User': 'django.contrib.auth.models.User',
              'django.contrib.flatpages.tests.views.os': 'os',
              'django.contrib.flatpages.tests.views.settings': 'django.conf.settings',
              'django.contrib.flatpages.urls.*': 'django.conf.urls.defaults.*',
              'django.contrib.flatpages.views.FlatPage': 'django.contrib.flatpages.models.FlatPage',
              'django.contrib.flatpages.views.HttpResponse': 'django.http.HttpResponse',
              'django.contrib.flatpages.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'django.contrib.flatpages.views.RequestContext': 'django.template.RequestContext',
              'django.contrib.flatpages.views.csrf_protect': 'django.views.decorators.csrf.csrf_protect',
              'django.contrib.flatpages.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'django.contrib.flatpages.views.loader': 'django.template.loader',
              'django.contrib.flatpages.views.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.flatpages.views.populate_xheaders': 'django.core.xheaders.populate_xheaders',
              'django.contrib.flatpages.views.redirect_to_login': 'django.contrib.auth.views.redirect_to_login',
              'django.contrib.flatpages.views.settings': 'django.conf.settings',
              'django.contrib.formtools.preview.Http404': 'django.http.Http404',
              'django.contrib.formtools.preview.RequestContext': 'django.template.context.RequestContext',
              'django.contrib.formtools.preview.constant_time_compare': 'django.utils.crypto.constant_time_compare',
              'django.contrib.formtools.preview.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.contrib.formtools.preview.pickle': 'cPickle',
              'django.contrib.formtools.preview.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.formtools.preview.security_hash': 'django.contrib.formtools.utils.security_hash',
              'django.contrib.formtools.preview.settings': 'django.conf.settings',
              'django.contrib.formtools.tests.TestCase': 'django.test.TestCase',
              'django.contrib.formtools.tests.forms': 'django.forms',
              'django.contrib.formtools.tests.http': 'django.http',
              'django.contrib.formtools.tests.os': 'os',
              'django.contrib.formtools.tests.preview': 'django.contrib.formtools.preview',
              'django.contrib.formtools.tests.settings': 'django.conf.settings',
              'django.contrib.formtools.tests.unittest': 'django.utils.unittest',
              'django.contrib.formtools.tests.urls.*': 'django.contrib.formtools.tests.*',
              'django.contrib.formtools.tests.utils': 'django.contrib.formtools.utils',
              'django.contrib.formtools.tests.wizard': 'django.contrib.formtools.wizard',
              'django.contrib.formtools.utils.BooleanField': 'django.forms.BooleanField',
              'django.contrib.formtools.utils.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.contrib.formtools.utils.pickle': 'pickle',
              'django.contrib.formtools.utils.salted_hmac': 'django.utils.crypto.salted_hmac',
              'django.contrib.formtools.utils.settings': 'django.conf.settings',
              'django.contrib.formtools.utils.warnings': 'warnings',
              'django.contrib.formtools.wizard.Http404': 'django.http.Http404',
              'django.contrib.formtools.wizard.RequestContext': 'django.template.context.RequestContext',
              'django.contrib.formtools.wizard._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.formtools.wizard.constant_time_compare': 'django.utils.crypto.constant_time_compare',
              'django.contrib.formtools.wizard.csrf_protect': 'django.views.decorators.csrf.csrf_protect',
              'django.contrib.formtools.wizard.form_hmac': 'django.contrib.formtools.utils.form_hmac',
              'django.contrib.formtools.wizard.forms': 'django.forms',
              'django.contrib.formtools.wizard.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.contrib.formtools.wizard.method_decorator': 'django.utils.decorators.method_decorator',
              'django.contrib.formtools.wizard.pickle': 'cPickle',
              'django.contrib.formtools.wizard.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.formtools.wizard.security_hash': 'django.contrib.formtools.utils.security_hash',
              'django.contrib.formtools.wizard.settings': 'django.conf.settings',
              'django.contrib.gis.admin.AdminSite': 'django.contrib.admin.AdminSite',
              'django.contrib.gis.admin.GeoModelAdmin': 'django.contrib.gis.admin.options.GeoModelAdmin',
              'django.contrib.gis.admin.HORIZONTAL': 'django.contrib.admin.HORIZONTAL',
              'django.contrib.gis.admin.ModelAdmin': 'django.contrib.admin.ModelAdmin',
              'django.contrib.gis.admin.OSMGeoAdmin': 'django.contrib.gis.admin.options.OSMGeoAdmin',
              'django.contrib.gis.admin.OpenLayersWidget': 'django.contrib.gis.admin.widgets.OpenLayersWidget',
              'django.contrib.gis.admin.StackedInline': 'django.contrib.admin.StackedInline',
              'django.contrib.gis.admin.TabularInline': 'django.contrib.admin.TabularInline',
              'django.contrib.gis.admin.VERTICAL': 'django.contrib.admin.VERTICAL',
              'django.contrib.gis.admin.autodiscover': 'django.contrib.admin.autodiscover',
              'django.contrib.gis.admin.options.ModelAdmin': 'django.contrib.admin.ModelAdmin',
              'django.contrib.gis.admin.options.OGRGeomType': 'django.contrib.gis.gdal.OGRGeomType',
              'django.contrib.gis.admin.options.OpenLayersWidget': 'django.contrib.gis.admin.widgets.OpenLayersWidget',
              'django.contrib.gis.admin.options.gdal': 'django.contrib.gis.gdal',
              'django.contrib.gis.admin.options.models': 'django.contrib.gis.db.models',
              'django.contrib.gis.admin.options.settings': 'django.conf.settings',
              'django.contrib.gis.admin.site': 'django.contrib.admin.site',
              'django.contrib.gis.admin.widgets.Context': 'django.template.Context',
              'django.contrib.gis.admin.widgets.GEOSException': 'django.contrib.gis.geos.GEOSException',
              'django.contrib.gis.admin.widgets.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.admin.widgets.OGRException': 'django.contrib.gis.gdal.OGRException',
              'django.contrib.gis.admin.widgets.Textarea': 'django.forms.widgets.Textarea',
              'django.contrib.gis.admin.widgets.loader': 'django.template.loader',
              'django.contrib.gis.admin.widgets.settings': 'django.conf.settings',
              'django.contrib.gis.admin.widgets.translation': 'django.utils.translation',
              'django.contrib.gis.db.backend.connection': 'django.db.connection',
              'django.contrib.gis.db.backend.warn': 'warnings.warn',
              'django.contrib.gis.db.backends.base.gdal': 'django.contrib.gis.gdal',
              'django.contrib.gis.db.backends.base.re': 're',
              'django.contrib.gis.db.backends.base.settings': 'django.conf.settings',
              'django.contrib.gis.db.backends.mysql.base.*': 'django.db.backends.mysql.base.*',
              'django.contrib.gis.db.backends.mysql.base.MySQLCreation': 'django.contrib.gis.db.backends.mysql.creation.MySQLCreation',
              'django.contrib.gis.db.backends.mysql.base.MySQLDatabaseWrapper': 'django.db.backends.mysql.base.DatabaseWrapper',
              'django.contrib.gis.db.backends.mysql.base.MySQLIntrospection': 'django.contrib.gis.db.backends.mysql.introspection.MySQLIntrospection',
              'django.contrib.gis.db.backends.mysql.base.MySQLOperations': 'django.contrib.gis.db.backends.mysql.operations.MySQLOperations',
              'django.contrib.gis.db.backends.mysql.creation.DatabaseCreation': 'django.db.backends.mysql.creation.DatabaseCreation',
              'django.contrib.gis.db.backends.mysql.creation.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.db.backends.mysql.introspection.DatabaseIntrospection': 'django.db.backends.mysql.introspection.DatabaseIntrospection',
              'django.contrib.gis.db.backends.mysql.introspection.FIELD_TYPE': 'MySQLdb.constants.FIELD_TYPE',
              'django.contrib.gis.db.backends.mysql.introspection.OGRGeomType': 'django.contrib.gis.gdal.OGRGeomType',
              'django.contrib.gis.db.backends.mysql.operations.BaseSpatialOperations': 'django.contrib.gis.db.backends.base.BaseSpatialOperations',
              'django.contrib.gis.db.backends.mysql.operations.DatabaseOperations': 'django.db.backends.mysql.base.DatabaseOperations',
              'django.contrib.gis.db.backends.mysql.operations.WKTAdapter': 'django.contrib.gis.db.backends.adapter.WKTAdapter',
              'django.contrib.gis.db.backends.oracle.adapter.CLOB': 'cx_Oracle.CLOB',
              'django.contrib.gis.db.backends.oracle.adapter.WKTAdapter': 'django.contrib.gis.db.backends.adapter.WKTAdapter',
              'django.contrib.gis.db.backends.oracle.base.*': 'django.db.backends.oracle.base.*',
              'django.contrib.gis.db.backends.oracle.base.OracleCreation': 'django.contrib.gis.db.backends.oracle.creation.OracleCreation',
              'django.contrib.gis.db.backends.oracle.base.OracleDatabaseWrapper': 'django.db.backends.oracle.base.DatabaseWrapper',
              'django.contrib.gis.db.backends.oracle.base.OracleIntrospection': 'django.contrib.gis.db.backends.oracle.introspection.OracleIntrospection',
              'django.contrib.gis.db.backends.oracle.base.OracleOperations': 'django.contrib.gis.db.backends.oracle.operations.OracleOperations',
              'django.contrib.gis.db.backends.oracle.compiler.BaseGeoSQLCompiler': 'django.contrib.gis.db.models.sql.compiler.GeoSQLCompiler',
              'django.contrib.gis.db.backends.oracle.compiler.compiler': 'django.db.backends.oracle.compiler',
              'django.contrib.gis.db.backends.oracle.creation.DatabaseCreation': 'django.db.backends.oracle.creation.DatabaseCreation',
              'django.contrib.gis.db.backends.oracle.creation.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.db.backends.oracle.creation.truncate_name': 'django.db.backends.util.truncate_name',
              'django.contrib.gis.db.backends.oracle.introspection.DatabaseIntrospection': 'django.db.backends.oracle.introspection.DatabaseIntrospection',
              'django.contrib.gis.db.backends.oracle.introspection.cx_Oracle': 'cx_Oracle',
              'django.contrib.gis.db.backends.oracle.models.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.db.backends.oracle.models.SpatialRefSysMixin': 'django.contrib.gis.db.backends.base.SpatialRefSysMixin',
              'django.contrib.gis.db.backends.oracle.models.models': 'django.contrib.gis.db.models',
              'django.contrib.gis.db.backends.oracle.operations.BaseSpatialOperations': 'django.contrib.gis.db.backends.base.BaseSpatialOperations',
              'django.contrib.gis.db.backends.oracle.operations.DatabaseOperations': 'django.db.backends.oracle.base.DatabaseOperations',
              'django.contrib.gis.db.backends.oracle.operations.Decimal': 'decimal.Decimal',
              'django.contrib.gis.db.backends.oracle.operations.Distance': 'django.contrib.gis.measure.Distance',
              'django.contrib.gis.db.backends.oracle.operations.Geometry': 'django.contrib.gis.geometry.backend.Geometry',
              'django.contrib.gis.db.backends.oracle.operations.GeometryColumns': 'django.contrib.gis.db.backends.oracle.models.GeometryColumns',
              'django.contrib.gis.db.backends.oracle.operations.OracleSpatialAdapter': 'django.contrib.gis.db.backends.oracle.adapter.OracleSpatialAdapter',
              'django.contrib.gis.db.backends.oracle.operations.SpatialFunction': 'django.contrib.gis.db.backends.util.SpatialFunction',
              'django.contrib.gis.db.backends.oracle.operations.SpatialRefSys': 'django.contrib.gis.db.backends.oracle.models.SpatialRefSys',
              'django.contrib.gis.db.backends.oracle.operations.re': 're',
              'django.contrib.gis.db.backends.postgis.adapter.Binary': 'psycopg2.Binary',
              'django.contrib.gis.db.backends.postgis.adapter.ISQLQuote': 'psycopg2.extensions.ISQLQuote',
              'django.contrib.gis.db.backends.postgis.base.*': 'django.db.backends.postgresql_psycopg2.base.*',
              'django.contrib.gis.db.backends.postgis.base.PostGISCreation': 'django.contrib.gis.db.backends.postgis.creation.PostGISCreation',
              'django.contrib.gis.db.backends.postgis.base.PostGISIntrospection': 'django.contrib.gis.db.backends.postgis.introspection.PostGISIntrospection',
              'django.contrib.gis.db.backends.postgis.base.PostGISOperations': 'django.contrib.gis.db.backends.postgis.operations.PostGISOperations',
              'django.contrib.gis.db.backends.postgis.base.Psycopg2DatabaseWrapper': 'django.db.backends.postgresql_psycopg2.base.DatabaseWrapper',
              'django.contrib.gis.db.backends.postgis.creation.DatabaseCreation': 'django.db.backends.postgresql.creation.DatabaseCreation',
              'django.contrib.gis.db.backends.postgis.creation.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.db.backends.postgis.creation.settings': 'django.conf.settings',
              'django.contrib.gis.db.backends.postgis.introspection.DatabaseIntrospection': 'django.db.backends.postgresql_psycopg2.introspection.DatabaseIntrospection',
              'django.contrib.gis.db.backends.postgis.introspection.OGRGeomType': 'django.contrib.gis.gdal.OGRGeomType',
              'django.contrib.gis.db.backends.postgis.models.SpatialRefSysMixin': 'django.contrib.gis.db.backends.base.SpatialRefSysMixin',
              'django.contrib.gis.db.backends.postgis.models.models': 'django.db.models',
              'django.contrib.gis.db.backends.postgis.operations.BaseSpatialOperations': 'django.contrib.gis.db.backends.base.BaseSpatialOperations',
              'django.contrib.gis.db.backends.postgis.operations.DatabaseError': 'django.db.utils.DatabaseError',
              'django.contrib.gis.db.backends.postgis.operations.DatabaseOperations': 'django.db.backends.postgresql_psycopg2.base.DatabaseOperations',
              'django.contrib.gis.db.backends.postgis.operations.Decimal': 'decimal.Decimal',
              'django.contrib.gis.db.backends.postgis.operations.Distance': 'django.contrib.gis.measure.Distance',
              'django.contrib.gis.db.backends.postgis.operations.Geometry': 'django.contrib.gis.geometry.backend.Geometry',
              'django.contrib.gis.db.backends.postgis.operations.GeometryColumns': 'django.contrib.gis.db.backends.postgis.models.GeometryColumns',
              'django.contrib.gis.db.backends.postgis.operations.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.gis.db.backends.postgis.operations.PostGISAdapter': 'django.contrib.gis.db.backends.postgis.adapter.PostGISAdapter',
              'django.contrib.gis.db.backends.postgis.operations.SpatialFunction': 'django.contrib.gis.db.backends.util.SpatialFunction',
              'django.contrib.gis.db.backends.postgis.operations.SpatialOperation': 'django.contrib.gis.db.backends.util.SpatialOperation',
              'django.contrib.gis.db.backends.postgis.operations.SpatialRefSys': 'django.contrib.gis.db.backends.postgis.models.SpatialRefSys',
              'django.contrib.gis.db.backends.postgis.operations.re': 're',
              'django.contrib.gis.db.backends.postgis.operations.settings': 'django.conf.settings',
              'django.contrib.gis.db.backends.spatialite.adapter.Database': 'django.db.backends.sqlite3.base.Database',
              'django.contrib.gis.db.backends.spatialite.adapter.WKTAdapter': 'django.contrib.gis.db.backends.adapter.WKTAdapter',
              'django.contrib.gis.db.backends.spatialite.base.*': 'django.db.backends.sqlite3.base.*',
              'django.contrib.gis.db.backends.spatialite.base.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.gis.db.backends.spatialite.base.SpatiaLiteClient': 'django.contrib.gis.db.backends.spatialite.client.SpatiaLiteClient',
              'django.contrib.gis.db.backends.spatialite.base.SpatiaLiteCreation': 'django.contrib.gis.db.backends.spatialite.creation.SpatiaLiteCreation',
              'django.contrib.gis.db.backends.spatialite.base.SpatiaLiteIntrospection': 'django.contrib.gis.db.backends.spatialite.introspection.SpatiaLiteIntrospection',
              'django.contrib.gis.db.backends.spatialite.base.SpatiaLiteOperations': 'django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations',
              'django.contrib.gis.db.backends.spatialite.base.SqliteDatabaseWrapper': 'django.db.backends.sqlite3.base.DatabaseWrapper',
              'django.contrib.gis.db.backends.spatialite.base._sqlite_date_trunc': 'django.db.backends.sqlite3.base._sqlite_date_trunc',
              'django.contrib.gis.db.backends.spatialite.base._sqlite_extract': 'django.db.backends.sqlite3.base._sqlite_extract',
              'django.contrib.gis.db.backends.spatialite.base._sqlite_regexp': 'django.db.backends.sqlite3.base._sqlite_regexp',
              'django.contrib.gis.db.backends.spatialite.base.find_library': 'ctypes.util.find_library',
              'django.contrib.gis.db.backends.spatialite.base.settings': 'django.conf.settings',
              'django.contrib.gis.db.backends.spatialite.client.DatabaseClient': 'django.db.backends.sqlite3.client.DatabaseClient',
              'django.contrib.gis.db.backends.spatialite.creation.BaseDatabaseCache': 'django.core.cache.backends.db.BaseDatabaseCache',
              'django.contrib.gis.db.backends.spatialite.creation.DatabaseCreation': 'django.db.backends.sqlite3.creation.DatabaseCreation',
              'django.contrib.gis.db.backends.spatialite.creation.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.db.backends.spatialite.creation.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.gis.db.backends.spatialite.creation.call_command': 'django.core.management.call_command',
              'django.contrib.gis.db.backends.spatialite.creation.get_cache': 'django.core.cache.get_cache',
              'django.contrib.gis.db.backends.spatialite.creation.os': 'os',
              'django.contrib.gis.db.backends.spatialite.creation.router': 'django.db.router',
              'django.contrib.gis.db.backends.spatialite.creation.settings': 'django.conf.settings',
              'django.contrib.gis.db.backends.spatialite.introspection.DatabaseIntrospection': 'django.db.backends.sqlite3.introspection.DatabaseIntrospection',
              'django.contrib.gis.db.backends.spatialite.introspection.FlexibleFieldLookupDict': 'django.db.backends.sqlite3.introspection.FlexibleFieldLookupDict',
              'django.contrib.gis.db.backends.spatialite.introspection.OGRGeomType': 'django.contrib.gis.gdal.OGRGeomType',
              'django.contrib.gis.db.backends.spatialite.models.SpatialRefSysMixin': 'django.contrib.gis.db.backends.base.SpatialRefSysMixin',
              'django.contrib.gis.db.backends.spatialite.models.SpatialReference': 'django.contrib.gis.gdal.SpatialReference',
              'django.contrib.gis.db.backends.spatialite.models.models': 'django.db.models',
              'django.contrib.gis.db.backends.spatialite.operations.BaseSpatialOperations': 'django.contrib.gis.db.backends.base.BaseSpatialOperations',
              'django.contrib.gis.db.backends.spatialite.operations.DatabaseError': 'django.db.utils.DatabaseError',
              'django.contrib.gis.db.backends.spatialite.operations.DatabaseOperations': 'django.db.backends.sqlite3.base.DatabaseOperations',
              'django.contrib.gis.db.backends.spatialite.operations.Decimal': 'decimal.Decimal',
              'django.contrib.gis.db.backends.spatialite.operations.Distance': 'django.contrib.gis.measure.Distance',
              'django.contrib.gis.db.backends.spatialite.operations.Geometry': 'django.contrib.gis.geometry.backend.Geometry',
              'django.contrib.gis.db.backends.spatialite.operations.GeometryColumns': 'django.contrib.gis.db.backends.spatialite.models.GeometryColumns',
              'django.contrib.gis.db.backends.spatialite.operations.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteAdapter': 'django.contrib.gis.db.backends.spatialite.adapter.SpatiaLiteAdapter',
              'django.contrib.gis.db.backends.spatialite.operations.SpatialFunction': 'django.contrib.gis.db.backends.util.SpatialFunction',
              'django.contrib.gis.db.backends.spatialite.operations.SpatialOperation': 'django.contrib.gis.db.backends.util.SpatialOperation',
              'django.contrib.gis.db.backends.spatialite.operations.SpatialRefSys': 'django.contrib.gis.db.backends.spatialite.models.SpatialRefSys',
              'django.contrib.gis.db.backends.spatialite.operations.re': 're',
              'django.contrib.gis.db.models.*': 'django.contrib.gis.db.models.aggregates.*',
              'django.contrib.gis.db.models.GeoManager': 'django.contrib.gis.db.models.manager.GeoManager',
              'django.contrib.gis.db.models.GeometryCollectionField': 'django.contrib.gis.db.models.fields.GeometryCollectionField',
              'django.contrib.gis.db.models.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.db.models.LineStringField': 'django.contrib.gis.db.models.fields.LineStringField',
              'django.contrib.gis.db.models.MultiLineStringField': 'django.contrib.gis.db.models.fields.MultiLineStringField',
              'django.contrib.gis.db.models.MultiPointField': 'django.contrib.gis.db.models.fields.MultiPointField',
              'django.contrib.gis.db.models.MultiPolygonField': 'django.contrib.gis.db.models.fields.MultiPolygonField',
              'django.contrib.gis.db.models.PointField': 'django.contrib.gis.db.models.fields.PointField',
              'django.contrib.gis.db.models.PolygonField': 'django.contrib.gis.db.models.fields.PolygonField',
              'django.contrib.gis.db.models.aggregates.Aggregate': 'django.db.models.Aggregate',
              'django.contrib.gis.db.models.aggregates.GeomField': 'django.contrib.gis.db.models.sql.GeomField',
              'django.contrib.gis.db.models.fields.Field': 'django.db.models.fields.Field',
              'django.contrib.gis.db.models.fields.Geometry': 'django.contrib.gis.geometry.backend.Geometry',
              'django.contrib.gis.db.models.fields.GeometryException': 'django.contrib.gis.geometry.backend.GeometryException',
              'django.contrib.gis.db.models.fields.GeometryProxy': 'django.contrib.gis.db.models.proxy.GeometryProxy',
              'django.contrib.gis.db.models.fields.SQLEvaluator': 'django.db.models.sql.expressions.SQLEvaluator',
              'django.contrib.gis.db.models.fields._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.gis.db.models.fields.forms': 'django.contrib.gis.forms',
              'django.contrib.gis.db.models.manager.GeoQuerySet': 'django.contrib.gis.db.models.query.GeoQuerySet',
              'django.contrib.gis.db.models.manager.Manager': 'django.db.models.manager.Manager',
              'django.contrib.gis.db.models.query.Area': 'django.contrib.gis.measure.Area',
              'django.contrib.gis.db.models.query.AreaField': 'django.contrib.gis.db.models.sql.AreaField',
              'django.contrib.gis.db.models.query.Distance': 'django.contrib.gis.measure.Distance',
              'django.contrib.gis.db.models.query.DistanceField': 'django.contrib.gis.db.models.sql.DistanceField',
              'django.contrib.gis.db.models.query.GeoQuery': 'django.contrib.gis.db.models.sql.GeoQuery',
              'django.contrib.gis.db.models.query.GeoWhereNode': 'django.contrib.gis.db.models.sql.GeoWhereNode',
              'django.contrib.gis.db.models.query.GeomField': 'django.contrib.gis.db.models.sql.GeomField',
              'django.contrib.gis.db.models.query.Geometry': 'django.contrib.gis.geometry.backend.Geometry',
              'django.contrib.gis.db.models.query.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.db.models.query.LineStringField': 'django.contrib.gis.db.models.fields.LineStringField',
              'django.contrib.gis.db.models.query.PointField': 'django.contrib.gis.db.models.fields.PointField',
              'django.contrib.gis.db.models.query.Q': 'django.db.models.query.Q',
              'django.contrib.gis.db.models.query.QuerySet': 'django.db.models.query.QuerySet',
              'django.contrib.gis.db.models.query.ValuesListQuerySet': 'django.db.models.query.ValuesListQuerySet',
              'django.contrib.gis.db.models.query.ValuesQuerySet': 'django.db.models.query.ValuesQuerySet',
              'django.contrib.gis.db.models.query.aggregates': 'django.contrib.gis.db.models.aggregates',
              'django.contrib.gis.db.models.query.connections': 'django.db.connections',
              'django.contrib.gis.db.models.query.get_srid_info': 'django.contrib.gis.db.models.fields.get_srid_info',
              'django.contrib.gis.db.models.sql.AreaField': 'django.contrib.gis.db.models.sql.conversion.AreaField',
              'django.contrib.gis.db.models.sql.DistanceField': 'django.contrib.gis.db.models.sql.conversion.DistanceField',
              'django.contrib.gis.db.models.sql.GeoQuery': 'django.contrib.gis.db.models.sql.query.GeoQuery',
              'django.contrib.gis.db.models.sql.GeoWhereNode': 'django.contrib.gis.db.models.sql.where.GeoWhereNode',
              'django.contrib.gis.db.models.sql.GeomField': 'django.contrib.gis.db.models.sql.conversion.GeomField',
              'django.contrib.gis.db.models.sql.aggregates.*': 'django.db.models.sql.aggregates.*',
              'django.contrib.gis.db.models.sql.aggregates.GeomField': 'django.contrib.gis.db.models.sql.conversion.GeomField',
              'django.contrib.gis.db.models.sql.aggregates.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.db.models.sql.compiler.TABLE_NAME': 'django.db.models.sql.constants.TABLE_NAME',
              'django.contrib.gis.db.models.sql.compiler.compiler': 'django.db.models.sql.compiler',
              'django.contrib.gis.db.models.sql.compiler.get_proxied_model': 'django.db.models.sql.query.get_proxied_model',
              'django.contrib.gis.db.models.sql.compiler.izip': 'itertools.izip',
              'django.contrib.gis.db.models.sql.compiler.truncate_name': 'django.db.backends.util.truncate_name',
              'django.contrib.gis.db.models.sql.query.Area': 'django.contrib.gis.measure.Area',
              'django.contrib.gis.db.models.sql.query.AreaField': 'django.contrib.gis.db.models.sql.conversion.AreaField',
              'django.contrib.gis.db.models.sql.query.Distance': 'django.contrib.gis.measure.Distance',
              'django.contrib.gis.db.models.sql.query.DistanceField': 'django.contrib.gis.db.models.sql.conversion.DistanceField',
              'django.contrib.gis.db.models.sql.query.GeoWhereNode': 'django.contrib.gis.db.models.sql.where.GeoWhereNode',
              'django.contrib.gis.db.models.sql.query.GeomField': 'django.contrib.gis.db.models.sql.conversion.GeomField',
              'django.contrib.gis.db.models.sql.query.Geometry': 'django.contrib.gis.geometry.backend.Geometry',
              'django.contrib.gis.db.models.sql.query.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.db.models.sql.query.connections': 'django.db.connections',
              'django.contrib.gis.db.models.sql.query.gis_aggregates': 'django.contrib.gis.db.models.sql.aggregates',
              'django.contrib.gis.db.models.sql.query.sql': 'django.db.models.query.sql',
              'django.contrib.gis.db.models.sql.where.Constraint': 'django.db.models.sql.where.Constraint',
              'django.contrib.gis.db.models.sql.where.Field': 'django.db.models.fields.Field',
              'django.contrib.gis.db.models.sql.where.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.contrib.gis.db.models.sql.where.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.db.models.sql.where.LOOKUP_SEP': 'django.db.models.sql.constants.LOOKUP_SEP',
              'django.contrib.gis.db.models.sql.where.SQLEvaluator': 'django.db.models.sql.expressions.SQLEvaluator',
              'django.contrib.gis.db.models.sql.where.WhereNode': 'django.db.models.sql.where.WhereNode',
              'django.contrib.gis.feeds.Atom1Feed': 'django.utils.feedgenerator.Atom1Feed',
              'django.contrib.gis.feeds.BaseFeed': 'django.contrib.syndication.feeds.Feed',
              'django.contrib.gis.feeds.FeedDoesNotExist': 'django.contrib.syndication.feeds.FeedDoesNotExist',
              'django.contrib.gis.feeds.Rss201rev2Feed': 'django.utils.feedgenerator.Rss201rev2Feed',
              'django.contrib.gis.forms.*': 'django.forms.*',
              'django.contrib.gis.forms.GeometryField': 'django.contrib.gis.forms.fields.GeometryField',
              'django.contrib.gis.forms.fields.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.forms.fields._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.gis.forms.fields.forms': 'django.forms',
              'django.contrib.gis.gdal.CoordTransform': 'django.contrib.gis.gdal.srs.CoordTransform',
              'django.contrib.gis.gdal.DataSource': 'django.contrib.gis.gdal.datasource.DataSource',
              'django.contrib.gis.gdal.Driver': 'django.contrib.gis.gdal.driver.Driver',
              'django.contrib.gis.gdal.Envelope': 'django.contrib.gis.gdal.envelope.Envelope',
              'django.contrib.gis.gdal.GDAL_VERSION': 'django.contrib.gis.gdal.libgdal.GDAL_VERSION',
              'django.contrib.gis.gdal.GEOJSON': 'django.contrib.gis.gdal.libgdal.GEOJSON',
              'django.contrib.gis.gdal.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.OGRGeomType': 'django.contrib.gis.gdal.geomtype.OGRGeomType',
              'django.contrib.gis.gdal.OGRGeometry': 'django.contrib.gis.gdal.geometries.OGRGeometry',
              'django.contrib.gis.gdal.OGRIndexError': 'django.contrib.gis.gdal.error.OGRIndexError',
              'django.contrib.gis.gdal.SRSException': 'django.contrib.gis.gdal.error.SRSException',
              'django.contrib.gis.gdal.SpatialReference': 'django.contrib.gis.gdal.srs.SpatialReference',
              'django.contrib.gis.gdal.base.GDALException': 'django.contrib.gis.gdal.error.GDALException',
              'django.contrib.gis.gdal.base.NoneType': 'types.NoneType',
              'django.contrib.gis.gdal.base.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.gdal.check_err': 'django.contrib.gis.gdal.error.check_err',
              'django.contrib.gis.gdal.datasource.Driver': 'django.contrib.gis.gdal.driver.Driver',
              'django.contrib.gis.gdal.datasource.GDALBase': 'django.contrib.gis.gdal.base.GDALBase',
              'django.contrib.gis.gdal.datasource.Layer': 'django.contrib.gis.gdal.layer.Layer',
              'django.contrib.gis.gdal.datasource.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.datasource.OGRIndexError': 'django.contrib.gis.gdal.error.OGRIndexError',
              'django.contrib.gis.gdal.datasource.byref': 'ctypes.byref',
              'django.contrib.gis.gdal.datasource.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.gdal.datasource.capi': 'django.contrib.gis.gdal.prototypes.ds',
              'django.contrib.gis.gdal.driver.GDALBase': 'django.contrib.gis.gdal.base.GDALBase',
              'django.contrib.gis.gdal.driver.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.driver.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.gdal.driver.capi': 'django.contrib.gis.gdal.prototypes.ds',
              'django.contrib.gis.gdal.envelope.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.envelope.Structure': 'ctypes.Structure',
              'django.contrib.gis.gdal.envelope.c_double': 'ctypes.c_double',
              'django.contrib.gis.gdal.feature.Field': 'django.contrib.gis.gdal.field.Field',
              'django.contrib.gis.gdal.feature.GDALBase': 'django.contrib.gis.gdal.base.GDALBase',
              'django.contrib.gis.gdal.feature.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.feature.OGRGeomType': 'django.contrib.gis.gdal.geometries.OGRGeomType',
              'django.contrib.gis.gdal.feature.OGRGeometry': 'django.contrib.gis.gdal.geometries.OGRGeometry',
              'django.contrib.gis.gdal.feature.OGRIndexError': 'django.contrib.gis.gdal.error.OGRIndexError',
              'django.contrib.gis.gdal.feature.SpatialReference': 'django.contrib.gis.gdal.srs.SpatialReference',
              'django.contrib.gis.gdal.feature.capi': 'django.contrib.gis.gdal.prototypes.ds',
              'django.contrib.gis.gdal.feature.geom_api': 'django.contrib.gis.gdal.prototypes.geom',
              'django.contrib.gis.gdal.field.GDALBase': 'django.contrib.gis.gdal.base.GDALBase',
              'django.contrib.gis.gdal.field.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.field.byref': 'ctypes.byref',
              'django.contrib.gis.gdal.field.c_int': 'ctypes.c_int',
              'django.contrib.gis.gdal.field.capi': 'django.contrib.gis.gdal.prototypes.ds',
              'django.contrib.gis.gdal.field.date': 'datetime.date',
              'django.contrib.gis.gdal.field.datetime': 'datetime.datetime',
              'django.contrib.gis.gdal.field.time': 'datetime.time',
              'django.contrib.gis.gdal.gdal_full_version': 'django.contrib.gis.gdal.libgdal.gdal_full_version',
              'django.contrib.gis.gdal.gdal_release_date': 'django.contrib.gis.gdal.libgdal.gdal_release_date',
              'django.contrib.gis.gdal.gdal_version': 'django.contrib.gis.gdal.libgdal.gdal_version',
              'django.contrib.gis.gdal.geometries.CoordTransform': 'django.contrib.gis.gdal.srs.CoordTransform',
              'django.contrib.gis.gdal.geometries.Envelope': 'django.contrib.gis.gdal.envelope.Envelope',
              'django.contrib.gis.gdal.geometries.GDALBase': 'django.contrib.gis.gdal.base.GDALBase',
              'django.contrib.gis.gdal.geometries.GDAL_VERSION': 'django.contrib.gis.gdal.libgdal.GDAL_VERSION',
              'django.contrib.gis.gdal.geometries.GEOJSON': 'django.contrib.gis.gdal.libgdal.GEOJSON',
              'django.contrib.gis.gdal.geometries.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.gdal.geometries.OGREnvelope': 'django.contrib.gis.gdal.envelope.OGREnvelope',
              'django.contrib.gis.gdal.geometries.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.geometries.OGRGeomType': 'django.contrib.gis.gdal.geomtype.OGRGeomType',
              'django.contrib.gis.gdal.geometries.OGRIndexError': 'django.contrib.gis.gdal.error.OGRIndexError',
              'django.contrib.gis.gdal.geometries.SRSException': 'django.contrib.gis.gdal.error.SRSException',
              'django.contrib.gis.gdal.geometries.SpatialReference': 'django.contrib.gis.gdal.srs.SpatialReference',
              'django.contrib.gis.gdal.geometries.a2b_hex': 'binascii.a2b_hex',
              'django.contrib.gis.gdal.geometries.byref': 'ctypes.byref',
              'django.contrib.gis.gdal.geometries.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.gdal.geometries.c_double': 'ctypes.c_double',
              'django.contrib.gis.gdal.geometries.c_ubyte': 'ctypes.c_ubyte',
              'django.contrib.gis.gdal.geometries.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.gdal.geometries.capi': 'django.contrib.gis.gdal.prototypes.geom',
              'django.contrib.gis.gdal.geometries.hex_regex': 'django.contrib.gis.geometry.regex.hex_regex',
              'django.contrib.gis.gdal.geometries.json_regex': 'django.contrib.gis.geometry.regex.json_regex',
              'django.contrib.gis.gdal.geometries.srs_api': 'django.contrib.gis.gdal.prototypes.srs',
              'django.contrib.gis.gdal.geometries.string_at': 'ctypes.string_at',
              'django.contrib.gis.gdal.geometries.sys': 'sys',
              'django.contrib.gis.gdal.geometries.wkt_regex': 'django.contrib.gis.geometry.regex.wkt_regex',
              'django.contrib.gis.gdal.geomtype.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.layer.Envelope': 'django.contrib.gis.gdal.envelope.Envelope',
              'django.contrib.gis.gdal.layer.Feature': 'django.contrib.gis.gdal.feature.Feature',
              'django.contrib.gis.gdal.layer.GDALBase': 'django.contrib.gis.gdal.base.GDALBase',
              'django.contrib.gis.gdal.layer.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.gdal.layer.OGREnvelope': 'django.contrib.gis.gdal.envelope.OGREnvelope',
              'django.contrib.gis.gdal.layer.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.layer.OGRFieldTypes': 'django.contrib.gis.gdal.field.OGRFieldTypes',
              'django.contrib.gis.gdal.layer.OGRGeomType': 'django.contrib.gis.gdal.geomtype.OGRGeomType',
              'django.contrib.gis.gdal.layer.OGRGeometry': 'django.contrib.gis.gdal.geometries.OGRGeometry',
              'django.contrib.gis.gdal.layer.OGRIndexError': 'django.contrib.gis.gdal.error.OGRIndexError',
              'django.contrib.gis.gdal.layer.SRSException': 'django.contrib.gis.gdal.error.SRSException',
              'django.contrib.gis.gdal.layer.SpatialReference': 'django.contrib.gis.gdal.srs.SpatialReference',
              'django.contrib.gis.gdal.layer.byref': 'ctypes.byref',
              'django.contrib.gis.gdal.layer.c_double': 'ctypes.c_double',
              'django.contrib.gis.gdal.layer.capi': 'django.contrib.gis.gdal.prototypes.ds',
              'django.contrib.gis.gdal.layer.geom_api': 'django.contrib.gis.gdal.prototypes.geom',
              'django.contrib.gis.gdal.layer.srs_api': 'django.contrib.gis.gdal.prototypes.srs',
              'django.contrib.gis.gdal.libgdal.CDLL': 'ctypes.CDLL',
              'django.contrib.gis.gdal.libgdal.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.libgdal.WinDLL': 'ctypes.WinDLL',
              'django.contrib.gis.gdal.libgdal.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.gdal.libgdal.date_type': 'datetime.date',
              'django.contrib.gis.gdal.libgdal.find_library': 'ctypes.util.find_library',
              'django.contrib.gis.gdal.libgdal.os': 'os',
              'django.contrib.gis.gdal.libgdal.re': 're',
              'django.contrib.gis.gdal.libgdal.settings': 'django.conf.settings',
              'django.contrib.gis.gdal.libgdal.sys': 'sys',
              'django.contrib.gis.gdal.prototypes.ds.OGREnvelope': 'django.contrib.gis.gdal.envelope.OGREnvelope',
              'django.contrib.gis.gdal.prototypes.ds.POINTER': 'ctypes.POINTER',
              'django.contrib.gis.gdal.prototypes.ds.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.gdal.prototypes.ds.c_double': 'ctypes.c_double',
              'django.contrib.gis.gdal.prototypes.ds.c_int': 'ctypes.c_int',
              'django.contrib.gis.gdal.prototypes.ds.c_long': 'ctypes.c_long',
              'django.contrib.gis.gdal.prototypes.ds.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.gdal.prototypes.ds.const_string_output': 'django.contrib.gis.gdal.prototypes.generation.const_string_output',
              'django.contrib.gis.gdal.prototypes.ds.double_output': 'django.contrib.gis.gdal.prototypes.generation.double_output',
              'django.contrib.gis.gdal.prototypes.ds.geom_output': 'django.contrib.gis.gdal.prototypes.generation.geom_output',
              'django.contrib.gis.gdal.prototypes.ds.int_output': 'django.contrib.gis.gdal.prototypes.generation.int_output',
              'django.contrib.gis.gdal.prototypes.ds.lgdal': 'django.contrib.gis.gdal.libgdal.lgdal',
              'django.contrib.gis.gdal.prototypes.ds.srs_output': 'django.contrib.gis.gdal.prototypes.generation.srs_output',
              'django.contrib.gis.gdal.prototypes.ds.void_output': 'django.contrib.gis.gdal.prototypes.generation.void_output',
              'django.contrib.gis.gdal.prototypes.ds.voidptr_output': 'django.contrib.gis.gdal.prototypes.generation.voidptr_output',
              'django.contrib.gis.gdal.prototypes.errcheck.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.prototypes.errcheck.SRSException': 'django.contrib.gis.gdal.error.SRSException',
              'django.contrib.gis.gdal.prototypes.errcheck.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.gdal.prototypes.errcheck.check_err': 'django.contrib.gis.gdal.error.check_err',
              'django.contrib.gis.gdal.prototypes.errcheck.lgdal': 'django.contrib.gis.gdal.libgdal.lgdal',
              'django.contrib.gis.gdal.prototypes.errcheck.string_at': 'ctypes.string_at',
              'django.contrib.gis.gdal.prototypes.generation.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.gdal.prototypes.generation.c_double': 'ctypes.c_double',
              'django.contrib.gis.gdal.prototypes.generation.c_int': 'ctypes.c_int',
              'django.contrib.gis.gdal.prototypes.generation.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.gdal.prototypes.generation.check_arg_errcode': 'django.contrib.gis.gdal.prototypes.errcheck.check_arg_errcode',
              'django.contrib.gis.gdal.prototypes.generation.check_const_string': 'django.contrib.gis.gdal.prototypes.errcheck.check_const_string',
              'django.contrib.gis.gdal.prototypes.generation.check_errcode': 'django.contrib.gis.gdal.prototypes.errcheck.check_errcode',
              'django.contrib.gis.gdal.prototypes.generation.check_geom': 'django.contrib.gis.gdal.prototypes.errcheck.check_geom',
              'django.contrib.gis.gdal.prototypes.generation.check_geom_offset': 'django.contrib.gis.gdal.prototypes.errcheck.check_geom_offset',
              'django.contrib.gis.gdal.prototypes.generation.check_pointer': 'django.contrib.gis.gdal.prototypes.errcheck.check_pointer',
              'django.contrib.gis.gdal.prototypes.generation.check_srs': 'django.contrib.gis.gdal.prototypes.errcheck.check_srs',
              'django.contrib.gis.gdal.prototypes.generation.check_str_arg': 'django.contrib.gis.gdal.prototypes.errcheck.check_str_arg',
              'django.contrib.gis.gdal.prototypes.generation.check_string': 'django.contrib.gis.gdal.prototypes.errcheck.check_string',
              'django.contrib.gis.gdal.prototypes.geom.GEOJSON': 'django.contrib.gis.gdal.libgdal.GEOJSON',
              'django.contrib.gis.gdal.prototypes.geom.OGREnvelope': 'django.contrib.gis.gdal.envelope.OGREnvelope',
              'django.contrib.gis.gdal.prototypes.geom.POINTER': 'ctypes.POINTER',
              'django.contrib.gis.gdal.prototypes.geom.c_char': 'ctypes.c_char',
              'django.contrib.gis.gdal.prototypes.geom.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.gdal.prototypes.geom.c_double': 'ctypes.c_double',
              'django.contrib.gis.gdal.prototypes.geom.c_int': 'ctypes.c_int',
              'django.contrib.gis.gdal.prototypes.geom.c_ubyte': 'ctypes.c_ubyte',
              'django.contrib.gis.gdal.prototypes.geom.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.gdal.prototypes.geom.check_bool': 'django.contrib.gis.gdal.prototypes.errcheck.check_bool',
              'django.contrib.gis.gdal.prototypes.geom.check_envelope': 'django.contrib.gis.gdal.prototypes.errcheck.check_envelope',
              'django.contrib.gis.gdal.prototypes.geom.const_string_output': 'django.contrib.gis.gdal.prototypes.generation.const_string_output',
              'django.contrib.gis.gdal.prototypes.geom.date': 'datetime.date',
              'django.contrib.gis.gdal.prototypes.geom.double_output': 'django.contrib.gis.gdal.prototypes.generation.double_output',
              'django.contrib.gis.gdal.prototypes.geom.geom_output': 'django.contrib.gis.gdal.prototypes.generation.geom_output',
              'django.contrib.gis.gdal.prototypes.geom.int_output': 'django.contrib.gis.gdal.prototypes.generation.int_output',
              'django.contrib.gis.gdal.prototypes.geom.lgdal': 'django.contrib.gis.gdal.libgdal.lgdal',
              'django.contrib.gis.gdal.prototypes.geom.re': 're',
              'django.contrib.gis.gdal.prototypes.geom.srs_output': 'django.contrib.gis.gdal.prototypes.generation.srs_output',
              'django.contrib.gis.gdal.prototypes.geom.string_output': 'django.contrib.gis.gdal.prototypes.generation.string_output',
              'django.contrib.gis.gdal.prototypes.geom.void_output': 'django.contrib.gis.gdal.prototypes.generation.void_output',
              'django.contrib.gis.gdal.prototypes.srs.POINTER': 'ctypes.POINTER',
              'django.contrib.gis.gdal.prototypes.srs.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.gdal.prototypes.srs.c_int': 'ctypes.c_int',
              'django.contrib.gis.gdal.prototypes.srs.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.gdal.prototypes.srs.const_string_output': 'django.contrib.gis.gdal.prototypes.generation.const_string_output',
              'django.contrib.gis.gdal.prototypes.srs.double_output': 'django.contrib.gis.gdal.prototypes.generation.double_output',
              'django.contrib.gis.gdal.prototypes.srs.int_output': 'django.contrib.gis.gdal.prototypes.generation.int_output',
              'django.contrib.gis.gdal.prototypes.srs.lgdal': 'django.contrib.gis.gdal.libgdal.lgdal',
              'django.contrib.gis.gdal.prototypes.srs.srs_output': 'django.contrib.gis.gdal.prototypes.generation.srs_output',
              'django.contrib.gis.gdal.prototypes.srs.std_call': 'django.contrib.gis.gdal.libgdal.std_call',
              'django.contrib.gis.gdal.prototypes.srs.string_output': 'django.contrib.gis.gdal.prototypes.generation.string_output',
              'django.contrib.gis.gdal.prototypes.srs.void_output': 'django.contrib.gis.gdal.prototypes.generation.void_output',
              'django.contrib.gis.gdal.srs.GDALBase': 'django.contrib.gis.gdal.base.GDALBase',
              'django.contrib.gis.gdal.srs.OGRException': 'django.contrib.gis.gdal.error.OGRException',
              'django.contrib.gis.gdal.srs.SRSException': 'django.contrib.gis.gdal.error.SRSException',
              'django.contrib.gis.gdal.srs.byref': 'ctypes.byref',
              'django.contrib.gis.gdal.srs.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.gdal.srs.c_int': 'ctypes.c_int',
              'django.contrib.gis.gdal.srs.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.gdal.srs.capi': 'django.contrib.gis.gdal.prototypes.srs',
              'django.contrib.gis.gdal.srs.re': 're',
              'django.contrib.gis.gdal.tests.TestSuite': 'django.utils.unittest.TestSuite',
              'django.contrib.gis.gdal.tests.TextTestRunner': 'django.utils.unittest.TextTestRunner',
              'django.contrib.gis.gdal.tests.test_driver': 'django.contrib.gis.gdal.tests.test_driver',
              'django.contrib.gis.gdal.tests.test_driver.Driver': 'django.contrib.gis.gdal.Driver',
              'django.contrib.gis.gdal.tests.test_driver.OGRException': 'django.contrib.gis.gdal.OGRException',
              'django.contrib.gis.gdal.tests.test_driver.os': 'os',
              'django.contrib.gis.gdal.tests.test_driver.os.path': 'os.path',
              'django.contrib.gis.gdal.tests.test_driver.unittest': 'unittest',
              'django.contrib.gis.gdal.tests.test_ds': 'django.contrib.gis.gdal.tests.test_ds',
              'django.contrib.gis.gdal.tests.test_ds.DataSource': 'django.contrib.gis.gdal.DataSource',
              'django.contrib.gis.gdal.tests.test_ds.Envelope': 'django.contrib.gis.gdal.Envelope',
              'django.contrib.gis.gdal.tests.test_ds.GDAL_VERSION': 'django.contrib.gis.gdal.GDAL_VERSION',
              'django.contrib.gis.gdal.tests.test_ds.OFTInteger': 'django.contrib.gis.gdal.field.OFTInteger',
              'django.contrib.gis.gdal.tests.test_ds.OFTReal': 'django.contrib.gis.gdal.field.OFTReal',
              'django.contrib.gis.gdal.tests.test_ds.OFTString': 'django.contrib.gis.gdal.field.OFTString',
              'django.contrib.gis.gdal.tests.test_ds.OGRException': 'django.contrib.gis.gdal.OGRException',
              'django.contrib.gis.gdal.tests.test_ds.OGRGeometry': 'django.contrib.gis.gdal.OGRGeometry',
              'django.contrib.gis.gdal.tests.test_ds.OGRIndexError': 'django.contrib.gis.gdal.OGRIndexError',
              'django.contrib.gis.gdal.tests.test_ds.TestDS': 'django.contrib.gis.geometry.test_data.TestDS',
              'django.contrib.gis.gdal.tests.test_ds.get_ds_file': 'django.contrib.gis.geometry.test_data.get_ds_file',
              'django.contrib.gis.gdal.tests.test_ds.os': 'os',
              'django.contrib.gis.gdal.tests.test_ds.os.path': 'os.path',
              'django.contrib.gis.gdal.tests.test_ds.unittest': 'unittest',
              'django.contrib.gis.gdal.tests.test_envelope': 'django.contrib.gis.gdal.tests.test_envelope',
              'django.contrib.gis.gdal.tests.test_envelope.Envelope': 'django.contrib.gis.gdal.Envelope',
              'django.contrib.gis.gdal.tests.test_envelope.OGRException': 'django.contrib.gis.gdal.OGRException',
              'django.contrib.gis.gdal.tests.test_envelope.unittest': 'django.utils.unittest',
              'django.contrib.gis.gdal.tests.test_geom': 'django.contrib.gis.gdal.tests.test_geom',
              'django.contrib.gis.gdal.tests.test_geom.CoordTransform': 'django.contrib.gis.gdal.CoordTransform',
              'django.contrib.gis.gdal.tests.test_geom.GDAL_VERSION': 'django.contrib.gis.gdal.GDAL_VERSION',
              'django.contrib.gis.gdal.tests.test_geom.GEOJSON': 'django.contrib.gis.gdal.prototypes.geom.GEOJSON',
              'django.contrib.gis.gdal.tests.test_geom.OGRException': 'django.contrib.gis.gdal.OGRException',
              'django.contrib.gis.gdal.tests.test_geom.OGRGeomType': 'django.contrib.gis.gdal.OGRGeomType',
              'django.contrib.gis.gdal.tests.test_geom.OGRGeometry': 'django.contrib.gis.gdal.OGRGeometry',
              'django.contrib.gis.gdal.tests.test_geom.OGRIndexError': 'django.contrib.gis.gdal.OGRIndexError',
              'django.contrib.gis.gdal.tests.test_geom.SpatialReference': 'django.contrib.gis.gdal.SpatialReference',
              'django.contrib.gis.gdal.tests.test_geom.TestDataMixin': 'django.contrib.gis.geometry.test_data.TestDataMixin',
              'django.contrib.gis.gdal.tests.test_geom.b2a_hex': 'binascii.b2a_hex',
              'django.contrib.gis.gdal.tests.test_geom.cPickle': 'cPickle',
              'django.contrib.gis.gdal.tests.test_geom.unittest': 'django.utils.unittest',
              'django.contrib.gis.gdal.tests.test_srs': 'django.contrib.gis.gdal.tests.test_srs',
              'django.contrib.gis.gdal.tests.test_srs.CoordTransform': 'django.contrib.gis.gdal.CoordTransform',
              'django.contrib.gis.gdal.tests.test_srs.OGRException': 'django.contrib.gis.gdal.OGRException',
              'django.contrib.gis.gdal.tests.test_srs.SRSException': 'django.contrib.gis.gdal.SRSException',
              'django.contrib.gis.gdal.tests.test_srs.SpatialReference': 'django.contrib.gis.gdal.SpatialReference',
              'django.contrib.gis.gdal.tests.test_srs.unittest': 'django.utils.unittest',
              'django.contrib.gis.geometry.backend.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.gis.geometry.backend.geos.Geometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.geometry.backend.geos.GeometryException': 'django.contrib.gis.geos.GEOSException',
              'django.contrib.gis.geometry.backend.import_module': 'django.utils.importlib.import_module',
              'django.contrib.gis.geometry.backend.settings': 'django.conf.settings',
              'django.contrib.gis.geometry.regex.re': 're',
              'django.contrib.gis.geometry.test_data.gis': 'django.contrib.gis',
              'django.contrib.gis.geometry.test_data.gzip': 'gzip',
              'django.contrib.gis.geometry.test_data.os': 'os',
              'django.contrib.gis.geometry.test_data.simplejson': 'django.utils.simplejson',
              'django.contrib.gis.geos.GEOSException': 'django.contrib.gis.geos.error.GEOSException',
              'django.contrib.gis.geos.GEOSGeometry': 'django.contrib.gis.geos.geometry.GEOSGeometry',
              'django.contrib.gis.geos.GEOSIndexError': 'django.contrib.gis.geos.error.GEOSIndexError',
              'django.contrib.gis.geos.GEOS_PREPARE': 'django.contrib.gis.geos.libgeos.GEOS_PREPARE',
              'django.contrib.gis.geos.GeometryCollection': 'django.contrib.gis.geos.collections.GeometryCollection',
              'django.contrib.gis.geos.LineString': 'django.contrib.gis.geos.linestring.LineString',
              'django.contrib.gis.geos.LinearRing': 'django.contrib.gis.geos.linestring.LinearRing',
              'django.contrib.gis.geos.MultiLineString': 'django.contrib.gis.geos.collections.MultiLineString',
              'django.contrib.gis.geos.MultiPoint': 'django.contrib.gis.geos.collections.MultiPoint',
              'django.contrib.gis.geos.MultiPolygon': 'django.contrib.gis.geos.collections.MultiPolygon',
              'django.contrib.gis.geos.Point': 'django.contrib.gis.geos.point.Point',
              'django.contrib.gis.geos.Polygon': 'django.contrib.gis.geos.polygon.Polygon',
              'django.contrib.gis.geos.WKBReader': 'django.contrib.gis.geos.io.WKBReader',
              'django.contrib.gis.geos.WKBWriter': 'django.contrib.gis.geos.io.WKBWriter',
              'django.contrib.gis.geos.WKTReader': 'django.contrib.gis.geos.io.WKTReader',
              'django.contrib.gis.geos.WKTWriter': 'django.contrib.gis.geos.io.WKTWriter',
              'django.contrib.gis.geos.base.GEOSException': 'django.contrib.gis.geos.error.GEOSException',
              'django.contrib.gis.geos.base.GEOSIndexError': 'django.contrib.gis.geos.error.GEOSIndexError',
              'django.contrib.gis.geos.base.NoneType': 'types.NoneType',
              'django.contrib.gis.geos.base.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.geos.base.gdal': 'django.contrib.gis.gdal',
              'django.contrib.gis.geos.base.numpy': 'numpy',
              'django.contrib.gis.geos.collections.GEOM_PTR': 'django.contrib.gis.geos.libgeos.GEOM_PTR',
              'django.contrib.gis.geos.collections.GEOSException': 'django.contrib.gis.geos.error.GEOSException',
              'django.contrib.gis.geos.collections.GEOSGeometry': 'django.contrib.gis.geos.geometry.GEOSGeometry',
              'django.contrib.gis.geos.collections.GEOSIndexError': 'django.contrib.gis.geos.error.GEOSIndexError',
              'django.contrib.gis.geos.collections.GEOS_PREPARE': 'django.contrib.gis.geos.libgeos.GEOS_PREPARE',
              'django.contrib.gis.geos.collections.LineString': 'django.contrib.gis.geos.linestring.LineString',
              'django.contrib.gis.geos.collections.LinearRing': 'django.contrib.gis.geos.linestring.LinearRing',
              'django.contrib.gis.geos.collections.Point': 'django.contrib.gis.geos.point.Point',
              'django.contrib.gis.geos.collections.Polygon': 'django.contrib.gis.geos.polygon.Polygon',
              'django.contrib.gis.geos.collections.byref': 'ctypes.byref',
              'django.contrib.gis.geos.collections.c_int': 'ctypes.c_int',
              'django.contrib.gis.geos.collections.c_uint': 'ctypes.c_uint',
              'django.contrib.gis.geos.collections.capi': 'django.contrib.gis.geos.prototypes',
              'django.contrib.gis.geos.collections.get_pointer_arr': 'django.contrib.gis.geos.libgeos.get_pointer_arr',
              'django.contrib.gis.geos.coordseq.CS_PTR': 'django.contrib.gis.geos.libgeos.CS_PTR',
              'django.contrib.gis.geos.coordseq.GEOSBase': 'django.contrib.gis.geos.base.GEOSBase',
              'django.contrib.gis.geos.coordseq.GEOSException': 'django.contrib.gis.geos.error.GEOSException',
              'django.contrib.gis.geos.coordseq.GEOSIndexError': 'django.contrib.gis.geos.error.GEOSIndexError',
              'django.contrib.gis.geos.coordseq.byref': 'ctypes.byref',
              'django.contrib.gis.geos.coordseq.c_double': 'ctypes.c_double',
              'django.contrib.gis.geos.coordseq.c_uint': 'ctypes.c_uint',
              'django.contrib.gis.geos.coordseq.capi': 'django.contrib.gis.geos.prototypes',
              'django.contrib.gis.geos.coordseq.numpy': 'django.contrib.gis.geos.base.numpy',
              'django.contrib.gis.geos.factory.GEOSGeometry': 'django.contrib.gis.geos.geometry.GEOSGeometry',
              'django.contrib.gis.geos.factory.hex_regex': 'django.contrib.gis.geos.geometry.hex_regex',
              'django.contrib.gis.geos.factory.wkt_regex': 'django.contrib.gis.geos.geometry.wkt_regex',
              'django.contrib.gis.geos.fromfile': 'django.contrib.gis.geos.factory.fromfile',
              'django.contrib.gis.geos.fromstr': 'django.contrib.gis.geos.factory.fromstr',
              'django.contrib.gis.geos.geometry.GEOM_PTR': 'django.contrib.gis.geos.libgeos.GEOM_PTR',
              'django.contrib.gis.geos.geometry.GEOSBase': 'django.contrib.gis.geos.base.GEOSBase',
              'django.contrib.gis.geos.geometry.GEOSCoordSeq': 'django.contrib.gis.geos.coordseq.GEOSCoordSeq',
              'django.contrib.gis.geos.geometry.GEOSException': 'django.contrib.gis.geos.error.GEOSException',
              'django.contrib.gis.geos.geometry.GEOSIndexError': 'django.contrib.gis.geos.error.GEOSIndexError',
              'django.contrib.gis.geos.geometry.GEOS_PREPARE': 'django.contrib.gis.geos.libgeos.GEOS_PREPARE',
              'django.contrib.gis.geos.geometry.GeometryCollection': 'django.contrib.gis.geos.collections.GeometryCollection',
              'django.contrib.gis.geos.geometry.LineString': 'django.contrib.gis.geos.linestring.LineString',
              'django.contrib.gis.geos.geometry.LinearRing': 'django.contrib.gis.geos.linestring.LinearRing',
              'django.contrib.gis.geos.geometry.ListMixin': 'django.contrib.gis.geos.mutable_list.ListMixin',
              'django.contrib.gis.geos.geometry.MultiLineString': 'django.contrib.gis.geos.collections.MultiLineString',
              'django.contrib.gis.geos.geometry.MultiPoint': 'django.contrib.gis.geos.collections.MultiPoint',
              'django.contrib.gis.geos.geometry.MultiPolygon': 'django.contrib.gis.geos.collections.MultiPolygon',
              'django.contrib.gis.geos.geometry.Point': 'django.contrib.gis.geos.point.Point',
              'django.contrib.gis.geos.geometry.Polygon': 'django.contrib.gis.geos.polygon.Polygon',
              'django.contrib.gis.geos.geometry.PreparedGeometry': 'django.contrib.gis.geos.prepared.PreparedGeometry',
              'django.contrib.gis.geos.geometry.addressof': 'ctypes.addressof',
              'django.contrib.gis.geos.geometry.byref': 'ctypes.byref',
              'django.contrib.gis.geos.geometry.c_double': 'ctypes.c_double',
              'django.contrib.gis.geos.geometry.c_size_t': 'ctypes.c_size_t',
              'django.contrib.gis.geos.geometry.capi': 'django.contrib.gis.geos.prototypes',
              'django.contrib.gis.geos.geometry.ewkb_w': 'django.contrib.gis.geos.prototypes.io.ewkb_w',
              'django.contrib.gis.geos.geometry.ewkb_w3d': 'django.contrib.gis.geos.prototypes.io.ewkb_w3d',
              'django.contrib.gis.geos.geometry.gdal': 'django.contrib.gis.geos.base.gdal',
              'django.contrib.gis.geos.geometry.hex_regex': 'django.contrib.gis.geometry.regex.hex_regex',
              'django.contrib.gis.geos.geometry.json_regex': 'django.contrib.gis.geometry.regex.json_regex',
              'django.contrib.gis.geos.geometry.re': 're',
              'django.contrib.gis.geos.geometry.warnings': 'warnings',
              'django.contrib.gis.geos.geometry.wkb_r': 'django.contrib.gis.geos.prototypes.io.wkb_r',
              'django.contrib.gis.geos.geometry.wkb_w': 'django.contrib.gis.geos.prototypes.io.wkb_w',
              'django.contrib.gis.geos.geometry.wkt_r': 'django.contrib.gis.geos.prototypes.io.wkt_r',
              'django.contrib.gis.geos.geometry.wkt_regex': 'django.contrib.gis.geometry.regex.wkt_regex',
              'django.contrib.gis.geos.geometry.wkt_w': 'django.contrib.gis.geos.prototypes.io.wkt_w',
              'django.contrib.gis.geos.geos_version': 'django.contrib.gis.geos.libgeos.geos_version',
              'django.contrib.gis.geos.geos_version_info': 'django.contrib.gis.geos.libgeos.geos_version_info',
              'django.contrib.gis.geos.hex_regex': 'django.contrib.gis.geos.geometry.hex_regex',
              'django.contrib.gis.geos.io.GEOSGeometry': 'django.contrib.gis.geos.geometry.GEOSGeometry',
              'django.contrib.gis.geos.io.WKBWriter': 'django.contrib.gis.geos.prototypes.io.WKBWriter',
              'django.contrib.gis.geos.io.WKTWriter': 'django.contrib.gis.geos.prototypes.io.WKTWriter',
              'django.contrib.gis.geos.io._WKBReader': 'django.contrib.gis.geos.prototypes.io._WKBReader',
              'django.contrib.gis.geos.io._WKTReader': 'django.contrib.gis.geos.prototypes.io._WKTReader',
              'django.contrib.gis.geos.libgeos.CDLL': 'ctypes.CDLL',
              'django.contrib.gis.geos.libgeos.CFUNCTYPE': 'ctypes.CFUNCTYPE',
              'django.contrib.gis.geos.libgeos.GEOSException': 'django.contrib.gis.geos.error.GEOSException',
              'django.contrib.gis.geos.libgeos.POINTER': 'ctypes.POINTER',
              'django.contrib.gis.geos.libgeos.Structure': 'ctypes.Structure',
              'django.contrib.gis.geos.libgeos.atexit': 'atexit',
              'django.contrib.gis.geos.libgeos.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.geos.libgeos.find_library': 'ctypes.util.find_library',
              'django.contrib.gis.geos.libgeos.os': 'os',
              'django.contrib.gis.geos.libgeos.re': 're',
              'django.contrib.gis.geos.libgeos.settings': 'django.conf.settings',
              'django.contrib.gis.geos.libgeos.sys': 'sys',
              'django.contrib.gis.geos.linestring.GEOSCoordSeq': 'django.contrib.gis.geos.coordseq.GEOSCoordSeq',
              'django.contrib.gis.geos.linestring.GEOSException': 'django.contrib.gis.geos.error.GEOSException',
              'django.contrib.gis.geos.linestring.GEOSGeometry': 'django.contrib.gis.geos.geometry.GEOSGeometry',
              'django.contrib.gis.geos.linestring.Point': 'django.contrib.gis.geos.point.Point',
              'django.contrib.gis.geos.linestring.capi': 'django.contrib.gis.geos.prototypes',
              'django.contrib.gis.geos.linestring.numpy': 'django.contrib.gis.geos.base.numpy',
              'django.contrib.gis.geos.point.GEOSException': 'django.contrib.gis.geos.error.GEOSException',
              'django.contrib.gis.geos.point.GEOSGeometry': 'django.contrib.gis.geos.geometry.GEOSGeometry',
              'django.contrib.gis.geos.point.c_uint': 'ctypes.c_uint',
              'django.contrib.gis.geos.point.capi': 'django.contrib.gis.geos.prototypes',
              'django.contrib.gis.geos.polygon.GEOM_PTR': 'django.contrib.gis.geos.libgeos.GEOM_PTR',
              'django.contrib.gis.geos.polygon.GEOSGeometry': 'django.contrib.gis.geos.geometry.GEOSGeometry',
              'django.contrib.gis.geos.polygon.GEOSIndexError': 'django.contrib.gis.geos.error.GEOSIndexError',
              'django.contrib.gis.geos.polygon.LinearRing': 'django.contrib.gis.geos.linestring.LinearRing',
              'django.contrib.gis.geos.polygon.byref': 'ctypes.byref',
              'django.contrib.gis.geos.polygon.c_uint': 'ctypes.c_uint',
              'django.contrib.gis.geos.polygon.capi': 'django.contrib.gis.geos.prototypes',
              'django.contrib.gis.geos.polygon.get_pointer_arr': 'django.contrib.gis.geos.libgeos.get_pointer_arr',
              'django.contrib.gis.geos.prepared.GEOSBase': 'django.contrib.gis.geos.base.GEOSBase',
              'django.contrib.gis.geos.prepared.GEOSGeometry': 'django.contrib.gis.geos.geometry.GEOSGeometry',
              'django.contrib.gis.geos.prepared.capi': 'django.contrib.gis.geos.prototypes.prepared',
              'django.contrib.gis.geos.prototypes.*': 'django.contrib.gis.geos.prototypes.topology.*',
              'django.contrib.gis.geos.prototypes.coordseq.CS_PTR': 'django.contrib.gis.geos.libgeos.CS_PTR',
              'django.contrib.gis.geos.prototypes.coordseq.GEOM_PTR': 'django.contrib.gis.geos.libgeos.GEOM_PTR',
              'django.contrib.gis.geos.prototypes.coordseq.GEOSException': 'django.contrib.gis.geos.prototypes.errcheck.GEOSException',
              'django.contrib.gis.geos.prototypes.coordseq.GEOSFunc': 'django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc',
              'django.contrib.gis.geos.prototypes.coordseq.POINTER': 'ctypes.POINTER',
              'django.contrib.gis.geos.prototypes.coordseq.c_double': 'ctypes.c_double',
              'django.contrib.gis.geos.prototypes.coordseq.c_int': 'ctypes.c_int',
              'django.contrib.gis.geos.prototypes.coordseq.c_uint': 'ctypes.c_uint',
              'django.contrib.gis.geos.prototypes.coordseq.last_arg_byref': 'django.contrib.gis.geos.prototypes.errcheck.last_arg_byref',
              'django.contrib.gis.geos.prototypes.create_collection': 'django.contrib.gis.geos.prototypes.geom.create_collection',
              'django.contrib.gis.geos.prototypes.create_cs': 'django.contrib.gis.geos.prototypes.coordseq.create_cs',
              'django.contrib.gis.geos.prototypes.create_linearring': 'django.contrib.gis.geos.prototypes.geom.create_linearring',
              'django.contrib.gis.geos.prototypes.create_linestring': 'django.contrib.gis.geos.prototypes.geom.create_linestring',
              'django.contrib.gis.geos.prototypes.create_point': 'django.contrib.gis.geos.prototypes.geom.create_point',
              'django.contrib.gis.geos.prototypes.create_polygon': 'django.contrib.gis.geos.prototypes.geom.create_polygon',
              'django.contrib.gis.geos.prototypes.cs_clone': 'django.contrib.gis.geos.prototypes.coordseq.cs_clone',
              'django.contrib.gis.geos.prototypes.cs_getdims': 'django.contrib.gis.geos.prototypes.coordseq.cs_getdims',
              'django.contrib.gis.geos.prototypes.cs_getordinate': 'django.contrib.gis.geos.prototypes.coordseq.cs_getordinate',
              'django.contrib.gis.geos.prototypes.cs_getsize': 'django.contrib.gis.geos.prototypes.coordseq.cs_getsize',
              'django.contrib.gis.geos.prototypes.cs_getx': 'django.contrib.gis.geos.prototypes.coordseq.cs_getx',
              'django.contrib.gis.geos.prototypes.cs_gety': 'django.contrib.gis.geos.prototypes.coordseq.cs_gety',
              'django.contrib.gis.geos.prototypes.cs_getz': 'django.contrib.gis.geos.prototypes.coordseq.cs_getz',
              'django.contrib.gis.geos.prototypes.cs_setordinate': 'django.contrib.gis.geos.prototypes.coordseq.cs_setordinate',
              'django.contrib.gis.geos.prototypes.cs_setx': 'django.contrib.gis.geos.prototypes.coordseq.cs_setx',
              'django.contrib.gis.geos.prototypes.cs_sety': 'django.contrib.gis.geos.prototypes.coordseq.cs_sety',
              'django.contrib.gis.geos.prototypes.cs_setz': 'django.contrib.gis.geos.prototypes.coordseq.cs_setz',
              'django.contrib.gis.geos.prototypes.destroy_geom': 'django.contrib.gis.geos.prototypes.geom.destroy_geom',
              'django.contrib.gis.geos.prototypes.errcheck.CDLL': 'ctypes.CDLL',
              'django.contrib.gis.geos.prototypes.errcheck.GEOSException': 'django.contrib.gis.geos.error.GEOSException',
              'django.contrib.gis.geos.prototypes.errcheck.GEOSFunc': 'django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc',
              'django.contrib.gis.geos.prototypes.errcheck.GEOS_VERSION': 'django.contrib.gis.geos.libgeos.GEOS_VERSION',
              'django.contrib.gis.geos.prototypes.errcheck.c_void_p': 'ctypes.c_void_p',
              'django.contrib.gis.geos.prototypes.errcheck.os': 'os',
              'django.contrib.gis.geos.prototypes.errcheck.string_at': 'ctypes.string_at',
              'django.contrib.gis.geos.prototypes.from_hex': 'django.contrib.gis.geos.prototypes.geom.from_hex',
              'django.contrib.gis.geos.prototypes.from_wkb': 'django.contrib.gis.geos.prototypes.geom.from_wkb',
              'django.contrib.gis.geos.prototypes.from_wkt': 'django.contrib.gis.geos.prototypes.geom.from_wkt',
              'django.contrib.gis.geos.prototypes.geom.CS_PTR': 'django.contrib.gis.geos.libgeos.CS_PTR',
              'django.contrib.gis.geos.prototypes.geom.GEOM_PTR': 'django.contrib.gis.geos.libgeos.GEOM_PTR',
              'django.contrib.gis.geos.prototypes.geom.GEOSFunc': 'django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc',
              'django.contrib.gis.geos.prototypes.geom.GEOS_PREPARE': 'django.contrib.gis.geos.libgeos.GEOS_PREPARE',
              'django.contrib.gis.geos.prototypes.geom.POINTER': 'ctypes.POINTER',
              'django.contrib.gis.geos.prototypes.geom.PREPGEOM_PTR': 'django.contrib.gis.geos.libgeos.PREPGEOM_PTR',
              'django.contrib.gis.geos.prototypes.geom.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.geos.prototypes.geom.c_int': 'ctypes.c_int',
              'django.contrib.gis.geos.prototypes.geom.c_size_t': 'ctypes.c_size_t',
              'django.contrib.gis.geos.prototypes.geom.c_ubyte': 'ctypes.c_ubyte',
              'django.contrib.gis.geos.prototypes.geom.c_uint': 'ctypes.c_uint',
              'django.contrib.gis.geos.prototypes.geom.check_geom': 'django.contrib.gis.geos.prototypes.errcheck.check_geom',
              'django.contrib.gis.geos.prototypes.geom.check_minus_one': 'django.contrib.gis.geos.prototypes.errcheck.check_minus_one',
              'django.contrib.gis.geos.prototypes.geom.check_sized_string': 'django.contrib.gis.geos.prototypes.errcheck.check_sized_string',
              'django.contrib.gis.geos.prototypes.geom.check_string': 'django.contrib.gis.geos.prototypes.errcheck.check_string',
              'django.contrib.gis.geos.prototypes.geom.check_zero': 'django.contrib.gis.geos.prototypes.errcheck.check_zero',
              'django.contrib.gis.geos.prototypes.geom_clone': 'django.contrib.gis.geos.prototypes.geom.geom_clone',
              'django.contrib.gis.geos.prototypes.geos_contains': 'django.contrib.gis.geos.prototypes.predicates.geos_contains',
              'django.contrib.gis.geos.prototypes.geos_crosses': 'django.contrib.gis.geos.prototypes.predicates.geos_crosses',
              'django.contrib.gis.geos.prototypes.geos_disjoint': 'django.contrib.gis.geos.prototypes.predicates.geos_disjoint',
              'django.contrib.gis.geos.prototypes.geos_equals': 'django.contrib.gis.geos.prototypes.predicates.geos_equals',
              'django.contrib.gis.geos.prototypes.geos_equalsexact': 'django.contrib.gis.geos.prototypes.predicates.geos_equalsexact',
              'django.contrib.gis.geos.prototypes.geos_get_srid': 'django.contrib.gis.geos.prototypes.geom.geos_get_srid',
              'django.contrib.gis.geos.prototypes.geos_hasz': 'django.contrib.gis.geos.prototypes.predicates.geos_hasz',
              'django.contrib.gis.geos.prototypes.geos_intersects': 'django.contrib.gis.geos.prototypes.predicates.geos_intersects',
              'django.contrib.gis.geos.prototypes.geos_isempty': 'django.contrib.gis.geos.prototypes.predicates.geos_isempty',
              'django.contrib.gis.geos.prototypes.geos_isring': 'django.contrib.gis.geos.prototypes.predicates.geos_isring',
              'django.contrib.gis.geos.prototypes.geos_issimple': 'django.contrib.gis.geos.prototypes.predicates.geos_issimple',
              'django.contrib.gis.geos.prototypes.geos_isvalid': 'django.contrib.gis.geos.prototypes.predicates.geos_isvalid',
              'django.contrib.gis.geos.prototypes.geos_normalize': 'django.contrib.gis.geos.prototypes.geom.geos_normalize',
              'django.contrib.gis.geos.prototypes.geos_overlaps': 'django.contrib.gis.geos.prototypes.predicates.geos_overlaps',
              'django.contrib.gis.geos.prototypes.geos_relatepattern': 'django.contrib.gis.geos.prototypes.predicates.geos_relatepattern',
              'django.contrib.gis.geos.prototypes.geos_set_srid': 'django.contrib.gis.geos.prototypes.geom.geos_set_srid',
              'django.contrib.gis.geos.prototypes.geos_touches': 'django.contrib.gis.geos.prototypes.predicates.geos_touches',
              'django.contrib.gis.geos.prototypes.geos_type': 'django.contrib.gis.geos.prototypes.geom.geos_type',
              'django.contrib.gis.geos.prototypes.geos_typeid': 'django.contrib.gis.geos.prototypes.geom.geos_typeid',
              'django.contrib.gis.geos.prototypes.geos_within': 'django.contrib.gis.geos.prototypes.predicates.geos_within',
              'django.contrib.gis.geos.prototypes.get_cs': 'django.contrib.gis.geos.prototypes.coordseq.get_cs',
              'django.contrib.gis.geos.prototypes.get_dims': 'django.contrib.gis.geos.prototypes.geom.get_dims',
              'django.contrib.gis.geos.prototypes.get_extring': 'django.contrib.gis.geos.prototypes.geom.get_extring',
              'django.contrib.gis.geos.prototypes.get_geomn': 'django.contrib.gis.geos.prototypes.geom.get_geomn',
              'django.contrib.gis.geos.prototypes.get_intring': 'django.contrib.gis.geos.prototypes.geom.get_intring',
              'django.contrib.gis.geos.prototypes.get_nrings': 'django.contrib.gis.geos.prototypes.geom.get_nrings',
              'django.contrib.gis.geos.prototypes.get_num_coords': 'django.contrib.gis.geos.prototypes.geom.get_num_coords',
              'django.contrib.gis.geos.prototypes.get_num_geoms': 'django.contrib.gis.geos.prototypes.geom.get_num_geoms',
              'django.contrib.gis.geos.prototypes.io.GEOM_PTR': 'django.contrib.gis.geos.libgeos.GEOM_PTR',
              'django.contrib.gis.geos.prototypes.io.GEOSBase': 'django.contrib.gis.geos.base.GEOSBase',
              'django.contrib.gis.geos.prototypes.io.GEOSFunc': 'django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc',
              'django.contrib.gis.geos.prototypes.io.POINTER': 'ctypes.POINTER',
              'django.contrib.gis.geos.prototypes.io.Structure': 'ctypes.Structure',
              'django.contrib.gis.geos.prototypes.io.byref': 'ctypes.byref',
              'django.contrib.gis.geos.prototypes.io.c_char': 'ctypes.c_char',
              'django.contrib.gis.geos.prototypes.io.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.geos.prototypes.io.c_int': 'ctypes.c_int',
              'django.contrib.gis.geos.prototypes.io.c_size_t': 'ctypes.c_size_t',
              'django.contrib.gis.geos.prototypes.io.c_uchar_p': 'django.contrib.gis.geos.prototypes.geom.c_uchar_p',
              'django.contrib.gis.geos.prototypes.io.check_geom': 'django.contrib.gis.geos.prototypes.errcheck.check_geom',
              'django.contrib.gis.geos.prototypes.io.check_sized_string': 'django.contrib.gis.geos.prototypes.errcheck.check_sized_string',
              'django.contrib.gis.geos.prototypes.io.check_string': 'django.contrib.gis.geos.prototypes.errcheck.check_string',
              'django.contrib.gis.geos.prototypes.io.geos_char_p': 'django.contrib.gis.geos.prototypes.geom.geos_char_p',
              'django.contrib.gis.geos.prototypes.io.threading': 'threading',
              'django.contrib.gis.geos.prototypes.misc.GEOM_PTR': 'django.contrib.gis.geos.libgeos.GEOM_PTR',
              'django.contrib.gis.geos.prototypes.misc.GEOSFunc': 'django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc',
              'django.contrib.gis.geos.prototypes.misc.GEOS_PREPARE': 'django.contrib.gis.geos.libgeos.GEOS_PREPARE',
              'django.contrib.gis.geos.prototypes.misc.POINTER': 'ctypes.POINTER',
              'django.contrib.gis.geos.prototypes.misc.c_double': 'ctypes.c_double',
              'django.contrib.gis.geos.prototypes.misc.c_int': 'ctypes.c_int',
              'django.contrib.gis.geos.prototypes.misc.check_dbl': 'django.contrib.gis.geos.prototypes.errcheck.check_dbl',
              'django.contrib.gis.geos.prototypes.misc.check_string': 'django.contrib.gis.geos.prototypes.errcheck.check_string',
              'django.contrib.gis.geos.prototypes.misc.geos_char_p': 'django.contrib.gis.geos.prototypes.geom.geos_char_p',
              'django.contrib.gis.geos.prototypes.predicates.GEOM_PTR': 'django.contrib.gis.geos.libgeos.GEOM_PTR',
              'django.contrib.gis.geos.prototypes.predicates.GEOSFunc': 'django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc',
              'django.contrib.gis.geos.prototypes.predicates.c_char': 'ctypes.c_char',
              'django.contrib.gis.geos.prototypes.predicates.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.geos.prototypes.predicates.c_double': 'ctypes.c_double',
              'django.contrib.gis.geos.prototypes.predicates.check_predicate': 'django.contrib.gis.geos.prototypes.errcheck.check_predicate',
              'django.contrib.gis.geos.prototypes.prepared.GEOM_PTR': 'django.contrib.gis.geos.libgeos.GEOM_PTR',
              'django.contrib.gis.geos.prototypes.prepared.GEOSFunc': 'django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc',
              'django.contrib.gis.geos.prototypes.prepared.PREPGEOM_PTR': 'django.contrib.gis.geos.libgeos.PREPGEOM_PTR',
              'django.contrib.gis.geos.prototypes.prepared.c_char': 'ctypes.c_char',
              'django.contrib.gis.geos.prototypes.prepared.check_predicate': 'django.contrib.gis.geos.prototypes.errcheck.check_predicate',
              'django.contrib.gis.geos.prototypes.threadsafe.CONTEXT_PTR': 'django.contrib.gis.geos.libgeos.CONTEXT_PTR',
              'django.contrib.gis.geos.prototypes.threadsafe.error_h': 'django.contrib.gis.geos.libgeos.error_h',
              'django.contrib.gis.geos.prototypes.threadsafe.lgeos': 'django.contrib.gis.geos.libgeos.lgeos',
              'django.contrib.gis.geos.prototypes.threadsafe.notice_h': 'django.contrib.gis.geos.libgeos.notice_h',
              'django.contrib.gis.geos.prototypes.threadsafe.threading': 'threading',
              'django.contrib.gis.geos.prototypes.to_hex': 'django.contrib.gis.geos.prototypes.geom.to_hex',
              'django.contrib.gis.geos.prototypes.to_wkb': 'django.contrib.gis.geos.prototypes.geom.to_wkb',
              'django.contrib.gis.geos.prototypes.to_wkt': 'django.contrib.gis.geos.prototypes.geom.to_wkt',
              'django.contrib.gis.geos.prototypes.topology.GEOM_PTR': 'django.contrib.gis.geos.libgeos.GEOM_PTR',
              'django.contrib.gis.geos.prototypes.topology.GEOSFunc': 'django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc',
              'django.contrib.gis.geos.prototypes.topology.GEOS_PREPARE': 'django.contrib.gis.geos.libgeos.GEOS_PREPARE',
              'django.contrib.gis.geos.prototypes.topology.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.geos.prototypes.topology.c_double': 'ctypes.c_double',
              'django.contrib.gis.geos.prototypes.topology.c_int': 'ctypes.c_int',
              'django.contrib.gis.geos.prototypes.topology.check_geom': 'django.contrib.gis.geos.prototypes.errcheck.check_geom',
              'django.contrib.gis.geos.prototypes.topology.check_string': 'django.contrib.gis.geos.prototypes.errcheck.check_string',
              'django.contrib.gis.geos.prototypes.topology.geos_char_p': 'django.contrib.gis.geos.prototypes.geom.geos_char_p',
              'django.contrib.gis.geos.tests.TestSuite': 'django.utils.unittest.TestSuite',
              'django.contrib.gis.geos.tests.TextTestRunner': 'django.utils.unittest.TextTestRunner',
              'django.contrib.gis.geos.tests.test_geos': 'django.contrib.gis.geos.tests.test_geos',
              'django.contrib.gis.geos.tests.test_geos.*': 'django.contrib.gis.geos.*',
              'django.contrib.gis.geos.tests.test_geos.GEOSBase': 'django.contrib.gis.geos.base.GEOSBase',
              'django.contrib.gis.geos.tests.test_geos.GEOS_PREPARE': 'django.contrib.gis.geos.libgeos.GEOS_PREPARE',
              'django.contrib.gis.geos.tests.test_geos.StringIO': 'StringIO.StringIO',
              'django.contrib.gis.geos.tests.test_geos.TestDataMixin': 'django.contrib.gis.geometry.test_data.TestDataMixin',
              'django.contrib.gis.geos.tests.test_geos.a2b_hex': 'binascii.a2b_hex',
              'django.contrib.gis.geos.tests.test_geos.b2a_hex': 'binascii.b2a_hex',
              'django.contrib.gis.geos.tests.test_geos.cPickle': 'cPickle',
              'django.contrib.gis.geos.tests.test_geos.copy': 'django.utils.copycompat',
              'django.contrib.gis.geos.tests.test_geos.ctypes': 'ctypes',
              'django.contrib.gis.geos.tests.test_geos.gdal': 'django.contrib.gis.geos.base.gdal',
              'django.contrib.gis.geos.tests.test_geos.numpy': 'django.contrib.gis.geos.base.numpy',
              'django.contrib.gis.geos.tests.test_geos.pickle': 'pickle',
              'django.contrib.gis.geos.tests.test_geos.random': 'random',
              'django.contrib.gis.geos.tests.test_geos.sys': 'sys',
              'django.contrib.gis.geos.tests.test_geos.unittest': 'unittest',
              'django.contrib.gis.geos.tests.test_geos.warnings': 'warnings',
              'django.contrib.gis.geos.tests.test_geos_mutation': 'django.contrib.gis.geos.tests.test_geos_mutation',
              'django.contrib.gis.geos.tests.test_geos_mutation.*': 'django.contrib.gis.geos.*',
              'django.contrib.gis.geos.tests.test_geos_mutation.GEOSIndexError': 'django.contrib.gis.geos.error.GEOSIndexError',
              'django.contrib.gis.geos.tests.test_geos_mutation.copy': 'django.utils.copycompat',
              'django.contrib.gis.geos.tests.test_geos_mutation.unittest': 'django.utils.unittest',
              'django.contrib.gis.geos.tests.test_io': 'django.contrib.gis.geos.tests.test_io',
              'django.contrib.gis.geos.tests.test_io.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.geos.tests.test_io.WKBReader': 'django.contrib.gis.geos.WKBReader',
              'django.contrib.gis.geos.tests.test_io.WKBWriter': 'django.contrib.gis.geos.WKBWriter',
              'django.contrib.gis.geos.tests.test_io.WKTReader': 'django.contrib.gis.geos.WKTReader',
              'django.contrib.gis.geos.tests.test_io.WKTWriter': 'django.contrib.gis.geos.WKTWriter',
              'django.contrib.gis.geos.tests.test_io.binascii': 'binascii',
              'django.contrib.gis.geos.tests.test_io.ctypes': 'ctypes',
              'django.contrib.gis.geos.tests.test_io.geos_version_info': 'django.contrib.gis.geos.geos_version_info',
              'django.contrib.gis.geos.tests.test_io.unittest': 'unittest',
              'django.contrib.gis.geos.tests.test_mutable_list': 'django.contrib.gis.geos.tests.test_mutable_list',
              'django.contrib.gis.geos.tests.test_mutable_list.ListMixin': 'django.contrib.gis.geos.mutable_list.ListMixin',
              'django.contrib.gis.geos.tests.test_mutable_list.unittest': 'django.utils.unittest',
              'django.contrib.gis.geos.wkt_regex': 'django.contrib.gis.geos.geometry.wkt_regex',
              'django.contrib.gis.management.base.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.contrib.gis.management.base.CommandError': 'django.core.management.base.CommandError',
              'django.contrib.gis.management.commands.inspectdb.CommandError': 'django.core.management.base.CommandError',
              'django.contrib.gis.management.commands.inspectdb.InspectDBCommand': 'django.core.management.commands.inspectdb.Command',
              'django.contrib.gis.management.commands.inspectdb.make_option': 'optparse.make_option',
              'django.contrib.gis.management.commands.ogrinspect.ArgsCommand': 'django.contrib.gis.management.base.ArgsCommand',
              'django.contrib.gis.management.commands.ogrinspect.CommandError': 'django.contrib.gis.management.base.CommandError',
              'django.contrib.gis.management.commands.ogrinspect._ogrinspect': 'django.contrib.gis.utils.ogrinspect._ogrinspect',
              'django.contrib.gis.management.commands.ogrinspect.gdal': 'django.contrib.gis.gdal',
              'django.contrib.gis.management.commands.ogrinspect.make_option': 'optparse.make_option',
              'django.contrib.gis.management.commands.ogrinspect.mapping': 'django.contrib.gis.utils.ogrinspect.mapping',
              'django.contrib.gis.management.commands.ogrinspect.os': 'os',
              'django.contrib.gis.management.commands.ogrinspect.sys': 'sys',
              'django.contrib.gis.maps.google.GEvent': 'django.contrib.gis.maps.google.overlays.GEvent',
              'django.contrib.gis.maps.google.GIcon': 'django.contrib.gis.maps.google.overlays.GIcon',
              'django.contrib.gis.maps.google.GMarker': 'django.contrib.gis.maps.google.overlays.GMarker',
              'django.contrib.gis.maps.google.GPolygon': 'django.contrib.gis.maps.google.overlays.GPolygon',
              'django.contrib.gis.maps.google.GPolyline': 'django.contrib.gis.maps.google.overlays.GPolyline',
              'django.contrib.gis.maps.google.GoogleMap': 'django.contrib.gis.maps.google.gmap.GoogleMap',
              'django.contrib.gis.maps.google.GoogleMapSet': 'django.contrib.gis.maps.google.gmap.GoogleMapSet',
              'django.contrib.gis.maps.google.GoogleZoom': 'django.contrib.gis.maps.google.zoom.GoogleZoom',
              'django.contrib.gis.maps.google.gmap.GIcon': 'django.contrib.gis.maps.google.overlays.GIcon',
              'django.contrib.gis.maps.google.gmap.GMarker': 'django.contrib.gis.maps.google.overlays.GMarker',
              'django.contrib.gis.maps.google.gmap.GPolygon': 'django.contrib.gis.maps.google.overlays.GPolygon',
              'django.contrib.gis.maps.google.gmap.GPolyline': 'django.contrib.gis.maps.google.overlays.GPolyline',
              'django.contrib.gis.maps.google.gmap.geos': 'django.contrib.gis.geos',
              'django.contrib.gis.maps.google.gmap.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.gis.maps.google.gmap.render_to_string': 'django.template.loader.render_to_string',
              'django.contrib.gis.maps.google.gmap.settings': 'django.conf.settings',
              'django.contrib.gis.maps.google.overlays.LineString': 'django.contrib.gis.geos.LineString',
              'django.contrib.gis.maps.google.overlays.LinearRing': 'django.contrib.gis.geos.LinearRing',
              'django.contrib.gis.maps.google.overlays.Point': 'django.contrib.gis.geos.Point',
              'django.contrib.gis.maps.google.overlays.Polygon': 'django.contrib.gis.geos.Polygon',
              'django.contrib.gis.maps.google.overlays.fromstr': 'django.contrib.gis.geos.fromstr',
              'django.contrib.gis.maps.google.overlays.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.gis.maps.google.zoom.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.maps.google.zoom.GoogleMapException': 'django.contrib.gis.maps.google.gmap.GoogleMapException',
              'django.contrib.gis.maps.google.zoom.LinearRing': 'django.contrib.gis.geos.LinearRing',
              'django.contrib.gis.maps.google.zoom.Point': 'django.contrib.gis.geos.Point',
              'django.contrib.gis.maps.google.zoom.Polygon': 'django.contrib.gis.geos.Polygon',
              'django.contrib.gis.maps.google.zoom.atan': 'math.atan',
              'django.contrib.gis.maps.google.zoom.cos': 'math.cos',
              'django.contrib.gis.maps.google.zoom.exp': 'math.exp',
              'django.contrib.gis.maps.google.zoom.log': 'math.log',
              'django.contrib.gis.maps.google.zoom.pi': 'math.pi',
              'django.contrib.gis.maps.google.zoom.sin': 'math.sin',
              'django.contrib.gis.measure.Decimal': 'decimal.Decimal',
              'django.contrib.gis.models.connection': 'django.db.connection',
              'django.contrib.gis.shortcuts.HttpResponse': 'django.http.HttpResponse',
              'django.contrib.gis.shortcuts.cStringIO': 'cStringIO',
              'django.contrib.gis.shortcuts.loader': 'django.template.loader',
              'django.contrib.gis.shortcuts.settings': 'django.conf.settings',
              'django.contrib.gis.shortcuts.zipfile': 'zipfile',
              'django.contrib.gis.sitemaps.GeoRSSSitemap': 'django.contrib.gis.sitemaps.georss.GeoRSSSitemap',
              'django.contrib.gis.sitemaps.KMLSitemap': 'django.contrib.gis.sitemaps.kml.KMLSitemap',
              'django.contrib.gis.sitemaps.KMZSitemap': 'django.contrib.gis.sitemaps.kml.KMZSitemap',
              'django.contrib.gis.sitemaps.georss.Sitemap': 'django.contrib.sitemaps.Sitemap',
              'django.contrib.gis.sitemaps.georss.urlresolvers': 'django.core.urlresolvers',
              'django.contrib.gis.sitemaps.kml.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.sitemaps.kml.Sitemap': 'django.contrib.sitemaps.Sitemap',
              'django.contrib.gis.sitemaps.kml.models': 'django.db.models',
              'django.contrib.gis.sitemaps.kml.urlresolvers': 'django.core.urlresolvers',
              'django.contrib.gis.sitemaps.views.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.contrib.gis.sitemaps.views.EmptyPage': 'django.core.paginator.EmptyPage',
              'django.contrib.gis.sitemaps.views.GeometryField': 'django.contrib.gis.db.models.fields.GeometryField',
              'django.contrib.gis.sitemaps.views.Http404': 'django.http.Http404',
              'django.contrib.gis.sitemaps.views.HttpResponse': 'django.http.HttpResponse',
              'django.contrib.gis.sitemaps.views.PageNotAnInteger': 'django.core.paginator.PageNotAnInteger',
              'django.contrib.gis.sitemaps.views.connections': 'django.db.connections',
              'django.contrib.gis.sitemaps.views.get_current_site': 'django.contrib.sites.models.get_current_site',
              'django.contrib.gis.sitemaps.views.get_model': 'django.db.models.get_model',
              'django.contrib.gis.sitemaps.views.loader': 'django.template.loader',
              'django.contrib.gis.sitemaps.views.render_to_kml': 'django.contrib.gis.shortcuts.render_to_kml',
              'django.contrib.gis.sitemaps.views.render_to_kmz': 'django.contrib.gis.shortcuts.render_to_kmz',
              'django.contrib.gis.sitemaps.views.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.gis.sitemaps.views.urlresolvers': 'django.core.urlresolvers',
              'django.contrib.gis.tests.DjangoTestSuiteRunner': 'django.test.simple.DjangoTestSuiteRunner',
              'django.contrib.gis.tests.GEOS_PREPARE': 'django.contrib.gis.geos.GEOS_PREPARE',
              'django.contrib.gis.tests.HAS_GDAL': 'django.contrib.gis.gdal.HAS_GDAL',
              'django.contrib.gis.tests.HAS_GEOIP': 'django.contrib.gis.utils.HAS_GEOIP',
              'django.contrib.gis.tests.base_run_tests': 'django.test.simple.run_tests',
              'django.contrib.gis.tests.build_suite': 'django.test.simple.build_suite',
              'django.contrib.gis.tests.connection': 'django.db.connection',
              'django.contrib.gis.tests.distapp.models.models': 'django.contrib.gis.db.models',
              'django.contrib.gis.tests.distapp.tests.AustraliaCity': 'django.contrib.gis.tests.distapp.models.AustraliaCity',
              'django.contrib.gis.tests.distapp.tests.CensusZipcode': 'django.contrib.gis.tests.distapp.models.CensusZipcode',
              'django.contrib.gis.tests.distapp.tests.D': 'django.contrib.gis.measure.D',
              'django.contrib.gis.tests.distapp.tests.Decimal': 'decimal.Decimal',
              'django.contrib.gis.tests.distapp.tests.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.tests.distapp.tests.Interstate': 'django.contrib.gis.tests.distapp.models.Interstate',
              'django.contrib.gis.tests.distapp.tests.LineString': 'django.contrib.gis.geos.LineString',
              'django.contrib.gis.tests.distapp.tests.Point': 'django.contrib.gis.geos.Point',
              'django.contrib.gis.tests.distapp.tests.Q': 'django.db.models.Q',
              'django.contrib.gis.tests.distapp.tests.SouthTexasCity': 'django.contrib.gis.tests.distapp.models.SouthTexasCity',
              'django.contrib.gis.tests.distapp.tests.SouthTexasCityFt': 'django.contrib.gis.tests.distapp.models.SouthTexasCityFt',
              'django.contrib.gis.tests.distapp.tests.SouthTexasInterstate': 'django.contrib.gis.tests.distapp.models.SouthTexasInterstate',
              'django.contrib.gis.tests.distapp.tests.SouthTexasZipcode': 'django.contrib.gis.tests.distapp.models.SouthTexasZipcode',
              'django.contrib.gis.tests.distapp.tests.TestCase': 'django.test.TestCase',
              'django.contrib.gis.tests.distapp.tests.connection': 'django.db.connection',
              'django.contrib.gis.tests.distapp.tests.no_oracle': 'django.contrib.gis.tests.utils.no_oracle',
              'django.contrib.gis.tests.distapp.tests.no_spatialite': 'django.contrib.gis.tests.utils.no_spatialite',
              'django.contrib.gis.tests.distapp.tests.oracle': 'django.contrib.gis.tests.utils.oracle',
              'django.contrib.gis.tests.distapp.tests.os': 'os',
              'django.contrib.gis.tests.distapp.tests.postgis': 'django.contrib.gis.tests.utils.postgis',
              'django.contrib.gis.tests.distapp.tests.spatialite': 'django.contrib.gis.tests.utils.spatialite',
              'django.contrib.gis.tests.gdal_tests': 'django.contrib.gis.gdal.tests',
              'django.contrib.gis.tests.geo3d.models.models': 'django.contrib.gis.db.models',
              'django.contrib.gis.tests.geo3d.tests.City3D': 'django.contrib.gis.tests.geo3d.models.City3D',
              'django.contrib.gis.tests.geo3d.tests.Extent3D': 'django.contrib.gis.db.models.Extent3D',
              'django.contrib.gis.tests.geo3d.tests.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.tests.geo3d.tests.Interstate2D': 'django.contrib.gis.tests.geo3d.models.Interstate2D',
              'django.contrib.gis.tests.geo3d.tests.Interstate3D': 'django.contrib.gis.tests.geo3d.models.Interstate3D',
              'django.contrib.gis.tests.geo3d.tests.InterstateProj2D': 'django.contrib.gis.tests.geo3d.models.InterstateProj2D',
              'django.contrib.gis.tests.geo3d.tests.InterstateProj3D': 'django.contrib.gis.tests.geo3d.models.InterstateProj3D',
              'django.contrib.gis.tests.geo3d.tests.LayerMapError': 'django.contrib.gis.utils.LayerMapError',
              'django.contrib.gis.tests.geo3d.tests.LayerMapping': 'django.contrib.gis.utils.LayerMapping',
              'django.contrib.gis.tests.geo3d.tests.MultiPoint3D': 'django.contrib.gis.tests.geo3d.models.MultiPoint3D',
              'django.contrib.gis.tests.geo3d.tests.Point': 'django.contrib.gis.geos.Point',
              'django.contrib.gis.tests.geo3d.tests.Point2D': 'django.contrib.gis.tests.geo3d.models.Point2D',
              'django.contrib.gis.tests.geo3d.tests.Point3D': 'django.contrib.gis.tests.geo3d.models.Point3D',
              'django.contrib.gis.tests.geo3d.tests.Polygon': 'django.contrib.gis.geos.Polygon',
              'django.contrib.gis.tests.geo3d.tests.Polygon2D': 'django.contrib.gis.tests.geo3d.models.Polygon2D',
              'django.contrib.gis.tests.geo3d.tests.Polygon3D': 'django.contrib.gis.tests.geo3d.models.Polygon3D',
              'django.contrib.gis.tests.geo3d.tests.TestCase': 'django.utils.unittest.TestCase',
              'django.contrib.gis.tests.geo3d.tests.Union': 'django.contrib.gis.db.models.Union',
              'django.contrib.gis.tests.geo3d.tests.os': 'os',
              'django.contrib.gis.tests.geo3d.tests.re': 're',
              'django.contrib.gis.tests.geoapp.feeds.City': 'django.contrib.gis.tests.geoapp.models.City',
              'django.contrib.gis.tests.geoapp.feeds.Country': 'django.contrib.gis.tests.geoapp.models.Country',
              'django.contrib.gis.tests.geoapp.feeds.Polygon': 'django.contrib.gis.geos.Polygon',
              'django.contrib.gis.tests.geoapp.feeds.feeds': 'django.contrib.gis.feeds',
              'django.contrib.gis.tests.geoapp.feeds.mysql': 'django.contrib.gis.tests.utils.mysql',
              'django.contrib.gis.tests.geoapp.models.models': 'django.contrib.gis.db.models',
              'django.contrib.gis.tests.geoapp.models.mysql': 'django.contrib.gis.tests.utils.mysql',
              'django.contrib.gis.tests.geoapp.models.spatialite': 'django.contrib.gis.tests.utils.spatialite',
              'django.contrib.gis.tests.geoapp.sitemaps.City': 'django.contrib.gis.tests.geoapp.models.City',
              'django.contrib.gis.tests.geoapp.sitemaps.Country': 'django.contrib.gis.tests.geoapp.models.Country',
              'django.contrib.gis.tests.geoapp.sitemaps.GeoRSSSitemap': 'django.contrib.gis.sitemaps.GeoRSSSitemap',
              'django.contrib.gis.tests.geoapp.sitemaps.KMLSitemap': 'django.contrib.gis.sitemaps.KMLSitemap',
              'django.contrib.gis.tests.geoapp.sitemaps.KMZSitemap': 'django.contrib.gis.sitemaps.KMZSitemap',
              'django.contrib.gis.tests.geoapp.sitemaps.feed_dict': 'django.contrib.gis.tests.geoapp.feeds.feed_dict',
              'django.contrib.gis.tests.geoapp.test_feeds.City': 'django.contrib.gis.tests.geoapp.models.City',
              'django.contrib.gis.tests.geoapp.test_feeds.Site': 'django.contrib.sites.models.Site',
              'django.contrib.gis.tests.geoapp.test_feeds.TestCase': 'django.test.TestCase',
              'django.contrib.gis.tests.geoapp.test_feeds.minidom': 'xml.dom.minidom',
              'django.contrib.gis.tests.geoapp.test_feeds.settings': 'django.conf.settings',
              'django.contrib.gis.tests.geoapp.test_regress.City': 'django.contrib.gis.tests.geoapp.models.City',
              'django.contrib.gis.tests.geoapp.test_regress.no_mysql': 'django.contrib.gis.tests.utils.no_mysql',
              'django.contrib.gis.tests.geoapp.test_regress.no_oracle': 'django.contrib.gis.tests.utils.no_oracle',
              'django.contrib.gis.tests.geoapp.test_regress.no_postgis': 'django.contrib.gis.tests.utils.no_postgis',
              'django.contrib.gis.tests.geoapp.test_regress.no_spatialite': 'django.contrib.gis.tests.utils.no_spatialite',
              'django.contrib.gis.tests.geoapp.test_regress.os': 'os',
              'django.contrib.gis.tests.geoapp.test_regress.render_to_kmz': 'django.contrib.gis.shortcuts.render_to_kmz',
              'django.contrib.gis.tests.geoapp.test_regress.unittest': 'unittest',
              'django.contrib.gis.tests.geoapp.test_sitemaps.City': 'django.contrib.gis.tests.geoapp.models.City',
              'django.contrib.gis.tests.geoapp.test_sitemaps.Country': 'django.contrib.gis.tests.geoapp.models.Country',
              'django.contrib.gis.tests.geoapp.test_sitemaps.Site': 'django.contrib.sites.models.Site',
              'django.contrib.gis.tests.geoapp.test_sitemaps.TestCase': 'django.test.TestCase',
              'django.contrib.gis.tests.geoapp.test_sitemaps.cStringIO': 'cStringIO',
              'django.contrib.gis.tests.geoapp.test_sitemaps.feed_dict': 'django.contrib.gis.tests.geoapp.feeds.feed_dict',
              'django.contrib.gis.tests.geoapp.test_sitemaps.minidom': 'xml.dom.minidom',
              'django.contrib.gis.tests.geoapp.test_sitemaps.settings': 'django.conf.settings',
              'django.contrib.gis.tests.geoapp.test_sitemaps.zipfile': 'zipfile',
              'django.contrib.gis.tests.geoapp.tests.City': 'django.contrib.gis.tests.geoapp.models.City',
              'django.contrib.gis.tests.geoapp.tests.Country': 'django.contrib.gis.tests.geoapp.models.Country',
              'django.contrib.gis.tests.geoapp.tests.Distance': 'django.contrib.gis.measure.Distance',
              'django.contrib.gis.tests.geoapp.tests.Feature': 'django.contrib.gis.tests.geoapp.models.Feature',
              'django.contrib.gis.tests.geoapp.tests.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.tests.geoapp.tests.GeoFeedTest': 'django.contrib.gis.tests.geoapp.test_feeds.GeoFeedTest',
              'django.contrib.gis.tests.geoapp.tests.GeoRegressionTests': 'django.contrib.gis.tests.geoapp.test_regress.GeoRegressionTests',
              'django.contrib.gis.tests.geoapp.tests.GeoSitemapTest': 'django.contrib.gis.tests.geoapp.test_sitemaps.GeoSitemapTest',
              'django.contrib.gis.tests.geoapp.tests.GeometryCollection': 'django.contrib.gis.geos.GeometryCollection',
              'django.contrib.gis.tests.geoapp.tests.LineString': 'django.contrib.gis.geos.LineString',
              'django.contrib.gis.tests.geoapp.tests.LinearRing': 'django.contrib.gis.geos.LinearRing',
              'django.contrib.gis.tests.geoapp.tests.MinusOneSRID': 'django.contrib.gis.tests.geoapp.models.MinusOneSRID',
              'django.contrib.gis.tests.geoapp.tests.PennsylvaniaCity': 'django.contrib.gis.tests.geoapp.models.PennsylvaniaCity',
              'django.contrib.gis.tests.geoapp.tests.Point': 'django.contrib.gis.geos.Point',
              'django.contrib.gis.tests.geoapp.tests.Polygon': 'django.contrib.gis.geos.Polygon',
              'django.contrib.gis.tests.geoapp.tests.State': 'django.contrib.gis.tests.geoapp.models.State',
              'django.contrib.gis.tests.geoapp.tests.TestCase': 'django.test.TestCase',
              'django.contrib.gis.tests.geoapp.tests.Track': 'django.contrib.gis.tests.geoapp.models.Track',
              'django.contrib.gis.tests.geoapp.tests.connection': 'django.db.connection',
              'django.contrib.gis.tests.geoapp.tests.fromstr': 'django.contrib.gis.geos.fromstr',
              'django.contrib.gis.tests.geoapp.tests.gdal': 'django.contrib.gis.gdal',
              'django.contrib.gis.tests.geoapp.tests.mysql': 'django.contrib.gis.tests.utils.mysql',
              'django.contrib.gis.tests.geoapp.tests.no_mysql': 'django.contrib.gis.tests.utils.no_mysql',
              'django.contrib.gis.tests.geoapp.tests.no_oracle': 'django.contrib.gis.tests.utils.no_oracle',
              'django.contrib.gis.tests.geoapp.tests.no_spatialite': 'django.contrib.gis.tests.utils.no_spatialite',
              'django.contrib.gis.tests.geoapp.tests.oracle': 'django.contrib.gis.tests.utils.oracle',
              'django.contrib.gis.tests.geoapp.tests.postgis': 'django.contrib.gis.tests.utils.postgis',
              'django.contrib.gis.tests.geoapp.tests.re': 're',
              'django.contrib.gis.tests.geoapp.tests.spatialite': 'django.contrib.gis.tests.utils.spatialite',
              'django.contrib.gis.tests.geoapp.urls.*': 'django.conf.urls.defaults.*',
              'django.contrib.gis.tests.geoapp.urls.feed_dict': 'django.contrib.gis.tests.geoapp.feeds.feed_dict',
              'django.contrib.gis.tests.geoapp.urls.sitemaps': 'django.contrib.gis.tests.geoapp.sitemaps.sitemaps',
              'django.contrib.gis.tests.geogapp.models.models': 'django.contrib.gis.db.models',
              'django.contrib.gis.tests.geogapp.tests.A': 'django.contrib.gis.measure.A',
              'django.contrib.gis.tests.geogapp.tests.City': 'django.contrib.gis.tests.geogapp.models.City',
              'django.contrib.gis.tests.geogapp.tests.County': 'django.contrib.gis.tests.geogapp.models.County',
              'django.contrib.gis.tests.geogapp.tests.D': 'django.contrib.gis.measure.D',
              'django.contrib.gis.tests.geogapp.tests.LayerMapping': 'django.contrib.gis.utils.LayerMapping',
              'django.contrib.gis.tests.geogapp.tests.TestCase': 'django.test.TestCase',
              'django.contrib.gis.tests.geogapp.tests.Zipcode': 'django.contrib.gis.tests.geogapp.models.Zipcode',
              'django.contrib.gis.tests.geogapp.tests.gdal': 'django.contrib.gis.gdal',
              'django.contrib.gis.tests.geogapp.tests.os': 'os',
              'django.contrib.gis.tests.geos_tests': 'django.contrib.gis.geos.tests',
              'django.contrib.gis.tests.get_app': 'django.db.models.get_app',
              'django.contrib.gis.tests.layermap.models.models': 'django.contrib.gis.db.models',
              'django.contrib.gis.tests.layermap.tests.City': 'django.contrib.gis.tests.layermap.models.City',
              'django.contrib.gis.tests.layermap.tests.County': 'django.contrib.gis.tests.layermap.models.County',
              'django.contrib.gis.tests.layermap.tests.CountyFeat': 'django.contrib.gis.tests.layermap.models.CountyFeat',
              'django.contrib.gis.tests.layermap.tests.DataSource': 'django.contrib.gis.gdal.DataSource',
              'django.contrib.gis.tests.layermap.tests.Decimal': 'decimal.Decimal',
              'django.contrib.gis.tests.layermap.tests.ICity1': 'django.contrib.gis.tests.layermap.models.ICity1',
              'django.contrib.gis.tests.layermap.tests.ICity2': 'django.contrib.gis.tests.layermap.models.ICity2',
              'django.contrib.gis.tests.layermap.tests.Interstate': 'django.contrib.gis.tests.layermap.models.Interstate',
              'django.contrib.gis.tests.layermap.tests.Invalid': 'django.contrib.gis.tests.layermap.models.Invalid',
              'django.contrib.gis.tests.layermap.tests.InvalidDecimal': 'django.contrib.gis.utils.layermapping.InvalidDecimal',
              'django.contrib.gis.tests.layermap.tests.LayerMapError': 'django.contrib.gis.utils.layermapping.LayerMapError',
              'django.contrib.gis.tests.layermap.tests.LayerMapping': 'django.contrib.gis.utils.layermapping.LayerMapping',
              'django.contrib.gis.tests.layermap.tests.MissingForeignKey': 'django.contrib.gis.utils.layermapping.MissingForeignKey',
              'django.contrib.gis.tests.layermap.tests.OGRException': 'django.contrib.gis.gdal.OGRException',
              'django.contrib.gis.tests.layermap.tests.State': 'django.contrib.gis.tests.layermap.models.State',
              'django.contrib.gis.tests.layermap.tests.TestCase': 'django.utils.unittest.TestCase',
              'django.contrib.gis.tests.layermap.tests.city_mapping': 'django.contrib.gis.tests.layermap.models.city_mapping',
              'django.contrib.gis.tests.layermap.tests.co_mapping': 'django.contrib.gis.tests.layermap.models.co_mapping',
              'django.contrib.gis.tests.layermap.tests.cofeat_mapping': 'django.contrib.gis.tests.layermap.models.cofeat_mapping',
              'django.contrib.gis.tests.layermap.tests.copy': 'django.utils.copycompat.copy',
              'django.contrib.gis.tests.layermap.tests.inter_mapping': 'django.contrib.gis.tests.layermap.models.inter_mapping',
              'django.contrib.gis.tests.layermap.tests.mysql': 'django.contrib.gis.tests.utils.mysql',
              'django.contrib.gis.tests.layermap.tests.os': 'os',
              'django.contrib.gis.tests.relatedapp.models.USStateField': 'django.contrib.localflavor.us.models.USStateField',
              'django.contrib.gis.tests.relatedapp.models.models': 'django.contrib.gis.db.models',
              'django.contrib.gis.tests.relatedapp.tests.Article': 'django.contrib.gis.tests.relatedapp.models.Article',
              'django.contrib.gis.tests.relatedapp.tests.Author': 'django.contrib.gis.tests.relatedapp.models.Author',
              'django.contrib.gis.tests.relatedapp.tests.Book': 'django.contrib.gis.tests.relatedapp.models.Book',
              'django.contrib.gis.tests.relatedapp.tests.City': 'django.contrib.gis.tests.relatedapp.models.City',
              'django.contrib.gis.tests.relatedapp.tests.Collect': 'django.contrib.gis.db.models.Collect',
              'django.contrib.gis.tests.relatedapp.tests.Count': 'django.contrib.gis.db.models.Count',
              'django.contrib.gis.tests.relatedapp.tests.DirectoryEntry': 'django.contrib.gis.tests.relatedapp.models.DirectoryEntry',
              'django.contrib.gis.tests.relatedapp.tests.Extent': 'django.contrib.gis.db.models.Extent',
              'django.contrib.gis.tests.relatedapp.tests.F': 'django.contrib.gis.db.models.F',
              'django.contrib.gis.tests.relatedapp.tests.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.tests.relatedapp.tests.GeoQuery': 'django.contrib.gis.db.models.sql.GeoQuery',
              'django.contrib.gis.tests.relatedapp.tests.Geometry': 'django.contrib.gis.geometry.backend.Geometry',
              'django.contrib.gis.tests.relatedapp.tests.Location': 'django.contrib.gis.tests.relatedapp.models.Location',
              'django.contrib.gis.tests.relatedapp.tests.MultiPoint': 'django.contrib.gis.geos.MultiPoint',
              'django.contrib.gis.tests.relatedapp.tests.Parcel': 'django.contrib.gis.tests.relatedapp.models.Parcel',
              'django.contrib.gis.tests.relatedapp.tests.Point': 'django.contrib.gis.geos.Point',
              'django.contrib.gis.tests.relatedapp.tests.TestCase': 'django.test.TestCase',
              'django.contrib.gis.tests.relatedapp.tests.Union': 'django.contrib.gis.db.models.Union',
              'django.contrib.gis.tests.relatedapp.tests.mysql': 'django.contrib.gis.tests.utils.mysql',
              'django.contrib.gis.tests.relatedapp.tests.no_mysql': 'django.contrib.gis.tests.utils.no_mysql',
              'django.contrib.gis.tests.relatedapp.tests.no_oracle': 'django.contrib.gis.tests.utils.no_oracle',
              'django.contrib.gis.tests.relatedapp.tests.no_spatialite': 'django.contrib.gis.tests.utils.no_spatialite',
              'django.contrib.gis.tests.relatedapp.tests.oracle': 'django.contrib.gis.tests.utils.oracle',
              'django.contrib.gis.tests.relatedapp.tests.pickle': 'pickle',
              'django.contrib.gis.tests.settings': 'django.conf.settings',
              'django.contrib.gis.tests.sys': 'sys',
              'django.contrib.gis.tests.test_geoforms': 'django.contrib.gis.tests.test_geoforms',
              'django.contrib.gis.tests.test_geoforms.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.tests.test_geoforms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.gis.tests.test_geoforms.forms': 'django.contrib.gis.forms',
              'django.contrib.gis.tests.test_geoforms.unittest': 'django.utils.unittest',
              'django.contrib.gis.tests.test_geoip': 'django.contrib.gis.tests.test_geoip',
              'django.contrib.gis.tests.test_geoip.GEOSGeometry': 'django.contrib.gis.geos.GEOSGeometry',
              'django.contrib.gis.tests.test_geoip.GeoIP': 'django.contrib.gis.utils.GeoIP',
              'django.contrib.gis.tests.test_geoip.GeoIPException': 'django.contrib.gis.utils.GeoIPException',
              'django.contrib.gis.tests.test_geoip.os': 'os',
              'django.contrib.gis.tests.test_geoip.settings': 'django.db.settings',
              'django.contrib.gis.tests.test_geoip.unittest': 'unittest',
              'django.contrib.gis.tests.test_measure': 'django.contrib.gis.tests.test_measure',
              'django.contrib.gis.tests.test_measure.A': 'django.contrib.gis.measure.A',
              'django.contrib.gis.tests.test_measure.Area': 'django.contrib.gis.measure.Area',
              'django.contrib.gis.tests.test_measure.D': 'django.contrib.gis.measure.D',
              'django.contrib.gis.tests.test_measure.Distance': 'django.contrib.gis.measure.Distance',
              'django.contrib.gis.tests.test_measure.unittest': 'django.utils.unittest',
              'django.contrib.gis.tests.test_spatialrefsys': 'django.contrib.gis.tests.test_spatialrefsys',
              'django.contrib.gis.tests.test_spatialrefsys.GDAL_VERSION': 'django.contrib.gis.gdal.GDAL_VERSION',
              'django.contrib.gis.tests.test_spatialrefsys.SpatialRefSys': 'django.contrib.gis.db.backends.spatialite.models.SpatialRefSys',
              'django.contrib.gis.tests.test_spatialrefsys.connection': 'django.db.connection',
              'django.contrib.gis.tests.test_spatialrefsys.mysql': 'django.contrib.gis.tests.utils.mysql',
              'django.contrib.gis.tests.test_spatialrefsys.no_mysql': 'django.contrib.gis.tests.utils.no_mysql',
              'django.contrib.gis.tests.test_spatialrefsys.oracle': 'django.contrib.gis.tests.utils.oracle',
              'django.contrib.gis.tests.test_spatialrefsys.postgis': 'django.contrib.gis.tests.utils.postgis',
              'django.contrib.gis.tests.test_spatialrefsys.spatialite': 'django.contrib.gis.tests.utils.spatialite',
              'django.contrib.gis.tests.test_spatialrefsys.unittest': 'django.utils.unittest',
              'django.contrib.gis.tests.unittest': 'django.utils.unittest',
              'django.contrib.gis.tests.utils.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.contrib.gis.tests.utils.settings': 'django.conf.settings',
              'django.contrib.gis.tests.warnings': 'warnings',
              'django.contrib.gis.utils.GeoIP': 'django.contrib.gis.utils.geoip.GeoIP',
              'django.contrib.gis.utils.GeoIPException': 'django.contrib.gis.utils.geoip.GeoIPException',
              'django.contrib.gis.utils.HAS_GDAL': 'django.contrib.gis.gdal.HAS_GDAL',
              'django.contrib.gis.utils.LayerMapError': 'django.contrib.gis.utils.layermapping.LayerMapError',
              'django.contrib.gis.utils.LayerMapping': 'django.contrib.gis.utils.layermapping.LayerMapping',
              'django.contrib.gis.utils.add_postgis_srs': 'django.contrib.gis.utils.srs.add_postgis_srs',
              'django.contrib.gis.utils.add_srs_entry': 'django.contrib.gis.utils.srs.add_srs_entry',
              'django.contrib.gis.utils.geoip.CDLL': 'ctypes.CDLL',
              'django.contrib.gis.utils.geoip.POINTER': 'ctypes.POINTER',
              'django.contrib.gis.utils.geoip.Point': 'django.contrib.gis.geos.Point',
              'django.contrib.gis.utils.geoip.Structure': 'ctypes.Structure',
              'django.contrib.gis.utils.geoip.c_char_p': 'ctypes.c_char_p',
              'django.contrib.gis.utils.geoip.c_float': 'ctypes.c_float',
              'django.contrib.gis.utils.geoip.c_int': 'ctypes.c_int',
              'django.contrib.gis.utils.geoip.find_library': 'ctypes.util.find_library',
              'django.contrib.gis.utils.geoip.os': 'os',
              'django.contrib.gis.utils.geoip.re': 're',
              'django.contrib.gis.utils.geoip.settings': 'django.conf.settings',
              'django.contrib.gis.utils.layermapping.CoordTransform': 'django.contrib.gis.gdal.CoordTransform',
              'django.contrib.gis.utils.layermapping.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.contrib.gis.utils.layermapping.DataSource': 'django.contrib.gis.gdal.DataSource',
              'django.contrib.gis.utils.layermapping.Decimal': 'decimal.Decimal',
              'django.contrib.gis.utils.layermapping.GeometryField': 'django.contrib.gis.db.models.GeometryField',
              'django.contrib.gis.utils.layermapping.OFTDate': 'django.contrib.gis.gdal.field.OFTDate',
              'django.contrib.gis.utils.layermapping.OFTDateTime': 'django.contrib.gis.gdal.field.OFTDateTime',
              'django.contrib.gis.utils.layermapping.OFTInteger': 'django.contrib.gis.gdal.field.OFTInteger',
              'django.contrib.gis.utils.layermapping.OFTReal': 'django.contrib.gis.gdal.field.OFTReal',
              'django.contrib.gis.utils.layermapping.OFTString': 'django.contrib.gis.gdal.field.OFTString',
              'django.contrib.gis.utils.layermapping.OFTTime': 'django.contrib.gis.gdal.field.OFTTime',
              'django.contrib.gis.utils.layermapping.OGRException': 'django.contrib.gis.gdal.OGRException',
              'django.contrib.gis.utils.layermapping.OGRGeomType': 'django.contrib.gis.gdal.OGRGeomType',
              'django.contrib.gis.utils.layermapping.OGRGeometry': 'django.contrib.gis.gdal.OGRGeometry',
              'django.contrib.gis.utils.layermapping.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.contrib.gis.utils.layermapping.SpatialReference': 'django.contrib.gis.gdal.SpatialReference',
              'django.contrib.gis.utils.layermapping.USStateField': 'django.contrib.localflavor.us.models.USStateField',
              'django.contrib.gis.utils.layermapping.connections': 'django.db.connections',
              'django.contrib.gis.utils.layermapping.date': 'datetime.date',
              'django.contrib.gis.utils.layermapping.datetime': 'datetime.datetime',
              'django.contrib.gis.utils.layermapping.lookup': 'codecs.lookup',
              'django.contrib.gis.utils.layermapping.models': 'django.db.models',
              'django.contrib.gis.utils.layermapping.sys': 'sys',
              'django.contrib.gis.utils.layermapping.transaction': 'django.db.transaction',
              'django.contrib.gis.utils.mapping': 'django.contrib.gis.utils.ogrinspect.mapping',
              'django.contrib.gis.utils.ogrinfo': 'django.contrib.gis.utils.ogrinfo.ogrinfo',
              'django.contrib.gis.utils.ogrinfo.DataSource': 'django.contrib.gis.gdal.DataSource',
              'django.contrib.gis.utils.ogrinfo.GEO_CLASSES': 'django.contrib.gis.gdal.geometries.GEO_CLASSES',
              'django.contrib.gis.utils.ogrinspect': 'django.contrib.gis.utils.ogrinspect.ogrinspect',
              'django.contrib.gis.utils.ogrinspect.DataSource': 'django.contrib.gis.gdal.DataSource',
              'django.contrib.gis.utils.ogrinspect.OFTDate': 'django.contrib.gis.gdal.field.OFTDate',
              'django.contrib.gis.utils.ogrinspect.OFTDateTime': 'django.contrib.gis.gdal.field.OFTDateTime',
              'django.contrib.gis.utils.ogrinspect.OFTInteger': 'django.contrib.gis.gdal.field.OFTInteger',
              'django.contrib.gis.utils.ogrinspect.OFTReal': 'django.contrib.gis.gdal.field.OFTReal',
              'django.contrib.gis.utils.ogrinspect.OFTString': 'django.contrib.gis.gdal.field.OFTString',
              'django.contrib.gis.utils.ogrinspect.OFTTime': 'django.contrib.gis.gdal.field.OFTTime',
              'django.contrib.gis.utils.ogrinspect.izip': 'itertools.izip',
              'django.contrib.gis.utils.precision_wkt': 'django.contrib.gis.utils.wkt.precision_wkt',
              'django.contrib.gis.utils.sample': 'django.contrib.gis.utils.ogrinfo.sample',
              'django.contrib.gis.utils.srs.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.contrib.gis.utils.srs.SpatialReference': 'django.contrib.gis.gdal.SpatialReference',
              'django.contrib.gis.utils.srs.connections': 'django.db.connections',
              'django.contrib.humanize.templatetags.humanize._': 'django.utils.translation.ugettext',
              'django.contrib.humanize.templatetags.humanize.date': 'datetime.date',
              'django.contrib.humanize.templatetags.humanize.defaultfilters': 'django.template.defaultfilters',
              'django.contrib.humanize.templatetags.humanize.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.humanize.templatetags.humanize.re': 're',
              'django.contrib.humanize.templatetags.humanize.template': 'django.template',
              'django.contrib.humanize.templatetags.humanize.ungettext': 'django.utils.translation.ungettext',
              'django.contrib.localflavor.ar.forms.CharField': 'django.forms.fields.CharField',
              'django.contrib.localflavor.ar.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.ar.forms.PROVINCE_CHOICES': 'django.contrib.localflavor.ar.ar_provinces.PROVINCE_CHOICES',
              'django.contrib.localflavor.ar.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.ar.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.ar.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.ar.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.ar.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.at.at_states._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.at.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.at.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.at.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.at.forms.STATE_CHOICES': 'django.contrib.localflavor.at.at_states.STATE_CHOICES',
              'django.contrib.localflavor.at.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.at.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.at.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.at.forms.re': 're',
              'django.contrib.localflavor.au.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.au.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.au.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.au.forms.STATE_CHOICES': 'django.contrib.localflavor.au.au_states.STATE_CHOICES',
              'django.contrib.localflavor.au.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.au.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.au.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.au.forms.re': 're',
              'django.contrib.localflavor.au.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.be.be_provinces._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.be.be_regions._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.be.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.be.forms.PROVINCE_CHOICES': 'django.contrib.localflavor.be.be_provinces.PROVINCE_CHOICES',
              'django.contrib.localflavor.be.forms.REGION_CHOICES': 'django.contrib.localflavor.be.be_regions.REGION_CHOICES',
              'django.contrib.localflavor.be.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.be.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.be.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.be.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.be.forms.re': 're',
              'django.contrib.localflavor.br.forms.CharField': 'django.forms.fields.CharField',
              'django.contrib.localflavor.br.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.br.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.br.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.br.forms.STATE_CHOICES': 'django.contrib.localflavor.br.br_states.STATE_CHOICES',
              'django.contrib.localflavor.br.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.br.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.br.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.br.forms.re': 're',
              'django.contrib.localflavor.br.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.ca.ca_provinces.warnings': 'warnings',
              'django.contrib.localflavor.ca.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.ca.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.ca.forms.PROVINCES_NORMALIZED': 'django.contrib.localflavor.ca.ca_provinces.PROVINCES_NORMALIZED',
              'django.contrib.localflavor.ca.forms.PROVINCE_CHOICES': 'django.contrib.localflavor.ca.ca_provinces.PROVINCE_CHOICES',
              'django.contrib.localflavor.ca.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.ca.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.ca.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.ca.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.ca.forms.re': 're',
              'django.contrib.localflavor.ca.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.ch.ch_states._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.ch.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.ch.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.ch.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.ch.forms.STATE_CHOICES': 'django.contrib.localflavor.ch.ch_states.STATE_CHOICES',
              'django.contrib.localflavor.ch.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.ch.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.ch.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.ch.forms.re': 're',
              'django.contrib.localflavor.ch.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.cl.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.cl.forms.REGION_CHOICES': 'django.contrib.localflavor.cl.cl_regions.REGION_CHOICES',
              'django.contrib.localflavor.cl.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.cl.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.cl.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.cl.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.cl.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.cz.cz_regions._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.cz.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.cz.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.cz.forms.REGION_CHOICES': 'django.contrib.localflavor.cz.cz_regions.REGION_CHOICES',
              'django.contrib.localflavor.cz.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.cz.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.cz.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.cz.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.cz.forms.re': 're',
              'django.contrib.localflavor.cz.forms.warnings': 'warnings',
              'django.contrib.localflavor.de.de_states._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.de.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.de.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.de.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.de.forms.STATE_CHOICES': 'django.contrib.localflavor.de.de_states.STATE_CHOICES',
              'django.contrib.localflavor.de.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.de.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.de.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.de.forms.re': 're',
              'django.contrib.localflavor.es.es_provinces._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.es.es_regions._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.es.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.es.forms.PROVINCE_CHOICES': 'django.contrib.localflavor.es.es_provinces.PROVINCE_CHOICES',
              'django.contrib.localflavor.es.forms.REGION_CHOICES': 'django.contrib.localflavor.es.es_regions.REGION_CHOICES',
              'django.contrib.localflavor.es.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.es.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.es.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.es.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.es.forms.re': 're',
              'django.contrib.localflavor.fi.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.fi.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.fi.forms.MUNICIPALITY_CHOICES': 'django.contrib.localflavor.fi.fi_municipalities.MUNICIPALITY_CHOICES',
              'django.contrib.localflavor.fi.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.fi.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.fi.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.fi.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.fi.forms.re': 're',
              'django.contrib.localflavor.fr.forms.DEPARTMENT_ASCII_CHOICES': 'django.contrib.localflavor.fr.fr_department.DEPARTMENT_ASCII_CHOICES',
              'django.contrib.localflavor.fr.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.fr.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.fr.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.fr.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.fr.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.fr.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.fr.forms.re': 're',
              'django.contrib.localflavor.fr.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.generic.forms.forms': 'django.forms',
              'django.contrib.localflavor.id.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.id.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.id.forms.LICENSE_PLATE_PREFIX_CHOICES': 'django.contrib.localflavor.id.id_choices.LICENSE_PLATE_PREFIX_CHOICES',
              'django.contrib.localflavor.id.forms.PROVINCE_CHOICES': 'django.contrib.localflavor.id.id_choices.PROVINCE_CHOICES',
              'django.contrib.localflavor.id.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.id.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.id.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.id.forms.re': 're',
              'django.contrib.localflavor.id.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.id.forms.time': 'time',
              'django.contrib.localflavor.id.id_choices._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.id.id_choices.warnings': 'warnings',
              'django.contrib.localflavor.ie.forms.IE_COUNTY_CHOICES': 'django.contrib.localflavor.ie.ie_counties.IE_COUNTY_CHOICES',
              'django.contrib.localflavor.ie.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.ie.ie_counties._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.il.forms.EMPTY_VALUES': 'django.forms.fields.EMPTY_VALUES',
              'django.contrib.localflavor.il.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.il.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.il.forms.ValidationError': 'django.core.exceptions.ValidationError',
              'django.contrib.localflavor.il.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.il.forms.luhn': 'django.utils.checksums.luhn',
              'django.contrib.localflavor.il.forms.re': 're',
              'django.contrib.localflavor.in_.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.in_.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.in_.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.in_.forms.STATES_NORMALIZED': 'django.contrib.localflavor.in_.in_states.STATES_NORMALIZED',
              'django.contrib.localflavor.in_.forms.STATE_CHOICES': 'django.contrib.localflavor.in_.in_states.STATE_CHOICES',
              'django.contrib.localflavor.in_.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.in_.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.in_.forms.gettext': 'django.utils.translation.gettext',
              'django.contrib.localflavor.in_.forms.re': 're',
              'django.contrib.localflavor.in_.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.is_.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.is_.forms.IS_POSTALCODES': 'django.contrib.localflavor.is_.is_postalcodes.IS_POSTALCODES',
              'django.contrib.localflavor.is_.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.is_.forms.Select': 'django.forms.widgets.Select',
              'django.contrib.localflavor.is_.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.is_.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.is_.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.it.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.it.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.it.forms.PROVINCE_CHOICES': 'django.contrib.localflavor.it.it_province.PROVINCE_CHOICES',
              'django.contrib.localflavor.it.forms.REGION_CHOICES': 'django.contrib.localflavor.it.it_region.REGION_CHOICES',
              'django.contrib.localflavor.it.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.it.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.it.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.it.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.it.forms.re': 're',
              'django.contrib.localflavor.it.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.it.forms.ssn_check_digit': 'django.contrib.localflavor.it.util.ssn_check_digit',
              'django.contrib.localflavor.it.forms.vat_number_check_digit': 'django.contrib.localflavor.it.util.vat_number_check_digit',
              'django.contrib.localflavor.it.util.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.localflavor.it.util.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.jp.forms.JP_PREFECTURES': 'django.contrib.localflavor.jp.jp_prefectures.JP_PREFECTURES',
              'django.contrib.localflavor.jp.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.jp.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.jp.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.jp.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.jp.jp_prefectures.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.kw.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.kw.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.kw.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.kw.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.kw.forms._': 'django.utils.translation.gettext',
              'django.contrib.localflavor.kw.forms.date': 'datetime.date',
              'django.contrib.localflavor.kw.forms.re': 're',
              'django.contrib.localflavor.mx.forms.STATE_CHOICES': 'django.contrib.localflavor.mx.mx_states.STATE_CHOICES',
              'django.contrib.localflavor.mx.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.mx.mx_states._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.nl.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.nl.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.nl.forms.PROVINCE_CHOICES': 'django.contrib.localflavor.nl.nl_provinces.PROVINCE_CHOICES',
              'django.contrib.localflavor.nl.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.nl.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.nl.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.nl.forms.re': 're',
              'django.contrib.localflavor.nl.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.nl.nl_provinces._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.no.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.no.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.no.forms.MUNICIPALITY_CHOICES': 'django.contrib.localflavor.no.no_municipalities.MUNICIPALITY_CHOICES',
              'django.contrib.localflavor.no.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.no.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.no.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.no.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.no.forms.datetime': 'datetime',
              'django.contrib.localflavor.no.forms.re': 're',
              'django.contrib.localflavor.pe.forms.CharField': 'django.forms.fields.CharField',
              'django.contrib.localflavor.pe.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.pe.forms.REGION_CHOICES': 'django.contrib.localflavor.pe.pe_region.REGION_CHOICES',
              'django.contrib.localflavor.pe.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.pe.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.pe.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.pe.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.pl.forms.ADMINISTRATIVE_UNIT_CHOICES': 'django.contrib.localflavor.pl.pl_administrativeunits.ADMINISTRATIVE_UNIT_CHOICES',
              'django.contrib.localflavor.pl.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.pl.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.pl.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.pl.forms.VOIVODESHIP_CHOICES': 'django.contrib.localflavor.pl.pl_voivodeships.VOIVODESHIP_CHOICES',
              'django.contrib.localflavor.pl.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.pl.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.pl.forms.re': 're',
              'django.contrib.localflavor.pl.pl_voivodeships._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.pt.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.pt.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.pt.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.pt.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.pt.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.pt.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.pt.forms.re': 're',
              'django.contrib.localflavor.pt.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.ro.forms.COUNTIES_CHOICES': 'django.contrib.localflavor.ro.ro_counties.COUNTIES_CHOICES',
              'django.contrib.localflavor.ro.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.ro.forms.Field': 'django.forms.Field',
              'django.contrib.localflavor.ro.forms.RegexField': 'django.forms.RegexField',
              'django.contrib.localflavor.ro.forms.Select': 'django.forms.Select',
              'django.contrib.localflavor.ro.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.ro.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.ro.forms.datetime': 'datetime',
              'django.contrib.localflavor.ro.forms.re': 're',
              'django.contrib.localflavor.se.forms.COUNTY_CHOICES': 'django.contrib.localflavor.se.se_counties.COUNTY_CHOICES',
              'django.contrib.localflavor.se.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.se.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.se.forms.format_organisation_number': 'django.contrib.localflavor.se.utils.format_organisation_number',
              'django.contrib.localflavor.se.forms.format_personal_id_number': 'django.contrib.localflavor.se.utils.format_personal_id_number',
              'django.contrib.localflavor.se.forms.forms': 'django.forms',
              'django.contrib.localflavor.se.forms.id_number_checksum': 'django.contrib.localflavor.se.utils.id_number_checksum',
              'django.contrib.localflavor.se.forms.re': 're',
              'django.contrib.localflavor.se.forms.valid_organisation': 'django.contrib.localflavor.se.utils.valid_organisation',
              'django.contrib.localflavor.se.forms.validate_id_birthday': 'django.contrib.localflavor.se.utils.validate_id_birthday',
              'django.contrib.localflavor.se.se_counties._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.se.utils.datetime': 'datetime',
              'django.contrib.localflavor.se.utils.re': 're',
              'django.contrib.localflavor.sk.forms.DISTRICT_CHOICES': 'django.contrib.localflavor.sk.sk_districts.DISTRICT_CHOICES',
              'django.contrib.localflavor.sk.forms.REGION_CHOICES': 'django.contrib.localflavor.sk.sk_regions.REGION_CHOICES',
              'django.contrib.localflavor.sk.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.sk.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.sk.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.sk.sk_districts._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.sk.sk_regions._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.tr.forms.CharField': 'django.forms.fields.CharField',
              'django.contrib.localflavor.tr.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.tr.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.tr.forms.PROVINCE_CHOICES': 'django.contrib.localflavor.tr.tr_provinces.PROVINCE_CHOICES',
              'django.contrib.localflavor.tr.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.tr.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.tr.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.tr.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.tr.forms.re': 're',
              'django.contrib.localflavor.tr.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.uk.forms.CharField': 'django.forms.fields.CharField',
              'django.contrib.localflavor.uk.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.uk.forms.UK_NATIONS_CHOICES': 'django.contrib.localflavor.uk.uk_regions.UK_NATIONS_CHOICES',
              'django.contrib.localflavor.uk.forms.UK_REGION_CHOICES': 'django.contrib.localflavor.uk.uk_regions.UK_REGION_CHOICES',
              'django.contrib.localflavor.uk.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.uk.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.uk.forms.re': 're',
              'django.contrib.localflavor.uk.uk_regions._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.us.forms.CharField': 'django.forms.fields.CharField',
              'django.contrib.localflavor.us.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.us.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.us.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.us.forms.STATES_NORMALIZED': 'django.contrib.localflavor.us.us_states.STATES_NORMALIZED',
              'django.contrib.localflavor.us.forms.STATE_CHOICES': 'django.contrib.localflavor.us.us_states.STATE_CHOICES',
              'django.contrib.localflavor.us.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.us.forms.USPS_CHOICES': 'django.contrib.localflavor.us.us_states.USPS_CHOICES',
              'django.contrib.localflavor.us.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.us.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.us.forms.re': 're',
              'django.contrib.localflavor.us.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.localflavor.us.models.CharField': 'django.db.models.fields.CharField',
              'django.contrib.localflavor.us.models.STATE_CHOICES': 'django.contrib.localflavor.us.us_states.STATE_CHOICES',
              'django.contrib.localflavor.us.models.USPS_CHOICES': 'django.contrib.localflavor.us.us_states.USPS_CHOICES',
              'django.contrib.localflavor.us.models.USPhoneNumberField': 'django.contrib.localflavor.us.forms.USPhoneNumberField',
              'django.contrib.localflavor.us.models._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.us.models.settings': 'django.conf.settings',
              'django.contrib.localflavor.uy.forms.DEPARTAMENT_CHOICES': 'django.contrib.localflavor.uy.uy_departaments.DEPARTAMENT_CHOICES',
              'django.contrib.localflavor.uy.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.uy.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.uy.forms.Select': 'django.forms.fields.Select',
              'django.contrib.localflavor.uy.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.uy.forms._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.localflavor.uy.forms.get_validation_digit': 'django.contrib.localflavor.uy.util.get_validation_digit',
              'django.contrib.localflavor.uy.forms.re': 're',
              'django.contrib.localflavor.za.forms.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.contrib.localflavor.za.forms.Field': 'django.forms.fields.Field',
              'django.contrib.localflavor.za.forms.RegexField': 'django.forms.fields.RegexField',
              'django.contrib.localflavor.za.forms.ValidationError': 'django.forms.ValidationError',
              'django.contrib.localflavor.za.forms._': 'django.utils.translation.gettext',
              'django.contrib.localflavor.za.forms.date': 'datetime.date',
              'django.contrib.localflavor.za.forms.luhn': 'django.utils.checksums.luhn',
              'django.contrib.localflavor.za.forms.re': 're',
              'django.contrib.localflavor.za.za_provinces._': 'django.utils.translation.gettext_lazy',
              'django.contrib.markup.templatetags.markup.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.markup.templatetags.markup.mark_safe': 'django.utils.safestring.mark_safe',
              'django.contrib.markup.templatetags.markup.markdown': 'markdown',
              'django.contrib.markup.templatetags.markup.publish_parts': 'docutils.core.publish_parts',
              'django.contrib.markup.templatetags.markup.settings': 'django.conf.settings',
              'django.contrib.markup.templatetags.markup.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.markup.templatetags.markup.template': 'django.template',
              'django.contrib.markup.templatetags.markup.textile': 'textile',
              'django.contrib.markup.tests.Context': 'django.template.Context',
              'django.contrib.markup.tests.Template': 'django.template.Template',
              'django.contrib.markup.tests.add_to_builtins': 'django.template.add_to_builtins',
              'django.contrib.markup.tests.docutils': 'docutils',
              'django.contrib.markup.tests.escape': 'django.utils.html.escape',
              'django.contrib.markup.tests.markdown': 'markdown',
              'django.contrib.markup.tests.re': 're',
              'django.contrib.markup.tests.textile': 'textile',
              'django.contrib.markup.tests.unittest': 'django.utils.unittest',
              'django.contrib.messages.*': 'django.contrib.messages.constants.*',
              'django.contrib.messages.api.AnonymousUser': 'django.contrib.auth.models.AnonymousUser',
              'django.contrib.messages.api.constants': 'django.contrib.messages.constants',
              'django.contrib.messages.api.default_storage': 'django.contrib.messages.storage.default_storage',
              'django.contrib.messages.api.lazy': 'django.utils.functional.lazy',
              'django.contrib.messages.api.memoize': 'django.utils.functional.memoize',
              'django.contrib.messages.context_processors.get_messages': 'django.contrib.messages.api.get_messages',
              'django.contrib.messages.middleware.default_storage': 'django.contrib.messages.storage.default_storage',
              'django.contrib.messages.middleware.settings': 'django.conf.settings',
              'django.contrib.messages.storage.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.messages.storage.base.StrAndUnicode': 'django.utils.encoding.StrAndUnicode',
              'django.contrib.messages.storage.base.constants': 'django.contrib.messages.constants',
              'django.contrib.messages.storage.base.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.messages.storage.base.settings': 'django.conf.settings',
              'django.contrib.messages.storage.base.utils': 'django.contrib.messages.utils',
              'django.contrib.messages.storage.cookie.BaseStorage': 'django.contrib.messages.storage.base.BaseStorage',
              'django.contrib.messages.storage.cookie.Message': 'django.contrib.messages.storage.base.Message',
              'django.contrib.messages.storage.cookie.SimpleCookie': 'django.http.SimpleCookie',
              'django.contrib.messages.storage.cookie.constant_time_compare': 'django.utils.crypto.constant_time_compare',
              'django.contrib.messages.storage.cookie.constants': 'django.contrib.messages.constants',
              'django.contrib.messages.storage.cookie.json': 'django.utils.simplejson',
              'django.contrib.messages.storage.cookie.salted_hmac': 'django.utils.crypto.salted_hmac',
              'django.contrib.messages.storage.cookie.settings': 'django.conf.settings',
              'django.contrib.messages.storage.fallback.BaseStorage': 'django.contrib.messages.storage.base.BaseStorage',
              'django.contrib.messages.storage.fallback.CookieStorage': 'django.contrib.messages.storage.cookie.CookieStorage',
              'django.contrib.messages.storage.fallback.SessionStorage': 'django.contrib.messages.storage.session.SessionStorage',
              'django.contrib.messages.storage.import_module': 'django.utils.importlib.import_module',
              'django.contrib.messages.storage.session.BaseStorage': 'django.contrib.messages.storage.base.BaseStorage',
              'django.contrib.messages.storage.settings': 'django.conf.settings',
              'django.contrib.messages.storage.user_messages.BaseStorage': 'django.contrib.messages.storage.base.BaseStorage',
              'django.contrib.messages.storage.user_messages.FallbackStorage': 'django.contrib.messages.storage.fallback.FallbackStorage',
              'django.contrib.messages.storage.user_messages.Message': 'django.contrib.messages.storage.base.Message',
              'django.contrib.messages.storage.user_messages.User': 'django.contrib.auth.models.User',
              'django.contrib.messages.storage.user_messages.constants': 'django.contrib.messages.constants',
              'django.contrib.messages.tests.CookieTest': 'django.contrib.messages.tests.cookie.CookieTest',
              'django.contrib.messages.tests.FallbackTest': 'django.contrib.messages.tests.fallback.FallbackTest',
              'django.contrib.messages.tests.LegacyFallbackTest': 'django.contrib.messages.tests.user_messages.LegacyFallbackTest',
              'django.contrib.messages.tests.MiddlewareTest': 'django.contrib.messages.tests.middleware.MiddlewareTest',
              'django.contrib.messages.tests.SessionTest': 'django.contrib.messages.tests.session.SessionTest',
              'django.contrib.messages.tests.UserMessagesTest': 'django.contrib.messages.tests.user_messages.UserMessagesTest',
              'django.contrib.messages.tests.base.Message': 'django.contrib.messages.storage.base.Message',
              'django.contrib.messages.tests.base.MessageFailure': 'django.contrib.messages.api.MessageFailure',
              'django.contrib.messages.tests.base.TestCase': 'django.test.TestCase',
              'django.contrib.messages.tests.base.User': 'django.contrib.auth.models.User',
              'django.contrib.messages.tests.base.base': 'django.contrib.messages.storage.base',
              'django.contrib.messages.tests.base.constants': 'django.contrib.messages.constants',
              'django.contrib.messages.tests.base.default_storage': 'django.contrib.messages.storage.default_storage',
              'django.contrib.messages.tests.base.get_level': 'django.contrib.messages.get_level',
              'django.contrib.messages.tests.base.http': 'django.http',
              'django.contrib.messages.tests.base.reverse': 'django.core.urlresolvers.reverse',
              'django.contrib.messages.tests.base.set_level': 'django.contrib.messages.set_level',
              'django.contrib.messages.tests.base.settings': 'django.conf.settings',
              'django.contrib.messages.tests.base.skipIf': 'django.utils.unittest.skipIf',
              'django.contrib.messages.tests.base.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'django.contrib.messages.tests.base.utils': 'django.contrib.messages.utils',
              'django.contrib.messages.tests.base.warnings': 'warnings',
              'django.contrib.messages.tests.cookie.BaseTest': 'django.contrib.messages.tests.base.BaseTest',
              'django.contrib.messages.tests.cookie.CookieStorage': 'django.contrib.messages.storage.cookie.CookieStorage',
              'django.contrib.messages.tests.cookie.Message': 'django.contrib.messages.storage.base.Message',
              'django.contrib.messages.tests.cookie.MessageDecoder': 'django.contrib.messages.storage.cookie.MessageDecoder',
              'django.contrib.messages.tests.cookie.MessageEncoder': 'django.contrib.messages.storage.cookie.MessageEncoder',
              'django.contrib.messages.tests.cookie.constants': 'django.contrib.messages.constants',
              'django.contrib.messages.tests.cookie.json': 'django.utils.simplejson',
              'django.contrib.messages.tests.cookie.settings': 'django.conf.settings',
              'django.contrib.messages.tests.fallback.BaseTest': 'django.contrib.messages.tests.base.BaseTest',
              'django.contrib.messages.tests.fallback.CookieStorage': 'django.contrib.messages.storage.fallback.CookieStorage',
              'django.contrib.messages.tests.fallback.FallbackStorage': 'django.contrib.messages.storage.fallback.FallbackStorage',
              'django.contrib.messages.tests.fallback.constants': 'django.contrib.messages.constants',
              'django.contrib.messages.tests.fallback.set_cookie_data': 'django.contrib.messages.tests.cookie.set_cookie_data',
              'django.contrib.messages.tests.fallback.set_session_data': 'django.contrib.messages.tests.session.set_session_data',
              'django.contrib.messages.tests.fallback.stored_cookie_messages_count': 'django.contrib.messages.tests.cookie.stored_cookie_messages_count',
              'django.contrib.messages.tests.fallback.stored_session_messages_count': 'django.contrib.messages.tests.session.stored_session_messages_count',
              'django.contrib.messages.tests.middleware.MessageMiddleware': 'django.contrib.messages.middleware.MessageMiddleware',
              'django.contrib.messages.tests.middleware.http': 'django.http',
              'django.contrib.messages.tests.middleware.unittest': 'django.utils.unittest',
              'django.contrib.messages.tests.session.BaseTest': 'django.contrib.messages.tests.base.BaseTest',
              'django.contrib.messages.tests.session.SessionStorage': 'django.contrib.messages.storage.session.SessionStorage',
              'django.contrib.messages.tests.urls.*': 'django.conf.urls.defaults.*',
              'django.contrib.messages.tests.urls.HttpResponse': 'django.http.HttpResponse',
              'django.contrib.messages.tests.urls.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'django.contrib.messages.tests.urls.RequestContext': 'django.template.RequestContext',
              'django.contrib.messages.tests.urls.Template': 'django.template.Template',
              'django.contrib.messages.tests.urls.TemplateResponse': 'django.template.response.TemplateResponse',
              'django.contrib.messages.tests.urls.messages': 'django.contrib.messages',
              'django.contrib.messages.tests.urls.never_cache': 'django.views.decorators.cache.never_cache',
              'django.contrib.messages.tests.urls.redirect': 'django.shortcuts.redirect',
              'django.contrib.messages.tests.urls.render_to_response': 'django.shortcuts.render_to_response',
              'django.contrib.messages.tests.urls.reverse': 'django.core.urlresolvers.reverse',
              'django.contrib.messages.tests.user_messages.FallbackTest': 'django.contrib.messages.tests.fallback.FallbackTest',
              'django.contrib.messages.tests.user_messages.LegacyFallbackStorage': 'django.contrib.messages.storage.user_messages.LegacyFallbackStorage',
              'django.contrib.messages.tests.user_messages.TestCase': 'django.test.TestCase',
              'django.contrib.messages.tests.user_messages.User': 'django.contrib.auth.models.User',
              'django.contrib.messages.tests.user_messages.UserMessagesStorage': 'django.contrib.messages.storage.user_messages.UserMessagesStorage',
              'django.contrib.messages.tests.user_messages.http': 'django.http',
              'django.contrib.messages.tests.user_messages.set_cookie_data': 'django.contrib.messages.tests.cookie.set_cookie_data',
              'django.contrib.messages.tests.user_messages.skipUnlessAuthIsInstalled': 'django.contrib.messages.tests.base.skipUnlessAuthIsInstalled',
              'django.contrib.messages.utils.constants': 'django.contrib.messages.constants',
              'django.contrib.messages.utils.settings': 'django.conf.settings',
              'django.contrib.redirects.admin.Redirect': 'django.contrib.redirects.models.Redirect',
              'django.contrib.redirects.admin.admin': 'django.contrib.admin',
              'django.contrib.redirects.middleware.Redirect': 'django.contrib.redirects.models.Redirect',
              'django.contrib.redirects.middleware.http': 'django.http',
              'django.contrib.redirects.middleware.settings': 'django.conf.settings',
              'django.contrib.redirects.models.Site': 'django.contrib.sites.models.Site',
              'django.contrib.redirects.models._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.redirects.models.models': 'django.db.models',
              'django.contrib.sessions.backends.base.SuspiciousOperation': 'django.core.exceptions.SuspiciousOperation',
              'django.contrib.sessions.backends.base.base64': 'base64',
              'django.contrib.sessions.backends.base.constant_time_compare': 'django.utils.crypto.constant_time_compare',
              'django.contrib.sessions.backends.base.datetime': 'datetime.datetime',
              'django.contrib.sessions.backends.base.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.contrib.sessions.backends.base.os': 'os',
              'django.contrib.sessions.backends.base.pickle': 'pickle',
              'django.contrib.sessions.backends.base.random': 'random',
              'django.contrib.sessions.backends.base.salted_hmac': 'django.utils.crypto.salted_hmac',
              'django.contrib.sessions.backends.base.settings': 'django.conf.settings',
              'django.contrib.sessions.backends.base.sys': 'sys',
              'django.contrib.sessions.backends.base.time': 'time',
              'django.contrib.sessions.backends.base.timedelta': 'datetime.timedelta',
              'django.contrib.sessions.backends.cache.CreateError': 'django.contrib.sessions.backends.base.CreateError',
              'django.contrib.sessions.backends.cache.SessionBase': 'django.contrib.sessions.backends.base.SessionBase',
              'django.contrib.sessions.backends.cache.cache': 'django.core.cache.cache',
              'django.contrib.sessions.backends.cached_db.DBStore': 'django.contrib.sessions.backends.db.SessionStore',
              'django.contrib.sessions.backends.cached_db.cache': 'django.core.cache.cache',
              'django.contrib.sessions.backends.cached_db.settings': 'django.conf.settings',
              'django.contrib.sessions.backends.db.CreateError': 'django.contrib.sessions.backends.base.CreateError',
              'django.contrib.sessions.backends.db.IntegrityError': 'django.db.IntegrityError',
              'django.contrib.sessions.backends.db.Session': 'django.contrib.sessions.models.Session',
              'django.contrib.sessions.backends.db.SessionBase': 'django.contrib.sessions.backends.base.SessionBase',
              'django.contrib.sessions.backends.db.SuspiciousOperation': 'django.core.exceptions.SuspiciousOperation',
              'django.contrib.sessions.backends.db.datetime': 'datetime',
              'django.contrib.sessions.backends.db.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.sessions.backends.db.router': 'django.db.router',
              'django.contrib.sessions.backends.db.settings': 'django.conf.settings',
              'django.contrib.sessions.backends.db.transaction': 'django.db.transaction',
              'django.contrib.sessions.backends.file.CreateError': 'django.contrib.sessions.backends.base.CreateError',
              'django.contrib.sessions.backends.file.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.sessions.backends.file.SessionBase': 'django.contrib.sessions.backends.base.SessionBase',
              'django.contrib.sessions.backends.file.SuspiciousOperation': 'django.core.exceptions.SuspiciousOperation',
              'django.contrib.sessions.backends.file.errno': 'errno',
              'django.contrib.sessions.backends.file.os': 'os',
              'django.contrib.sessions.backends.file.settings': 'django.conf.settings',
              'django.contrib.sessions.backends.file.tempfile': 'tempfile',
              'django.contrib.sessions.middleware.cookie_date': 'django.utils.http.cookie_date',
              'django.contrib.sessions.middleware.import_module': 'django.utils.importlib.import_module',
              'django.contrib.sessions.middleware.patch_vary_headers': 'django.utils.cache.patch_vary_headers',
              'django.contrib.sessions.middleware.settings': 'django.conf.settings',
              'django.contrib.sessions.middleware.time': 'time',
              'django.contrib.sessions.models.SessionStore': 'django.contrib.sessions.backends.db.SessionStore',
              'django.contrib.sessions.models._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.sessions.models.base64': 'base64',
              'django.contrib.sessions.models.models': 'django.db.models',
              'django.contrib.sessions.models.pickle': 'cPickle',
              'django.contrib.sessions.tests.CacheDBSession': 'django.contrib.sessions.backends.cached_db.SessionStore',
              'django.contrib.sessions.tests.CacheSession': 'django.contrib.sessions.backends.cache.SessionStore',
              'django.contrib.sessions.tests.DatabaseSession': 'django.contrib.sessions.backends.db.SessionStore',
              'django.contrib.sessions.tests.FileSession': 'django.contrib.sessions.backends.file.SessionStore',
              'django.contrib.sessions.tests.HttpResponse': 'django.http.HttpResponse',
              'django.contrib.sessions.tests.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.sessions.tests.RequestFactory': 'django.test.RequestFactory',
              'django.contrib.sessions.tests.Session': 'django.contrib.sessions.models.Session',
              'django.contrib.sessions.tests.SessionMiddleware': 'django.contrib.sessions.middleware.SessionMiddleware',
              'django.contrib.sessions.tests.SuspiciousOperation': 'django.core.exceptions.SuspiciousOperation',
              'django.contrib.sessions.tests.TestCase': 'django.test.TestCase',
              'django.contrib.sessions.tests.base64': 'base64',
              'django.contrib.sessions.tests.datetime': 'datetime.datetime',
              'django.contrib.sessions.tests.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.contrib.sessions.tests.pickle': 'pickle',
              'django.contrib.sessions.tests.settings': 'django.conf.settings',
              'django.contrib.sessions.tests.shutil': 'shutil',
              'django.contrib.sessions.tests.tempfile': 'tempfile',
              'django.contrib.sessions.tests.timedelta': 'datetime.timedelta',
              'django.contrib.sessions.tests.unittest': 'django.utils.unittest',
              'django.contrib.sitemaps.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.sitemaps.Site': 'django.contrib.sites.models.Site',
              'django.contrib.sitemaps.get_current_site': 'django.contrib.sites.models.get_current_site',
              'django.contrib.sitemaps.management.commands.ping_google.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.contrib.sitemaps.management.commands.ping_google.ping_google': 'django.contrib.sitemaps.ping_google',
              'django.contrib.sitemaps.paginator': 'django.core.paginator',
              'django.contrib.sitemaps.tests.*': 'django.contrib.sitemaps.tests.basic.*',
              'django.contrib.sitemaps.tests.urls.*': 'django.conf.urls.defaults.*',
              'django.contrib.sitemaps.tests.urls.FlatPageSitemap': 'django.contrib.sitemaps.FlatPageSitemap',
              'django.contrib.sitemaps.tests.urls.GenericSitemap': 'django.contrib.sitemaps.GenericSitemap',
              'django.contrib.sitemaps.tests.urls.Sitemap': 'django.contrib.sitemaps.Sitemap',
              'django.contrib.sitemaps.tests.urls.User': 'django.contrib.auth.models.User',
              'django.contrib.sitemaps.tests.urls.datetime': 'datetime.datetime',
              'django.contrib.sitemaps.urllib': 'urllib',
              'django.contrib.sitemaps.urlresolvers': 'django.core.urlresolvers',
              'django.contrib.sitemaps.views.EmptyPage': 'django.core.paginator.EmptyPage',
              'django.contrib.sitemaps.views.Http404': 'django.http.Http404',
              'django.contrib.sitemaps.views.HttpResponse': 'django.http.HttpResponse',
              'django.contrib.sitemaps.views.PageNotAnInteger': 'django.core.paginator.PageNotAnInteger',
              'django.contrib.sitemaps.views.get_current_site': 'django.contrib.sites.models.get_current_site',
              'django.contrib.sitemaps.views.loader': 'django.template.loader',
              'django.contrib.sitemaps.views.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.sitemaps.views.urlresolvers': 'django.core.urlresolvers',
              'django.contrib.sites.admin.Site': 'django.contrib.sites.models.Site',
              'django.contrib.sites.admin.admin': 'django.contrib.admin',
              'django.contrib.sites.management.Site': 'django.contrib.sites.models.Site',
              'django.contrib.sites.management.signals': 'django.db.models.signals',
              'django.contrib.sites.management.site_app': 'django.contrib.sites.models',
              'django.contrib.sites.managers.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.contrib.sites.managers.models': 'django.db.models',
              'django.contrib.sites.managers.settings': 'django.conf.settings',
              'django.contrib.sites.models.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.sites.models._': 'django.utils.translation.ugettext_lazy',
              'django.contrib.sites.models.models': 'django.db.models',
              'django.contrib.sites.models.settings': 'django.conf.settings',
              'django.contrib.sites.tests.HttpRequest': 'django.http.HttpRequest',
              'django.contrib.sites.tests.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.contrib.sites.tests.RequestSite': 'django.contrib.sites.models.RequestSite',
              'django.contrib.sites.tests.Site': 'django.contrib.sites.models.Site',
              'django.contrib.sites.tests.TestCase': 'django.test.TestCase',
              'django.contrib.sites.tests.get_current_site': 'django.contrib.sites.models.get_current_site',
              'django.contrib.sites.tests.settings': 'django.conf.settings',
              'django.contrib.staticfiles.finders.AppStaticStorage': 'django.contrib.staticfiles.storage.AppStaticStorage',
              'django.contrib.staticfiles.finders.FileSystemStorage': 'django.core.files.storage.FileSystemStorage',
              'django.contrib.staticfiles.finders.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.staticfiles.finders.LazyObject': 'django.utils.functional.LazyObject',
              'django.contrib.staticfiles.finders.SortedDict': 'django.utils.datastructures.SortedDict',
              'django.contrib.staticfiles.finders.Storage': 'django.core.files.storage.Storage',
              'django.contrib.staticfiles.finders.default_storage': 'django.core.files.storage.default_storage',
              'django.contrib.staticfiles.finders.import_module': 'django.utils.importlib.import_module',
              'django.contrib.staticfiles.finders.memoize': 'django.utils.functional.memoize',
              'django.contrib.staticfiles.finders.os': 'os',
              'django.contrib.staticfiles.finders.safe_join': 'django.utils._os.safe_join',
              'django.contrib.staticfiles.finders.settings': 'django.conf.settings',
              'django.contrib.staticfiles.finders.utils': 'django.contrib.staticfiles.utils',
              'django.contrib.staticfiles.handlers.Http404': 'django.http.Http404',
              'django.contrib.staticfiles.handlers.WSGIHandler': 'django.core.handlers.wsgi.WSGIHandler',
              'django.contrib.staticfiles.handlers.debug': 'django.views.debug',
              'django.contrib.staticfiles.handlers.serve': 'django.contrib.staticfiles.views.serve',
              'django.contrib.staticfiles.handlers.settings': 'django.conf.settings',
              'django.contrib.staticfiles.handlers.urllib': 'urllib',
              'django.contrib.staticfiles.handlers.urlparse': 'urlparse.urlparse',
              'django.contrib.staticfiles.handlers.utils': 'django.contrib.staticfiles.utils',
              'django.contrib.staticfiles.management.commands.collectstatic.CommandError': 'django.core.management.base.CommandError',
              'django.contrib.staticfiles.management.commands.collectstatic.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'django.contrib.staticfiles.management.commands.collectstatic.finders': 'django.contrib.staticfiles.finders',
              'django.contrib.staticfiles.management.commands.collectstatic.get_storage_class': 'django.core.files.storage.get_storage_class',
              'django.contrib.staticfiles.management.commands.collectstatic.make_option': 'optparse.make_option',
              'django.contrib.staticfiles.management.commands.collectstatic.os': 'os',
              'django.contrib.staticfiles.management.commands.collectstatic.settings': 'django.conf.settings',
              'django.contrib.staticfiles.management.commands.collectstatic.shutil': 'shutil',
              'django.contrib.staticfiles.management.commands.collectstatic.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.staticfiles.management.commands.collectstatic.sys': 'sys',
              'django.contrib.staticfiles.management.commands.findstatic.LabelCommand': 'django.core.management.base.LabelCommand',
              'django.contrib.staticfiles.management.commands.findstatic.finders': 'django.contrib.staticfiles.finders',
              'django.contrib.staticfiles.management.commands.findstatic.make_option': 'optparse.make_option',
              'django.contrib.staticfiles.management.commands.findstatic.os': 'os',
              'django.contrib.staticfiles.management.commands.findstatic.smart_str': 'django.utils.encoding.smart_str',
              'django.contrib.staticfiles.management.commands.findstatic.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.staticfiles.management.commands.runserver.BaseRunserverCommand': 'django.core.management.commands.runserver.BaseRunserverCommand',
              'django.contrib.staticfiles.management.commands.runserver.StaticFilesHandler': 'django.contrib.staticfiles.handlers.StaticFilesHandler',
              'django.contrib.staticfiles.management.commands.runserver.make_option': 'optparse.make_option',
              'django.contrib.staticfiles.management.commands.runserver.settings': 'django.conf.settings',
              'django.contrib.staticfiles.storage.FileSystemStorage': 'django.core.files.storage.FileSystemStorage',
              'django.contrib.staticfiles.storage.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.staticfiles.storage.import_module': 'django.utils.importlib.import_module',
              'django.contrib.staticfiles.storage.os': 'os',
              'django.contrib.staticfiles.storage.settings': 'django.conf.settings',
              'django.contrib.staticfiles.storage.utils': 'django.contrib.staticfiles.utils',
              'django.contrib.staticfiles.urls.settings': 'django.conf.settings',
              'django.contrib.staticfiles.urls.static': 'django.conf.urls.static.static',
              'django.contrib.staticfiles.utils.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.staticfiles.utils.fnmatch': 'fnmatch',
              'django.contrib.staticfiles.utils.os': 'os',
              'django.contrib.staticfiles.utils.settings': 'django.conf.settings',
              'django.contrib.staticfiles.views.Http404': 'django.http.Http404',
              'django.contrib.staticfiles.views.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.staticfiles.views.finders': 'django.contrib.staticfiles.finders',
              'django.contrib.staticfiles.views.os': 'os',
              'django.contrib.staticfiles.views.posixpath': 'posixpath',
              'django.contrib.staticfiles.views.settings': 'django.conf.settings',
              'django.contrib.staticfiles.views.static': 'django.views.static',
              'django.contrib.staticfiles.views.urllib': 'urllib',
              'django.contrib.syndication.feeds.FeedDoesNotExist': 'django.contrib.syndication.views.FeedDoesNotExist',
              'django.contrib.syndication.feeds.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.contrib.syndication.feeds.add_domain': 'django.contrib.syndication.views.add_domain',
              'django.contrib.syndication.feeds.views': 'django.contrib.syndication.views',
              'django.contrib.syndication.feeds.warnings': 'warnings',
              'django.contrib.syndication.views.Http404': 'django.http.Http404',
              'django.contrib.syndication.views.HttpResponse': 'django.http.HttpResponse',
              'django.contrib.syndication.views.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.contrib.syndication.views.LegacyFeed': 'django.contrib.syndication.feeds.Feed',
              'django.contrib.syndication.views.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.contrib.syndication.views.RequestContext': 'django.template.RequestContext',
              'django.contrib.syndication.views.TemplateDoesNotExist': 'django.template.TemplateDoesNotExist',
              'django.contrib.syndication.views.escape': 'django.utils.html.escape',
              'django.contrib.syndication.views.feedgenerator': 'django.utils.feedgenerator',
              'django.contrib.syndication.views.force_unicode': 'django.utils.encoding.force_unicode',
              'django.contrib.syndication.views.get_current_site': 'django.contrib.sites.models.get_current_site',
              'django.contrib.syndication.views.iri_to_uri': 'django.utils.encoding.iri_to_uri',
              'django.contrib.syndication.views.loader': 'django.template.loader',
              'django.contrib.syndication.views.settings': 'django.conf.settings',
              'django.contrib.syndication.views.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.contrib.syndication.views.tzinfo': 'django.utils.tzinfo',
              'django.contrib.syndication.views.warnings': 'warnings',
              'django.contrib.webdesign.lorem_ipsum.random': 'random',
              'django.contrib.webdesign.templatetags.webdesign.paragraphs': 'django.contrib.webdesign.lorem_ipsum.paragraphs',
              'django.contrib.webdesign.templatetags.webdesign.template': 'django.template',
              'django.contrib.webdesign.templatetags.webdesign.words': 'django.contrib.webdesign.lorem_ipsum.words',
              'django.contrib.webdesign.tests.*': 'django.contrib.webdesign.lorem_ipsum.*',
              'django.contrib.webdesign.tests.Context': 'django.template.Context',
              'django.contrib.webdesign.tests.loader': 'django.template.loader',
              'django.contrib.webdesign.tests.unittest': 'unittest',
              'django.core.cache.BaseCache': 'django.core.cache.backends.base.BaseCache',
              'django.core.cache.CacheKeyWarning': 'django.core.cache.backends.base.CacheKeyWarning',
              'django.core.cache.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.core.cache.InvalidCacheBackendError': 'django.core.cache.backends.base.InvalidCacheBackendError',
              'django.core.cache.backends.base.DjangoRuntimeWarning': 'django.core.exceptions.DjangoRuntimeWarning',
              'django.core.cache.backends.base.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.core.cache.backends.base.import_module': 'django.utils.importlib.import_module',
              'django.core.cache.backends.base.settings': 'django.conf.settings',
              'django.core.cache.backends.base.smart_str': 'django.utils.encoding.smart_str',
              'django.core.cache.backends.base.warnings': 'warnings',
              'django.core.cache.backends.db.BaseCache': 'django.core.cache.backends.base.BaseCache',
              'django.core.cache.backends.db.DatabaseError': 'django.db.DatabaseError',
              'django.core.cache.backends.db.base64': 'base64',
              'django.core.cache.backends.db.connections': 'django.db.connections',
              'django.core.cache.backends.db.datetime': 'datetime.datetime',
              'django.core.cache.backends.db.pickle': 'pickle',
              'django.core.cache.backends.db.router': 'django.db.router',
              'django.core.cache.backends.db.time': 'time',
              'django.core.cache.backends.db.transaction': 'django.db.transaction',
              'django.core.cache.backends.dummy.BaseCache': 'django.core.cache.backends.base.BaseCache',
              'django.core.cache.backends.filebased.BaseCache': 'django.core.cache.backends.base.BaseCache',
              'django.core.cache.backends.filebased.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.core.cache.backends.filebased.os': 'os',
              'django.core.cache.backends.filebased.pickle': 'pickle',
              'django.core.cache.backends.filebased.shutil': 'shutil',
              'django.core.cache.backends.filebased.time': 'time',
              'django.core.cache.backends.locmem.BaseCache': 'django.core.cache.backends.base.BaseCache',
              'django.core.cache.backends.locmem.RWLock': 'django.utils.synch.RWLock',
              'django.core.cache.backends.locmem.pickle': 'pickle',
              'django.core.cache.backends.locmem.time': 'time',
              'django.core.cache.backends.memcached.BaseCache': 'django.core.cache.backends.base.BaseCache',
              'django.core.cache.backends.memcached.InvalidCacheBackendError': 'django.core.cache.backends.base.InvalidCacheBackendError',
              'django.core.cache.backends.memcached.importlib': 'django.utils.importlib',
              'django.core.cache.backends.memcached.local': 'threading.local',
              'django.core.cache.backends.memcached.memcache': 'memcache',
              'django.core.cache.backends.memcached.pylibmc': 'pylibmc',
              'django.core.cache.backends.memcached.time': 'time',
              'django.core.cache.backends.memcached.warnings': 'warnings',
              'django.core.cache.importlib': 'django.utils.importlib',
              'django.core.cache.parse_qsl': 'cgi.parse_qsl',
              'django.core.cache.settings': 'django.conf.settings',
              'django.core.cache.signals': 'django.core.signals',
              'django.core.cache.warnings': 'warnings',
              'django.core.context_processors.RealPermLookupDict': 'django.contrib.auth.context_processors.PermLookupDict',
              'django.core.context_processors.RealPermWrapper': 'django.contrib.auth.context_processors.PermWrapper',
              'django.core.context_processors.auth_context_processor': 'django.contrib.auth.context_processors.auth',
              'django.core.context_processors.connection': 'django.db.connection',
              'django.core.context_processors.get_token': 'django.middleware.csrf.get_token',
              'django.core.context_processors.lazy': 'django.utils.functional.lazy',
              'django.core.context_processors.settings': 'django.conf.settings',
              'django.core.context_processors.translation': 'django.utils.translation',
              'django.core.context_processors.warnings': 'warnings',
              'django.core.exceptions.force_unicode': 'django.utils.encoding.force_unicode',
              'django.core.exceptions.operator': 'operator',
              'django.core.files.File': 'django.core.files.base.File',
              'django.core.files.base.FileProxyMixin': 'django.core.files.utils.FileProxyMixin',
              'django.core.files.base.StringIO': 'StringIO.StringIO',
              'django.core.files.base.os': 'os',
              'django.core.files.base.smart_str': 'django.utils.encoding.smart_str',
              'django.core.files.base.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.core.files.images.File': 'django.core.files.File',
              'django.core.files.images.PILImageFile': 'ImageFile',
              'django.core.files.locks.fcntl': 'fcntl',
              'django.core.files.locks.pywintypes': 'pywintypes',
              'django.core.files.locks.win32con': 'win32con',
              'django.core.files.locks.win32file': 'win32file',
              'django.core.files.move.copystat': 'shutil.copystat',
              'django.core.files.move.locks': 'django.core.files.locks',
              'django.core.files.move.os': 'os',
              'django.core.files.move.stat': 'stat',
              'django.core.files.storage.File': 'django.core.files.File',
              'django.core.files.storage.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.core.files.storage.LazyObject': 'django.utils.functional.LazyObject',
              'django.core.files.storage.SuspiciousOperation': 'django.core.exceptions.SuspiciousOperation',
              'django.core.files.storage.datetime': 'datetime.datetime',
              'django.core.files.storage.errno': 'errno',
              'django.core.files.storage.file_move_safe': 'django.core.files.move.file_move_safe',
              'django.core.files.storage.filepath_to_uri': 'django.utils.encoding.filepath_to_uri',
              'django.core.files.storage.force_unicode': 'django.utils.encoding.force_unicode',
              'django.core.files.storage.get_valid_filename': 'django.utils.text.get_valid_filename',
              'django.core.files.storage.import_module': 'django.utils.importlib.import_module',
              'django.core.files.storage.itertools': 'itertools',
              'django.core.files.storage.locks': 'django.core.files.locks',
              'django.core.files.storage.os': 'os',
              'django.core.files.storage.safe_join': 'django.utils._os.safe_join',
              'django.core.files.storage.settings': 'django.conf.settings',
              'django.core.files.storage.urlparse': 'urlparse',
              'django.core.files.temp.FileProxyMixin': 'django.core.files.utils.FileProxyMixin',
              'django.core.files.temp.os': 'os',
              'django.core.files.temp.tempfile': 'tempfile',
              'django.core.files.uploadedfile.File': 'django.core.files.base.File',
              'django.core.files.uploadedfile.StringIO': 'StringIO.StringIO',
              'django.core.files.uploadedfile.os': 'os',
              'django.core.files.uploadedfile.settings': 'django.conf.settings',
              'django.core.files.uploadedfile.smart_str': 'django.utils.encoding.smart_str',
              'django.core.files.uploadedfile.tempfile': 'django.core.files.temp',
              'django.core.files.uploadhandler.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.core.files.uploadhandler.InMemoryUploadedFile': 'django.core.files.uploadedfile.InMemoryUploadedFile',
              'django.core.files.uploadhandler.StringIO': 'StringIO.StringIO',
              'django.core.files.uploadhandler.TemporaryUploadedFile': 'django.core.files.uploadedfile.TemporaryUploadedFile',
              'django.core.files.uploadhandler.importlib': 'django.utils.importlib',
              'django.core.files.uploadhandler.settings': 'django.conf.settings',
              'django.core.handlers.base.debug': 'django.views.debug',
              'django.core.handlers.base.exceptions': 'django.core.exceptions',
              'django.core.handlers.base.force_unicode': 'django.utils.encoding.force_unicode',
              'django.core.handlers.base.getLogger': 'django.utils.log.getLogger',
              'django.core.handlers.base.http': 'django.http',
              'django.core.handlers.base.import_module': 'django.utils.importlib.import_module',
              'django.core.handlers.base.settings': 'django.conf.settings',
              'django.core.handlers.base.signals': 'django.core.signals',
              'django.core.handlers.base.sys': 'sys',
              'django.core.handlers.base.urlresolvers': 'django.core.urlresolvers',
              'django.core.handlers.modpython.BaseHandler': 'django.core.handlers.base.BaseHandler',
              'django.core.handlers.modpython.datastructures': 'django.utils.datastructures',
              'django.core.handlers.modpython.force_unicode': 'django.utils.encoding.force_unicode',
              'django.core.handlers.modpython.getLogger': 'django.utils.log.getLogger',
              'django.core.handlers.modpython.http': 'django.http',
              'django.core.handlers.modpython.iri_to_uri': 'django.utils.encoding.iri_to_uri',
              'django.core.handlers.modpython.os': 'os',
              'django.core.handlers.modpython.pformat': 'pprint.pformat',
              'django.core.handlers.modpython.set_script_prefix': 'django.core.urlresolvers.set_script_prefix',
              'django.core.handlers.modpython.settings': 'django.conf.settings',
              'django.core.handlers.modpython.signals': 'django.core.signals',
              'django.core.handlers.modpython.smart_str': 'django.utils.encoding.smart_str',
              'django.core.handlers.modpython.sys': 'sys',
              'django.core.handlers.modpython.warn': 'warnings.warn',
              'django.core.handlers.profiler-hotshot.ModPythonHandler': 'django.core.handlers.modpython.ModPythonHandler',
              'django.core.handlers.profiler-hotshot.hotshot': 'hotshot',
              'django.core.handlers.profiler-hotshot.os': 'os',
              'django.core.handlers.profiler-hotshot.time': 'time',
              'django.core.handlers.wsgi.Lock': 'threading.Lock',
              'django.core.handlers.wsgi.StringIO': 'StringIO.StringIO',
              'django.core.handlers.wsgi.base': 'django.core.handlers.base',
              'django.core.handlers.wsgi.datastructures': 'django.utils.datastructures',
              'django.core.handlers.wsgi.force_unicode': 'django.utils.encoding.force_unicode',
              'django.core.handlers.wsgi.getLogger': 'django.utils.log.getLogger',
              'django.core.handlers.wsgi.http': 'django.http',
              'django.core.handlers.wsgi.iri_to_uri': 'django.utils.encoding.iri_to_uri',
              'django.core.handlers.wsgi.pformat': 'pprint.pformat',
              'django.core.handlers.wsgi.set_script_prefix': 'django.core.urlresolvers.set_script_prefix',
              'django.core.handlers.wsgi.settings': 'django.conf.settings',
              'django.core.handlers.wsgi.signals': 'django.core.signals',
              'django.core.handlers.wsgi.socket': 'socket',
              'django.core.handlers.wsgi.sys': 'sys',
              'django.core.mail.BadHeaderError': 'django.core.mail.message.BadHeaderError',
              'django.core.mail.CachedDnsName': 'django.core.mail.utils.CachedDnsName',
              'django.core.mail.DEFAULT_ATTACHMENT_MIME_TYPE': 'django.core.mail.message.DEFAULT_ATTACHMENT_MIME_TYPE',
              'django.core.mail.DNS_NAME': 'django.core.mail.utils.DNS_NAME',
              'django.core.mail.EmailMessage': 'django.core.mail.message.EmailMessage',
              'django.core.mail.EmailMultiAlternatives': 'django.core.mail.message.EmailMultiAlternatives',
              'django.core.mail.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.core.mail.SafeMIMEMultipart': 'django.core.mail.message.SafeMIMEMultipart',
              'django.core.mail.SafeMIMEText': 'django.core.mail.message.SafeMIMEText',
              'django.core.mail._SMTPConnection': 'django.core.mail.backends.smtp.EmailBackend',
              'django.core.mail.backends.console.BaseEmailBackend': 'django.core.mail.backends.base.BaseEmailBackend',
              'django.core.mail.backends.console.sys': 'sys',
              'django.core.mail.backends.console.threading': 'threading',
              'django.core.mail.backends.dummy.BaseEmailBackend': 'django.core.mail.backends.base.BaseEmailBackend',
              'django.core.mail.backends.filebased.ConsoleEmailBackend': 'django.core.mail.backends.console.EmailBackend',
              'django.core.mail.backends.filebased.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.core.mail.backends.filebased.datetime': 'datetime',
              'django.core.mail.backends.filebased.os': 'os',
              'django.core.mail.backends.filebased.settings': 'django.conf.settings',
              'django.core.mail.backends.locmem.BaseEmailBackend': 'django.core.mail.backends.base.BaseEmailBackend',
              'django.core.mail.backends.locmem.mail': 'django.core.mail',
              'django.core.mail.backends.smtp.BaseEmailBackend': 'django.core.mail.backends.base.BaseEmailBackend',
              'django.core.mail.backends.smtp.DNS_NAME': 'django.core.mail.utils.DNS_NAME',
              'django.core.mail.backends.smtp.sanitize_address': 'django.core.mail.message.sanitize_address',
              'django.core.mail.backends.smtp.settings': 'django.conf.settings',
              'django.core.mail.backends.smtp.smtplib': 'smtplib',
              'django.core.mail.backends.smtp.socket': 'socket',
              'django.core.mail.backends.smtp.threading': 'threading',
              'django.core.mail.forbid_multi_line_headers': 'django.core.mail.message.forbid_multi_line_headers',
              'django.core.mail.import_module': 'django.utils.importlib.import_module',
              'django.core.mail.make_msgid': 'django.core.mail.message.make_msgid',
              'django.core.mail.message.Charset': 'email.Charset',
              'django.core.mail.message.DNS_NAME': 'django.core.mail.utils.DNS_NAME',
              'django.core.mail.message.Encoders': 'email.Encoders',
              'django.core.mail.message.Generator': 'email.Generator.Generator',
              'django.core.mail.message.Header': 'email.Header.Header',
              'django.core.mail.message.MIMEBase': 'email.MIMEBase.MIMEBase',
              'django.core.mail.message.MIMEMultipart': 'email.MIMEMultipart.MIMEMultipart',
              'django.core.mail.message.MIMEText': 'email.MIMEText.MIMEText',
              'django.core.mail.message.StringIO': 'StringIO.StringIO',
              'django.core.mail.message.force_unicode': 'django.utils.encoding.force_unicode',
              'django.core.mail.message.formataddr': 'email.Utils.formataddr',
              'django.core.mail.message.formatdate': 'email.Utils.formatdate',
              'django.core.mail.message.get_connection': 'django.core.mail.get_connection',
              'django.core.mail.message.getaddresses': 'email.Utils.getaddresses',
              'django.core.mail.message.mimetypes': 'mimetypes',
              'django.core.mail.message.os': 'os',
              'django.core.mail.message.parseaddr': 'email.Utils.parseaddr',
              'django.core.mail.message.random': 'random',
              'django.core.mail.message.settings': 'django.conf.settings',
              'django.core.mail.message.smart_str': 'django.utils.encoding.smart_str',
              'django.core.mail.message.time': 'time',
              'django.core.mail.settings': 'django.conf.settings',
              'django.core.mail.utils.socket': 'socket',
              'django.core.mail.warnings': 'warnings',
              'django.core.management.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.core.management.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.FASTCGI_OPTIONS': 'django.core.servers.fastcgi.FASTCGI_OPTIONS',
              'django.core.management.NO_DEFAULT': 'optparse.NO_DEFAULT',
              'django.core.management.OptionParser': 'optparse.OptionParser',
              'django.core.management.ProjectCommand': 'django.core.management.commands.startapp.ProjectCommand',
              'django.core.management.base.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.base.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.core.management.base.OptionParser': 'optparse.OptionParser',
              'django.core.management.base.StringIO': 'StringIO.StringIO',
              'django.core.management.base.color_style': 'django.core.management.color.color_style',
              'django.core.management.base.connections': 'django.db.connections',
              'django.core.management.base.django': 'django',
              'django.core.management.base.get_validation_errors': 'django.core.management.validation.get_validation_errors',
              'django.core.management.base.make_option': 'optparse.make_option',
              'django.core.management.base.models': 'django.db.models',
              'django.core.management.base.os': 'os',
              'django.core.management.base.re': 're',
              'django.core.management.base.shutil': 'shutil',
              'django.core.management.base.smart_str': 'django.utils.encoding.smart_str',
              'django.core.management.base.stat': 'stat',
              'django.core.management.base.sys': 'sys',
              'django.core.management.base.translation': 'django.utils.translation',
              'django.core.management.color.os': 'os',
              'django.core.management.color.sys': 'sys',
              'django.core.management.color.termcolors': 'django.utils.termcolors',
              'django.core.management.commands.cleanup.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'django.core.management.commands.cleanup.Session': 'django.contrib.sessions.models.Session',
              'django.core.management.commands.cleanup.datetime': 'datetime',
              'django.core.management.commands.cleanup.transaction': 'django.db.transaction',
              'django.core.management.commands.compilemessages.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.core.management.commands.compilemessages.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.commands.compilemessages.codecs': 'codecs',
              'django.core.management.commands.compilemessages.make_option': 'optparse.make_option',
              'django.core.management.commands.compilemessages.os': 'os',
              'django.core.management.commands.compilemessages.settings': 'django.conf.settings',
              'django.core.management.commands.compilemessages.sys': 'sys',
              'django.core.management.commands.createcachetable.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.createcachetable.LabelCommand': 'django.core.management.base.LabelCommand',
              'django.core.management.commands.createcachetable.connections': 'django.db.connections',
              'django.core.management.commands.createcachetable.make_option': 'optparse.make_option',
              'django.core.management.commands.createcachetable.models': 'django.db.models',
              'django.core.management.commands.createcachetable.transaction': 'django.db.transaction',
              'django.core.management.commands.dbshell.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.core.management.commands.dbshell.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.commands.dbshell.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.dbshell.connections': 'django.db.connections',
              'django.core.management.commands.dbshell.make_option': 'optparse.make_option',
              'django.core.management.commands.diffsettings.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'django.core.management.commands.diffsettings.global_settings': 'django.conf.global_settings',
              'django.core.management.commands.diffsettings.settings': 'django.conf.settings',
              'django.core.management.commands.dumpdata.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.core.management.commands.dumpdata.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.commands.dumpdata.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.dumpdata.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.core.management.commands.dumpdata.SortedDict': 'django.utils.datastructures.SortedDict',
              'django.core.management.commands.dumpdata.connections': 'django.db.connections',
              'django.core.management.commands.dumpdata.get_app': 'django.db.models.get_app',
              'django.core.management.commands.dumpdata.get_apps': 'django.db.models.get_apps',
              'django.core.management.commands.dumpdata.get_model': 'django.db.models.get_model',
              'django.core.management.commands.dumpdata.get_models': 'django.db.models.get_models',
              'django.core.management.commands.dumpdata.make_option': 'optparse.make_option',
              'django.core.management.commands.dumpdata.router': 'django.db.router',
              'django.core.management.commands.dumpdata.serializers': 'django.core.serializers',
              'django.core.management.commands.flush.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.commands.flush.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.flush.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'django.core.management.commands.flush.call_command': 'django.core.management.call_command',
              'django.core.management.commands.flush.connections': 'django.db.connections',
              'django.core.management.commands.flush.emit_post_sync_signal': 'django.core.management.sql.emit_post_sync_signal',
              'django.core.management.commands.flush.import_module': 'django.utils.importlib.import_module',
              'django.core.management.commands.flush.make_option': 'optparse.make_option',
              'django.core.management.commands.flush.models': 'django.db.models',
              'django.core.management.commands.flush.no_style': 'django.core.management.color.no_style',
              'django.core.management.commands.flush.router': 'django.db.router',
              'django.core.management.commands.flush.settings': 'django.conf.settings',
              'django.core.management.commands.flush.sql_flush': 'django.core.management.sql.sql_flush',
              'django.core.management.commands.flush.transaction': 'django.db.transaction',
              'django.core.management.commands.inspectdb.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.commands.inspectdb.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.inspectdb.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'django.core.management.commands.inspectdb.connections': 'django.db.connections',
              'django.core.management.commands.inspectdb.keyword': 'keyword',
              'django.core.management.commands.inspectdb.make_option': 'optparse.make_option',
              'django.core.management.commands.loaddata.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.core.management.commands.loaddata.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.loaddata.bz2': 'bz2',
              'django.core.management.commands.loaddata.connections': 'django.db.connections',
              'django.core.management.commands.loaddata.get_apps': 'django.db.models.get_apps',
              'django.core.management.commands.loaddata.gzip': 'gzip',
              'django.core.management.commands.loaddata.make_option': 'optparse.make_option',
              'django.core.management.commands.loaddata.no_style': 'django.core.management.color.no_style',
              'django.core.management.commands.loaddata.os': 'os',
              'django.core.management.commands.loaddata.product': 'django.utils.itercompat.product',
              'django.core.management.commands.loaddata.router': 'django.db.router',
              'django.core.management.commands.loaddata.serializers': 'django.core.serializers',
              'django.core.management.commands.loaddata.settings': 'django.conf.settings',
              'django.core.management.commands.loaddata.sys': 'sys',
              'django.core.management.commands.loaddata.traceback': 'traceback',
              'django.core.management.commands.loaddata.transaction': 'django.db.transaction',
              'django.core.management.commands.loaddata.zipfile': 'zipfile',
              'django.core.management.commands.makemessages.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.commands.makemessages.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'django.core.management.commands.makemessages.PIPE': 'subprocess.PIPE',
              'django.core.management.commands.makemessages.Popen': 'subprocess.Popen',
              'django.core.management.commands.makemessages.django': 'django',
              'django.core.management.commands.makemessages.dropwhile': 'itertools.dropwhile',
              'django.core.management.commands.makemessages.fnmatch': 'fnmatch',
              'django.core.management.commands.makemessages.get_text_list': 'django.utils.text.get_text_list',
              'django.core.management.commands.makemessages.glob': 'glob',
              'django.core.management.commands.makemessages.make_option': 'optparse.make_option',
              'django.core.management.commands.makemessages.os': 'os',
              'django.core.management.commands.makemessages.re': 're',
              'django.core.management.commands.makemessages.settings': 'django.conf.settings',
              'django.core.management.commands.makemessages.sys': 'sys',
              'django.core.management.commands.makemessages.templatize': 'django.utils.translation.templatize',
              'django.core.management.commands.reset.AppCommand': 'django.core.management.base.AppCommand',
              'django.core.management.commands.reset.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.commands.reset.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.reset.connections': 'django.db.connections',
              'django.core.management.commands.reset.make_option': 'optparse.make_option',
              'django.core.management.commands.reset.no_style': 'django.core.management.color.no_style',
              'django.core.management.commands.reset.settings': 'django.conf.settings',
              'django.core.management.commands.reset.sql_reset': 'django.core.management.sql.sql_reset',
              'django.core.management.commands.reset.transaction': 'django.db.transaction',
              'django.core.management.commands.reset.warnings': 'warnings',
              'django.core.management.commands.runfcgi.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.core.management.commands.runfcgi.FASTCGI_HELP': 'django.core.servers.fastcgi.FASTCGI_HELP',
              'django.core.management.commands.runfcgi.runfastcgi': 'django.core.servers.fastcgi.runfastcgi',
              'django.core.management.commands.runfcgi.settings': 'django.conf.settings',
              'django.core.management.commands.runfcgi.translation': 'django.utils.translation',
              'django.core.management.commands.runserver.AdminMediaHandler': 'django.core.servers.basehttp.AdminMediaHandler',
              'django.core.management.commands.runserver.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.core.management.commands.runserver.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.commands.runserver.WSGIHandler': 'django.core.handlers.wsgi.WSGIHandler',
              'django.core.management.commands.runserver.WSGIServerException': 'django.core.servers.basehttp.WSGIServerException',
              'django.core.management.commands.runserver.autoreload': 'django.utils.autoreload',
              'django.core.management.commands.runserver.make_option': 'optparse.make_option',
              'django.core.management.commands.runserver.os': 'os',
              'django.core.management.commands.runserver.re': 're',
              'django.core.management.commands.runserver.run': 'django.core.servers.basehttp.run',
              'django.core.management.commands.runserver.settings': 'django.conf.settings',
              'django.core.management.commands.runserver.socket': 'socket',
              'django.core.management.commands.runserver.sys': 'sys',
              'django.core.management.commands.runserver.translation': 'django.utils.translation',
              'django.core.management.commands.shell.IPShell': 'IPython.Shell.IPShell',
              'django.core.management.commands.shell.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'django.core.management.commands.shell.TerminalInteractiveShell': 'IPython.frontend.terminal.embed.TerminalInteractiveShell',
              'django.core.management.commands.shell.bpython': 'bpython',
              'django.core.management.commands.shell.code': 'code',
              'django.core.management.commands.shell.get_models': 'django.db.models.loading.get_models',
              'django.core.management.commands.shell.make_option': 'optparse.make_option',
              'django.core.management.commands.shell.os': 'os',
              'django.core.management.commands.shell.readline': 'readline',
              'django.core.management.commands.shell.rlcompleter': 'rlcompleter',
              'django.core.management.commands.shell.user': 'user',
              'django.core.management.commands.sql.AppCommand': 'django.core.management.base.AppCommand',
              'django.core.management.commands.sql.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.sql.connections': 'django.db.connections',
              'django.core.management.commands.sql.make_option': 'optparse.make_option',
              'django.core.management.commands.sql.sql_create': 'django.core.management.sql.sql_create',
              'django.core.management.commands.sqlall.AppCommand': 'django.core.management.base.AppCommand',
              'django.core.management.commands.sqlall.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.sqlall.connections': 'django.db.connections',
              'django.core.management.commands.sqlall.make_option': 'optparse.make_option',
              'django.core.management.commands.sqlall.sql_all': 'django.core.management.sql.sql_all',
              'django.core.management.commands.sqlclear.AppCommand': 'django.core.management.base.AppCommand',
              'django.core.management.commands.sqlclear.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.sqlclear.connections': 'django.db.connections',
              'django.core.management.commands.sqlclear.make_option': 'optparse.make_option',
              'django.core.management.commands.sqlclear.sql_delete': 'django.core.management.sql.sql_delete',
              'django.core.management.commands.sqlcustom.AppCommand': 'django.core.management.base.AppCommand',
              'django.core.management.commands.sqlcustom.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.sqlcustom.connections': 'django.db.connections',
              'django.core.management.commands.sqlcustom.make_option': 'optparse.make_option',
              'django.core.management.commands.sqlcustom.sql_custom': 'django.core.management.sql.sql_custom',
              'django.core.management.commands.sqlflush.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.sqlflush.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'django.core.management.commands.sqlflush.connections': 'django.db.connections',
              'django.core.management.commands.sqlflush.make_option': 'optparse.make_option',
              'django.core.management.commands.sqlflush.sql_flush': 'django.core.management.sql.sql_flush',
              'django.core.management.commands.sqlindexes.AppCommand': 'django.core.management.base.AppCommand',
              'django.core.management.commands.sqlindexes.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.sqlindexes.connections': 'django.db.connections',
              'django.core.management.commands.sqlindexes.make_option': 'optparse.make_option',
              'django.core.management.commands.sqlindexes.sql_indexes': 'django.core.management.sql.sql_indexes',
              'django.core.management.commands.sqlinitialdata.AppCommand': 'django.core.management.base.AppCommand',
              'django.core.management.commands.sqlinitialdata.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.commands.sqlreset.AppCommand': 'django.core.management.base.AppCommand',
              'django.core.management.commands.sqlreset.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.sqlreset.connections': 'django.db.connections',
              'django.core.management.commands.sqlreset.make_option': 'optparse.make_option',
              'django.core.management.commands.sqlreset.sql_reset': 'django.core.management.sql.sql_reset',
              'django.core.management.commands.sqlsequencereset.AppCommand': 'django.core.management.base.AppCommand',
              'django.core.management.commands.sqlsequencereset.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.sqlsequencereset.connections': 'django.db.connections',
              'django.core.management.commands.sqlsequencereset.make_option': 'optparse.make_option',
              'django.core.management.commands.sqlsequencereset.models': 'django.db.models',
              'django.core.management.commands.startapp.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.commands.startapp.LabelCommand': 'django.core.management.base.LabelCommand',
              'django.core.management.commands.startapp.copy_helper': 'django.core.management.base.copy_helper',
              'django.core.management.commands.startapp.import_module': 'django.utils.importlib.import_module',
              'django.core.management.commands.startapp.os': 'os',
              'django.core.management.commands.startproject.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.commands.startproject.LabelCommand': 'django.core.management.base.LabelCommand',
              'django.core.management.commands.startproject.choice': 'random.choice',
              'django.core.management.commands.startproject.copy_helper': 'django.core.management.base.copy_helper',
              'django.core.management.commands.startproject.import_module': 'django.utils.importlib.import_module',
              'django.core.management.commands.startproject.os': 'os',
              'django.core.management.commands.startproject.re': 're',
              'django.core.management.commands.syncdb.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.management.commands.syncdb.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'django.core.management.commands.syncdb.SortedDict': 'django.utils.datastructures.SortedDict',
              'django.core.management.commands.syncdb.call_command': 'django.core.management.call_command',
              'django.core.management.commands.syncdb.connections': 'django.db.connections',
              'django.core.management.commands.syncdb.custom_sql_for_model': 'django.core.management.sql.custom_sql_for_model',
              'django.core.management.commands.syncdb.emit_post_sync_signal': 'django.core.management.sql.emit_post_sync_signal',
              'django.core.management.commands.syncdb.import_module': 'django.utils.importlib.import_module',
              'django.core.management.commands.syncdb.make_option': 'optparse.make_option',
              'django.core.management.commands.syncdb.models': 'django.db.models',
              'django.core.management.commands.syncdb.no_style': 'django.core.management.color.no_style',
              'django.core.management.commands.syncdb.router': 'django.db.router',
              'django.core.management.commands.syncdb.settings': 'django.conf.settings',
              'django.core.management.commands.syncdb.sys': 'sys',
              'django.core.management.commands.syncdb.traceback': 'traceback',
              'django.core.management.commands.syncdb.transaction': 'django.db.transaction',
              'django.core.management.commands.test.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.core.management.commands.test.get_runner': 'django.test.utils.get_runner',
              'django.core.management.commands.test.make_option': 'optparse.make_option',
              'django.core.management.commands.test.settings': 'django.conf.settings',
              'django.core.management.commands.test.sys': 'sys',
              'django.core.management.commands.test.warnings': 'warnings',
              'django.core.management.commands.testserver.BaseCommand': 'django.core.management.base.BaseCommand',
              'django.core.management.commands.testserver.call_command': 'django.core.management.call_command',
              'django.core.management.commands.testserver.connection': 'django.db.connection',
              'django.core.management.commands.testserver.make_option': 'optparse.make_option',
              'django.core.management.commands.validate.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'django.core.management.django': 'django',
              'django.core.management.handle_default_options': 'django.core.management.base.handle_default_options',
              'django.core.management.imp': 'imp',
              'django.core.management.import_module': 'django.utils.importlib.import_module',
              'django.core.management.os': 'os',
              'django.core.management.settings': 'django.conf.settings',
              'django.core.management.sql.CommandError': 'django.core.management.base.CommandError',
              'django.core.management.sql.get_models': 'django.db.models.get_models',
              'django.core.management.sql.models': 'django.db.models',
              'django.core.management.sql.os': 'os',
              'django.core.management.sql.re': 're',
              'django.core.management.sql.settings': 'django.conf.settings',
              'django.core.management.sql.warnings': 'warnings',
              'django.core.management.sys': 'sys',
              'django.core.management.validation.GenericForeignKey': 'django.contrib.contenttypes.generic.GenericForeignKey',
              'django.core.management.validation.GenericRelation': 'django.contrib.contenttypes.generic.GenericRelation',
              'django.core.management.validation.Image': 'Image',
              'django.core.management.validation.RelatedObject': 'django.db.models.fields.related.RelatedObject',
              'django.core.management.validation.SET_DEFAULT': 'django.db.models.deletion.SET_DEFAULT',
              'django.core.management.validation.SET_NULL': 'django.db.models.deletion.SET_NULL',
              'django.core.management.validation.any': 'django.utils.itercompat.any',
              'django.core.management.validation.color_style': 'django.core.management.color.color_style',
              'django.core.management.validation.connection': 'django.db.connection',
              'django.core.management.validation.get_app_errors': 'django.db.models.loading.get_app_errors',
              'django.core.management.validation.is_iterable': 'django.utils.itercompat.is_iterable',
              'django.core.management.validation.models': 'django.db.models',
              'django.core.management.validation.settings': 'django.conf.settings',
              'django.core.management.validation.sys': 'sys',
              'django.core.paginator.ceil': 'math.ceil',
              'django.core.serializers.base.StringIO': 'StringIO.StringIO',
              'django.core.serializers.base.datetime_safe': 'django.utils.datetime_safe',
              'django.core.serializers.base.models': 'django.db.models',
              'django.core.serializers.base.smart_str': 'django.utils.encoding.smart_str',
              'django.core.serializers.base.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.core.serializers.importlib': 'django.utils.importlib',
              'django.core.serializers.json.PythonDeserializer': 'django.core.serializers.python.Deserializer',
              'django.core.serializers.json.PythonSerializer': 'django.core.serializers.python.Serializer',
              'django.core.serializers.json.StringIO': 'StringIO.StringIO',
              'django.core.serializers.json.datetime': 'datetime',
              'django.core.serializers.json.datetime_safe': 'django.utils.datetime_safe',
              'django.core.serializers.json.decimal': 'decimal',
              'django.core.serializers.json.simplejson': 'django.utils.simplejson',
              'django.core.serializers.python.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.serializers.python.base': 'django.core.serializers.base',
              'django.core.serializers.python.is_protected_type': 'django.utils.encoding.is_protected_type',
              'django.core.serializers.python.models': 'django.db.models',
              'django.core.serializers.python.settings': 'django.conf.settings',
              'django.core.serializers.python.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.core.serializers.pyyaml.PythonDeserializer': 'django.core.serializers.python.Deserializer',
              'django.core.serializers.pyyaml.PythonSerializer': 'django.core.serializers.python.Serializer',
              'django.core.serializers.pyyaml.StringIO': 'StringIO.StringIO',
              'django.core.serializers.pyyaml.decimal': 'decimal',
              'django.core.serializers.pyyaml.models': 'django.db.models',
              'django.core.serializers.pyyaml.yaml': 'yaml',
              'django.core.serializers.settings': 'django.conf.settings',
              'django.core.serializers.xml_serializer.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.core.serializers.xml_serializer.SimplerXMLGenerator': 'django.utils.xmlutils.SimplerXMLGenerator',
              'django.core.serializers.xml_serializer.base': 'django.core.serializers.base',
              'django.core.serializers.xml_serializer.models': 'django.db.models',
              'django.core.serializers.xml_serializer.pulldom': 'xml.dom.pulldom',
              'django.core.serializers.xml_serializer.settings': 'django.conf.settings',
              'django.core.serializers.xml_serializer.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.core.serializers.yaml': 'yaml',
              'django.core.servers.basehttp.BaseHTTPRequestHandler': 'BaseHTTPServer.BaseHTTPRequestHandler',
              'django.core.servers.basehttp.HTTPServer': 'BaseHTTPServer.HTTPServer',
              'django.core.servers.basehttp.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.core.servers.basehttp.color_style': 'django.core.management.color.color_style',
              'django.core.servers.basehttp.django': 'django',
              'django.core.servers.basehttp.handlers': 'django.contrib.staticfiles.handlers',
              'django.core.servers.basehttp.http_date': 'django.utils.http.http_date',
              'django.core.servers.basehttp.os': 'os',
              'django.core.servers.basehttp.print_exception': 'traceback.print_exception',
              'django.core.servers.basehttp.re': 're',
              'django.core.servers.basehttp.safe_join': 'django.utils._os.safe_join',
              'django.core.servers.basehttp.settings': 'django.conf.settings',
              'django.core.servers.basehttp.socket': 'socket',
              'django.core.servers.basehttp.static': 'django.views.static',
              'django.core.servers.basehttp.sys': 'sys',
              'django.core.servers.basehttp.traceback': 'traceback',
              'django.core.servers.basehttp.urllib': 'urllib',
              'django.core.servers.basehttp.warnings': 'warnings',
              'django.core.servers.fastcgi.WSGIHandler': 'django.core.handlers.wsgi.WSGIHandler',
              'django.core.servers.fastcgi.become_daemon': 'django.utils.daemonize.become_daemon',
              'django.core.servers.fastcgi.flup': 'flup',
              'django.core.servers.fastcgi.importlib': 'django.utils.importlib',
              'django.core.servers.fastcgi.os': 'os',
              'django.core.servers.fastcgi.sys': 'sys',
              'django.core.signals.Signal': 'django.dispatch.Signal',
              'django.core.template_loader.*': 'django.template.loader.*',
              'django.core.urlresolvers.Http404': 'django.http.Http404',
              'django.core.urlresolvers.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.core.urlresolvers.MultiValueDict': 'django.utils.datastructures.MultiValueDict',
              'django.core.urlresolvers.ViewDoesNotExist': 'django.core.exceptions.ViewDoesNotExist',
              'django.core.urlresolvers.defaults': 'django.conf.urls.defaults',
              'django.core.urlresolvers.force_unicode': 'django.utils.encoding.force_unicode',
              'django.core.urlresolvers.import_module': 'django.utils.importlib.import_module',
              'django.core.urlresolvers.iri_to_uri': 'django.utils.encoding.iri_to_uri',
              'django.core.urlresolvers.local': 'threading.local',
              'django.core.urlresolvers.memoize': 'django.utils.functional.memoize',
              'django.core.urlresolvers.normalize': 'django.utils.regex_helper.normalize',
              'django.core.urlresolvers.re': 're',
              'django.core.urlresolvers.settings': 'django.conf.settings',
              'django.core.urlresolvers.smart_str': 'django.utils.encoding.smart_str',
              'django.core.validators.ValidationError': 'django.core.exceptions.ValidationError',
              'django.core.validators._': 'django.utils.translation.ugettext_lazy',
              'django.core.validators.re': 're',
              'django.core.validators.settings': 'django.conf.settings',
              'django.core.validators.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.core.validators.urllib2': 'urllib2',
              'django.core.validators.urlparse': 'urlparse',
              'django.core.xheaders.settings': 'django.conf.settings',
              'django.db.ConnectionHandler': 'django.db.utils.ConnectionHandler',
              'django.db.ConnectionRouter': 'django.db.utils.ConnectionRouter',
              'django.db.DEFAULT_DB_ALIAS': 'django.db.utils.DEFAULT_DB_ALIAS',
              'django.db.DatabaseError': 'django.db.utils.DatabaseError',
              'django.db.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.db.IntegrityError': 'django.db.utils.IntegrityError',
              'django.db.backends.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.db.backends.TransactionManagementError': 'django.db.transaction.TransactionManagementError',
              'django.db.backends.creation.BaseDatabaseCache': 'django.core.cache.backends.db.BaseDatabaseCache',
              'django.db.backends.creation.call_command': 'django.core.management.call_command',
              'django.db.backends.creation.get_cache': 'django.core.cache.get_cache',
              'django.db.backends.creation.models': 'django.db.models',
              'django.db.backends.creation.router': 'django.db.router',
              'django.db.backends.creation.settings': 'django.conf.settings',
              'django.db.backends.creation.sys': 'sys',
              'django.db.backends.creation.time': 'time',
              'django.db.backends.creation.truncate_name': 'django.db.backends.util.truncate_name',
              'django.db.backends.creation.warnings': 'warnings',
              'django.db.backends.datetime_safe': 'django.utils.datetime_safe',
              'django.db.backends.decimal': 'decimal',
              'django.db.backends.dummy.base.*': 'django.db.backends.*',
              'django.db.backends.dummy.base.BaseDatabaseCreation': 'django.db.backends.creation.BaseDatabaseCreation',
              'django.db.backends.dummy.base.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.db.backends.force_unicode': 'django.utils.encoding.force_unicode',
              'django.db.backends.import_module': 'django.utils.importlib.import_module',
              'django.db.backends.local': 'threading.local',
              'django.db.backends.models': 'django.db.models',
              'django.db.backends.mysql.base.*': 'django.db.backends.*',
              'django.db.backends.mysql.base.CLIENT': 'MySQLdb.constants.CLIENT',
              'django.db.backends.mysql.base.Database': 'MySQLdb',
              'django.db.backends.mysql.base.DatabaseClient': 'django.db.backends.mysql.client.DatabaseClient',
              'django.db.backends.mysql.base.DatabaseCreation': 'django.db.backends.mysql.creation.DatabaseCreation',
              'django.db.backends.mysql.base.DatabaseIntrospection': 'django.db.backends.mysql.introspection.DatabaseIntrospection',
              'django.db.backends.mysql.base.DatabaseValidation': 'django.db.backends.mysql.validation.DatabaseValidation',
              'django.db.backends.mysql.base.FIELD_TYPE': 'MySQLdb.constants.FIELD_TYPE',
              'django.db.backends.mysql.base.FLAG': 'MySQLdb.constants.FLAG',
              'django.db.backends.mysql.base.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.db.backends.mysql.base.SafeString': 'django.utils.safestring.SafeString',
              'django.db.backends.mysql.base.SafeUnicode': 'django.utils.safestring.SafeUnicode',
              'django.db.backends.mysql.base.connection_created': 'django.db.backends.signals.connection_created',
              'django.db.backends.mysql.base.conversions': 'MySQLdb.converters.conversions',
              'django.db.backends.mysql.base.filterwarnings': 'warnings.filterwarnings',
              'django.db.backends.mysql.base.re': 're',
              'django.db.backends.mysql.base.settings': 'django.conf.settings',
              'django.db.backends.mysql.base.sys': 'sys',
              'django.db.backends.mysql.base.utils': 'django.db.utils',
              'django.db.backends.mysql.client.BaseDatabaseClient': 'django.db.backends.BaseDatabaseClient',
              'django.db.backends.mysql.client.os': 'os',
              'django.db.backends.mysql.client.sys': 'sys',
              'django.db.backends.mysql.compiler.compiler': 'django.db.models.sql.compiler',
              'django.db.backends.mysql.creation.BaseDatabaseCreation': 'django.db.backends.creation.BaseDatabaseCreation',
              'django.db.backends.mysql.creation.models': 'django.db.models',
              'django.db.backends.mysql.introspection.BaseDatabaseIntrospection': 'django.db.backends.BaseDatabaseIntrospection',
              'django.db.backends.mysql.introspection.FIELD_TYPE': 'MySQLdb.constants.FIELD_TYPE',
              'django.db.backends.mysql.introspection.OperationalError': 'MySQLdb.OperationalError',
              'django.db.backends.mysql.introspection.ProgrammingError': 'MySQLdb.ProgrammingError',
              'django.db.backends.mysql.introspection.re': 're',
              'django.db.backends.mysql.validation.BaseDatabaseValidation': 'django.db.backends.BaseDatabaseValidation',
              'django.db.backends.mysql.validation.models': 'django.db.models',
              'django.db.backends.oracle.base.*': 'django.db.backends.*',
              'django.db.backends.oracle.base.Database': 'cx_Oracle',
              'django.db.backends.oracle.base.DatabaseClient': 'django.db.backends.oracle.client.DatabaseClient',
              'django.db.backends.oracle.base.DatabaseCreation': 'django.db.backends.oracle.creation.DatabaseCreation',
              'django.db.backends.oracle.base.DatabaseIntrospection': 'django.db.backends.oracle.introspection.DatabaseIntrospection',
              'django.db.backends.oracle.base.Decimal': 'decimal.Decimal',
              'django.db.backends.oracle.base.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.db.backends.oracle.base.connection': 'django.db.connection',
              'django.db.backends.oracle.base.connection_created': 'django.db.backends.signals.connection_created',
              'django.db.backends.oracle.base.ctypes': 'ctypes',
              'django.db.backends.oracle.base.datetime': 'datetime',
              'django.db.backends.oracle.base.force_unicode': 'django.utils.encoding.force_unicode',
              'django.db.backends.oracle.base.models': 'django.db.models',
              'django.db.backends.oracle.base.os': 'os',
              'django.db.backends.oracle.base.platform': 'platform',
              'django.db.backends.oracle.base.smart_str': 'django.utils.encoding.smart_str',
              'django.db.backends.oracle.base.sys': 'sys',
              'django.db.backends.oracle.base.time': 'time',
              'django.db.backends.oracle.base.utils': 'django.db.utils',
              'django.db.backends.oracle.client.BaseDatabaseClient': 'django.db.backends.BaseDatabaseClient',
              'django.db.backends.oracle.client.os': 'os',
              'django.db.backends.oracle.client.sys': 'sys',
              'django.db.backends.oracle.compiler.compiler': 'django.db.models.sql.compiler',
              'django.db.backends.oracle.creation.BaseDatabaseCreation': 'django.db.backends.creation.BaseDatabaseCreation',
              'django.db.backends.oracle.creation.sys': 'sys',
              'django.db.backends.oracle.creation.time': 'time',
              'django.db.backends.oracle.introspection.BaseDatabaseIntrospection': 'django.db.backends.BaseDatabaseIntrospection',
              'django.db.backends.oracle.introspection.cx_Oracle': 'cx_Oracle',
              'django.db.backends.oracle.introspection.re': 're',
              'django.db.backends.postgresql.base.*': 'django.db.backends.*',
              'django.db.backends.postgresql.base.Database': 'psycopg',
              'django.db.backends.postgresql.base.DatabaseClient': 'django.db.backends.postgresql.client.DatabaseClient',
              'django.db.backends.postgresql.base.DatabaseCreation': 'django.db.backends.postgresql.creation.DatabaseCreation',
              'django.db.backends.postgresql.base.DatabaseIntrospection': 'django.db.backends.postgresql.introspection.DatabaseIntrospection',
              'django.db.backends.postgresql.base.DatabaseOperations': 'django.db.backends.postgresql.operations.DatabaseOperations',
              'django.db.backends.postgresql.base.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.db.backends.postgresql.base.connection_created': 'django.db.backends.signals.connection_created',
              'django.db.backends.postgresql.base.get_version': 'django.db.backends.postgresql.version.get_version',
              'django.db.backends.postgresql.base.smart_str': 'django.utils.encoding.smart_str',
              'django.db.backends.postgresql.base.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.db.backends.postgresql.base.sys': 'sys',
              'django.db.backends.postgresql.base.utils': 'django.db.utils',
              'django.db.backends.postgresql.base.warnings': 'warnings',
              'django.db.backends.postgresql.client.BaseDatabaseClient': 'django.db.backends.BaseDatabaseClient',
              'django.db.backends.postgresql.client.os': 'os',
              'django.db.backends.postgresql.client.sys': 'sys',
              'django.db.backends.postgresql.creation.BaseDatabaseCreation': 'django.db.backends.creation.BaseDatabaseCreation',
              'django.db.backends.postgresql.creation.truncate_name': 'django.db.backends.util.truncate_name',
              'django.db.backends.postgresql.introspection.BaseDatabaseIntrospection': 'django.db.backends.BaseDatabaseIntrospection',
              'django.db.backends.postgresql.operations.BaseDatabaseOperations': 'django.db.backends.BaseDatabaseOperations',
              'django.db.backends.postgresql.operations.get_version': 'django.db.backends.postgresql.version.get_version',
              'django.db.backends.postgresql.operations.models': 'django.db.models',
              'django.db.backends.postgresql.operations.re': 're',
              'django.db.backends.postgresql.version.re': 're',
              'django.db.backends.postgresql_psycopg2.base.*': 'django.db.backends.*',
              'django.db.backends.postgresql_psycopg2.base.Database': 'psycopg2',
              'django.db.backends.postgresql_psycopg2.base.DatabaseClient': 'django.db.backends.postgresql.client.DatabaseClient',
              'django.db.backends.postgresql_psycopg2.base.DatabaseCreation': 'django.db.backends.postgresql.creation.DatabaseCreation',
              'django.db.backends.postgresql_psycopg2.base.DatabaseIntrospection': 'django.db.backends.postgresql_psycopg2.introspection.DatabaseIntrospection',
              'django.db.backends.postgresql_psycopg2.base.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.db.backends.postgresql_psycopg2.base.PostgresqlDatabaseOperations': 'django.db.backends.postgresql.operations.DatabaseOperations',
              'django.db.backends.postgresql_psycopg2.base.SafeString': 'django.utils.safestring.SafeString',
              'django.db.backends.postgresql_psycopg2.base.SafeUnicode': 'django.utils.safestring.SafeUnicode',
              'django.db.backends.postgresql_psycopg2.base.connection_created': 'django.db.backends.signals.connection_created',
              'django.db.backends.postgresql_psycopg2.base.get_version': 'django.db.backends.postgresql.version.get_version',
              'django.db.backends.postgresql_psycopg2.base.psycopg2.extensions': 'psycopg2.extensions',
              'django.db.backends.postgresql_psycopg2.base.sys': 'sys',
              'django.db.backends.postgresql_psycopg2.base.utils': 'django.db.utils',
              'django.db.backends.postgresql_psycopg2.introspection.PostgresDatabaseIntrospection': 'django.db.backends.postgresql.introspection.DatabaseIntrospection',
              'django.db.backends.router': 'django.db.router',
              'django.db.backends.settings': 'django.conf.settings',
              'django.db.backends.signals.Signal': 'django.dispatch.Signal',
              'django.db.backends.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.db.backends.sqlite3.base.*': 'django.db.backends.*',
              'django.db.backends.sqlite3.base.Database': 'sqlite3.dbapi2',
              'django.db.backends.sqlite3.base.DatabaseClient': 'django.db.backends.sqlite3.client.DatabaseClient',
              'django.db.backends.sqlite3.base.DatabaseCreation': 'django.db.backends.sqlite3.creation.DatabaseCreation',
              'django.db.backends.sqlite3.base.DatabaseIntrospection': 'django.db.backends.sqlite3.introspection.DatabaseIntrospection',
              'django.db.backends.sqlite3.base.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.db.backends.sqlite3.base.SafeString': 'django.utils.safestring.SafeString',
              'django.db.backends.sqlite3.base.connection_created': 'django.db.backends.signals.connection_created',
              'django.db.backends.sqlite3.base.datetime': 'datetime',
              'django.db.backends.sqlite3.base.re': 're',
              'django.db.backends.sqlite3.base.sys': 'sys',
              'django.db.backends.sqlite3.base.utils': 'django.db.utils',
              'django.db.backends.sqlite3.client.BaseDatabaseClient': 'django.db.backends.BaseDatabaseClient',
              'django.db.backends.sqlite3.client.os': 'os',
              'django.db.backends.sqlite3.client.sys': 'sys',
              'django.db.backends.sqlite3.creation.BaseDatabaseCreation': 'django.db.backends.creation.BaseDatabaseCreation',
              'django.db.backends.sqlite3.creation.os': 'os',
              'django.db.backends.sqlite3.creation.sys': 'sys',
              'django.db.backends.sqlite3.introspection.BaseDatabaseIntrospection': 'django.db.backends.BaseDatabaseIntrospection',
              'django.db.backends.sqlite3.introspection.re': 're',
              'django.db.backends.thread': 'dummy_thread',
              'django.db.backends.util': 'django.db.backends.util',
              'django.db.backends.util.datetime': 'datetime',
              'django.db.backends.util.decimal': 'decimal',
              'django.db.backends.util.getLogger': 'django.utils.log.getLogger',
              'django.db.backends.util.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.db.backends.util.time': 'time.time',
              'django.db.curry': 'django.utils.functional.curry',
              'django.db.load_backend': 'django.db.utils.load_backend',
              'django.db.models.*': 'django.db.models.fields.*',
              'django.db.models.CASCADE': 'django.db.models.deletion.CASCADE',
              'django.db.models.DO_NOTHING': 'django.db.models.deletion.DO_NOTHING',
              'django.db.models.F': 'django.db.models.expressions.F',
              'django.db.models.FileField': 'django.db.models.fields.files.FileField',
              'django.db.models.ForeignKey': 'django.db.models.fields.related.ForeignKey',
              'django.db.models.ImageField': 'django.db.models.fields.files.ImageField',
              'django.db.models.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.db.models.Manager': 'django.db.models.manager.Manager',
              'django.db.models.ManyToManyField': 'django.db.models.fields.related.ManyToManyField',
              'django.db.models.ManyToManyRel': 'django.db.models.fields.related.ManyToManyRel',
              'django.db.models.ManyToOneRel': 'django.db.models.fields.related.ManyToOneRel',
              'django.db.models.Model': 'django.db.models.base.Model',
              'django.db.models.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.db.models.OneToOneField': 'django.db.models.fields.related.OneToOneField',
              'django.db.models.OneToOneRel': 'django.db.models.fields.related.OneToOneRel',
              'django.db.models.PROTECT': 'django.db.models.deletion.PROTECT',
              'django.db.models.ProtectedError': 'django.db.models.deletion.ProtectedError',
              'django.db.models.Q': 'django.db.models.query.Q',
              'django.db.models.SET': 'django.db.models.deletion.SET',
              'django.db.models.SET_DEFAULT': 'django.db.models.deletion.SET_DEFAULT',
              'django.db.models.SET_NULL': 'django.db.models.deletion.SET_NULL',
              'django.db.models.SubfieldBase': 'django.db.models.fields.subclassing.SubfieldBase',
              'django.db.models.base.AutoField': 'django.db.models.fields.AutoField',
              'django.db.models.base.Collector': 'django.db.models.deletion.Collector',
              'django.db.models.base.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.db.models.base.DatabaseError': 'django.db.DatabaseError',
              'django.db.models.base.DeferredAttribute': 'django.db.models.query_utils.DeferredAttribute',
              'django.db.models.base.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.db.models.base.FieldError': 'django.core.exceptions.FieldError',
              'django.db.models.base.ManyToOneRel': 'django.db.models.fields.related.ManyToOneRel',
              'django.db.models.base.MultipleObjectsReturned': 'django.core.exceptions.MultipleObjectsReturned',
              'django.db.models.base.NON_FIELD_ERRORS': 'django.core.exceptions.NON_FIELD_ERRORS',
              'django.db.models.base.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.db.models.base.OneToOneField': 'django.db.models.fields.related.OneToOneField',
              'django.db.models.base.OneToOneRel': 'django.db.models.fields.related.OneToOneRel',
              'django.db.models.base.Options': 'django.db.models.options.Options',
              'django.db.models.base.Q': 'django.db.models.query.Q',
              'django.db.models.base.ValidationError': 'django.core.exceptions.ValidationError',
              'django.db.models.base._': 'django.utils.translation.ugettext_lazy',
              'django.db.models.base.add_lazy_relation': 'django.db.models.fields.related.add_lazy_relation',
              'django.db.models.base.capfirst': 'django.utils.text.capfirst',
              'django.db.models.base.connections': 'django.db.connections',
              'django.db.models.base.copy': 'django.utils.copycompat',
              'django.db.models.base.curry': 'django.utils.functional.curry',
              'django.db.models.base.deferred_class_factory': 'django.db.models.query_utils.deferred_class_factory',
              'django.db.models.base.django.db.models.manager': 'django.db.models.manager',
              'django.db.models.base.force_unicode': 'django.utils.encoding.force_unicode',
              'django.db.models.base.get_model': 'django.db.models.loading.get_model',
              'django.db.models.base.get_text_list': 'django.utils.text.get_text_list',
              'django.db.models.base.izip': 'itertools.izip',
              'django.db.models.base.register_models': 'django.db.models.loading.register_models',
              'django.db.models.base.router': 'django.db.router',
              'django.db.models.base.settings': 'django.conf.settings',
              'django.db.models.base.signals': 'django.db.models.signals',
              'django.db.models.base.smart_str': 'django.utils.encoding.smart_str',
              'django.db.models.base.sys': 'sys',
              'django.db.models.base.transaction': 'django.db.transaction',
              'django.db.models.base.types': 'types',
              'django.db.models.base.update_wrapper': 'django.utils.functional.update_wrapper',
              'django.db.models.base.validators': 'django.core.validators',
              'django.db.models.connection': 'django.db.connection',
              'django.db.models.deletion.GET_ITERATOR_CHUNK_SIZE': 'django.db.models.sql.constants.GET_ITERATOR_CHUNK_SIZE',
              'django.db.models.deletion.IntegrityError': 'django.db.IntegrityError',
              'django.db.models.deletion.SortedDict': 'django.utils.datastructures.SortedDict',
              'django.db.models.deletion.attrgetter': 'operator.attrgetter',
              'django.db.models.deletion.connections': 'django.db.connections',
              'django.db.models.deletion.signals': 'django.db.models.signals',
              'django.db.models.deletion.sql': 'django.db.models.sql',
              'django.db.models.deletion.transaction': 'django.db.transaction',
              'django.db.models.deletion.wraps': 'django.utils.functional.wraps',
              'django.db.models.expressions.datetime': 'datetime',
              'django.db.models.expressions.deepcopy': 'django.utils.copycompat.deepcopy',
              'django.db.models.expressions.tree': 'django.utils.tree',
              'django.db.models.fields.DictWrapper': 'django.utils.datastructures.DictWrapper',
              'django.db.models.fields.LegacyConnection': 'django.db.models.fields.subclassing.LegacyConnection',
              'django.db.models.fields.QueryWrapper': 'django.db.models.query_utils.QueryWrapper',
              'django.db.models.fields._': 'django.utils.translation.ugettext_lazy',
              'django.db.models.fields.capfirst': 'django.utils.text.capfirst',
              'django.db.models.fields.connection': 'django.db.connection',
              'django.db.models.fields.copy': 'django.utils.copycompat',
              'django.db.models.fields.curry': 'django.utils.functional.curry',
              'django.db.models.fields.datetime': 'datetime',
              'django.db.models.fields.datetime_safe': 'django.utils.datetime_safe',
              'django.db.models.fields.decimal': 'decimal',
              'django.db.models.fields.exceptions': 'django.core.exceptions',
              'django.db.models.fields.files.ContentFile': 'django.core.files.base.ContentFile',
              'django.db.models.fields.files.Field': 'django.db.models.fields.Field',
              'django.db.models.fields.files.File': 'django.core.files.base.File',
              'django.db.models.fields.files.ImageFile': 'django.core.files.images.ImageFile',
              'django.db.models.fields.files.UploadedFile': 'django.core.files.uploadedfile.UploadedFile',
              'django.db.models.fields.files._': 'django.utils.translation.ugettext',
              'django.db.models.fields.files.cache': 'django.db.models.loading.cache',
              'django.db.models.fields.files.copy': 'django.utils.copycompat',
              'django.db.models.fields.files.curry': 'django.utils.functional.curry',
              'django.db.models.fields.files.datetime': 'datetime',
              'django.db.models.fields.files.default_storage': 'django.core.files.storage.default_storage',
              'django.db.models.fields.files.force_unicode': 'django.utils.encoding.force_unicode',
              'django.db.models.fields.files.forms': 'django.forms',
              'django.db.models.fields.files.get_image_dimensions': 'django.core.files.images.get_image_dimensions',
              'django.db.models.fields.files.os': 'os',
              'django.db.models.fields.files.settings': 'django.conf.settings',
              'django.db.models.fields.files.signals': 'django.db.models.signals',
              'django.db.models.fields.files.smart_str': 'django.utils.encoding.smart_str',
              'django.db.models.fields.files.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'django.db.models.fields.force_unicode': 'django.utils.encoding.force_unicode',
              'django.db.models.fields.forms': 'django.forms',
              'django.db.models.fields.math': 'math',
              'django.db.models.fields.proxy.fields': 'django.db.models.fields',
              'django.db.models.fields.re': 're',
              'django.db.models.fields.related.AutoField': 'django.db.models.fields.AutoField',
              'django.db.models.fields.related.CASCADE': 'django.db.models.deletion.CASCADE',
              'django.db.models.fields.related.Field': 'django.db.models.fields.Field',
              'django.db.models.fields.related.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.db.models.fields.related.IntegerField': 'django.db.models.fields.IntegerField',
              'django.db.models.fields.related.Model': 'django.db.models.Model',
              'django.db.models.fields.related.PositiveIntegerField': 'django.db.models.fields.PositiveIntegerField',
              'django.db.models.fields.related.PositiveSmallIntegerField': 'django.db.models.fields.PositiveSmallIntegerField',
              'django.db.models.fields.related.QuerySet': 'django.db.models.query.QuerySet',
              'django.db.models.fields.related.QueryWrapper': 'django.db.models.query_utils.QueryWrapper',
              'django.db.models.fields.related.RelatedObject': 'django.db.models.related.RelatedObject',
              'django.db.models.fields.related._': 'django.utils.translation.ugettext_lazy',
              'django.db.models.fields.related.connection': 'django.db.connection',
              'django.db.models.fields.related.curry': 'django.utils.functional.curry',
              'django.db.models.fields.related.exceptions': 'django.core.exceptions',
              'django.db.models.fields.related.forms': 'django.forms',
              'django.db.models.fields.related.get_model': 'django.db.models.get_model',
              'django.db.models.fields.related.models': 'django.db.models',
              'django.db.models.fields.related.router': 'django.db.router',
              'django.db.models.fields.related.settings': 'django.conf.settings',
              'django.db.models.fields.related.signals': 'django.db.models.signals',
              'django.db.models.fields.related.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.db.models.fields.related.string_concat': 'django.utils.translation.string_concat',
              'django.db.models.fields.related.transaction': 'django.db.transaction',
              'django.db.models.fields.related.ugettext': 'django.utils.translation.ugettext',
              'django.db.models.fields.related.ungettext': 'django.utils.translation.ungettext',
              'django.db.models.fields.related.util': 'django.db.backends.util',
              'django.db.models.fields.settings': 'django.conf.settings',
              'django.db.models.fields.smart_str': 'django.utils.encoding.smart_str',
              'django.db.models.fields.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.db.models.fields.subclassing.connection': 'django.db.connection',
              'django.db.models.fields.subclassing.getargspec': 'inspect.getargspec',
              'django.db.models.fields.subclassing.warn': 'warnings.warn',
              'django.db.models.fields.tee': 'itertools.tee',
              'django.db.models.fields.time': 'time',
              'django.db.models.fields.util': 'django.db.backends.util',
              'django.db.models.fields.validators': 'django.core.validators',
              'django.db.models.fields.warnings': 'warnings',
              'django.db.models.get_app': 'django.db.models.loading.get_app',
              'django.db.models.get_apps': 'django.db.models.loading.get_apps',
              'django.db.models.get_model': 'django.db.models.loading.get_model',
              'django.db.models.get_models': 'django.db.models.loading.get_models',
              'django.db.models.loading.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.db.models.loading.SortedDict': 'django.utils.datastructures.SortedDict',
              'django.db.models.loading.imp': 'imp',
              'django.db.models.loading.import_module': 'django.utils.importlib.import_module',
              'django.db.models.loading.module_has_submodule': 'django.utils.module_loading.module_has_submodule',
              'django.db.models.loading.os': 'os',
              'django.db.models.loading.settings': 'django.conf.settings',
              'django.db.models.loading.sys': 'sys',
              'django.db.models.loading.threading': 'threading',
              'django.db.models.manager.EmptyQuerySet': 'django.db.models.query.EmptyQuerySet',
              'django.db.models.manager.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.db.models.manager.QuerySet': 'django.db.models.query.QuerySet',
              'django.db.models.manager.RawQuerySet': 'django.db.models.query.RawQuerySet',
              'django.db.models.manager.copy': 'django.utils.copycompat',
              'django.db.models.manager.insert_query': 'django.db.models.query.insert_query',
              'django.db.models.manager.router': 'django.db.router',
              'django.db.models.manager.settings': 'django.conf.settings',
              'django.db.models.manager.signals': 'django.db.models.signals',
              'django.db.models.options.AutoField': 'django.db.models.fields.AutoField',
              'django.db.models.options.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.db.models.options.ManyToManyRel': 'django.db.models.fields.related.ManyToManyRel',
              'django.db.models.options.OrderWrt': 'django.db.models.fields.proxy.OrderWrt',
              'django.db.models.options.RelatedObject': 'django.db.models.related.RelatedObject',
              'django.db.models.options.SortedDict': 'django.utils.datastructures.SortedDict',
              'django.db.models.options.activate': 'django.utils.translation.activate',
              'django.db.models.options.all': 'django.utils.itercompat.all',
              'django.db.models.options.app_cache_ready': 'django.db.models.loading.app_cache_ready',
              'django.db.models.options.bisect': 'bisect.bisect',
              'django.db.models.options.connection': 'django.db.connection',
              'django.db.models.options.deactivate_all': 'django.utils.translation.deactivate_all',
              'django.db.models.options.force_unicode': 'django.utils.encoding.force_unicode',
              'django.db.models.options.get_language': 'django.utils.translation.get_language',
              'django.db.models.options.get_models': 'django.db.models.loading.get_models',
              'django.db.models.options.re': 're',
              'django.db.models.options.settings': 'django.conf.settings',
              'django.db.models.options.smart_str': 'django.utils.encoding.smart_str',
              'django.db.models.options.string_concat': 'django.utils.translation.string_concat',
              'django.db.models.options.truncate_name': 'django.db.backends.util.truncate_name',
              'django.db.models.query.Aggregate': 'django.db.models.aggregates.Aggregate',
              'django.db.models.query.Collector': 'django.db.models.deletion.Collector',
              'django.db.models.query.DateField': 'django.db.models.fields.DateField',
              'django.db.models.query.IntegrityError': 'django.db.IntegrityError',
              'django.db.models.query.InvalidQuery': 'django.db.models.query_utils.InvalidQuery',
              'django.db.models.query.Q': 'django.db.models.query_utils.Q',
              'django.db.models.query.connections': 'django.db.connections',
              'django.db.models.query.deepcopy': 'django.utils.copycompat.deepcopy',
              'django.db.models.query.deferred_class_factory': 'django.db.models.query_utils.deferred_class_factory',
              'django.db.models.query.izip': 'itertools.izip',
              'django.db.models.query.router': 'django.db.router',
              'django.db.models.query.select_related_descend': 'django.db.models.query_utils.select_related_descend',
              'django.db.models.query.signals': 'django.db.models.signals',
              'django.db.models.query.sql': 'django.db.models.sql',
              'django.db.models.query.transaction': 'django.db.transaction',
              'django.db.models.query_utils.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.db.models.query_utils.SortedDict': 'django.utils.datastructures.SortedDict',
              'django.db.models.query_utils.deepcopy': 'django.utils.copycompat.deepcopy',
              'django.db.models.query_utils.tree': 'django.utils.tree',
              'django.db.models.query_utils.util': 'django.db.backends.util',
              'django.db.models.query_utils.weakref': 'weakref',
              'django.db.models.register_models': 'django.db.models.loading.register_models',
              'django.db.models.related.BLANK_CHOICE_DASH': 'django.db.models.fields.BLANK_CHOICE_DASH',
              'django.db.models.related.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.db.models.reverse': 'django.core.urlresolvers.reverse',
              'django.db.models.settings': 'django.conf.settings',
              'django.db.models.signals': 'django.db.models.signals',
              'django.db.models.signals.Signal': 'django.dispatch.Signal',
              'django.db.models.sql.*': 'django.db.models.sql.subqueries.*',
              'django.db.models.sql.AND': 'django.db.models.sql.where.AND',
              'django.db.models.sql.EmptyResultSet': 'django.db.models.sql.datastructures.EmptyResultSet',
              'django.db.models.sql.OR': 'django.db.models.sql.where.OR',
              'django.db.models.sql.compiler.*': 'django.db.models.sql.constants.*',
              'django.db.models.sql.compiler.DateTimeField': 'django.db.models.fields.DateTimeField',
              'django.db.models.sql.compiler.EmptyResultSet': 'django.db.models.sql.datastructures.EmptyResultSet',
              'django.db.models.sql.compiler.FieldError': 'django.core.exceptions.FieldError',
              'django.db.models.sql.compiler.Model': 'django.db.models.base.Model',
              'django.db.models.sql.compiler.Query': 'django.db.models.sql.query.Query',
              'django.db.models.sql.compiler.SQLEvaluator': 'django.db.models.sql.expressions.SQLEvaluator',
              'django.db.models.sql.compiler.connections': 'django.db.connections',
              'django.db.models.sql.compiler.get_order_dir': 'django.db.models.sql.query.get_order_dir',
              'django.db.models.sql.compiler.get_proxied_model': 'django.db.models.sql.query.get_proxied_model',
              'django.db.models.sql.compiler.select_related_descend': 'django.db.models.sql.query.select_related_descend',
              'django.db.models.sql.compiler.truncate_name': 'django.db.backends.util.truncate_name',
              'django.db.models.sql.compiler.typecast_timestamp': 'django.db.backends.util.typecast_timestamp',
              'django.db.models.sql.constants.re': 're',
              'django.db.models.sql.expressions.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.db.models.sql.expressions.FieldError': 'django.core.exceptions.FieldError',
              'django.db.models.sql.expressions.LOOKUP_SEP': 'django.db.models.sql.constants.LOOKUP_SEP',
              'django.db.models.sql.query.*': 'django.db.models.sql.constants.*',
              'django.db.models.sql.query.AND': 'django.db.models.sql.where.AND',
              'django.db.models.sql.query.AggregateQuery': 'django.db.models.sql.subqueries.AggregateQuery',
              'django.db.models.sql.query.Constraint': 'django.db.models.sql.where.Constraint',
              'django.db.models.sql.query.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.db.models.sql.query.Empty': 'django.db.models.sql.datastructures.Empty',
              'django.db.models.sql.query.EmptyResultSet': 'django.db.models.sql.datastructures.EmptyResultSet',
              'django.db.models.sql.query.EverythingNode': 'django.db.models.sql.where.EverythingNode',
              'django.db.models.sql.query.ExtraWhere': 'django.db.models.sql.where.ExtraWhere',
              'django.db.models.sql.query.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.db.models.sql.query.FieldError': 'django.core.exceptions.FieldError',
              'django.db.models.sql.query.InvalidQuery': 'django.db.models.query_utils.InvalidQuery',
              'django.db.models.sql.query.MultiJoin': 'django.db.models.sql.datastructures.MultiJoin',
              'django.db.models.sql.query.Node': 'django.utils.tree.Node',
              'django.db.models.sql.query.OR': 'django.db.models.sql.where.OR',
              'django.db.models.sql.query.SQLEvaluator': 'django.db.models.sql.expressions.SQLEvaluator',
              'django.db.models.sql.query.SortedDict': 'django.utils.datastructures.SortedDict',
              'django.db.models.sql.query.WhereNode': 'django.db.models.sql.where.WhereNode',
              'django.db.models.sql.query.base_aggregates_module': 'django.db.models.sql.aggregates',
              'django.db.models.sql.query.connections': 'django.db.connections',
              'django.db.models.sql.query.deepcopy': 'django.utils.copycompat.deepcopy',
              'django.db.models.sql.query.force_unicode': 'django.utils.encoding.force_unicode',
              'django.db.models.sql.query.select_related_descend': 'django.db.models.query_utils.select_related_descend',
              'django.db.models.sql.query.signals': 'django.db.models.signals',
              'django.db.models.sql.subqueries.*': 'django.db.models.sql.constants.*',
              'django.db.models.sql.subqueries.AND': 'django.db.models.sql.where.AND',
              'django.db.models.sql.subqueries.Constraint': 'django.db.models.sql.where.Constraint',
              'django.db.models.sql.subqueries.Date': 'django.db.models.sql.datastructures.Date',
              'django.db.models.sql.subqueries.DateField': 'django.db.models.fields.DateField',
              'django.db.models.sql.subqueries.FieldDoesNotExist': 'django.db.models.fields.FieldDoesNotExist',
              'django.db.models.sql.subqueries.FieldError': 'django.core.exceptions.FieldError',
              'django.db.models.sql.subqueries.Query': 'django.db.models.sql.query.Query',
              'django.db.models.sql.subqueries.SQLEvaluator': 'django.db.models.sql.expressions.SQLEvaluator',
              'django.db.models.sql.subqueries.connections': 'django.db.connections',
              'django.db.models.sql.where.EmptyResultSet': 'django.db.models.sql.datastructures.EmptyResultSet',
              'django.db.models.sql.where.Field': 'django.db.models.fields.Field',
              'django.db.models.sql.where.FullResultSet': 'django.db.models.sql.datastructures.FullResultSet',
              'django.db.models.sql.where.ObjectDoesNotExist': 'django.db.models.base.ObjectDoesNotExist',
              'django.db.models.sql.where.QueryWrapper': 'django.db.models.query_utils.QueryWrapper',
              'django.db.models.sql.where.datetime': 'datetime',
              'django.db.models.sql.where.repeat': 'itertools.repeat',
              'django.db.models.sql.where.tree': 'django.utils.tree',
              'django.db.models.wraps': 'django.utils.decorators.wraps',
              'django.db.settings': 'django.conf.settings',
              'django.db.signals': 'django.core.signals',
              'django.db.transaction': 'django.db.transaction',
              'django.db.transaction.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.db.transaction.connections': 'django.db.connections',
              'django.db.transaction.settings': 'django.conf.settings',
              'django.db.transaction.sys': 'sys',
              'django.db.transaction.wraps': 'django.utils.functional.wraps',
              'django.db.utils.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.db.utils.import_module': 'django.utils.importlib.import_module',
              'django.db.utils.inspect': 'inspect',
              'django.db.utils.os': 'os',
              'django.db.utils.settings': 'django.conf.settings',
              'django.db.utils.warnings': 'warnings',
              'django.db.warnings': 'warnings',
              'django.dispatch.Signal': 'django.dispatch.dispatcher.Signal',
              'django.dispatch.dispatcher.inspect': 'inspect',
              'django.dispatch.dispatcher.saferef': 'django.dispatch.saferef',
              'django.dispatch.dispatcher.settings': 'django.conf.settings',
              'django.dispatch.dispatcher.threading': 'threading',
              'django.dispatch.dispatcher.weakref': 'weakref',
              'django.dispatch.receiver': 'django.dispatch.dispatcher.receiver',
              'django.dispatch.saferef.traceback': 'traceback',
              'django.dispatch.saferef.weakref': 'weakref',
              'django.forms.*': 'django.forms.models.*',
              'django.forms.ValidationError': 'django.core.exceptions.ValidationError',
              'django.forms.extras.*': 'django.forms.extras.widgets.*',
              'django.forms.extras.widgets.MONTHS': 'django.utils.dates.MONTHS',
              'django.forms.extras.widgets.Select': 'django.forms.widgets.Select',
              'django.forms.extras.widgets.Widget': 'django.forms.widgets.Widget',
              'django.forms.extras.widgets.datetime': 'datetime',
              'django.forms.extras.widgets.datetime_safe': 'django.utils.datetime_safe',
              'django.forms.extras.widgets.get_format': 'django.utils.formats.get_format',
              'django.forms.extras.widgets.mark_safe': 'django.utils.safestring.mark_safe',
              'django.forms.extras.widgets.re': 're',
              'django.forms.extras.widgets.settings': 'django.conf.settings',
              'django.forms.extras.widgets.time': 'time',
              'django.forms.fields.CheckboxInput': 'django.forms.widgets.CheckboxInput',
              'django.forms.fields.ClearableFileInput': 'django.forms.widgets.ClearableFileInput',
              'django.forms.fields.DateInput': 'django.forms.widgets.DateInput',
              'django.forms.fields.DateTimeInput': 'django.forms.widgets.DateTimeInput',
              'django.forms.fields.Decimal': 'decimal.Decimal',
              'django.forms.fields.DecimalException': 'decimal.DecimalException',
              'django.forms.fields.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.forms.fields.ErrorList': 'django.forms.util.ErrorList',
              'django.forms.fields.FILE_INPUT_CONTRADICTION': 'django.forms.widgets.FILE_INPUT_CONTRADICTION',
              'django.forms.fields.HiddenInput': 'django.forms.widgets.HiddenInput',
              'django.forms.fields.Image': 'Image',
              'django.forms.fields.MultipleHiddenInput': 'django.forms.widgets.MultipleHiddenInput',
              'django.forms.fields.NullBooleanSelect': 'django.forms.widgets.NullBooleanSelect',
              'django.forms.fields.PasswordInput': 'django.forms.widgets.PasswordInput',
              'django.forms.fields.Select': 'django.forms.widgets.Select',
              'django.forms.fields.SelectMultiple': 'django.forms.widgets.SelectMultiple',
              'django.forms.fields.SplitDateTimeWidget': 'django.forms.widgets.SplitDateTimeWidget',
              'django.forms.fields.SplitHiddenDateTimeWidget': 'django.forms.widgets.SplitHiddenDateTimeWidget',
              'django.forms.fields.StringIO': 'StringIO.StringIO',
              'django.forms.fields.TextInput': 'django.forms.widgets.TextInput',
              'django.forms.fields.TimeInput': 'django.forms.widgets.TimeInput',
              'django.forms.fields.ValidationError': 'django.core.exceptions.ValidationError',
              'django.forms.fields._': 'django.utils.translation.ugettext_lazy',
              'django.forms.fields.copy': 'django.utils.copycompat',
              'django.forms.fields.datetime': 'datetime',
              'django.forms.fields.formats': 'django.conf.locale.en.formats',
              'django.forms.fields.lazy': 'django.utils.functional.lazy',
              'django.forms.fields.os': 'os',
              'django.forms.fields.re': 're',
              'django.forms.fields.smart_str': 'django.utils.encoding.smart_str',
              'django.forms.fields.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.forms.fields.time': 'time',
              'django.forms.fields.urlparse': 'urlparse',
              'django.forms.fields.validators': 'django.core.validators',
              'django.forms.fields.warnings': 'warnings',
              'django.forms.forms.ErrorDict': 'django.forms.util.ErrorDict',
              'django.forms.forms.ErrorList': 'django.forms.util.ErrorList',
              'django.forms.forms.Field': 'django.forms.fields.Field',
              'django.forms.forms.FileField': 'django.forms.fields.FileField',
              'django.forms.forms.Media': 'django.forms.widgets.Media',
              'django.forms.forms.SortedDict': 'django.utils.datastructures.SortedDict',
              'django.forms.forms.StrAndUnicode': 'django.utils.encoding.StrAndUnicode',
              'django.forms.forms.TextInput': 'django.forms.widgets.TextInput',
              'django.forms.forms.Textarea': 'django.forms.widgets.Textarea',
              'django.forms.forms.ValidationError': 'django.core.exceptions.ValidationError',
              'django.forms.forms.conditional_escape': 'django.utils.html.conditional_escape',
              'django.forms.forms.deepcopy': 'django.utils.copycompat.deepcopy',
              'django.forms.forms.flatatt': 'django.forms.util.flatatt',
              'django.forms.forms.force_unicode': 'django.utils.encoding.force_unicode',
              'django.forms.forms.mark_safe': 'django.utils.safestring.mark_safe',
              'django.forms.forms.media_property': 'django.forms.widgets.media_property',
              'django.forms.forms.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.forms.formsets.BooleanField': 'django.forms.fields.BooleanField',
              'django.forms.formsets.ErrorList': 'django.forms.util.ErrorList',
              'django.forms.formsets.Form': 'django.forms.forms.Form',
              'django.forms.formsets.HiddenInput': 'django.forms.widgets.HiddenInput',
              'django.forms.formsets.IntegerField': 'django.forms.fields.IntegerField',
              'django.forms.formsets.Media': 'django.forms.widgets.Media',
              'django.forms.formsets.StrAndUnicode': 'django.utils.encoding.StrAndUnicode',
              'django.forms.formsets.ValidationError': 'django.core.exceptions.ValidationError',
              'django.forms.formsets._': 'django.utils.translation.ugettext',
              'django.forms.formsets.mark_safe': 'django.utils.safestring.mark_safe',
              'django.forms.models.AutoField': 'django.db.models.AutoField',
              'django.forms.models.BaseForm': 'django.forms.forms.BaseForm',
              'django.forms.models.BaseFormSet': 'django.forms.formsets.BaseFormSet',
              'django.forms.models.ChoiceField': 'django.forms.fields.ChoiceField',
              'django.forms.models.EMPTY_VALUES': 'django.core.validators.EMPTY_VALUES',
              'django.forms.models.ErrorList': 'django.forms.util.ErrorList',
              'django.forms.models.Field': 'django.forms.fields.Field',
              'django.forms.models.FieldError': 'django.core.exceptions.FieldError',
              'django.forms.models.ForeignKey': 'django.db.models.ForeignKey',
              'django.forms.models.HiddenInput': 'django.forms.widgets.HiddenInput',
              'django.forms.models.ManyToManyField': 'django.db.models.fields.related.ManyToManyField',
              'django.forms.models.MultipleHiddenInput': 'django.forms.widgets.MultipleHiddenInput',
              'django.forms.models.NON_FIELD_ERRORS': 'django.core.exceptions.NON_FIELD_ERRORS',
              'django.forms.models.OneToOneField': 'django.db.models.OneToOneField',
              'django.forms.models.RelatedObject': 'django.db.models.fields.related.RelatedObject',
              'django.forms.models.SelectMultiple': 'django.forms.widgets.SelectMultiple',
              'django.forms.models.SortedDict': 'django.utils.datastructures.SortedDict',
              'django.forms.models.ValidationError': 'django.core.exceptions.ValidationError',
              'django.forms.models._': 'django.utils.translation.ugettext_lazy',
              'django.forms.models.capfirst': 'django.utils.text.capfirst',
              'django.forms.models.connections': 'django.db.connections',
              'django.forms.models.force_unicode': 'django.utils.encoding.force_unicode',
              'django.forms.models.formset_factory': 'django.forms.formsets.formset_factory',
              'django.forms.models.get_declared_fields': 'django.forms.forms.get_declared_fields',
              'django.forms.models.get_text_list': 'django.utils.text.get_text_list',
              'django.forms.models.media_property': 'django.forms.widgets.media_property',
              'django.forms.models.models': 'django.db.models',
              'django.forms.models.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.forms.models.ugettext': 'django.utils.translation.ugettext',
              'django.forms.util.StrAndUnicode': 'django.utils.encoding.StrAndUnicode',
              'django.forms.util.ValidationError': 'django.core.exceptions.ValidationError',
              'django.forms.util.conditional_escape': 'django.utils.html.conditional_escape',
              'django.forms.util.force_unicode': 'django.utils.encoding.force_unicode',
              'django.forms.util.mark_safe': 'django.utils.safestring.mark_safe',
              'django.forms.widgets.MergeDict': 'django.utils.datastructures.MergeDict',
              'django.forms.widgets.MultiValueDict': 'django.utils.datastructures.MultiValueDict',
              'django.forms.widgets.StrAndUnicode': 'django.utils.encoding.StrAndUnicode',
              'django.forms.widgets.chain': 'itertools.chain',
              'django.forms.widgets.conditional_escape': 'django.utils.html.conditional_escape',
              'django.forms.widgets.copy': 'django.utils.copycompat',
              'django.forms.widgets.datetime': 'datetime',
              'django.forms.widgets.datetime_safe': 'django.utils.datetime_safe',
              'django.forms.widgets.escape': 'django.utils.html.escape',
              'django.forms.widgets.flatatt': 'django.forms.util.flatatt',
              'django.forms.widgets.force_unicode': 'django.utils.encoding.force_unicode',
              'django.forms.widgets.formats': 'django.utils.formats',
              'django.forms.widgets.mark_safe': 'django.utils.safestring.mark_safe',
              'django.forms.widgets.settings': 'django.conf.settings',
              'django.forms.widgets.time': 'time',
              'django.forms.widgets.ugettext': 'django.utils.translation.ugettext',
              'django.forms.widgets.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'django.forms.widgets.urljoin': 'urlparse.urljoin',
              'django.get_svn_revision': 'django.utils.version.get_svn_revision',
              'django.http.*': 'django.http.utils.*',
              'django.http.Cookie': 'Cookie',
              'django.http.ImmutableList': 'django.utils.datastructures.ImmutableList',
              'django.http.MultiPartParser': 'django.http.multipartparser.MultiPartParser',
              'django.http.MultiValueDict': 'django.utils.datastructures.MultiValueDict',
              'django.http.StringIO': 'StringIO.StringIO',
              'django.http.cookie_date': 'django.utils.http.cookie_date',
              'django.http.copy': 'django.utils.copycompat',
              'django.http.datetime': 'datetime',
              'django.http.force_unicode': 'django.utils.encoding.force_unicode',
              'django.http.iri_to_uri': 'django.utils.encoding.iri_to_uri',
              'django.http.multipartparser.FS': 'mx.TextTools.FS',
              'django.http.multipartparser.MultiValueDict': 'django.utils.datastructures.MultiValueDict',
              'django.http.multipartparser.QueryDict': 'django.http.QueryDict',
              'django.http.multipartparser.SkipFile': 'django.core.files.uploadhandler.SkipFile',
              'django.http.multipartparser.StopFutureHandlers': 'django.core.files.uploadhandler.StopFutureHandlers',
              'django.http.multipartparser.StopUpload': 'django.core.files.uploadhandler.StopUpload',
              'django.http.multipartparser.SuspiciousOperation': 'django.core.exceptions.SuspiciousOperation',
              'django.http.multipartparser.cgi': 'cgi',
              'django.http.multipartparser.force_unicode': 'django.utils.encoding.force_unicode',
              'django.http.multipartparser.settings': 'django.conf.settings',
              'django.http.multipartparser.unescape_entities': 'django.utils.text.unescape_entities',
              'django.http.os': 'os',
              'django.http.parse_qsl': 'cgi.parse_qsl',
              'django.http.pformat': 'pprint.pformat',
              'django.http.quote': 'urllib.quote',
              'django.http.re': 're',
              'django.http.settings': 'django.conf.settings',
              'django.http.smart_str': 'django.utils.encoding.smart_str',
              'django.http.time': 'time',
              'django.http.uploadhandler': 'django.core.files.uploadhandler',
              'django.http.urlencode': 'urllib.urlencode',
              'django.http.urljoin': 'urlparse.urljoin',
              'django.http.warnings': 'warnings',
              'django.middleware.cache.DEFAULT_CACHE_ALIAS': 'django.core.cache.DEFAULT_CACHE_ALIAS',
              'django.middleware.cache.get_cache': 'django.core.cache.get_cache',
              'django.middleware.cache.get_cache_key': 'django.utils.cache.get_cache_key',
              'django.middleware.cache.get_max_age': 'django.utils.cache.get_max_age',
              'django.middleware.cache.learn_cache_key': 'django.utils.cache.learn_cache_key',
              'django.middleware.cache.patch_response_headers': 'django.utils.cache.patch_response_headers',
              'django.middleware.cache.settings': 'django.conf.settings',
              'django.middleware.common.getLogger': 'django.utils.log.getLogger',
              'django.middleware.common.http': 'django.http',
              'django.middleware.common.mail_managers': 'django.core.mail.mail_managers',
              'django.middleware.common.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.middleware.common.re': 're',
              'django.middleware.common.settings': 'django.conf.settings',
              'django.middleware.common.urlquote': 'django.utils.http.urlquote',
              'django.middleware.common.urlresolvers': 'django.core.urlresolvers',
              'django.middleware.csrf.constant_time_compare': 'django.utils.crypto.constant_time_compare',
              'django.middleware.csrf.getLogger': 'django.utils.log.getLogger',
              'django.middleware.csrf.get_callable': 'django.core.urlresolvers.get_callable',
              'django.middleware.csrf.itertools': 'itertools',
              'django.middleware.csrf.mark_safe': 'django.utils.safestring.mark_safe',
              'django.middleware.csrf.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.middleware.csrf.patch_vary_headers': 'django.utils.cache.patch_vary_headers',
              'django.middleware.csrf.random': 'random',
              'django.middleware.csrf.re': 're',
              'django.middleware.csrf.same_origin': 'django.utils.http.same_origin',
              'django.middleware.csrf.settings': 'django.conf.settings',
              'django.middleware.csrf.warnings': 'warnings',
              'django.middleware.doc.http': 'django.http',
              'django.middleware.doc.settings': 'django.conf.settings',
              'django.middleware.gzip.compress_string': 'django.utils.text.compress_string',
              'django.middleware.gzip.patch_vary_headers': 'django.utils.cache.patch_vary_headers',
              'django.middleware.gzip.re': 're',
              'django.middleware.http.MiddlewareNotUsed': 'django.core.exceptions.MiddlewareNotUsed',
              'django.middleware.http.http_date': 'django.utils.http.http_date',
              'django.middleware.http.parse_http_date_safe': 'django.utils.http.parse_http_date_safe',
              'django.middleware.locale.patch_vary_headers': 'django.utils.cache.patch_vary_headers',
              'django.middleware.locale.translation': 'django.utils.translation',
              'django.middleware.transaction.transaction': 'django.db.transaction',
              'django.shortcuts.Http404': 'django.http.Http404',
              'django.shortcuts.HttpResponse': 'django.http.HttpResponse',
              'django.shortcuts.HttpResponsePermanentRedirect': 'django.http.HttpResponsePermanentRedirect',
              'django.shortcuts.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'django.shortcuts.Manager': 'django.db.models.manager.Manager',
              'django.shortcuts.QuerySet': 'django.db.models.query.QuerySet',
              'django.shortcuts.RequestContext': 'django.template.RequestContext',
              'django.shortcuts.loader': 'django.template.loader',
              'django.shortcuts.urlresolvers': 'django.core.urlresolvers',
              'django.template.ALLOWED_VARIABLE_CHARS': 'django.template.base.ALLOWED_VARIABLE_CHARS',
              'django.template.BLOCK_TAG_END': 'django.template.base.BLOCK_TAG_END',
              'django.template.BLOCK_TAG_START': 'django.template.base.BLOCK_TAG_START',
              'django.template.COMMENT_TAG_END': 'django.template.base.COMMENT_TAG_END',
              'django.template.COMMENT_TAG_START': 'django.template.base.COMMENT_TAG_START',
              'django.template.Context': 'django.template.base.Context',
              'django.template.ContextPopException': 'django.template.base.ContextPopException',
              'django.template.FILTER_ARGUMENT_SEPARATOR': 'django.template.base.FILTER_ARGUMENT_SEPARATOR',
              'django.template.FILTER_SEPARATOR': 'django.template.base.FILTER_SEPARATOR',
              'django.template.FilterExpression': 'django.template.base.FilterExpression',
              'django.template.InvalidTemplateLibrary': 'django.template.base.InvalidTemplateLibrary',
              'django.template.Lexer': 'django.template.base.Lexer',
              'django.template.Library': 'django.template.base.Library',
              'django.template.Node': 'django.template.base.Node',
              'django.template.NodeList': 'django.template.base.NodeList',
              'django.template.Origin': 'django.template.base.Origin',
              'django.template.Parser': 'django.template.base.Parser',
              'django.template.RequestContext': 'django.template.base.RequestContext',
              'django.template.SINGLE_BRACE_END': 'django.template.base.SINGLE_BRACE_END',
              'django.template.SINGLE_BRACE_START': 'django.template.base.SINGLE_BRACE_START',
              'django.template.StringOrigin': 'django.template.base.StringOrigin',
              'django.template.TOKEN_BLOCK': 'django.template.base.TOKEN_BLOCK',
              'django.template.TOKEN_COMMENT': 'django.template.base.TOKEN_COMMENT',
              'django.template.TOKEN_TEXT': 'django.template.base.TOKEN_TEXT',
              'django.template.TOKEN_VAR': 'django.template.base.TOKEN_VAR',
              'django.template.TRANSLATOR_COMMENT_MARK': 'django.template.base.TRANSLATOR_COMMENT_MARK',
              'django.template.Template': 'django.template.base.Template',
              'django.template.TemplateDoesNotExist': 'django.template.base.TemplateDoesNotExist',
              'django.template.TemplateEncodingError': 'django.template.base.TemplateEncodingError',
              'django.template.TemplateSyntaxError': 'django.template.base.TemplateSyntaxError',
              'django.template.TextNode': 'django.template.base.TextNode',
              'django.template.Token': 'django.template.base.Token',
              'django.template.TokenParser': 'django.template.base.TokenParser',
              'django.template.UNKNOWN_SOURCE': 'django.template.base.UNKNOWN_SOURCE',
              'django.template.VARIABLE_ATTRIBUTE_SEPARATOR': 'django.template.base.VARIABLE_ATTRIBUTE_SEPARATOR',
              'django.template.VARIABLE_TAG_END': 'django.template.base.VARIABLE_TAG_END',
              'django.template.VARIABLE_TAG_START': 'django.template.base.VARIABLE_TAG_START',
              'django.template.Variable': 'django.template.base.Variable',
              'django.template.VariableDoesNotExist': 'django.template.base.VariableDoesNotExist',
              'django.template.VariableNode': 'django.template.base.VariableNode',
              'django.template.add_to_builtins': 'django.template.base.add_to_builtins',
              'django.template.base.Context': 'django.template.context.Context',
              'django.template.base.ContextPopException': 'django.template.context.ContextPopException',
              'django.template.base.DebugLexer': 'django.template.debug.DebugLexer',
              'django.template.base.DebugParser': 'django.template.debug.DebugParser',
              'django.template.base.EscapeData': 'django.utils.safestring.EscapeData',
              'django.template.base.Promise': 'django.utils.functional.Promise',
              'django.template.base.RequestContext': 'django.template.context.RequestContext',
              'django.template.base.SafeData': 'django.utils.safestring.SafeData',
              'django.template.base.curry': 'django.utils.functional.curry',
              'django.template.base.escape': 'django.utils.html.escape',
              'django.template.base.force_unicode': 'django.utils.encoding.force_unicode',
              'django.template.base.get_template': 'django.template.loader.get_template',
              'django.template.base.get_text_list': 'django.utils.text.get_text_list',
              'django.template.base.getargspec': 'inspect.getargspec',
              'django.template.base.imp': 'imp',
              'django.template.base.import_module': 'django.utils.importlib.import_module',
              'django.template.base.is_iterable': 'django.utils.itercompat.is_iterable',
              'django.template.base.localize': 'django.utils.formats.localize',
              'django.template.base.mark_for_escaping': 'django.utils.safestring.mark_for_escaping',
              'django.template.base.mark_safe': 'django.utils.safestring.mark_safe',
              'django.template.base.module_has_submodule': 'django.utils.module_loading.module_has_submodule',
              'django.template.base.re': 're',
              'django.template.base.select_template': 'django.template.loader.select_template',
              'django.template.base.settings': 'django.conf.settings',
              'django.template.base.smart_split': 'django.utils.text.smart_split',
              'django.template.base.smart_str': 'django.utils.encoding.smart_str',
              'django.template.base.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.template.base.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'django.template.base.unescape_string_literal': 'django.utils.text.unescape_string_literal',
              'django.template.builtins': 'django.template.base.builtins',
              'django.template.compile_string': 'django.template.base.compile_string',
              'django.template.constant_string': 'django.template.base.constant_string',
              'django.template.context.HttpRequest': 'django.http.HttpRequest',
              'django.template.context.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.template.context.copy': 'copy.copy',
              'django.template.context.import_module': 'django.utils.importlib.import_module',
              'django.template.context.settings': 'django.conf.settings',
              'django.template.debug.EscapeData': 'django.utils.safestring.EscapeData',
              'django.template.debug.Lexer': 'django.template.base.Lexer',
              'django.template.debug.NodeList': 'django.template.base.NodeList',
              'django.template.debug.Parser': 'django.template.base.Parser',
              'django.template.debug.SafeData': 'django.utils.safestring.SafeData',
              'django.template.debug.TemplateSyntaxError': 'django.template.base.TemplateSyntaxError',
              'django.template.debug.VariableNode': 'django.template.base.VariableNode',
              'django.template.debug.escape': 'django.utils.html.escape',
              'django.template.debug.exc_info': 'sys.exc_info',
              'django.template.debug.force_unicode': 'django.utils.encoding.force_unicode',
              'django.template.debug.localize': 'django.utils.formats.localize',
              'django.template.debug.settings': 'django.conf.settings',
              'django.template.debug.tag_re': 'django.template.base.tag_re',
              'django.template.defaultfilters.Decimal': 'decimal.Decimal',
              'django.template.defaultfilters.InvalidOperation': 'decimal.InvalidOperation',
              'django.template.defaultfilters.Library': 'django.template.base.Library',
              'django.template.defaultfilters.ROUND_HALF_UP': 'decimal.ROUND_HALF_UP',
              'django.template.defaultfilters.SafeData': 'django.utils.safestring.SafeData',
              'django.template.defaultfilters.Variable': 'django.template.base.Variable',
              'django.template.defaultfilters.conditional_escape': 'django.utils.html.conditional_escape',
              'django.template.defaultfilters.dateformat': 'django.utils.dateformat',
              'django.template.defaultfilters.escape': 'django.utils.html.escape',
              'django.template.defaultfilters.escapejs': 'django.utils.html.escapejs',
              'django.template.defaultfilters.fix_ampersands': 'django.utils.html.fix_ampersands',
              'django.template.defaultfilters.force_unicode': 'django.utils.encoding.force_unicode',
              'django.template.defaultfilters.format': 'django.utils.dateformat.format',
              'django.template.defaultfilters.formats': 'django.utils.formats',
              'django.template.defaultfilters.iri_to_uri': 'django.utils.encoding.iri_to_uri',
              'django.template.defaultfilters.linebreaks': 'django.utils.html.linebreaks',
              'django.template.defaultfilters.mark_for_escaping': 'django.utils.safestring.mark_for_escaping',
              'django.template.defaultfilters.mark_safe': 'django.utils.safestring.mark_safe',
              'django.template.defaultfilters.pformat': 'pprint.pformat',
              'django.template.defaultfilters.phone2numeric': 'django.utils.text.phone2numeric',
              'django.template.defaultfilters.random_module': 'random',
              'django.template.defaultfilters.re': 're',
              'django.template.defaultfilters.settings': 'django.conf.settings',
              'django.template.defaultfilters.strip_tags': 'django.utils.html.strip_tags',
              'django.template.defaultfilters.timesince': 'django.utils.timesince.timesince',
              'django.template.defaultfilters.timeuntil': 'django.utils.timesince.timeuntil',
              'django.template.defaultfilters.truncate_html_words': 'django.utils.text.truncate_html_words',
              'django.template.defaultfilters.truncate_words': 'django.utils.text.truncate_words',
              'django.template.defaultfilters.ugettext': 'django.utils.translation.ugettext',
              'django.template.defaultfilters.ungettext': 'django.utils.translation.ungettext',
              'django.template.defaultfilters.unicodedata': 'unicodedata',
              'django.template.defaultfilters.urlize': 'django.utils.html.urlize',
              'django.template.defaultfilters.urlquote': 'django.utils.http.urlquote',
              'django.template.defaultfilters.wrap': 'django.utils.text.wrap',
              'django.template.defaultfilters.wraps': 'django.utils.functional.wraps',
              'django.template.defaulttags.BLOCK_TAG_END': 'django.template.base.BLOCK_TAG_END',
              'django.template.defaulttags.BLOCK_TAG_START': 'django.template.base.BLOCK_TAG_START',
              'django.template.defaulttags.COMMENT_TAG_END': 'django.template.base.COMMENT_TAG_END',
              'django.template.defaulttags.COMMENT_TAG_START': 'django.template.base.COMMENT_TAG_START',
              'django.template.defaulttags.Context': 'django.template.base.Context',
              'django.template.defaulttags.DateFormat': 'django.utils.dateformat.DateFormat',
              'django.template.defaulttags.IfParser': 'django.template.smartif.IfParser',
              'django.template.defaulttags.InvalidTemplateLibrary': 'django.template.base.InvalidTemplateLibrary',
              'django.template.defaulttags.Library': 'django.template.base.Library',
              'django.template.defaulttags.Literal': 'django.template.smartif.Literal',
              'django.template.defaulttags.NoReverseMatch': 'django.core.urlresolvers.NoReverseMatch',
              'django.template.defaulttags.Node': 'django.template.base.Node',
              'django.template.defaulttags.NodeList': 'django.template.base.NodeList',
              'django.template.defaulttags.SINGLE_BRACE_END': 'django.template.base.SINGLE_BRACE_END',
              'django.template.defaulttags.SINGLE_BRACE_START': 'django.template.base.SINGLE_BRACE_START',
              'django.template.defaulttags.Template': 'django.template.base.Template',
              'django.template.defaulttags.TemplateSyntaxError': 'django.template.base.TemplateSyntaxError',
              'django.template.defaulttags.VARIABLE_TAG_END': 'django.template.base.VARIABLE_TAG_END',
              'django.template.defaulttags.VARIABLE_TAG_START': 'django.template.base.VARIABLE_TAG_START',
              'django.template.defaulttags.Variable': 'django.template.base.Variable',
              'django.template.defaulttags.VariableDoesNotExist': 'django.template.base.VariableDoesNotExist',
              'django.template.defaulttags.datetime': 'datetime.datetime',
              'django.template.defaulttags.get_library': 'django.template.base.get_library',
              'django.template.defaulttags.groupby': 'itertools.groupby',
              'django.template.defaulttags.itertools_cycle': 'itertools.cycle',
              'django.template.defaulttags.mark_safe': 'django.utils.safestring.mark_safe',
              'django.template.defaulttags.pformat': 'pprint.pformat',
              'django.template.defaulttags.re': 're',
              'django.template.defaulttags.reverse': 'django.core.urlresolvers.reverse',
              'django.template.defaulttags.settings': 'django.conf.settings',
              'django.template.defaulttags.smart_str': 'django.utils.encoding.smart_str',
              'django.template.defaulttags.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.template.defaulttags.strip_spaces_between_tags': 'django.utils.html.strip_spaces_between_tags',
              'django.template.defaulttags.sys': 'sys',
              'django.template.defaulttags.warnings': 'warnings',
              'django.template.filter_raw_string': 'django.template.base.filter_raw_string',
              'django.template.filter_re': 'django.template.base.filter_re',
              'django.template.generic_tag_compiler': 'django.template.base.generic_tag_compiler',
              'django.template.get_library': 'django.template.base.get_library',
              'django.template.get_templatetags_modules': 'django.template.base.get_templatetags_modules',
              'django.template.get_text_list': 'django.template.base.get_text_list',
              'django.template.import_library': 'django.template.base.import_library',
              'django.template.libraries': 'django.template.base.libraries',
              'django.template.loader.Context': 'django.template.base.Context',
              'django.template.loader.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.template.loader.Origin': 'django.template.base.Origin',
              'django.template.loader.Template': 'django.template.base.Template',
              'django.template.loader.TemplateDoesNotExist': 'django.template.base.TemplateDoesNotExist',
              'django.template.loader.add_to_builtins': 'django.template.base.add_to_builtins',
              'django.template.loader.import_module': 'django.utils.importlib.import_module',
              'django.template.loader.settings': 'django.conf.settings',
              'django.template.loader.warnings': 'warnings',
              'django.template.loader_tags.Context': 'django.template.context.Context',
              'django.template.loader_tags.Library': 'django.template.base.Library',
              'django.template.loader_tags.Node': 'django.template.base.Node',
              'django.template.loader_tags.TemplateDoesNotExist': 'django.template.base.TemplateDoesNotExist',
              'django.template.loader_tags.TemplateSyntaxError': 'django.template.base.TemplateSyntaxError',
              'django.template.loader_tags.TextNode': 'django.template.base.TextNode',
              'django.template.loader_tags.Variable': 'django.template.base.Variable',
              'django.template.loader_tags.get_template': 'django.template.loader.get_template',
              'django.template.loader_tags.mark_safe': 'django.utils.safestring.mark_safe',
              'django.template.loader_tags.settings': 'django.conf.settings',
              'django.template.loader_tags.token_kwargs': 'django.template.defaulttags.token_kwargs',
              'django.template.loaders.app_directories.BaseLoader': 'django.template.loader.BaseLoader',
              'django.template.loaders.app_directories.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.template.loaders.app_directories.TemplateDoesNotExist': 'django.template.base.TemplateDoesNotExist',
              'django.template.loaders.app_directories.import_module': 'django.utils.importlib.import_module',
              'django.template.loaders.app_directories.os': 'os',
              'django.template.loaders.app_directories.safe_join': 'django.utils._os.safe_join',
              'django.template.loaders.app_directories.settings': 'django.conf.settings',
              'django.template.loaders.app_directories.sys': 'sys',
              'django.template.loaders.app_directories.warnings': 'warnings',
              'django.template.loaders.cached.BaseLoader': 'django.template.loader.BaseLoader',
              'django.template.loaders.cached.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.template.loaders.cached.TemplateDoesNotExist': 'django.template.base.TemplateDoesNotExist',
              'django.template.loaders.cached.find_template_loader': 'django.template.loader.find_template_loader',
              'django.template.loaders.cached.get_template_from_string': 'django.template.loader.get_template_from_string',
              'django.template.loaders.cached.import_module': 'django.utils.importlib.import_module',
              'django.template.loaders.cached.make_origin': 'django.template.loader.make_origin',
              'django.template.loaders.cached.sha_constructor': 'django.utils.hashcompat.sha_constructor',
              'django.template.loaders.eggs.BaseLoader': 'django.template.loader.BaseLoader',
              'django.template.loaders.eggs.TemplateDoesNotExist': 'django.template.base.TemplateDoesNotExist',
              'django.template.loaders.eggs.resource_string': 'pkg_resources.resource_string',
              'django.template.loaders.eggs.settings': 'django.conf.settings',
              'django.template.loaders.eggs.warnings': 'warnings',
              'django.template.loaders.filesystem.BaseLoader': 'django.template.loader.BaseLoader',
              'django.template.loaders.filesystem.TemplateDoesNotExist': 'django.template.base.TemplateDoesNotExist',
              'django.template.loaders.filesystem.safe_join': 'django.utils._os.safe_join',
              'django.template.loaders.filesystem.settings': 'django.conf.settings',
              'django.template.loaders.filesystem.warnings': 'warnings',
              'django.template.resolve_variable': 'django.template.base.resolve_variable',
              'django.template.response.Context': 'django.template.Context',
              'django.template.response.HttpResponse': 'django.http.HttpResponse',
              'django.template.response.RequestContext': 'django.template.RequestContext',
              'django.template.response.loader': 'django.template.loader',
              'django.template.smartif.operator': 'operator',
              'django.template.tag_re': 'django.template.base.tag_re',
              'django.template.unescape_string_literal': 'django.template.base.unescape_string_literal',
              'django.templatetags.cache.Library': 'django.template.Library',
              'django.templatetags.cache.Node': 'django.template.Node',
              'django.templatetags.cache.TemplateSyntaxError': 'django.template.TemplateSyntaxError',
              'django.templatetags.cache.Variable': 'django.template.Variable',
              'django.templatetags.cache.VariableDoesNotExist': 'django.template.VariableDoesNotExist',
              'django.templatetags.cache.cache': 'django.core.cache.cache',
              'django.templatetags.cache.force_unicode': 'django.utils.encoding.force_unicode',
              'django.templatetags.cache.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.templatetags.cache.resolve_variable': 'django.template.resolve_variable',
              'django.templatetags.cache.urlquote': 'django.utils.http.urlquote',
              'django.templatetags.future.Library': 'django.template.Library',
              'django.templatetags.future.Node': 'django.template.Node',
              'django.templatetags.future.SsiNode': 'django.template.defaulttags.SsiNode',
              'django.templatetags.future.Template': 'django.template.Template',
              'django.templatetags.future.TemplateSyntaxError': 'django.template.TemplateSyntaxError',
              'django.templatetags.future.URLNode': 'django.template.defaulttags.URLNode',
              'django.templatetags.future.include_is_allowed': 'django.template.defaulttags.include_is_allowed',
              'django.templatetags.future.kwarg_re': 'django.template.defaulttags.kwarg_re',
              'django.templatetags.future.settings': 'django.conf.settings',
              'django.templatetags.future.smart_str': 'django.utils.encoding.smart_str',
              'django.templatetags.i18n.Library': 'django.template.Library',
              'django.templatetags.i18n.Node': 'django.template.Node',
              'django.templatetags.i18n.TOKEN_TEXT': 'django.template.TOKEN_TEXT',
              'django.templatetags.i18n.TOKEN_VAR': 'django.template.TOKEN_VAR',
              'django.templatetags.i18n.TemplateSyntaxError': 'django.template.TemplateSyntaxError',
              'django.templatetags.i18n.TokenParser': 'django.template.TokenParser',
              'django.templatetags.i18n.Variable': 'django.template.Variable',
              'django.templatetags.i18n.VariableNode': 'django.template.VariableNode',
              'django.templatetags.i18n._render_value_in_context': 'django.template.base._render_value_in_context',
              'django.templatetags.i18n.force_unicode': 'django.utils.encoding.force_unicode',
              'django.templatetags.i18n.re': 're',
              'django.templatetags.i18n.settings': 'django.conf.settings',
              'django.templatetags.i18n.token_kwargs': 'django.template.defaulttags.token_kwargs',
              'django.templatetags.i18n.translation': 'django.utils.translation',
              'django.templatetags.l10n.Library': 'django.template.Library',
              'django.templatetags.l10n.Node': 'django.template.Node',
              'django.templatetags.l10n.TemplateSyntaxError': 'django.template.TemplateSyntaxError',
              'django.templatetags.l10n.force_unicode': 'django.utils.encoding.force_unicode',
              'django.templatetags.l10n.formats': 'django.utils.formats',
              'django.templatetags.l10n.settings': 'django.conf.settings',
              'django.templatetags.static.iri_to_uri': 'django.utils.encoding.iri_to_uri',
              'django.templatetags.static.settings': 'django.conf.settings',
              'django.templatetags.static.template': 'django.template',
              'django.test.Approximate': 'django.test.utils.Approximate',
              'django.test.Client': 'django.test.client.Client',
              'django.test.RequestFactory': 'django.test.client.RequestFactory',
              'django.test.TestCase': 'django.test.testcases.TestCase',
              'django.test.TransactionTestCase': 'django.test.testcases.TransactionTestCase',
              'django.test._doctest.StringIO': 'StringIO.StringIO',
              'django.test._doctest.__future__': '__future__',
              'django.test._doctest.difflib': 'difflib',
              'django.test._doctest.inspect': 'inspect',
              'django.test._doctest.linecache': 'linecache',
              'django.test._doctest.new': 'new',
              'django.test._doctest.os': 'os',
              'django.test._doctest.pdb': 'pdb',
              'django.test._doctest.re': 're',
              'django.test._doctest.sys': 'sys',
              'django.test._doctest.tempfile': 'tempfile',
              'django.test._doctest.traceback': 'traceback',
              'django.test._doctest.unittest': 'unittest',
              'django.test._doctest.warnings': 'warnings',
              'django.test.client.BaseHandler': 'django.core.handlers.base.BaseHandler',
              'django.test.client.ContextList': 'django.test.utils.ContextList',
              'django.test.client.HttpRequest': 'django.http.HttpRequest',
              'django.test.client.QueryDict': 'django.http.QueryDict',
              'django.test.client.SimpleCookie': 'django.http.SimpleCookie',
              'django.test.client.StringIO': 'StringIO.StringIO',
              'django.test.client.TemplateDoesNotExist': 'django.template.TemplateDoesNotExist',
              'django.test.client.WSGIRequest': 'django.core.handlers.wsgi.WSGIRequest',
              'django.test.client.authenticate': 'django.contrib.auth.authenticate',
              'django.test.client.close_connection': 'django.db.close_connection',
              'django.test.client.copy': 'copy.copy',
              'django.test.client.curry': 'django.utils.functional.curry',
              'django.test.client.got_request_exception': 'django.core.signals.got_request_exception',
              'django.test.client.import_module': 'django.utils.importlib.import_module',
              'django.test.client.is_iterable': 'django.utils.itercompat.is_iterable',
              'django.test.client.login': 'django.contrib.auth.login',
              'django.test.client.mimetypes': 'mimetypes',
              'django.test.client.os': 'os',
              'django.test.client.re': 're',
              'django.test.client.settings': 'django.conf.settings',
              'django.test.client.signals': 'django.core.signals',
              'django.test.client.smart_str': 'django.utils.encoding.smart_str',
              'django.test.client.sys': 'sys',
              'django.test.client.transaction': 'django.db.transaction',
              'django.test.client.urlencode': 'django.utils.http.urlencode',
              'django.test.client.urllib': 'urllib',
              'django.test.client.urlparse': 'urlparse.urlparse',
              'django.test.client.urlsplit': 'urlparse.urlsplit',
              'django.test.client.urlunparse': 'urlparse.urlunparse',
              'django.test.client.warnings': 'warnings',
              'django.test.signals.Signal': 'django.dispatch.Signal',
              'django.test.simple.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.test.simple.DocTestRunner': 'django.test.testcases.DocTestRunner',
              'django.test.simple.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.test.simple.OutputChecker': 'django.test.testcases.OutputChecker',
              'django.test.simple.TestCase': 'django.test.testcases.TestCase',
              'django.test.simple.all': 'django.utils.itercompat.all',
              'django.test.simple.connections': 'django.db.connections',
              'django.test.simple.doctest': 'django.test._doctest',
              'django.test.simple.find_module': 'imp.find_module',
              'django.test.simple.get_app': 'django.db.models.get_app',
              'django.test.simple.get_apps': 'django.db.models.get_apps',
              'django.test.simple.os.path': 'os.path',
              'django.test.simple.real_unittest': 'unittest',
              'django.test.simple.settings': 'django.conf.settings',
              'django.test.simple.setup_test_environment': 'django.test.utils.setup_test_environment',
              'django.test.simple.teardown_test_environment': 'django.test.utils.teardown_test_environment',
              'django.test.simple.unittest': 'django.utils.unittest',
              'django.test.simple.warnings': 'warnings',
              'django.test.skipIfDBFeature': 'django.test.testcases.skipIfDBFeature',
              'django.test.skipUnlessDBFeature': 'django.test.testcases.skipUnlessDBFeature',
              'django.test.testcases.Client': 'django.test.client.Client',
              'django.test.testcases.DEFAULT_DB_ALIAS': 'django.db.DEFAULT_DB_ALIAS',
              'django.test.testcases.Node': 'xml.dom.minidom.Node',
              'django.test.testcases.QueryDict': 'django.http.QueryDict',
              'django.test.testcases.Site': 'django.contrib.sites.models.Site',
              'django.test.testcases.all': 'django.utils.itercompat.all',
              'django.test.testcases.call_command': 'django.core.management.call_command',
              'django.test.testcases.clear_url_caches': 'django.core.urlresolvers.clear_url_caches',
              'django.test.testcases.connection': 'django.db.connection',
              'django.test.testcases.connections': 'django.db.connections',
              'django.test.testcases.doctest': 'django.test._doctest',
              'django.test.testcases.get_warnings_state': 'django.test.utils.get_warnings_state',
              'django.test.testcases.mail': 'django.core.mail',
              'django.test.testcases.parseString': 'xml.dom.minidom.parseString',
              'django.test.testcases.re': 're',
              'django.test.testcases.request_started': 'django.core.signals.request_started',
              'django.test.testcases.reset_queries': 'django.db.reset_queries',
              'django.test.testcases.restore_warnings_state': 'django.test.utils.restore_warnings_state',
              'django.test.testcases.settings': 'django.conf.settings',
              'django.test.testcases.simplejson': 'django.utils.simplejson',
              'django.test.testcases.smart_str': 'django.utils.encoding.smart_str',
              'django.test.testcases.sys': 'sys',
              'django.test.testcases.transaction': 'django.db.transaction',
              'django.test.testcases.urlsplit': 'urlparse.urlsplit',
              'django.test.testcases.urlunsplit': 'urlparse.urlunsplit',
              'django.test.testcases.ut2': 'django.utils.unittest',
              'django.test.testcases.wraps': 'django.utils.functional.wraps',
              'django.test.utils.Template': 'django.template.Template',
              'django.test.utils.deactivate': 'django.utils.translation.deactivate',
              'django.test.utils.locmem': 'django.core.mail.backends.locmem',
              'django.test.utils.mail': 'django.core.mail',
              'django.test.utils.os': 'os',
              'django.test.utils.settings': 'django.conf.settings',
              'django.test.utils.signals': 'django.test.signals',
              'django.test.utils.sys': 'sys',
              'django.test.utils.time': 'time',
              'django.test.utils.warnings': 'warnings',
              'django.utils._os.abspath': 'os.path.abspath',
              'django.utils._os.force_unicode': 'django.utils.encoding.force_unicode',
              'django.utils._os.isabs': 'os.path.isabs',
              'django.utils._os.join': 'os.path.join',
              'django.utils._os.normcase': 'os.path.normcase',
              'django.utils._os.normpath': 'os.path.normpath',
              'django.utils._os.os': 'os',
              'django.utils._os.sep': 'os.path.sep',
              'django.utils._os.stat': 'stat',
              'django.utils._threading_local.RLock': 'dummy_threading.RLock',
              'django.utils._threading_local.currentThread': 'dummy_threading.currentThread',
              'django.utils._threading_local.enumerate': 'dummy_threading.enumerate',
              'django.utils.autoreload.SystemRestart': '_systemrestart.SystemRestart',
              'django.utils.autoreload.os': 'os',
              'django.utils.autoreload.sys': 'sys',
              'django.utils.autoreload.termios': 'termios',
              'django.utils.autoreload.thread': 'dummy_thread',
              'django.utils.autoreload.threading': 'threading',
              'django.utils.autoreload.time': 'time',
              'django.utils.cache.HttpRequest': 'django.http.HttpRequest',
              'django.utils.cache.get_cache': 'django.core.cache.get_cache',
              'django.utils.cache.get_language': 'django.utils.translation.get_language',
              'django.utils.cache.http_date': 'django.utils.http.http_date',
              'django.utils.cache.iri_to_uri': 'django.utils.encoding.iri_to_uri',
              'django.utils.cache.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'django.utils.cache.re': 're',
              'django.utils.cache.settings': 'django.conf.settings',
              'django.utils.cache.smart_str': 'django.utils.encoding.smart_str',
              'django.utils.cache.time': 'time',
              'django.utils.copycompat.*': 'copy.*',
              'django.utils.copycompat.copy': 'copy',
              'django.utils.copycompat.types': 'types',
              'django.utils.crypto.hmac': 'hmac',
              'django.utils.crypto.settings': 'django.conf.settings',
              'django.utils.crypto.sha_constructor': 'django.utils.hashcompat.sha_constructor',
              'django.utils.crypto.sha_hmac': 'django.utils.hashcompat.sha_hmac',
              'django.utils.daemonize.os': 'os',
              'django.utils.daemonize.sys': 'sys',
              'django.utils.datastructures.GeneratorType': 'types.GeneratorType',
              'django.utils.datastructures.copy': 'django.utils.copycompat',
              'django.utils.datastructures.deepcopy': 'django.utils.copycompat.deepcopy',
              'django.utils.dateformat.LocalTimezone': 'django.utils.tzinfo.LocalTimezone',
              'django.utils.dateformat.MONTHS': 'django.utils.dates.MONTHS',
              'django.utils.dateformat.MONTHS_3': 'django.utils.dates.MONTHS_3',
              'django.utils.dateformat.MONTHS_ALT': 'django.utils.dates.MONTHS_ALT',
              'django.utils.dateformat.MONTHS_AP': 'django.utils.dates.MONTHS_AP',
              'django.utils.dateformat.WEEKDAYS': 'django.utils.dates.WEEKDAYS',
              'django.utils.dateformat.WEEKDAYS_ABBR': 'django.utils.dates.WEEKDAYS_ABBR',
              'django.utils.dateformat._': 'django.utils.translation.ugettext',
              'django.utils.dateformat.calendar': 'calendar',
              'django.utils.dateformat.force_unicode': 'django.utils.encoding.force_unicode',
              'django.utils.dateformat.re': 're',
              'django.utils.dateformat.time': 'time',
              'django.utils.dates._': 'django.utils.translation.ugettext_lazy',
              'django.utils.dates.pgettext_lazy': 'django.utils.translation.pgettext_lazy',
              'django.utils.datetime_safe.re': 're',
              'django.utils.datetime_safe.real_date': 'datetime.date',
              'django.utils.datetime_safe.real_datetime': 'datetime.datetime',
              'django.utils.datetime_safe.time': 'time',
              'django.utils.decorators.WRAPPER_ASSIGNMENTS': 'django.utils.functional.WRAPPER_ASSIGNMENTS',
              'django.utils.decorators.update_wrapper': 'django.utils.functional.update_wrapper',
              'django.utils.decorators.wraps': 'django.utils.functional.wraps',
              'django.utils.dictconfig._checkLevel': 'logging._checkLevel',
              'django.utils.dictconfig.logging.handlers': 'logging.handlers',
              'django.utils.dictconfig.re': 're',
              'django.utils.dictconfig.sys': 'sys',
              'django.utils.dictconfig.types': 'types',
              'django.utils.encoding.Decimal': 'decimal.Decimal',
              'django.utils.encoding.Promise': 'django.utils.functional.Promise',
              'django.utils.encoding.codecs': 'codecs',
              'django.utils.encoding.datetime': 'datetime',
              'django.utils.encoding.locale': 'locale',
              'django.utils.encoding.types': 'types',
              'django.utils.encoding.urllib': 'urllib',
              'django.utils.feedgenerator.SimplerXMLGenerator': 'django.utils.xmlutils.SimplerXMLGenerator',
              'django.utils.feedgenerator.StringIO': 'StringIO.StringIO',
              'django.utils.feedgenerator.datetime': 'datetime',
              'django.utils.feedgenerator.datetime_safe': 'django.utils.datetime_safe',
              'django.utils.feedgenerator.force_unicode': 'django.utils.encoding.force_unicode',
              'django.utils.feedgenerator.iri_to_uri': 'django.utils.encoding.iri_to_uri',
              'django.utils.feedgenerator.urlparse': 'urlparse',
              'django.utils.formats.check_for_language': 'django.utils.translation.check_for_language',
              'django.utils.formats.dateformat': 'django.utils.dateformat',
              'django.utils.formats.datetime': 'datetime',
              'django.utils.formats.datetime_safe': 'django.utils.datetime_safe',
              'django.utils.formats.decimal': 'decimal',
              'django.utils.formats.get_language': 'django.utils.translation.get_language',
              'django.utils.formats.import_module': 'django.utils.importlib.import_module',
              'django.utils.formats.mark_safe': 'django.utils.safestring.mark_safe',
              'django.utils.formats.numberformat': 'django.utils.numberformat',
              'django.utils.formats.settings': 'django.conf.settings',
              'django.utils.formats.smart_str': 'django.utils.encoding.smart_str',
              'django.utils.formats.to_locale': 'django.utils.translation.to_locale',
              'django.utils.functional.deepcopy': 'django.utils.copycompat.deepcopy',
              'django.utils.hashcompat.hashlib': 'hashlib',
              'django.utils.hashcompat.md5': 'md5',
              'django.utils.hashcompat.sha': 'sha',
              'django.utils.hashcompat.sys': 'sys',
              'django.utils.html.SafeData': 'django.utils.safestring.SafeData',
              'django.utils.html.allow_lazy': 'django.utils.functional.allow_lazy',
              'django.utils.html.force_unicode': 'django.utils.encoding.force_unicode',
              'django.utils.html.mark_safe': 'django.utils.safestring.mark_safe',
              'django.utils.html.normalize_newlines': 'django.utils.text.normalize_newlines',
              'django.utils.html.re': 're',
              'django.utils.html.string': 'string',
              'django.utils.html.urlquote': 'django.utils.http.urlquote',
              'django.utils.http.allow_lazy': 'django.utils.functional.allow_lazy',
              'django.utils.http.calendar': 'calendar',
              'django.utils.http.datetime': 'datetime',
              'django.utils.http.force_unicode': 'django.utils.encoding.force_unicode',
              'django.utils.http.formatdate': 'email.Utils.formatdate',
              'django.utils.http.re': 're',
              'django.utils.http.smart_str': 'django.utils.encoding.smart_str',
              'django.utils.http.sys': 'sys',
              'django.utils.http.urllib': 'urllib',
              'django.utils.http.urlparse': 'urlparse',
              'django.utils.importlib.sys': 'sys',
              'django.utils.itercompat.itertools': 'itertools',
              'django.utils.log.ExceptionReporter': 'django.views.debug.ExceptionReporter',
              'django.utils.log.NullHandler': 'logging.NullHandler',
              'django.utils.log.dictConfig': 'django.utils.dictconfig.dictConfig',
              'django.utils.log.logging': 'logging',
              'django.utils.log.mail': 'django.core.mail',
              'django.utils.log.settings': 'django.conf.settings',
              'django.utils.log.sys': 'sys',
              'django.utils.log.traceback': 'traceback',
              'django.utils.module_loading.imp': 'imp',
              'django.utils.module_loading.os': 'os',
              'django.utils.module_loading.sys': 'sys',
              'django.utils.numberformat.mark_safe': 'django.utils.safestring.mark_safe',
              'django.utils.numberformat.settings': 'django.conf.settings',
              'django.utils.safestring.Promise': 'django.utils.functional.Promise',
              'django.utils.safestring.curry': 'django.utils.functional.curry',
              'django.utils.simplejson.*': 'json.*',
              'django.utils.simplejson.JSONDecoder': 'django.utils.simplejson.decoder.JSONDecoder',
              'django.utils.simplejson.JSONEncoder': 'django.utils.simplejson.encoder.JSONEncoder',
              'django.utils.simplejson.decoder.make_scanner': 'django.utils.simplejson.scanner.make_scanner',
              'django.utils.simplejson.decoder.re': 're',
              'django.utils.simplejson.decoder.struct': 'struct',
              'django.utils.simplejson.decoder.sys': 'sys',
              'django.utils.simplejson.encoder.re': 're',
              'django.utils.simplejson.scanner.c_make_scanner': 'simplejson._speedups.make_scanner',
              'django.utils.simplejson.scanner.re': 're',
              'django.utils.simplejson.simplejson': 'simplejson',
              'django.utils.simplejson.tool.simplejson': 'django.utils.simplejson',
              'django.utils.simplejson.tool.sys': 'sys',
              'django.utils.synch.threading': 'dummy_threading',
              'django.utils.text._': 'django.utils.translation.ugettext',
              'django.utils.text.allow_lazy': 'django.utils.functional.allow_lazy',
              'django.utils.text.cStringIO': 'cStringIO',
              'django.utils.text.force_unicode': 'django.utils.encoding.force_unicode',
              'django.utils.text.gzip': 'gzip',
              'django.utils.text.name2codepoint': 'htmlentitydefs.name2codepoint',
              'django.utils.text.re': 're',
              'django.utils.text.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'django.utils.timesince.LocalTimezone': 'django.utils.tzinfo.LocalTimezone',
              'django.utils.timesince.datetime': 'datetime',
              'django.utils.timesince.time': 'time',
              'django.utils.timesince.ugettext': 'django.utils.translation.ugettext',
              'django.utils.timesince.ungettext': 'django.utils.translation.ungettext',
              'django.utils.translation.LANG_INFO': 'django.conf.locale.LANG_INFO',
              'django.utils.translation.force_unicode': 'django.utils.encoding.force_unicode',
              'django.utils.translation.import_module': 'django.utils.importlib.import_module',
              'django.utils.translation.lazy': 'django.utils.functional.lazy',
              'django.utils.translation.path': 'os.path',
              'django.utils.translation.settings': 'django.conf.settings',
              'django.utils.translation.trans': 'django.utils.translation.trans_null',
              'django.utils.translation.trans_null.SafeData': 'django.utils.safestring.SafeData',
              'django.utils.translation.trans_null.force_unicode': 'django.utils.encoding.force_unicode',
              'django.utils.translation.trans_null.mark_safe': 'django.utils.safestring.mark_safe',
              'django.utils.translation.trans_null.settings': 'django.conf.settings',
              'django.utils.translation.trans_null.warnings': 'warnings',
              'django.utils.translation.trans_real.Lexer': 'django.template.Lexer',
              'django.utils.translation.trans_real.SafeData': 'django.utils.safestring.SafeData',
              'django.utils.translation.trans_real.StringIO': 'cStringIO.StringIO',
              'django.utils.translation.trans_real.TOKEN_BLOCK': 'django.template.TOKEN_BLOCK',
              'django.utils.translation.trans_real.TOKEN_COMMENT': 'django.template.TOKEN_COMMENT',
              'django.utils.translation.trans_real.TOKEN_TEXT': 'django.template.TOKEN_TEXT',
              'django.utils.translation.trans_real.TOKEN_VAR': 'django.template.TOKEN_VAR',
              'django.utils.translation.trans_real.TRANSLATOR_COMMENT_MARK': 'django.template.TRANSLATOR_COMMENT_MARK',
              'django.utils.translation.trans_real.gettext_module': 'gettext',
              'django.utils.translation.trans_real.import_module': 'django.utils.importlib.import_module',
              'django.utils.translation.trans_real.local': 'threading.local',
              'django.utils.translation.trans_real.locale': 'locale',
              'django.utils.translation.trans_real.mark_safe': 'django.utils.safestring.mark_safe',
              'django.utils.translation.trans_real.os': 'os',
              'django.utils.translation.trans_real.re': 're',
              'django.utils.translation.trans_real.settings': 'django.conf.settings',
              'django.utils.translation.trans_real.sys': 'sys',
              'django.utils.translation.trans_real.warnings': 'warnings',
              'django.utils.translation.warnings': 'warnings',
              'django.utils.tree.deepcopy': 'django.utils.copycompat.deepcopy',
              'django.utils.tzinfo.DEFAULT_LOCALE_ENCODING': 'django.utils.encoding.DEFAULT_LOCALE_ENCODING',
              'django.utils.tzinfo.smart_str': 'django.utils.encoding.smart_str',
              'django.utils.tzinfo.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.utils.tzinfo.time': 'time',
              'django.utils.tzinfo.timedelta': 'datetime.timedelta',
              'django.utils.tzinfo.tzinfo': 'datetime.tzinfo',
              'django.utils.unittest.*': 'unittest.*',
              'django.utils.unittest.BaseTestSuite': 'django.utils.unittest.suite.BaseTestSuite',
              'django.utils.unittest.FunctionTestCase': 'django.utils.unittest.case.FunctionTestCase',
              'django.utils.unittest.SkipTest': 'django.utils.unittest.case.SkipTest',
              'django.utils.unittest.TestCase': 'django.utils.unittest.case.TestCase',
              'django.utils.unittest.TestLoader': 'django.utils.unittest.loader.TestLoader',
              'django.utils.unittest.TestProgram': 'django.utils.unittest.main.TestProgram',
              'django.utils.unittest.TestResult': 'django.utils.unittest.result.TestResult',
              'django.utils.unittest.TestSuite': 'django.utils.unittest.suite.TestSuite',
              'django.utils.unittest.TextTestResult': 'django.utils.unittest.runner.TextTestResult',
              'django.utils.unittest.TextTestRunner': 'django.utils.unittest.runner.TextTestRunner',
              'django.utils.unittest.__main__.main_': 'django.utils.unittest.main.main_',
              'django.utils.unittest.__main__.sys': 'sys',
              'django.utils.unittest.case.difflib': 'difflib',
              'django.utils.unittest.case.pprint': 'pprint',
              'django.utils.unittest.case.re': 're',
              'django.utils.unittest.case.result': 'django.utils.unittest.result',
              'django.utils.unittest.case.safe_repr': 'django.utils.unittest.util.safe_repr',
              'django.utils.unittest.case.safe_str': 'django.utils.unittest.util.safe_str',
              'django.utils.unittest.case.strclass': 'django.utils.unittest.util.strclass',
              'django.utils.unittest.case.sys': 'sys',
              'django.utils.unittest.case.unittest': 'unittest',
              'django.utils.unittest.case.unorderable_list_difference': 'django.utils.unittest.util.unorderable_list_difference',
              'django.utils.unittest.case.warnings': 'warnings',
              'django.utils.unittest.case.wraps': 'django.utils.unittest.compatibility.wraps',
              'django.utils.unittest.collector': 'django.utils.unittest.collector.collector',
              'django.utils.unittest.collector.defaultTestLoader': 'django.utils.unittest.loader.defaultTestLoader',
              'django.utils.unittest.collector.os': 'os',
              'django.utils.unittest.collector.sys': 'sys',
              'django.utils.unittest.compatibility.os': 'os',
              'django.utils.unittest.compatibility.sys': 'sys',
              'django.utils.unittest.compatibility.wraps': 'functools.wraps',
              'django.utils.unittest.defaultTestLoader': 'django.utils.unittest.loader.defaultTestLoader',
              'django.utils.unittest.expectedFailure': 'django.utils.unittest.case.expectedFailure',
              'django.utils.unittest.findTestCases': 'django.utils.unittest.loader.findTestCases',
              'django.utils.unittest.getTestCaseNames': 'django.utils.unittest.loader.getTestCaseNames',
              'django.utils.unittest.installHandler': 'django.utils.unittest.signals.installHandler',
              'django.utils.unittest.loader.case': 'django.utils.unittest.case',
              'django.utils.unittest.loader.fnmatch': 'fnmatch.fnmatch',
              'django.utils.unittest.loader.os': 'os',
              'django.utils.unittest.loader.re': 're',
              'django.utils.unittest.loader.relpath': 'django.utils.unittest.compatibility.relpath',
              'django.utils.unittest.loader.suite': 'django.utils.unittest.suite',
              'django.utils.unittest.loader.sys': 'sys',
              'django.utils.unittest.loader.traceback': 'traceback',
              'django.utils.unittest.loader.types': 'types',
              'django.utils.unittest.loader.unittest': 'unittest',
              'django.utils.unittest.main': 'django.utils.unittest.main.main',
              'django.utils.unittest.main.getopt': 'getopt',
              'django.utils.unittest.main.installHandler': 'django.utils.unittest.signals.installHandler',
              'django.utils.unittest.main.loader': 'django.utils.unittest.loader',
              'django.utils.unittest.main.optparse': 'optparse',
              'django.utils.unittest.main.os': 'os',
              'django.utils.unittest.main.runner': 'django.utils.unittest.runner',
              'django.utils.unittest.main.sys': 'sys',
              'django.utils.unittest.main.types': 'types',
              'django.utils.unittest.main_': 'django.utils.unittest.main.main_',
              'django.utils.unittest.makeSuite': 'django.utils.unittest.loader.makeSuite',
              'django.utils.unittest.registerResult': 'django.utils.unittest.signals.registerResult',
              'django.utils.unittest.removeHandler': 'django.utils.unittest.signals.removeHandler',
              'django.utils.unittest.removeResult': 'django.utils.unittest.signals.removeResult',
              'django.utils.unittest.result.StringIO': 'StringIO.StringIO',
              'django.utils.unittest.result.sys': 'sys',
              'django.utils.unittest.result.traceback': 'traceback',
              'django.utils.unittest.result.unittest': 'unittest',
              'django.utils.unittest.result.util': 'django.utils.unittest.util',
              'django.utils.unittest.result.wraps': 'django.utils.unittest.compatibility.wraps',
              'django.utils.unittest.runner.registerResult': 'django.utils.unittest.signals.registerResult',
              'django.utils.unittest.runner.result': 'django.utils.unittest.result',
              'django.utils.unittest.runner.sys': 'sys',
              'django.utils.unittest.runner.time': 'time',
              'django.utils.unittest.runner.unittest': 'unittest',
              'django.utils.unittest.signals.signal': 'signal',
              'django.utils.unittest.signals.weakref': 'weakref',
              'django.utils.unittest.signals.wraps': 'django.utils.unittest.compatibility.wraps',
              'django.utils.unittest.skip': 'django.utils.unittest.case.skip',
              'django.utils.unittest.skipIf': 'django.utils.unittest.case.skipIf',
              'django.utils.unittest.skipUnless': 'django.utils.unittest.case.skipUnless',
              'django.utils.unittest.suite.case': 'django.utils.unittest.case',
              'django.utils.unittest.suite.sys': 'sys',
              'django.utils.unittest.suite.unittest': 'unittest',
              'django.utils.unittest.suite.util': 'django.utils.unittest.util',
              'django.utils.unittest.sys': 'sys',
              'django.utils.version.django': 'django',
              'django.utils.version.minidom': 'xml.dom.minidom',
              'django.utils.version.os.path': 'os.path',
              'django.utils.version.re': 're',
              'django.utils.xmlutils.XMLGenerator': 'xml.sax.saxutils.XMLGenerator',
              'django.views.csrf.Context': 'django.template.Context',
              'django.views.csrf.HttpResponseForbidden': 'django.http.HttpResponseForbidden',
              'django.views.csrf.REASON_NO_REFERER': 'django.middleware.csrf.REASON_NO_REFERER',
              'django.views.csrf.Template': 'django.template.Template',
              'django.views.csrf.settings': 'django.conf.settings',
              'django.views.debug.Context': 'django.template.Context',
              'django.views.debug.HttpResponse': 'django.http.HttpResponse',
              'django.views.debug.HttpResponseNotFound': 'django.http.HttpResponseNotFound',
              'django.views.debug.HttpResponseServerError': 'django.http.HttpResponseServerError',
              'django.views.debug.Template': 'django.template.Template',
              'django.views.debug.TemplateDoesNotExist': 'django.template.TemplateDoesNotExist',
              'django.views.debug.TemplateSyntaxError': 'django.template.TemplateSyntaxError',
              'django.views.debug.datetime': 'datetime',
              'django.views.debug.escape': 'django.utils.html.escape',
              'django.views.debug.force_escape': 'django.template.defaultfilters.force_escape',
              'django.views.debug.get_version': 'django.get_version',
              'django.views.debug.import_module': 'django.utils.importlib.import_module',
              'django.views.debug.os': 'os',
              'django.views.debug.pprint': 'django.template.defaultfilters.pprint',
              'django.views.debug.re': 're',
              'django.views.debug.settings': 'django.conf.settings',
              'django.views.debug.smart_str': 'django.utils.encoding.smart_str',
              'django.views.debug.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.views.debug.sys': 'sys',
              'django.views.debug.template_source_loaders': 'django.template.loader.template_source_loaders',
              'django.views.debug.traceback': 'traceback',
              'django.views.debug.types': 'types',
              'django.views.decorators.cache.CacheMiddleware': 'django.middleware.cache.CacheMiddleware',
              'django.views.decorators.cache.add_never_cache_headers': 'django.utils.cache.add_never_cache_headers',
              'django.views.decorators.cache.available_attrs': 'django.utils.decorators.available_attrs',
              'django.views.decorators.cache.decorator_from_middleware_with_args': 'django.utils.decorators.decorator_from_middleware_with_args',
              'django.views.decorators.cache.patch_cache_control': 'django.utils.cache.patch_cache_control',
              'django.views.decorators.cache.wraps': 'django.utils.functional.wraps',
              'django.views.decorators.csrf.CsrfViewMiddleware': 'django.middleware.csrf.CsrfViewMiddleware',
              'django.views.decorators.csrf.available_attrs': 'django.utils.decorators.available_attrs',
              'django.views.decorators.csrf.decorator_from_middleware': 'django.utils.decorators.decorator_from_middleware',
              'django.views.decorators.csrf.wraps': 'django.utils.functional.wraps',
              'django.views.decorators.gzip.GZipMiddleware': 'django.middleware.gzip.GZipMiddleware',
              'django.views.decorators.gzip.decorator_from_middleware': 'django.utils.decorators.decorator_from_middleware',
              'django.views.decorators.http.ConditionalGetMiddleware': 'django.middleware.http.ConditionalGetMiddleware',
              'django.views.decorators.http.HttpResponse': 'django.http.HttpResponse',
              'django.views.decorators.http.HttpResponseNotAllowed': 'django.http.HttpResponseNotAllowed',
              'django.views.decorators.http.HttpResponseNotModified': 'django.http.HttpResponseNotModified',
              'django.views.decorators.http.available_attrs': 'django.utils.decorators.available_attrs',
              'django.views.decorators.http.decorator_from_middleware': 'django.utils.decorators.decorator_from_middleware',
              'django.views.decorators.http.getLogger': 'django.utils.log.getLogger',
              'django.views.decorators.http.http_date': 'django.utils.http.http_date',
              'django.views.decorators.http.parse_etags': 'django.utils.http.parse_etags',
              'django.views.decorators.http.parse_http_date_safe': 'django.utils.http.parse_http_date_safe',
              'django.views.decorators.http.quote_etag': 'django.utils.http.quote_etag',
              'django.views.decorators.http.timedelta': 'datetime.timedelta',
              'django.views.decorators.http.timegm': 'calendar.timegm',
              'django.views.decorators.http.wraps': 'django.utils.functional.wraps',
              'django.views.decorators.vary.available_attrs': 'django.utils.decorators.available_attrs',
              'django.views.decorators.vary.patch_vary_headers': 'django.utils.cache.patch_vary_headers',
              'django.views.decorators.vary.wraps': 'django.utils.functional.wraps',
              'django.views.defaults.Context': 'django.template.Context',
              'django.views.defaults.RequestContext': 'django.template.RequestContext',
              'django.views.defaults.http': 'django.http',
              'django.views.defaults.loader': 'django.template.loader',
              'django.views.defaults.real_shortcut': 'django.contrib.contenttypes.views.shortcut',
              'django.views.defaults.requires_csrf_token': 'django.views.decorators.csrf.requires_csrf_token',
              'django.views.generic.ArchiveIndexView': 'django.views.generic.dates.ArchiveIndexView',
              'django.views.generic.CreateView': 'django.views.generic.edit.CreateView',
              'django.views.generic.DateDetailView': 'django.views.generic.dates.DateDetailView',
              'django.views.generic.DayArchiveView': 'django.views.generic.dates.DayArchiveView',
              'django.views.generic.DeleteView': 'django.views.generic.edit.DeleteView',
              'django.views.generic.DetailView': 'django.views.generic.detail.DetailView',
              'django.views.generic.FormView': 'django.views.generic.edit.FormView',
              'django.views.generic.ListView': 'django.views.generic.list.ListView',
              'django.views.generic.MonthArchiveView': 'django.views.generic.dates.MonthArchiveView',
              'django.views.generic.RedirectView': 'django.views.generic.base.RedirectView',
              'django.views.generic.TemplateView': 'django.views.generic.base.TemplateView',
              'django.views.generic.TodayArchiveView': 'django.views.generic.dates.TodayArchiveView',
              'django.views.generic.UpdateView': 'django.views.generic.edit.UpdateView',
              'django.views.generic.View': 'django.views.generic.base.View',
              'django.views.generic.WeekArchiveView': 'django.views.generic.dates.WeekArchiveView',
              'django.views.generic.YearArchiveView': 'django.views.generic.dates.YearArchiveView',
              'django.views.generic.base.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.views.generic.base.RequestContext': 'django.template.RequestContext',
              'django.views.generic.base.TemplateResponse': 'django.template.response.TemplateResponse',
              'django.views.generic.base.classonlymethod': 'django.utils.decorators.classonlymethod',
              'django.views.generic.base.getLogger': 'django.utils.log.getLogger',
              'django.views.generic.base.http': 'django.http',
              'django.views.generic.base.loader': 'django.template.loader',
              'django.views.generic.base.update_wrapper': 'django.utils.functional.update_wrapper',
              'django.views.generic.create_update.GenericViewError': 'django.views.generic.GenericViewError',
              'django.views.generic.create_update.Http404': 'django.http.Http404',
              'django.views.generic.create_update.HttpResponse': 'django.http.HttpResponse',
              'django.views.generic.create_update.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'django.views.generic.create_update.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.views.generic.create_update.ModelForm': 'django.forms.models.ModelForm',
              'django.views.generic.create_update.ModelFormMetaclass': 'django.forms.models.ModelFormMetaclass',
              'django.views.generic.create_update.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.views.generic.create_update.RequestContext': 'django.template.RequestContext',
              'django.views.generic.create_update.loader': 'django.template.loader',
              'django.views.generic.create_update.messages': 'django.contrib.messages',
              'django.views.generic.create_update.populate_xheaders': 'django.core.xheaders.populate_xheaders',
              'django.views.generic.create_update.redirect_to_login': 'django.contrib.auth.views.redirect_to_login',
              'django.views.generic.create_update.ugettext': 'django.utils.translation.ugettext',
              'django.views.generic.create_update.warnings': 'warnings',
              'django.views.generic.date_based.DateTimeField': 'django.db.models.fields.DateTimeField',
              'django.views.generic.date_based.Http404': 'django.http.Http404',
              'django.views.generic.date_based.HttpResponse': 'django.http.HttpResponse',
              'django.views.generic.date_based.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.views.generic.date_based.RequestContext': 'django.template.RequestContext',
              'django.views.generic.date_based.datetime': 'datetime',
              'django.views.generic.date_based.loader': 'django.template.loader',
              'django.views.generic.date_based.populate_xheaders': 'django.core.xheaders.populate_xheaders',
              'django.views.generic.date_based.time': 'time',
              'django.views.generic.date_based.warnings': 'warnings',
              'django.views.generic.dates.BaseDetailView': 'django.views.generic.detail.BaseDetailView',
              'django.views.generic.dates.Http404': 'django.http.Http404',
              'django.views.generic.dates.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.views.generic.dates.MultipleObjectMixin': 'django.views.generic.list.MultipleObjectMixin',
              'django.views.generic.dates.MultipleObjectTemplateResponseMixin': 'django.views.generic.list.MultipleObjectTemplateResponseMixin',
              'django.views.generic.dates.SingleObjectTemplateResponseMixin': 'django.views.generic.detail.SingleObjectTemplateResponseMixin',
              'django.views.generic.dates.View': 'django.views.generic.base.View',
              'django.views.generic.dates._': 'django.utils.translation.ugettext',
              'django.views.generic.dates.datetime': 'datetime',
              'django.views.generic.dates.force_unicode': 'django.utils.encoding.force_unicode',
              'django.views.generic.dates.models': 'django.db.models',
              'django.views.generic.dates.time': 'time',
              'django.views.generic.detail.Http404': 'django.http.Http404',
              'django.views.generic.detail.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.views.generic.detail.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.views.generic.detail.TemplateResponseMixin': 'django.views.generic.base.TemplateResponseMixin',
              'django.views.generic.detail.View': 'django.views.generic.base.View',
              'django.views.generic.detail._': 'django.utils.translation.ugettext',
              'django.views.generic.detail.re': 're',
              'django.views.generic.detail.smart_str': 'django.utils.encoding.smart_str',
              'django.views.generic.edit.BaseDetailView': 'django.views.generic.detail.BaseDetailView',
              'django.views.generic.edit.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'django.views.generic.edit.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.views.generic.edit.SingleObjectMixin': 'django.views.generic.detail.SingleObjectMixin',
              'django.views.generic.edit.SingleObjectTemplateResponseMixin': 'django.views.generic.detail.SingleObjectTemplateResponseMixin',
              'django.views.generic.edit.TemplateResponseMixin': 'django.views.generic.base.TemplateResponseMixin',
              'django.views.generic.edit.View': 'django.views.generic.base.View',
              'django.views.generic.edit.model_forms': 'django.forms.models',
              'django.views.generic.list.Http404': 'django.http.Http404',
              'django.views.generic.list.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'django.views.generic.list.InvalidPage': 'django.core.paginator.InvalidPage',
              'django.views.generic.list.Paginator': 'django.core.paginator.Paginator',
              'django.views.generic.list.TemplateResponseMixin': 'django.views.generic.base.TemplateResponseMixin',
              'django.views.generic.list.View': 'django.views.generic.base.View',
              'django.views.generic.list._': 'django.utils.translation.ugettext',
              'django.views.generic.list.re': 're',
              'django.views.generic.list.smart_str': 'django.utils.encoding.smart_str',
              'django.views.generic.list_detail.Http404': 'django.http.Http404',
              'django.views.generic.list_detail.HttpResponse': 'django.http.HttpResponse',
              'django.views.generic.list_detail.InvalidPage': 'django.core.paginator.InvalidPage',
              'django.views.generic.list_detail.ObjectDoesNotExist': 'django.core.exceptions.ObjectDoesNotExist',
              'django.views.generic.list_detail.Paginator': 'django.core.paginator.Paginator',
              'django.views.generic.list_detail.RequestContext': 'django.template.RequestContext',
              'django.views.generic.list_detail.loader': 'django.template.loader',
              'django.views.generic.list_detail.populate_xheaders': 'django.core.xheaders.populate_xheaders',
              'django.views.generic.list_detail.warnings': 'warnings',
              'django.views.generic.simple.HttpResponse': 'django.http.HttpResponse',
              'django.views.generic.simple.HttpResponseGone': 'django.http.HttpResponseGone',
              'django.views.generic.simple.HttpResponsePermanentRedirect': 'django.http.HttpResponsePermanentRedirect',
              'django.views.generic.simple.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'django.views.generic.simple.RequestContext': 'django.template.RequestContext',
              'django.views.generic.simple.getLogger': 'django.utils.log.getLogger',
              'django.views.generic.simple.loader': 'django.template.loader',
              'django.views.generic.simple.warnings': 'warnings',
              'django.views.i18n.activate': 'django.utils.translation.activate',
              'django.views.i18n.check_for_language': 'django.utils.translation.check_for_language',
              'django.views.i18n.get_format': 'django.utils.formats.get_format',
              'django.views.i18n.get_format_modules': 'django.utils.formats.get_format_modules',
              'django.views.i18n.get_language': 'django.utils.translation.get_language',
              'django.views.i18n.gettext_module': 'gettext',
              'django.views.i18n.http': 'django.http',
              'django.views.i18n.importlib': 'django.utils.importlib',
              'django.views.i18n.javascript_quote': 'django.utils.text.javascript_quote',
              'django.views.i18n.os': 'os',
              'django.views.i18n.settings': 'django.conf.settings',
              'django.views.i18n.smart_unicode': 'django.utils.encoding.smart_unicode',
              'django.views.i18n.to_locale': 'django.utils.translation.to_locale',
              'django.views.static.Context': 'django.template.Context',
              'django.views.static.Http404': 'django.http.Http404',
              'django.views.static.HttpResponse': 'django.http.HttpResponse',
              'django.views.static.HttpResponseNotModified': 'django.http.HttpResponseNotModified',
              'django.views.static.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'django.views.static.Template': 'django.template.Template',
              'django.views.static.TemplateDoesNotExist': 'django.template.TemplateDoesNotExist',
              'django.views.static.http_date': 'django.utils.http.http_date',
              'django.views.static.loader': 'django.template.loader',
              'django.views.static.mimetypes': 'mimetypes',
              'django.views.static.os': 'os',
              'django.views.static.parse_http_date': 'django.utils.http.parse_http_date',
              'django.views.static.posixpath': 'posixpath',
              'django.views.static.re': 're',
              'django.views.static.urllib': 'urllib'}}
